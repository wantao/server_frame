// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol_id.proto

#ifndef PROTOBUF_protocol_5fid_2eproto__INCLUDED
#define PROTOBUF_protocol_5fid_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)

namespace protoc {
namespace protocol_id {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_protocol_5fid_2eproto();
void protobuf_AssignDesc_protocol_5fid_2eproto();
void protobuf_ShutdownFile_protocol_5fid_2eproto();


enum PROTOC_ID_LIMIT {
  CONST_MAX_PROTOC_ID = 65535,
  CONST_LOGINSERVER_2_CLIENT_BEGIN_PROTOC_ID = 1,
  CONST_LOGINSERVER_2_CLIENT_END_PROTOC_ID = 500,
  CONST_LOGINSERVER_2_GATESERVER_BEGIN_PROTOC_ID = 501,
  CONST_LOGINSERVER_2_GATESERVER_END_PROTOC_ID = 1000,
  CONST_GATESERVER_2_CLIENT_BEGIN_PROTOC_ID = 1001,
  CONST_GATESERVER_2_CLIENT_END_PROTOC_ID = 2000,
  CONST_GAMESERVER_2_GATESERVER_BEGIN_PROTOC_ID = 2001,
  CONST_GAMESERVER_2_GATESERVER_END_PROTOC_ID = 2500,
  CONST_LOGINSERVER_2_DBSERVER_BEGIN_PROTOC_ID = 2501,
  CONST_LOGINSERVER_2_DBSERVER_END_PROTOC_ID = 3000,
  CONST_GAMESERVER_2_GAMESERVER_BEGIN_PROTOC_ID = 3001,
  CONST_GAMESERVER_2_GAMESERVER_END_PROTOC_ID = 3500,
  CONST_NAMESERVER_2_DBSERVER_BEGIN_PROTOC_ID = 3501,
  CONST_NAMESERVER_2_DBSERVER_END_PROTOC_ID = 4000,
  CONST_GAMESERVER_2_DBSERVER_BEGIN_PROTOC_ID = 4001,
  CONST_GAMESERVER_2_DBSERVER_END_PROTOC_ID = 5000,
  CONST_CLIENT_2_GAMESERVER_BEGIN_PROTOC_ID = 5001,
  CONST_CLIENT_2_GAMESERVER_END_PROTOC_ID = 8000
};
bool PROTOC_ID_LIMIT_IsValid(int value);
const PROTOC_ID_LIMIT PROTOC_ID_LIMIT_MIN = CONST_LOGINSERVER_2_CLIENT_BEGIN_PROTOC_ID;
const PROTOC_ID_LIMIT PROTOC_ID_LIMIT_MAX = CONST_MAX_PROTOC_ID;
const int PROTOC_ID_LIMIT_ARRAYSIZE = PROTOC_ID_LIMIT_MAX + 1;

const ::google::protobuf::EnumDescriptor* PROTOC_ID_LIMIT_descriptor();
inline const ::std::string& PROTOC_ID_LIMIT_Name(PROTOC_ID_LIMIT value) {
  return ::google::protobuf::internal::NameOfEnum(
    PROTOC_ID_LIMIT_descriptor(), value);
}
inline bool PROTOC_ID_LIMIT_Parse(
    const ::std::string& name, PROTOC_ID_LIMIT* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PROTOC_ID_LIMIT>(
    PROTOC_ID_LIMIT_descriptor(), name, value);
}
enum PROTOCOL_ID {
  LGC_ID_LOGIN_REQ = 1,
  LGC_ID_LOGIN_ACK = 2,
  LGC_ID_CREATE_ACCOUNT_REQ = 3,
  LGC_ID_CREATE_ACCOUNT_ACK = 4,
  LGT_ID_GATE_INFO_RPT = 501,
  LGT_ID_USER_NUMBER_RPT = 502,
  LGT_ID_USER_ONLINE_GATE_REQ = 503,
  LGT_ID_USER_ONLINE_GATE_ACK = 504,
  LGT_ID_HEART_PING = 505,
  LGT_ID_HEART_ACK = 506,
  LGT_ID_RAND_CHECK_REQ = 507,
  LGT_ID_RAND_CHECK_ACK = 508,
  LGT_ID_UpdateFastAttackBlackAccount = 509,
  GST_ID_GAME_SERVER_REPORT = 2001,
  GST_ID_GATE_SERVER_REPORT = 2002,
  GST_ID_GATE_TRANS_CLIENT_MSG = 2003,
  GST_ID_GATE_TRANS_GAME_SERVER_MSG = 2004,
  GST_ID_NEW_PLAYER_ENTER_GAME_REQ = 2005,
  GST_ID_NEW_PLAYER_ENTER_GAME_ACK = 2006,
  GST_ID_PLAYER_LEAVE_GAME_RPT = 2007,
  GST_ID_KICK_OUT_PLAYER_RPT = 2008,
  GST_ID_HEART_PING = 2009,
  GST_ID_HEART_ACK = 2010,
  GST_ID_RAND_CHECK_REQ = 2011,
  GST_ID_RAND_CHECK_ACK = 2012,
  GST_ID_SWITCH_GS_REQ = 2013,
  GST_ID_SWITCH_GS_ACK = 2014,
  GST_ID_GATE_RE_LOGIN_REQ = 2016,
  GST_ID_GATE_RE_LOGIN_ACK = 2017,
  GST_ID_GateCloseNtf = 2018,
  GST_ID_login_gt_req = 2019,
  GST_ID_login_gt_ack = 2020,
  GST_ID_client_number_rpt = 2021,
  GST_ID_client_login_gate_time_out_rpt = 2022,
  LDB_ID_LOGINSERVER_REPORT = 2501,
  LDB_ID_USER_CHECK_IN_DBSERVER_REQ = 2502,
  LDB_ID_USER_CHECK_IN_DBSERVER_ACK = 2503,
  LDB_ID_HEART_PING = 2504,
  LDB_ID_HEART_ACK = 2505,
  LDB_ID_RAND_CHECK_REQ = 2506,
  LDB_ID_RAND_CHECK_ACK = 2507,
  LDB_ID_GM_LIST_RPT = 2508,
  LDB_ID_MAX_ONLINE_NUMBER_RPT = 2509,
  LDB_ID_DBS_REPORT = 2510,
  LDB_ID_GetGM_LIST_REQ = 2511,
  LDB_ID_GetGM_LIST_ACK = 2512,
  LDB_ID_LoginServerCloseNtf = 2513,
  LDB_ID_PlayerGetBaseDataComplete = 2514,
  LDB_ID_ClientCloseWhenWaitCheckInDB = 2515,
  LDB_ID_get_login_key_req = 2516,
  LDB_ID_get_login_key_ack = 2517,
  NDS_ID_DBSERVER_REPORT = 3501,
  NDS_ID_HEART_PING = 3502,
  NDS_ID_HEART_ACK = 3503,
  NDS_ID_RAND_CHECK_REQ = 3504,
  NDS_ID_RAND_CHECK_ACK = 3505,
  NDS_ID_CHECK_NEW_NAME_REQ = 3506,
  NDS_ID_CHECK_NEW_NAME_AKC = 3507,
  NDS_ID_NAMESERVER_REPORT = 3508,
  NDS_ID_GameImportLogRpt = 3509,
  NDS_ID_GetUniqueIDReq = 3510,
  NDS_ID_GetUniqueIDAck = 3520,
  NDS_ID_2_NS_RAND_CHECK_REQ = 3521,
  NDS_ID_2_NS_RAND_CHECK_ACK = 3522,
  NDS_ID_ChongZhiNtf = 3523,
  NDS_ID_TXRecordNtf = 3524,
  NDS_ID_TXAwardsNtf = 3525,
  NDS_ID_tx_jiao_yi_suo_yu_kou_cheng_gong = 3526,
  NDS_ID_tx_fa_huo_suo_ding_cheng_gong = 3527,
  NDS_ID_tx_ping_tai_kou_fei_error = 3528,
  NDS_ID_report_online_number = 3529,
  NDS_ID_GameServerMessageTransNtf = 3530,
  GDS_ID_GAME_SERVER_RPT = 4001,
  GDS_ID_DB_SERVER_RPT = 4002,
  ALL_MAX_PROTOC_ID = 8000
};
bool PROTOCOL_ID_IsValid(int value);
const PROTOCOL_ID PROTOCOL_ID_MIN = LGC_ID_LOGIN_REQ;
const PROTOCOL_ID PROTOCOL_ID_MAX = ALL_MAX_PROTOC_ID;
const int PROTOCOL_ID_ARRAYSIZE = PROTOCOL_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* PROTOCOL_ID_descriptor();
inline const ::std::string& PROTOCOL_ID_Name(PROTOCOL_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    PROTOCOL_ID_descriptor(), value);
}
inline bool PROTOCOL_ID_Parse(
    const ::std::string& name, PROTOCOL_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PROTOCOL_ID>(
    PROTOCOL_ID_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol_id
}  // namespace protoc

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protoc::protocol_id::PROTOC_ID_LIMIT>() {
  return ::protoc::protocol_id::PROTOC_ID_LIMIT_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protoc::protocol_id::PROTOCOL_ID>() {
  return ::protoc::protocol_id::PROTOCOL_ID_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_protocol_5fid_2eproto__INCLUDED
