// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gameserver_gate.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "gameserver_gate.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protoc {
namespace gameserver_gate {

namespace {

const ::google::protobuf::Descriptor* CGameServerReport_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGameServerReport_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGateServerReport_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGateServerReport_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGateTransClientMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGateTransClientMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGateTransGameServerMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGateTransGameServerMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* NewPlayerEnterGameReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NewPlayerEnterGameReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* NewPlayerEnterGameAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NewPlayerEnterGameAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerTerminateGateRpt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerTerminateGateRpt_reflection_ = NULL;
const ::google::protobuf::Descriptor* KickOutPlayerRpt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KickOutPlayerRpt_reflection_ = NULL;
const ::google::protobuf::Descriptor* CRandCheckReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CRandCheckReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CRandCheckAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CRandCheckAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* CHeartPing_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CHeartPing_reflection_ = NULL;
const ::google::protobuf::Descriptor* CHeartPingAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CHeartPingAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerSwitchGSReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerSwitchGSReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerSwitchGSAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerSwitchGSAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerReLoginReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerReLoginReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerReLoginAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerReLoginAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* GateCloseNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GateCloseNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* login_gt_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  login_gt_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* login_gt_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  login_gt_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* client_number_rpt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  client_number_rpt_reflection_ = NULL;
const ::google::protobuf::Descriptor* client_login_gate_time_out_rpt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  client_login_gate_time_out_rpt_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_gameserver_5fgate_2eproto() {
  protobuf_AddDesc_gameserver_5fgate_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "gameserver_gate.proto");
  GOOGLE_CHECK(file != NULL);
  CGameServerReport_descriptor_ = file->message_type(0);
  static const int CGameServerReport_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameServerReport, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameServerReport, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameServerReport, online_number_),
  };
  CGameServerReport_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGameServerReport_descriptor_,
      CGameServerReport::default_instance_,
      CGameServerReport_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameServerReport, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameServerReport, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGameServerReport));
  CGateServerReport_descriptor_ = file->message_type(1);
  static const int CGateServerReport_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGateServerReport, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGateServerReport, name_),
  };
  CGateServerReport_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGateServerReport_descriptor_,
      CGateServerReport::default_instance_,
      CGateServerReport_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGateServerReport, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGateServerReport, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGateServerReport));
  CGateTransClientMsg_descriptor_ = file->message_type(2);
  static const int CGateTransClientMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGateTransClientMsg, client_session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGateTransClientMsg, msg_),
  };
  CGateTransClientMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGateTransClientMsg_descriptor_,
      CGateTransClientMsg::default_instance_,
      CGateTransClientMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGateTransClientMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGateTransClientMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGateTransClientMsg));
  CGateTransGameServerMsg_descriptor_ = file->message_type(3);
  static const int CGateTransGameServerMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGateTransGameServerMsg, client_session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGateTransGameServerMsg, msg_),
  };
  CGateTransGameServerMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGateTransGameServerMsg_descriptor_,
      CGateTransGameServerMsg::default_instance_,
      CGateTransGameServerMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGateTransGameServerMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGateTransGameServerMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGateTransGameServerMsg));
  NewPlayerEnterGameReq_descriptor_ = file->message_type(4);
  static const int NewPlayerEnterGameReq_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewPlayerEnterGameReq, client_session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewPlayerEnterGameReq, remote_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewPlayerEnterGameReq, remote_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewPlayerEnterGameReq, gate_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewPlayerEnterGameReq, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewPlayerEnterGameReq, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewPlayerEnterGameReq, switch_gs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewPlayerEnterGameReq, platform_id_),
  };
  NewPlayerEnterGameReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NewPlayerEnterGameReq_descriptor_,
      NewPlayerEnterGameReq::default_instance_,
      NewPlayerEnterGameReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewPlayerEnterGameReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewPlayerEnterGameReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NewPlayerEnterGameReq));
  NewPlayerEnterGameAck_descriptor_ = file->message_type(5);
  static const int NewPlayerEnterGameAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewPlayerEnterGameAck, client_session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewPlayerEnterGameAck, error_code_),
  };
  NewPlayerEnterGameAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NewPlayerEnterGameAck_descriptor_,
      NewPlayerEnterGameAck::default_instance_,
      NewPlayerEnterGameAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewPlayerEnterGameAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewPlayerEnterGameAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NewPlayerEnterGameAck));
  PlayerTerminateGateRpt_descriptor_ = file->message_type(6);
  static const int PlayerTerminateGateRpt_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTerminateGateRpt, client_session_id_),
  };
  PlayerTerminateGateRpt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerTerminateGateRpt_descriptor_,
      PlayerTerminateGateRpt::default_instance_,
      PlayerTerminateGateRpt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTerminateGateRpt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTerminateGateRpt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerTerminateGateRpt));
  KickOutPlayerRpt_descriptor_ = file->message_type(7);
  static const int KickOutPlayerRpt_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickOutPlayerRpt, digit_account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickOutPlayerRpt, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickOutPlayerRpt, error_code_),
  };
  KickOutPlayerRpt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KickOutPlayerRpt_descriptor_,
      KickOutPlayerRpt::default_instance_,
      KickOutPlayerRpt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickOutPlayerRpt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickOutPlayerRpt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KickOutPlayerRpt));
  CRandCheckReq_descriptor_ = file->message_type(8);
  static const int CRandCheckReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRandCheckReq, randkeys_),
  };
  CRandCheckReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CRandCheckReq_descriptor_,
      CRandCheckReq::default_instance_,
      CRandCheckReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRandCheckReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRandCheckReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CRandCheckReq));
  CRandCheckAck_descriptor_ = file->message_type(9);
  static const int CRandCheckAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRandCheckAck, keys_),
  };
  CRandCheckAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CRandCheckAck_descriptor_,
      CRandCheckAck::default_instance_,
      CRandCheckAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRandCheckAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRandCheckAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CRandCheckAck));
  CHeartPing_descriptor_ = file->message_type(10);
  static const int CHeartPing_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHeartPing, opt_),
  };
  CHeartPing_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CHeartPing_descriptor_,
      CHeartPing::default_instance_,
      CHeartPing_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHeartPing, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHeartPing, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CHeartPing));
  CHeartPingAck_descriptor_ = file->message_type(11);
  static const int CHeartPingAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHeartPingAck, opt_),
  };
  CHeartPingAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CHeartPingAck_descriptor_,
      CHeartPingAck::default_instance_,
      CHeartPingAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHeartPingAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHeartPingAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CHeartPingAck));
  PlayerSwitchGSReq_descriptor_ = file->message_type(12);
  static const int PlayerSwitchGSReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSwitchGSReq, digit_account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSwitchGSReq, client_session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSwitchGSReq, gs_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSwitchGSReq, platform_id_),
  };
  PlayerSwitchGSReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerSwitchGSReq_descriptor_,
      PlayerSwitchGSReq::default_instance_,
      PlayerSwitchGSReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSwitchGSReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSwitchGSReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerSwitchGSReq));
  PlayerSwitchGSAck_descriptor_ = file->message_type(13);
  static const int PlayerSwitchGSAck_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSwitchGSAck, digit_account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSwitchGSAck, client_session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSwitchGSAck, gs_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSwitchGSAck, err_no_),
  };
  PlayerSwitchGSAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerSwitchGSAck_descriptor_,
      PlayerSwitchGSAck::default_instance_,
      PlayerSwitchGSAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSwitchGSAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSwitchGSAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerSwitchGSAck));
  PlayerReLoginReq_descriptor_ = file->message_type(14);
  static const int PlayerReLoginReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerReLoginReq, digit_account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerReLoginReq, client_session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerReLoginReq, gs_id_),
  };
  PlayerReLoginReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerReLoginReq_descriptor_,
      PlayerReLoginReq::default_instance_,
      PlayerReLoginReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerReLoginReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerReLoginReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerReLoginReq));
  PlayerReLoginAck_descriptor_ = file->message_type(15);
  static const int PlayerReLoginAck_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerReLoginAck, digit_account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerReLoginAck, client_session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerReLoginAck, gs_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerReLoginAck, err_no_),
  };
  PlayerReLoginAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerReLoginAck_descriptor_,
      PlayerReLoginAck::default_instance_,
      PlayerReLoginAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerReLoginAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerReLoginAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerReLoginAck));
  GateCloseNtf_descriptor_ = file->message_type(16);
  static const int GateCloseNtf_offsets_[1] = {
  };
  GateCloseNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GateCloseNtf_descriptor_,
      GateCloseNtf::default_instance_,
      GateCloseNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateCloseNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateCloseNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GateCloseNtf));
  login_gt_req_descriptor_ = file->message_type(17);
  static const int login_gt_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_gt_req, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_gt_req, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_gt_req, old_sessionid_),
  };
  login_gt_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      login_gt_req_descriptor_,
      login_gt_req::default_instance_,
      login_gt_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_gt_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_gt_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(login_gt_req));
  login_gt_ack_descriptor_ = file->message_type(18);
  static const int login_gt_ack_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_gt_ack, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_gt_ack, gate_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_gt_ack, gateport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_gt_ack, gate_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_gt_ack, err_no_),
  };
  login_gt_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      login_gt_ack_descriptor_,
      login_gt_ack::default_instance_,
      login_gt_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_gt_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_gt_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(login_gt_ack));
  client_number_rpt_descriptor_ = file->message_type(19);
  static const int client_number_rpt_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_number_rpt, number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_number_rpt, gate_id_),
  };
  client_number_rpt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      client_number_rpt_descriptor_,
      client_number_rpt::default_instance_,
      client_number_rpt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_number_rpt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_number_rpt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(client_number_rpt));
  client_login_gate_time_out_rpt_descriptor_ = file->message_type(20);
  static const int client_login_gate_time_out_rpt_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_login_gate_time_out_rpt, playerid_),
  };
  client_login_gate_time_out_rpt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      client_login_gate_time_out_rpt_descriptor_,
      client_login_gate_time_out_rpt::default_instance_,
      client_login_gate_time_out_rpt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_login_gate_time_out_rpt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_login_gate_time_out_rpt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(client_login_gate_time_out_rpt));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_gameserver_5fgate_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGameServerReport_descriptor_, &CGameServerReport::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGateServerReport_descriptor_, &CGateServerReport::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGateTransClientMsg_descriptor_, &CGateTransClientMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGateTransGameServerMsg_descriptor_, &CGateTransGameServerMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NewPlayerEnterGameReq_descriptor_, &NewPlayerEnterGameReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NewPlayerEnterGameAck_descriptor_, &NewPlayerEnterGameAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerTerminateGateRpt_descriptor_, &PlayerTerminateGateRpt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KickOutPlayerRpt_descriptor_, &KickOutPlayerRpt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CRandCheckReq_descriptor_, &CRandCheckReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CRandCheckAck_descriptor_, &CRandCheckAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CHeartPing_descriptor_, &CHeartPing::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CHeartPingAck_descriptor_, &CHeartPingAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerSwitchGSReq_descriptor_, &PlayerSwitchGSReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerSwitchGSAck_descriptor_, &PlayerSwitchGSAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerReLoginReq_descriptor_, &PlayerReLoginReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerReLoginAck_descriptor_, &PlayerReLoginAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GateCloseNtf_descriptor_, &GateCloseNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    login_gt_req_descriptor_, &login_gt_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    login_gt_ack_descriptor_, &login_gt_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    client_number_rpt_descriptor_, &client_number_rpt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    client_login_gate_time_out_rpt_descriptor_, &client_login_gate_time_out_rpt::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_gameserver_5fgate_2eproto() {
  delete CGameServerReport::default_instance_;
  delete CGameServerReport_reflection_;
  delete CGateServerReport::default_instance_;
  delete CGateServerReport_reflection_;
  delete CGateTransClientMsg::default_instance_;
  delete CGateTransClientMsg_reflection_;
  delete CGateTransGameServerMsg::default_instance_;
  delete CGateTransGameServerMsg_reflection_;
  delete NewPlayerEnterGameReq::default_instance_;
  delete NewPlayerEnterGameReq_reflection_;
  delete NewPlayerEnterGameAck::default_instance_;
  delete NewPlayerEnterGameAck_reflection_;
  delete PlayerTerminateGateRpt::default_instance_;
  delete PlayerTerminateGateRpt_reflection_;
  delete KickOutPlayerRpt::default_instance_;
  delete KickOutPlayerRpt_reflection_;
  delete CRandCheckReq::default_instance_;
  delete CRandCheckReq_reflection_;
  delete CRandCheckAck::default_instance_;
  delete CRandCheckAck_reflection_;
  delete CHeartPing::default_instance_;
  delete CHeartPing_reflection_;
  delete CHeartPingAck::default_instance_;
  delete CHeartPingAck_reflection_;
  delete PlayerSwitchGSReq::default_instance_;
  delete PlayerSwitchGSReq_reflection_;
  delete PlayerSwitchGSAck::default_instance_;
  delete PlayerSwitchGSAck_reflection_;
  delete PlayerReLoginReq::default_instance_;
  delete PlayerReLoginReq_reflection_;
  delete PlayerReLoginAck::default_instance_;
  delete PlayerReLoginAck_reflection_;
  delete GateCloseNtf::default_instance_;
  delete GateCloseNtf_reflection_;
  delete login_gt_req::default_instance_;
  delete login_gt_req_reflection_;
  delete login_gt_ack::default_instance_;
  delete login_gt_ack_reflection_;
  delete client_number_rpt::default_instance_;
  delete client_number_rpt_reflection_;
  delete client_login_gate_time_out_rpt::default_instance_;
  delete client_login_gate_time_out_rpt_reflection_;
}

void protobuf_AddDesc_gameserver_5fgate_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025gameserver_gate.proto\022\026protoc.gameserv"
    "er_gate\"D\n\021CGameServerReport\022\n\n\002id\030\001 \001(\t"
    "\022\014\n\004name\030\002 \001(\t\022\025\n\ronline_number\030\003 \001(\005\"-\n"
    "\021CGateServerReport\022\n\n\002id\030\001 \001(\t\022\014\n\004name\030\002"
    " \001(\t\"=\n\023CGateTransClientMsg\022\031\n\021client_se"
    "ssion_id\030\001 \001(\r\022\013\n\003msg\030\002 \001(\014\"A\n\027CGateTran"
    "sGameServerMsg\022\031\n\021client_session_id\030\001 \001("
    "\r\022\013\n\003msg\030\002 \001(\014\"\266\001\n\025NewPlayerEnterGameReq"
    "\022\031\n\021client_session_id\030\001 \001(\r\022\021\n\tremote_ip"
    "\030\002 \001(\r\022\023\n\013remote_port\030\003 \001(\r\022\017\n\007gate_id\030\004"
    " \001(\t\022\017\n\007account\030\005 \001(\t\022\020\n\010playerid\030\006 \001(\004\022"
    "\021\n\tswitch_gs\030\007 \001(\005\022\023\n\013platform_id\030\010 \001(\005\""
    "F\n\025NewPlayerEnterGameAck\022\031\n\021client_sessi"
    "on_id\030\001 \001(\r\022\022\n\nerror_code\030\002 \001(\005\"3\n\026Playe"
    "rTerminateGateRpt\022\031\n\021client_session_id\030\001"
    " \001(\r\"Q\n\020KickOutPlayerRpt\022\025\n\rdigit_accoun"
    "t\030\001 \001(\004\022\022\n\nsession_id\030\002 \001(\r\022\022\n\nerror_cod"
    "e\030\003 \001(\005\"!\n\rCRandCheckReq\022\020\n\010randkeys\030\001 \001"
    "(\014\"\035\n\rCRandCheckAck\022\014\n\004keys\030\001 \001(\014\"\031\n\nCHe"
    "artPing\022\013\n\003opt\030\001 \001(\005\"\034\n\rCHeartPingAck\022\013\n"
    "\003opt\030\001 \001(\005\"i\n\021PlayerSwitchGSReq\022\025\n\rdigit"
    "_account\030\001 \001(\004\022\031\n\021client_session_id\030\002 \001("
    "\r\022\r\n\005gs_id\030\003 \001(\t\022\023\n\013platform_id\030\004 \001(\005\"d\n"
    "\021PlayerSwitchGSAck\022\025\n\rdigit_account\030\001 \001("
    "\004\022\031\n\021client_session_id\030\002 \001(\r\022\r\n\005gs_id\030\003 "
    "\001(\t\022\016\n\006err_no\030\004 \001(\005\"S\n\020PlayerReLoginReq\022"
    "\025\n\rdigit_account\030\001 \001(\004\022\031\n\021client_session"
    "_id\030\002 \001(\r\022\r\n\005gs_id\030\003 \001(\t\"c\n\020PlayerReLogi"
    "nAck\022\025\n\rdigit_account\030\001 \001(\004\022\031\n\021client_se"
    "ssion_id\030\002 \001(\r\022\r\n\005gs_id\030\003 \001(\t\022\016\n\006err_no\030"
    "\004 \001(\005\"\016\n\014GateCloseNtf\"H\n\014login_gt_req\022\020\n"
    "\010playerid\030\001 \001(\004\022\017\n\007account\030\002 \001(\t\022\025\n\rold_"
    "sessionid\030\003 \001(\r\"e\n\014login_gt_ack\022\020\n\010playe"
    "rid\030\001 \001(\004\022\017\n\007gate_ip\030\002 \001(\t\022\020\n\010gateport\030\003"
    " \001(\005\022\020\n\010gate_key\030\004 \001(\005\022\016\n\006err_no\030\005 \001(\005\"4"
    "\n\021client_number_rpt\022\016\n\006number\030\001 \001(\r\022\017\n\007g"
    "ate_id\030\002 \001(\t\"2\n\036client_login_gate_time_o"
    "ut_rpt\022\020\n\010playerid\030\001 \001(\004", 1504);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gameserver_gate.proto", &protobuf_RegisterTypes);
  CGameServerReport::default_instance_ = new CGameServerReport();
  CGateServerReport::default_instance_ = new CGateServerReport();
  CGateTransClientMsg::default_instance_ = new CGateTransClientMsg();
  CGateTransGameServerMsg::default_instance_ = new CGateTransGameServerMsg();
  NewPlayerEnterGameReq::default_instance_ = new NewPlayerEnterGameReq();
  NewPlayerEnterGameAck::default_instance_ = new NewPlayerEnterGameAck();
  PlayerTerminateGateRpt::default_instance_ = new PlayerTerminateGateRpt();
  KickOutPlayerRpt::default_instance_ = new KickOutPlayerRpt();
  CRandCheckReq::default_instance_ = new CRandCheckReq();
  CRandCheckAck::default_instance_ = new CRandCheckAck();
  CHeartPing::default_instance_ = new CHeartPing();
  CHeartPingAck::default_instance_ = new CHeartPingAck();
  PlayerSwitchGSReq::default_instance_ = new PlayerSwitchGSReq();
  PlayerSwitchGSAck::default_instance_ = new PlayerSwitchGSAck();
  PlayerReLoginReq::default_instance_ = new PlayerReLoginReq();
  PlayerReLoginAck::default_instance_ = new PlayerReLoginAck();
  GateCloseNtf::default_instance_ = new GateCloseNtf();
  login_gt_req::default_instance_ = new login_gt_req();
  login_gt_ack::default_instance_ = new login_gt_ack();
  client_number_rpt::default_instance_ = new client_number_rpt();
  client_login_gate_time_out_rpt::default_instance_ = new client_login_gate_time_out_rpt();
  CGameServerReport::default_instance_->InitAsDefaultInstance();
  CGateServerReport::default_instance_->InitAsDefaultInstance();
  CGateTransClientMsg::default_instance_->InitAsDefaultInstance();
  CGateTransGameServerMsg::default_instance_->InitAsDefaultInstance();
  NewPlayerEnterGameReq::default_instance_->InitAsDefaultInstance();
  NewPlayerEnterGameAck::default_instance_->InitAsDefaultInstance();
  PlayerTerminateGateRpt::default_instance_->InitAsDefaultInstance();
  KickOutPlayerRpt::default_instance_->InitAsDefaultInstance();
  CRandCheckReq::default_instance_->InitAsDefaultInstance();
  CRandCheckAck::default_instance_->InitAsDefaultInstance();
  CHeartPing::default_instance_->InitAsDefaultInstance();
  CHeartPingAck::default_instance_->InitAsDefaultInstance();
  PlayerSwitchGSReq::default_instance_->InitAsDefaultInstance();
  PlayerSwitchGSAck::default_instance_->InitAsDefaultInstance();
  PlayerReLoginReq::default_instance_->InitAsDefaultInstance();
  PlayerReLoginAck::default_instance_->InitAsDefaultInstance();
  GateCloseNtf::default_instance_->InitAsDefaultInstance();
  login_gt_req::default_instance_->InitAsDefaultInstance();
  login_gt_ack::default_instance_->InitAsDefaultInstance();
  client_number_rpt::default_instance_->InitAsDefaultInstance();
  client_login_gate_time_out_rpt::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_gameserver_5fgate_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_gameserver_5fgate_2eproto {
  StaticDescriptorInitializer_gameserver_5fgate_2eproto() {
    protobuf_AddDesc_gameserver_5fgate_2eproto();
  }
} static_descriptor_initializer_gameserver_5fgate_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CGameServerReport::kIdFieldNumber;
const int CGameServerReport::kNameFieldNumber;
const int CGameServerReport::kOnlineNumberFieldNumber;
#endif  // !_MSC_VER

CGameServerReport::CGameServerReport()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGameServerReport::InitAsDefaultInstance() {
}

CGameServerReport::CGameServerReport(const CGameServerReport& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGameServerReport::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  online_number_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGameServerReport::~CGameServerReport() {
  SharedDtor();
}

void CGameServerReport::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CGameServerReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGameServerReport::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGameServerReport_descriptor_;
}

const CGameServerReport& CGameServerReport::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_2eproto();
  return *default_instance_;
}

CGameServerReport* CGameServerReport::default_instance_ = NULL;

CGameServerReport* CGameServerReport::New() const {
  return new CGameServerReport;
}

void CGameServerReport::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    online_number_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGameServerReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_online_number;
        break;
      }

      // optional int32 online_number = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_online_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &online_number_)));
          set_has_online_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGameServerReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional int32 online_number = 3;
  if (has_online_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->online_number(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGameServerReport::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int32 online_number = 3;
  if (has_online_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->online_number(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGameServerReport::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 online_number = 3;
    if (has_online_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->online_number());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGameServerReport::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGameServerReport* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGameServerReport*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGameServerReport::MergeFrom(const CGameServerReport& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_online_number()) {
      set_online_number(from.online_number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGameServerReport::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameServerReport::CopyFrom(const CGameServerReport& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameServerReport::IsInitialized() const {

  return true;
}

void CGameServerReport::Swap(CGameServerReport* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(online_number_, other->online_number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGameServerReport::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGameServerReport_descriptor_;
  metadata.reflection = CGameServerReport_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGateServerReport::kIdFieldNumber;
const int CGateServerReport::kNameFieldNumber;
#endif  // !_MSC_VER

CGateServerReport::CGateServerReport()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGateServerReport::InitAsDefaultInstance() {
}

CGateServerReport::CGateServerReport(const CGateServerReport& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGateServerReport::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGateServerReport::~CGateServerReport() {
  SharedDtor();
}

void CGateServerReport::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CGateServerReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGateServerReport::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGateServerReport_descriptor_;
}

const CGateServerReport& CGateServerReport::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_2eproto();
  return *default_instance_;
}

CGateServerReport* CGateServerReport::default_instance_ = NULL;

CGateServerReport* CGateServerReport::New() const {
  return new CGateServerReport;
}

void CGateServerReport::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGateServerReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGateServerReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGateServerReport::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGateServerReport::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGateServerReport::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGateServerReport* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGateServerReport*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGateServerReport::MergeFrom(const CGateServerReport& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGateServerReport::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGateServerReport::CopyFrom(const CGateServerReport& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGateServerReport::IsInitialized() const {

  return true;
}

void CGateServerReport::Swap(CGateServerReport* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGateServerReport::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGateServerReport_descriptor_;
  metadata.reflection = CGateServerReport_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGateTransClientMsg::kClientSessionIdFieldNumber;
const int CGateTransClientMsg::kMsgFieldNumber;
#endif  // !_MSC_VER

CGateTransClientMsg::CGateTransClientMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGateTransClientMsg::InitAsDefaultInstance() {
}

CGateTransClientMsg::CGateTransClientMsg(const CGateTransClientMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGateTransClientMsg::SharedCtor() {
  _cached_size_ = 0;
  client_session_id_ = 0u;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGateTransClientMsg::~CGateTransClientMsg() {
  SharedDtor();
}

void CGateTransClientMsg::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void CGateTransClientMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGateTransClientMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGateTransClientMsg_descriptor_;
}

const CGateTransClientMsg& CGateTransClientMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_2eproto();
  return *default_instance_;
}

CGateTransClientMsg* CGateTransClientMsg::default_instance_ = NULL;

CGateTransClientMsg* CGateTransClientMsg::New() const {
  return new CGateTransClientMsg;
}

void CGateTransClientMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    client_session_id_ = 0u;
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGateTransClientMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 client_session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_session_id_)));
          set_has_client_session_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }

      // optional bytes msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGateTransClientMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 client_session_id = 1;
  if (has_client_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->client_session_id(), output);
  }

  // optional bytes msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGateTransClientMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 client_session_id = 1;
  if (has_client_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->client_session_id(), target);
  }

  // optional bytes msg = 2;
  if (has_msg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGateTransClientMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 client_session_id = 1;
    if (has_client_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_session_id());
    }

    // optional bytes msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGateTransClientMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGateTransClientMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGateTransClientMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGateTransClientMsg::MergeFrom(const CGateTransClientMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_session_id()) {
      set_client_session_id(from.client_session_id());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGateTransClientMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGateTransClientMsg::CopyFrom(const CGateTransClientMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGateTransClientMsg::IsInitialized() const {

  return true;
}

void CGateTransClientMsg::Swap(CGateTransClientMsg* other) {
  if (other != this) {
    std::swap(client_session_id_, other->client_session_id_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGateTransClientMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGateTransClientMsg_descriptor_;
  metadata.reflection = CGateTransClientMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGateTransGameServerMsg::kClientSessionIdFieldNumber;
const int CGateTransGameServerMsg::kMsgFieldNumber;
#endif  // !_MSC_VER

CGateTransGameServerMsg::CGateTransGameServerMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGateTransGameServerMsg::InitAsDefaultInstance() {
}

CGateTransGameServerMsg::CGateTransGameServerMsg(const CGateTransGameServerMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGateTransGameServerMsg::SharedCtor() {
  _cached_size_ = 0;
  client_session_id_ = 0u;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGateTransGameServerMsg::~CGateTransGameServerMsg() {
  SharedDtor();
}

void CGateTransGameServerMsg::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void CGateTransGameServerMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGateTransGameServerMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGateTransGameServerMsg_descriptor_;
}

const CGateTransGameServerMsg& CGateTransGameServerMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_2eproto();
  return *default_instance_;
}

CGateTransGameServerMsg* CGateTransGameServerMsg::default_instance_ = NULL;

CGateTransGameServerMsg* CGateTransGameServerMsg::New() const {
  return new CGateTransGameServerMsg;
}

void CGateTransGameServerMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    client_session_id_ = 0u;
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGateTransGameServerMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 client_session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_session_id_)));
          set_has_client_session_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }

      // optional bytes msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGateTransGameServerMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 client_session_id = 1;
  if (has_client_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->client_session_id(), output);
  }

  // optional bytes msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGateTransGameServerMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 client_session_id = 1;
  if (has_client_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->client_session_id(), target);
  }

  // optional bytes msg = 2;
  if (has_msg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGateTransGameServerMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 client_session_id = 1;
    if (has_client_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_session_id());
    }

    // optional bytes msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGateTransGameServerMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGateTransGameServerMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGateTransGameServerMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGateTransGameServerMsg::MergeFrom(const CGateTransGameServerMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_session_id()) {
      set_client_session_id(from.client_session_id());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGateTransGameServerMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGateTransGameServerMsg::CopyFrom(const CGateTransGameServerMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGateTransGameServerMsg::IsInitialized() const {

  return true;
}

void CGateTransGameServerMsg::Swap(CGateTransGameServerMsg* other) {
  if (other != this) {
    std::swap(client_session_id_, other->client_session_id_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGateTransGameServerMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGateTransGameServerMsg_descriptor_;
  metadata.reflection = CGateTransGameServerMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NewPlayerEnterGameReq::kClientSessionIdFieldNumber;
const int NewPlayerEnterGameReq::kRemoteIpFieldNumber;
const int NewPlayerEnterGameReq::kRemotePortFieldNumber;
const int NewPlayerEnterGameReq::kGateIdFieldNumber;
const int NewPlayerEnterGameReq::kAccountFieldNumber;
const int NewPlayerEnterGameReq::kPlayeridFieldNumber;
const int NewPlayerEnterGameReq::kSwitchGsFieldNumber;
const int NewPlayerEnterGameReq::kPlatformIdFieldNumber;
#endif  // !_MSC_VER

NewPlayerEnterGameReq::NewPlayerEnterGameReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NewPlayerEnterGameReq::InitAsDefaultInstance() {
}

NewPlayerEnterGameReq::NewPlayerEnterGameReq(const NewPlayerEnterGameReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NewPlayerEnterGameReq::SharedCtor() {
  _cached_size_ = 0;
  client_session_id_ = 0u;
  remote_ip_ = 0u;
  remote_port_ = 0u;
  gate_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  playerid_ = GOOGLE_ULONGLONG(0);
  switch_gs_ = 0;
  platform_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NewPlayerEnterGameReq::~NewPlayerEnterGameReq() {
  SharedDtor();
}

void NewPlayerEnterGameReq::SharedDtor() {
  if (gate_id_ != &::google::protobuf::internal::kEmptyString) {
    delete gate_id_;
  }
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (this != default_instance_) {
  }
}

void NewPlayerEnterGameReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewPlayerEnterGameReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NewPlayerEnterGameReq_descriptor_;
}

const NewPlayerEnterGameReq& NewPlayerEnterGameReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_2eproto();
  return *default_instance_;
}

NewPlayerEnterGameReq* NewPlayerEnterGameReq::default_instance_ = NULL;

NewPlayerEnterGameReq* NewPlayerEnterGameReq::New() const {
  return new NewPlayerEnterGameReq;
}

void NewPlayerEnterGameReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    client_session_id_ = 0u;
    remote_ip_ = 0u;
    remote_port_ = 0u;
    if (has_gate_id()) {
      if (gate_id_ != &::google::protobuf::internal::kEmptyString) {
        gate_id_->clear();
      }
    }
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    playerid_ = GOOGLE_ULONGLONG(0);
    switch_gs_ = 0;
    platform_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NewPlayerEnterGameReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 client_session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_session_id_)));
          set_has_client_session_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_remote_ip;
        break;
      }

      // optional uint32 remote_ip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remote_ip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remote_ip_)));
          set_has_remote_ip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_remote_port;
        break;
      }

      // optional uint32 remote_port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remote_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remote_port_)));
          set_has_remote_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_gate_id;
        break;
      }

      // optional string gate_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gate_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gate_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gate_id().data(), this->gate_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_account;
        break;
      }

      // optional string account = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_playerid;
        break;
      }

      // optional uint64 playerid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_switch_gs;
        break;
      }

      // optional int32 switch_gs = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_switch_gs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &switch_gs_)));
          set_has_switch_gs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_platform_id;
        break;
      }

      // optional int32 platform_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_platform_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &platform_id_)));
          set_has_platform_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NewPlayerEnterGameReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 client_session_id = 1;
  if (has_client_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->client_session_id(), output);
  }

  // optional uint32 remote_ip = 2;
  if (has_remote_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->remote_ip(), output);
  }

  // optional uint32 remote_port = 3;
  if (has_remote_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->remote_port(), output);
  }

  // optional string gate_id = 4;
  if (has_gate_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gate_id().data(), this->gate_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->gate_id(), output);
  }

  // optional string account = 5;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->account(), output);
  }

  // optional uint64 playerid = 6;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->playerid(), output);
  }

  // optional int32 switch_gs = 7;
  if (has_switch_gs()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->switch_gs(), output);
  }

  // optional int32 platform_id = 8;
  if (has_platform_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->platform_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NewPlayerEnterGameReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 client_session_id = 1;
  if (has_client_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->client_session_id(), target);
  }

  // optional uint32 remote_ip = 2;
  if (has_remote_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->remote_ip(), target);
  }

  // optional uint32 remote_port = 3;
  if (has_remote_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->remote_port(), target);
  }

  // optional string gate_id = 4;
  if (has_gate_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gate_id().data(), this->gate_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->gate_id(), target);
  }

  // optional string account = 5;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->account(), target);
  }

  // optional uint64 playerid = 6;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->playerid(), target);
  }

  // optional int32 switch_gs = 7;
  if (has_switch_gs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->switch_gs(), target);
  }

  // optional int32 platform_id = 8;
  if (has_platform_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->platform_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NewPlayerEnterGameReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 client_session_id = 1;
    if (has_client_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_session_id());
    }

    // optional uint32 remote_ip = 2;
    if (has_remote_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->remote_ip());
    }

    // optional uint32 remote_port = 3;
    if (has_remote_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->remote_port());
    }

    // optional string gate_id = 4;
    if (has_gate_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gate_id());
    }

    // optional string account = 5;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional uint64 playerid = 6;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

    // optional int32 switch_gs = 7;
    if (has_switch_gs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->switch_gs());
    }

    // optional int32 platform_id = 8;
    if (has_platform_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->platform_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewPlayerEnterGameReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NewPlayerEnterGameReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NewPlayerEnterGameReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NewPlayerEnterGameReq::MergeFrom(const NewPlayerEnterGameReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_session_id()) {
      set_client_session_id(from.client_session_id());
    }
    if (from.has_remote_ip()) {
      set_remote_ip(from.remote_ip());
    }
    if (from.has_remote_port()) {
      set_remote_port(from.remote_port());
    }
    if (from.has_gate_id()) {
      set_gate_id(from.gate_id());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_switch_gs()) {
      set_switch_gs(from.switch_gs());
    }
    if (from.has_platform_id()) {
      set_platform_id(from.platform_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NewPlayerEnterGameReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewPlayerEnterGameReq::CopyFrom(const NewPlayerEnterGameReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewPlayerEnterGameReq::IsInitialized() const {

  return true;
}

void NewPlayerEnterGameReq::Swap(NewPlayerEnterGameReq* other) {
  if (other != this) {
    std::swap(client_session_id_, other->client_session_id_);
    std::swap(remote_ip_, other->remote_ip_);
    std::swap(remote_port_, other->remote_port_);
    std::swap(gate_id_, other->gate_id_);
    std::swap(account_, other->account_);
    std::swap(playerid_, other->playerid_);
    std::swap(switch_gs_, other->switch_gs_);
    std::swap(platform_id_, other->platform_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NewPlayerEnterGameReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NewPlayerEnterGameReq_descriptor_;
  metadata.reflection = NewPlayerEnterGameReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NewPlayerEnterGameAck::kClientSessionIdFieldNumber;
const int NewPlayerEnterGameAck::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

NewPlayerEnterGameAck::NewPlayerEnterGameAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NewPlayerEnterGameAck::InitAsDefaultInstance() {
}

NewPlayerEnterGameAck::NewPlayerEnterGameAck(const NewPlayerEnterGameAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NewPlayerEnterGameAck::SharedCtor() {
  _cached_size_ = 0;
  client_session_id_ = 0u;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NewPlayerEnterGameAck::~NewPlayerEnterGameAck() {
  SharedDtor();
}

void NewPlayerEnterGameAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NewPlayerEnterGameAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewPlayerEnterGameAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NewPlayerEnterGameAck_descriptor_;
}

const NewPlayerEnterGameAck& NewPlayerEnterGameAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_2eproto();
  return *default_instance_;
}

NewPlayerEnterGameAck* NewPlayerEnterGameAck::default_instance_ = NULL;

NewPlayerEnterGameAck* NewPlayerEnterGameAck::New() const {
  return new NewPlayerEnterGameAck;
}

void NewPlayerEnterGameAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    client_session_id_ = 0u;
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NewPlayerEnterGameAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 client_session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_session_id_)));
          set_has_client_session_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_error_code;
        break;
      }

      // optional int32 error_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NewPlayerEnterGameAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 client_session_id = 1;
  if (has_client_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->client_session_id(), output);
  }

  // optional int32 error_code = 2;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->error_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NewPlayerEnterGameAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 client_session_id = 1;
  if (has_client_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->client_session_id(), target);
  }

  // optional int32 error_code = 2;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->error_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NewPlayerEnterGameAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 client_session_id = 1;
    if (has_client_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_session_id());
    }

    // optional int32 error_code = 2;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewPlayerEnterGameAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NewPlayerEnterGameAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NewPlayerEnterGameAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NewPlayerEnterGameAck::MergeFrom(const NewPlayerEnterGameAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_session_id()) {
      set_client_session_id(from.client_session_id());
    }
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NewPlayerEnterGameAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewPlayerEnterGameAck::CopyFrom(const NewPlayerEnterGameAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewPlayerEnterGameAck::IsInitialized() const {

  return true;
}

void NewPlayerEnterGameAck::Swap(NewPlayerEnterGameAck* other) {
  if (other != this) {
    std::swap(client_session_id_, other->client_session_id_);
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NewPlayerEnterGameAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NewPlayerEnterGameAck_descriptor_;
  metadata.reflection = NewPlayerEnterGameAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerTerminateGateRpt::kClientSessionIdFieldNumber;
#endif  // !_MSC_VER

PlayerTerminateGateRpt::PlayerTerminateGateRpt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerTerminateGateRpt::InitAsDefaultInstance() {
}

PlayerTerminateGateRpt::PlayerTerminateGateRpt(const PlayerTerminateGateRpt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerTerminateGateRpt::SharedCtor() {
  _cached_size_ = 0;
  client_session_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerTerminateGateRpt::~PlayerTerminateGateRpt() {
  SharedDtor();
}

void PlayerTerminateGateRpt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerTerminateGateRpt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerTerminateGateRpt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerTerminateGateRpt_descriptor_;
}

const PlayerTerminateGateRpt& PlayerTerminateGateRpt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_2eproto();
  return *default_instance_;
}

PlayerTerminateGateRpt* PlayerTerminateGateRpt::default_instance_ = NULL;

PlayerTerminateGateRpt* PlayerTerminateGateRpt::New() const {
  return new PlayerTerminateGateRpt;
}

void PlayerTerminateGateRpt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    client_session_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerTerminateGateRpt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 client_session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_session_id_)));
          set_has_client_session_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerTerminateGateRpt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 client_session_id = 1;
  if (has_client_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->client_session_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerTerminateGateRpt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 client_session_id = 1;
  if (has_client_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->client_session_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerTerminateGateRpt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 client_session_id = 1;
    if (has_client_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_session_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerTerminateGateRpt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerTerminateGateRpt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerTerminateGateRpt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerTerminateGateRpt::MergeFrom(const PlayerTerminateGateRpt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_session_id()) {
      set_client_session_id(from.client_session_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerTerminateGateRpt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerTerminateGateRpt::CopyFrom(const PlayerTerminateGateRpt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerTerminateGateRpt::IsInitialized() const {

  return true;
}

void PlayerTerminateGateRpt::Swap(PlayerTerminateGateRpt* other) {
  if (other != this) {
    std::swap(client_session_id_, other->client_session_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerTerminateGateRpt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerTerminateGateRpt_descriptor_;
  metadata.reflection = PlayerTerminateGateRpt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KickOutPlayerRpt::kDigitAccountFieldNumber;
const int KickOutPlayerRpt::kSessionIdFieldNumber;
const int KickOutPlayerRpt::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

KickOutPlayerRpt::KickOutPlayerRpt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KickOutPlayerRpt::InitAsDefaultInstance() {
}

KickOutPlayerRpt::KickOutPlayerRpt(const KickOutPlayerRpt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KickOutPlayerRpt::SharedCtor() {
  _cached_size_ = 0;
  digit_account_ = GOOGLE_ULONGLONG(0);
  session_id_ = 0u;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KickOutPlayerRpt::~KickOutPlayerRpt() {
  SharedDtor();
}

void KickOutPlayerRpt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KickOutPlayerRpt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KickOutPlayerRpt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KickOutPlayerRpt_descriptor_;
}

const KickOutPlayerRpt& KickOutPlayerRpt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_2eproto();
  return *default_instance_;
}

KickOutPlayerRpt* KickOutPlayerRpt::default_instance_ = NULL;

KickOutPlayerRpt* KickOutPlayerRpt::New() const {
  return new KickOutPlayerRpt;
}

void KickOutPlayerRpt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    digit_account_ = GOOGLE_ULONGLONG(0);
    session_id_ = 0u;
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KickOutPlayerRpt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 digit_account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &digit_account_)));
          set_has_digit_account();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_session_id;
        break;
      }

      // optional uint32 session_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_session_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_error_code;
        break;
      }

      // optional int32 error_code = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KickOutPlayerRpt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 digit_account = 1;
  if (has_digit_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->digit_account(), output);
  }

  // optional uint32 session_id = 2;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->session_id(), output);
  }

  // optional int32 error_code = 3;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->error_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KickOutPlayerRpt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 digit_account = 1;
  if (has_digit_account()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->digit_account(), target);
  }

  // optional uint32 session_id = 2;
  if (has_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->session_id(), target);
  }

  // optional int32 error_code = 3;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->error_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KickOutPlayerRpt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 digit_account = 1;
    if (has_digit_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->digit_account());
    }

    // optional uint32 session_id = 2;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->session_id());
    }

    // optional int32 error_code = 3;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KickOutPlayerRpt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KickOutPlayerRpt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KickOutPlayerRpt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KickOutPlayerRpt::MergeFrom(const KickOutPlayerRpt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_digit_account()) {
      set_digit_account(from.digit_account());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KickOutPlayerRpt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KickOutPlayerRpt::CopyFrom(const KickOutPlayerRpt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KickOutPlayerRpt::IsInitialized() const {

  return true;
}

void KickOutPlayerRpt::Swap(KickOutPlayerRpt* other) {
  if (other != this) {
    std::swap(digit_account_, other->digit_account_);
    std::swap(session_id_, other->session_id_);
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KickOutPlayerRpt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KickOutPlayerRpt_descriptor_;
  metadata.reflection = KickOutPlayerRpt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CRandCheckReq::kRandkeysFieldNumber;
#endif  // !_MSC_VER

CRandCheckReq::CRandCheckReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CRandCheckReq::InitAsDefaultInstance() {
}

CRandCheckReq::CRandCheckReq(const CRandCheckReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CRandCheckReq::SharedCtor() {
  _cached_size_ = 0;
  randkeys_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CRandCheckReq::~CRandCheckReq() {
  SharedDtor();
}

void CRandCheckReq::SharedDtor() {
  if (randkeys_ != &::google::protobuf::internal::kEmptyString) {
    delete randkeys_;
  }
  if (this != default_instance_) {
  }
}

void CRandCheckReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CRandCheckReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CRandCheckReq_descriptor_;
}

const CRandCheckReq& CRandCheckReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_2eproto();
  return *default_instance_;
}

CRandCheckReq* CRandCheckReq::default_instance_ = NULL;

CRandCheckReq* CRandCheckReq::New() const {
  return new CRandCheckReq;
}

void CRandCheckReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_randkeys()) {
      if (randkeys_ != &::google::protobuf::internal::kEmptyString) {
        randkeys_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CRandCheckReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes randkeys = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_randkeys()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CRandCheckReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes randkeys = 1;
  if (has_randkeys()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->randkeys(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CRandCheckReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes randkeys = 1;
  if (has_randkeys()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->randkeys(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CRandCheckReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes randkeys = 1;
    if (has_randkeys()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->randkeys());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CRandCheckReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CRandCheckReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CRandCheckReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CRandCheckReq::MergeFrom(const CRandCheckReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_randkeys()) {
      set_randkeys(from.randkeys());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CRandCheckReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CRandCheckReq::CopyFrom(const CRandCheckReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRandCheckReq::IsInitialized() const {

  return true;
}

void CRandCheckReq::Swap(CRandCheckReq* other) {
  if (other != this) {
    std::swap(randkeys_, other->randkeys_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CRandCheckReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CRandCheckReq_descriptor_;
  metadata.reflection = CRandCheckReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CRandCheckAck::kKeysFieldNumber;
#endif  // !_MSC_VER

CRandCheckAck::CRandCheckAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CRandCheckAck::InitAsDefaultInstance() {
}

CRandCheckAck::CRandCheckAck(const CRandCheckAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CRandCheckAck::SharedCtor() {
  _cached_size_ = 0;
  keys_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CRandCheckAck::~CRandCheckAck() {
  SharedDtor();
}

void CRandCheckAck::SharedDtor() {
  if (keys_ != &::google::protobuf::internal::kEmptyString) {
    delete keys_;
  }
  if (this != default_instance_) {
  }
}

void CRandCheckAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CRandCheckAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CRandCheckAck_descriptor_;
}

const CRandCheckAck& CRandCheckAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_2eproto();
  return *default_instance_;
}

CRandCheckAck* CRandCheckAck::default_instance_ = NULL;

CRandCheckAck* CRandCheckAck::New() const {
  return new CRandCheckAck;
}

void CRandCheckAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_keys()) {
      if (keys_ != &::google::protobuf::internal::kEmptyString) {
        keys_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CRandCheckAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes keys = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_keys()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CRandCheckAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes keys = 1;
  if (has_keys()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->keys(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CRandCheckAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes keys = 1;
  if (has_keys()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->keys(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CRandCheckAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes keys = 1;
    if (has_keys()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->keys());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CRandCheckAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CRandCheckAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CRandCheckAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CRandCheckAck::MergeFrom(const CRandCheckAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_keys()) {
      set_keys(from.keys());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CRandCheckAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CRandCheckAck::CopyFrom(const CRandCheckAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRandCheckAck::IsInitialized() const {

  return true;
}

void CRandCheckAck::Swap(CRandCheckAck* other) {
  if (other != this) {
    std::swap(keys_, other->keys_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CRandCheckAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CRandCheckAck_descriptor_;
  metadata.reflection = CRandCheckAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CHeartPing::kOptFieldNumber;
#endif  // !_MSC_VER

CHeartPing::CHeartPing()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CHeartPing::InitAsDefaultInstance() {
}

CHeartPing::CHeartPing(const CHeartPing& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CHeartPing::SharedCtor() {
  _cached_size_ = 0;
  opt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CHeartPing::~CHeartPing() {
  SharedDtor();
}

void CHeartPing::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CHeartPing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CHeartPing::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CHeartPing_descriptor_;
}

const CHeartPing& CHeartPing::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_2eproto();
  return *default_instance_;
}

CHeartPing* CHeartPing::default_instance_ = NULL;

CHeartPing* CHeartPing::New() const {
  return new CHeartPing;
}

void CHeartPing::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opt_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CHeartPing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 opt = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opt_)));
          set_has_opt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CHeartPing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 opt = 1;
  if (has_opt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CHeartPing::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 opt = 1;
  if (has_opt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->opt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CHeartPing::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 opt = 1;
    if (has_opt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CHeartPing::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CHeartPing* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CHeartPing*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CHeartPing::MergeFrom(const CHeartPing& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opt()) {
      set_opt(from.opt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CHeartPing::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CHeartPing::CopyFrom(const CHeartPing& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHeartPing::IsInitialized() const {

  return true;
}

void CHeartPing::Swap(CHeartPing* other) {
  if (other != this) {
    std::swap(opt_, other->opt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CHeartPing::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CHeartPing_descriptor_;
  metadata.reflection = CHeartPing_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CHeartPingAck::kOptFieldNumber;
#endif  // !_MSC_VER

CHeartPingAck::CHeartPingAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CHeartPingAck::InitAsDefaultInstance() {
}

CHeartPingAck::CHeartPingAck(const CHeartPingAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CHeartPingAck::SharedCtor() {
  _cached_size_ = 0;
  opt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CHeartPingAck::~CHeartPingAck() {
  SharedDtor();
}

void CHeartPingAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CHeartPingAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CHeartPingAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CHeartPingAck_descriptor_;
}

const CHeartPingAck& CHeartPingAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_2eproto();
  return *default_instance_;
}

CHeartPingAck* CHeartPingAck::default_instance_ = NULL;

CHeartPingAck* CHeartPingAck::New() const {
  return new CHeartPingAck;
}

void CHeartPingAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opt_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CHeartPingAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 opt = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opt_)));
          set_has_opt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CHeartPingAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 opt = 1;
  if (has_opt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CHeartPingAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 opt = 1;
  if (has_opt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->opt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CHeartPingAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 opt = 1;
    if (has_opt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CHeartPingAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CHeartPingAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CHeartPingAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CHeartPingAck::MergeFrom(const CHeartPingAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opt()) {
      set_opt(from.opt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CHeartPingAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CHeartPingAck::CopyFrom(const CHeartPingAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHeartPingAck::IsInitialized() const {

  return true;
}

void CHeartPingAck::Swap(CHeartPingAck* other) {
  if (other != this) {
    std::swap(opt_, other->opt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CHeartPingAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CHeartPingAck_descriptor_;
  metadata.reflection = CHeartPingAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerSwitchGSReq::kDigitAccountFieldNumber;
const int PlayerSwitchGSReq::kClientSessionIdFieldNumber;
const int PlayerSwitchGSReq::kGsIdFieldNumber;
const int PlayerSwitchGSReq::kPlatformIdFieldNumber;
#endif  // !_MSC_VER

PlayerSwitchGSReq::PlayerSwitchGSReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerSwitchGSReq::InitAsDefaultInstance() {
}

PlayerSwitchGSReq::PlayerSwitchGSReq(const PlayerSwitchGSReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerSwitchGSReq::SharedCtor() {
  _cached_size_ = 0;
  digit_account_ = GOOGLE_ULONGLONG(0);
  client_session_id_ = 0u;
  gs_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  platform_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerSwitchGSReq::~PlayerSwitchGSReq() {
  SharedDtor();
}

void PlayerSwitchGSReq::SharedDtor() {
  if (gs_id_ != &::google::protobuf::internal::kEmptyString) {
    delete gs_id_;
  }
  if (this != default_instance_) {
  }
}

void PlayerSwitchGSReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerSwitchGSReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerSwitchGSReq_descriptor_;
}

const PlayerSwitchGSReq& PlayerSwitchGSReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_2eproto();
  return *default_instance_;
}

PlayerSwitchGSReq* PlayerSwitchGSReq::default_instance_ = NULL;

PlayerSwitchGSReq* PlayerSwitchGSReq::New() const {
  return new PlayerSwitchGSReq;
}

void PlayerSwitchGSReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    digit_account_ = GOOGLE_ULONGLONG(0);
    client_session_id_ = 0u;
    if (has_gs_id()) {
      if (gs_id_ != &::google::protobuf::internal::kEmptyString) {
        gs_id_->clear();
      }
    }
    platform_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerSwitchGSReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 digit_account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &digit_account_)));
          set_has_digit_account();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_client_session_id;
        break;
      }

      // optional uint32 client_session_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_client_session_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_session_id_)));
          set_has_client_session_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_gs_id;
        break;
      }

      // optional string gs_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gs_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gs_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gs_id().data(), this->gs_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_platform_id;
        break;
      }

      // optional int32 platform_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_platform_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &platform_id_)));
          set_has_platform_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerSwitchGSReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 digit_account = 1;
  if (has_digit_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->digit_account(), output);
  }

  // optional uint32 client_session_id = 2;
  if (has_client_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->client_session_id(), output);
  }

  // optional string gs_id = 3;
  if (has_gs_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gs_id().data(), this->gs_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->gs_id(), output);
  }

  // optional int32 platform_id = 4;
  if (has_platform_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->platform_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerSwitchGSReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 digit_account = 1;
  if (has_digit_account()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->digit_account(), target);
  }

  // optional uint32 client_session_id = 2;
  if (has_client_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->client_session_id(), target);
  }

  // optional string gs_id = 3;
  if (has_gs_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gs_id().data(), this->gs_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->gs_id(), target);
  }

  // optional int32 platform_id = 4;
  if (has_platform_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->platform_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerSwitchGSReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 digit_account = 1;
    if (has_digit_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->digit_account());
    }

    // optional uint32 client_session_id = 2;
    if (has_client_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_session_id());
    }

    // optional string gs_id = 3;
    if (has_gs_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gs_id());
    }

    // optional int32 platform_id = 4;
    if (has_platform_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->platform_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerSwitchGSReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerSwitchGSReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerSwitchGSReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerSwitchGSReq::MergeFrom(const PlayerSwitchGSReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_digit_account()) {
      set_digit_account(from.digit_account());
    }
    if (from.has_client_session_id()) {
      set_client_session_id(from.client_session_id());
    }
    if (from.has_gs_id()) {
      set_gs_id(from.gs_id());
    }
    if (from.has_platform_id()) {
      set_platform_id(from.platform_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerSwitchGSReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerSwitchGSReq::CopyFrom(const PlayerSwitchGSReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerSwitchGSReq::IsInitialized() const {

  return true;
}

void PlayerSwitchGSReq::Swap(PlayerSwitchGSReq* other) {
  if (other != this) {
    std::swap(digit_account_, other->digit_account_);
    std::swap(client_session_id_, other->client_session_id_);
    std::swap(gs_id_, other->gs_id_);
    std::swap(platform_id_, other->platform_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerSwitchGSReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerSwitchGSReq_descriptor_;
  metadata.reflection = PlayerSwitchGSReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerSwitchGSAck::kDigitAccountFieldNumber;
const int PlayerSwitchGSAck::kClientSessionIdFieldNumber;
const int PlayerSwitchGSAck::kGsIdFieldNumber;
const int PlayerSwitchGSAck::kErrNoFieldNumber;
#endif  // !_MSC_VER

PlayerSwitchGSAck::PlayerSwitchGSAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerSwitchGSAck::InitAsDefaultInstance() {
}

PlayerSwitchGSAck::PlayerSwitchGSAck(const PlayerSwitchGSAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerSwitchGSAck::SharedCtor() {
  _cached_size_ = 0;
  digit_account_ = GOOGLE_ULONGLONG(0);
  client_session_id_ = 0u;
  gs_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  err_no_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerSwitchGSAck::~PlayerSwitchGSAck() {
  SharedDtor();
}

void PlayerSwitchGSAck::SharedDtor() {
  if (gs_id_ != &::google::protobuf::internal::kEmptyString) {
    delete gs_id_;
  }
  if (this != default_instance_) {
  }
}

void PlayerSwitchGSAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerSwitchGSAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerSwitchGSAck_descriptor_;
}

const PlayerSwitchGSAck& PlayerSwitchGSAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_2eproto();
  return *default_instance_;
}

PlayerSwitchGSAck* PlayerSwitchGSAck::default_instance_ = NULL;

PlayerSwitchGSAck* PlayerSwitchGSAck::New() const {
  return new PlayerSwitchGSAck;
}

void PlayerSwitchGSAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    digit_account_ = GOOGLE_ULONGLONG(0);
    client_session_id_ = 0u;
    if (has_gs_id()) {
      if (gs_id_ != &::google::protobuf::internal::kEmptyString) {
        gs_id_->clear();
      }
    }
    err_no_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerSwitchGSAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 digit_account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &digit_account_)));
          set_has_digit_account();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_client_session_id;
        break;
      }

      // optional uint32 client_session_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_client_session_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_session_id_)));
          set_has_client_session_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_gs_id;
        break;
      }

      // optional string gs_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gs_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gs_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gs_id().data(), this->gs_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_err_no;
        break;
      }

      // optional int32 err_no = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_err_no:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_no_)));
          set_has_err_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerSwitchGSAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 digit_account = 1;
  if (has_digit_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->digit_account(), output);
  }

  // optional uint32 client_session_id = 2;
  if (has_client_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->client_session_id(), output);
  }

  // optional string gs_id = 3;
  if (has_gs_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gs_id().data(), this->gs_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->gs_id(), output);
  }

  // optional int32 err_no = 4;
  if (has_err_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->err_no(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerSwitchGSAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 digit_account = 1;
  if (has_digit_account()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->digit_account(), target);
  }

  // optional uint32 client_session_id = 2;
  if (has_client_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->client_session_id(), target);
  }

  // optional string gs_id = 3;
  if (has_gs_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gs_id().data(), this->gs_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->gs_id(), target);
  }

  // optional int32 err_no = 4;
  if (has_err_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->err_no(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerSwitchGSAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 digit_account = 1;
    if (has_digit_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->digit_account());
    }

    // optional uint32 client_session_id = 2;
    if (has_client_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_session_id());
    }

    // optional string gs_id = 3;
    if (has_gs_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gs_id());
    }

    // optional int32 err_no = 4;
    if (has_err_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err_no());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerSwitchGSAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerSwitchGSAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerSwitchGSAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerSwitchGSAck::MergeFrom(const PlayerSwitchGSAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_digit_account()) {
      set_digit_account(from.digit_account());
    }
    if (from.has_client_session_id()) {
      set_client_session_id(from.client_session_id());
    }
    if (from.has_gs_id()) {
      set_gs_id(from.gs_id());
    }
    if (from.has_err_no()) {
      set_err_no(from.err_no());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerSwitchGSAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerSwitchGSAck::CopyFrom(const PlayerSwitchGSAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerSwitchGSAck::IsInitialized() const {

  return true;
}

void PlayerSwitchGSAck::Swap(PlayerSwitchGSAck* other) {
  if (other != this) {
    std::swap(digit_account_, other->digit_account_);
    std::swap(client_session_id_, other->client_session_id_);
    std::swap(gs_id_, other->gs_id_);
    std::swap(err_no_, other->err_no_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerSwitchGSAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerSwitchGSAck_descriptor_;
  metadata.reflection = PlayerSwitchGSAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerReLoginReq::kDigitAccountFieldNumber;
const int PlayerReLoginReq::kClientSessionIdFieldNumber;
const int PlayerReLoginReq::kGsIdFieldNumber;
#endif  // !_MSC_VER

PlayerReLoginReq::PlayerReLoginReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerReLoginReq::InitAsDefaultInstance() {
}

PlayerReLoginReq::PlayerReLoginReq(const PlayerReLoginReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerReLoginReq::SharedCtor() {
  _cached_size_ = 0;
  digit_account_ = GOOGLE_ULONGLONG(0);
  client_session_id_ = 0u;
  gs_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerReLoginReq::~PlayerReLoginReq() {
  SharedDtor();
}

void PlayerReLoginReq::SharedDtor() {
  if (gs_id_ != &::google::protobuf::internal::kEmptyString) {
    delete gs_id_;
  }
  if (this != default_instance_) {
  }
}

void PlayerReLoginReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerReLoginReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerReLoginReq_descriptor_;
}

const PlayerReLoginReq& PlayerReLoginReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_2eproto();
  return *default_instance_;
}

PlayerReLoginReq* PlayerReLoginReq::default_instance_ = NULL;

PlayerReLoginReq* PlayerReLoginReq::New() const {
  return new PlayerReLoginReq;
}

void PlayerReLoginReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    digit_account_ = GOOGLE_ULONGLONG(0);
    client_session_id_ = 0u;
    if (has_gs_id()) {
      if (gs_id_ != &::google::protobuf::internal::kEmptyString) {
        gs_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerReLoginReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 digit_account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &digit_account_)));
          set_has_digit_account();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_client_session_id;
        break;
      }

      // optional uint32 client_session_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_client_session_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_session_id_)));
          set_has_client_session_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_gs_id;
        break;
      }

      // optional string gs_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gs_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gs_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gs_id().data(), this->gs_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerReLoginReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 digit_account = 1;
  if (has_digit_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->digit_account(), output);
  }

  // optional uint32 client_session_id = 2;
  if (has_client_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->client_session_id(), output);
  }

  // optional string gs_id = 3;
  if (has_gs_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gs_id().data(), this->gs_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->gs_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerReLoginReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 digit_account = 1;
  if (has_digit_account()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->digit_account(), target);
  }

  // optional uint32 client_session_id = 2;
  if (has_client_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->client_session_id(), target);
  }

  // optional string gs_id = 3;
  if (has_gs_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gs_id().data(), this->gs_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->gs_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerReLoginReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 digit_account = 1;
    if (has_digit_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->digit_account());
    }

    // optional uint32 client_session_id = 2;
    if (has_client_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_session_id());
    }

    // optional string gs_id = 3;
    if (has_gs_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gs_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerReLoginReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerReLoginReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerReLoginReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerReLoginReq::MergeFrom(const PlayerReLoginReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_digit_account()) {
      set_digit_account(from.digit_account());
    }
    if (from.has_client_session_id()) {
      set_client_session_id(from.client_session_id());
    }
    if (from.has_gs_id()) {
      set_gs_id(from.gs_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerReLoginReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerReLoginReq::CopyFrom(const PlayerReLoginReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerReLoginReq::IsInitialized() const {

  return true;
}

void PlayerReLoginReq::Swap(PlayerReLoginReq* other) {
  if (other != this) {
    std::swap(digit_account_, other->digit_account_);
    std::swap(client_session_id_, other->client_session_id_);
    std::swap(gs_id_, other->gs_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerReLoginReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerReLoginReq_descriptor_;
  metadata.reflection = PlayerReLoginReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerReLoginAck::kDigitAccountFieldNumber;
const int PlayerReLoginAck::kClientSessionIdFieldNumber;
const int PlayerReLoginAck::kGsIdFieldNumber;
const int PlayerReLoginAck::kErrNoFieldNumber;
#endif  // !_MSC_VER

PlayerReLoginAck::PlayerReLoginAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerReLoginAck::InitAsDefaultInstance() {
}

PlayerReLoginAck::PlayerReLoginAck(const PlayerReLoginAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerReLoginAck::SharedCtor() {
  _cached_size_ = 0;
  digit_account_ = GOOGLE_ULONGLONG(0);
  client_session_id_ = 0u;
  gs_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  err_no_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerReLoginAck::~PlayerReLoginAck() {
  SharedDtor();
}

void PlayerReLoginAck::SharedDtor() {
  if (gs_id_ != &::google::protobuf::internal::kEmptyString) {
    delete gs_id_;
  }
  if (this != default_instance_) {
  }
}

void PlayerReLoginAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerReLoginAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerReLoginAck_descriptor_;
}

const PlayerReLoginAck& PlayerReLoginAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_2eproto();
  return *default_instance_;
}

PlayerReLoginAck* PlayerReLoginAck::default_instance_ = NULL;

PlayerReLoginAck* PlayerReLoginAck::New() const {
  return new PlayerReLoginAck;
}

void PlayerReLoginAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    digit_account_ = GOOGLE_ULONGLONG(0);
    client_session_id_ = 0u;
    if (has_gs_id()) {
      if (gs_id_ != &::google::protobuf::internal::kEmptyString) {
        gs_id_->clear();
      }
    }
    err_no_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerReLoginAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 digit_account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &digit_account_)));
          set_has_digit_account();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_client_session_id;
        break;
      }

      // optional uint32 client_session_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_client_session_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_session_id_)));
          set_has_client_session_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_gs_id;
        break;
      }

      // optional string gs_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gs_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gs_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gs_id().data(), this->gs_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_err_no;
        break;
      }

      // optional int32 err_no = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_err_no:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_no_)));
          set_has_err_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerReLoginAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 digit_account = 1;
  if (has_digit_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->digit_account(), output);
  }

  // optional uint32 client_session_id = 2;
  if (has_client_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->client_session_id(), output);
  }

  // optional string gs_id = 3;
  if (has_gs_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gs_id().data(), this->gs_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->gs_id(), output);
  }

  // optional int32 err_no = 4;
  if (has_err_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->err_no(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerReLoginAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 digit_account = 1;
  if (has_digit_account()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->digit_account(), target);
  }

  // optional uint32 client_session_id = 2;
  if (has_client_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->client_session_id(), target);
  }

  // optional string gs_id = 3;
  if (has_gs_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gs_id().data(), this->gs_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->gs_id(), target);
  }

  // optional int32 err_no = 4;
  if (has_err_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->err_no(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerReLoginAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 digit_account = 1;
    if (has_digit_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->digit_account());
    }

    // optional uint32 client_session_id = 2;
    if (has_client_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_session_id());
    }

    // optional string gs_id = 3;
    if (has_gs_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gs_id());
    }

    // optional int32 err_no = 4;
    if (has_err_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err_no());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerReLoginAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerReLoginAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerReLoginAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerReLoginAck::MergeFrom(const PlayerReLoginAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_digit_account()) {
      set_digit_account(from.digit_account());
    }
    if (from.has_client_session_id()) {
      set_client_session_id(from.client_session_id());
    }
    if (from.has_gs_id()) {
      set_gs_id(from.gs_id());
    }
    if (from.has_err_no()) {
      set_err_no(from.err_no());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerReLoginAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerReLoginAck::CopyFrom(const PlayerReLoginAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerReLoginAck::IsInitialized() const {

  return true;
}

void PlayerReLoginAck::Swap(PlayerReLoginAck* other) {
  if (other != this) {
    std::swap(digit_account_, other->digit_account_);
    std::swap(client_session_id_, other->client_session_id_);
    std::swap(gs_id_, other->gs_id_);
    std::swap(err_no_, other->err_no_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerReLoginAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerReLoginAck_descriptor_;
  metadata.reflection = PlayerReLoginAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GateCloseNtf::GateCloseNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GateCloseNtf::InitAsDefaultInstance() {
}

GateCloseNtf::GateCloseNtf(const GateCloseNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GateCloseNtf::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GateCloseNtf::~GateCloseNtf() {
  SharedDtor();
}

void GateCloseNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GateCloseNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GateCloseNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GateCloseNtf_descriptor_;
}

const GateCloseNtf& GateCloseNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_2eproto();
  return *default_instance_;
}

GateCloseNtf* GateCloseNtf::default_instance_ = NULL;

GateCloseNtf* GateCloseNtf::New() const {
  return new GateCloseNtf;
}

void GateCloseNtf::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GateCloseNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GateCloseNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GateCloseNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GateCloseNtf::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GateCloseNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GateCloseNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GateCloseNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GateCloseNtf::MergeFrom(const GateCloseNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GateCloseNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GateCloseNtf::CopyFrom(const GateCloseNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GateCloseNtf::IsInitialized() const {

  return true;
}

void GateCloseNtf::Swap(GateCloseNtf* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GateCloseNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GateCloseNtf_descriptor_;
  metadata.reflection = GateCloseNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int login_gt_req::kPlayeridFieldNumber;
const int login_gt_req::kAccountFieldNumber;
const int login_gt_req::kOldSessionidFieldNumber;
#endif  // !_MSC_VER

login_gt_req::login_gt_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void login_gt_req::InitAsDefaultInstance() {
}

login_gt_req::login_gt_req(const login_gt_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void login_gt_req::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_ULONGLONG(0);
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  old_sessionid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

login_gt_req::~login_gt_req() {
  SharedDtor();
}

void login_gt_req::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (this != default_instance_) {
  }
}

void login_gt_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* login_gt_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return login_gt_req_descriptor_;
}

const login_gt_req& login_gt_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_2eproto();
  return *default_instance_;
}

login_gt_req* login_gt_req::default_instance_ = NULL;

login_gt_req* login_gt_req::New() const {
  return new login_gt_req;
}

void login_gt_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_ULONGLONG(0);
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    old_sessionid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool login_gt_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }

      // optional string account = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_old_sessionid;
        break;
      }

      // optional uint32 old_sessionid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_old_sessionid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &old_sessionid_)));
          set_has_old_sessionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void login_gt_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->playerid(), output);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->account(), output);
  }

  // optional uint32 old_sessionid = 3;
  if (has_old_sessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->old_sessionid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* login_gt_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->playerid(), target);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account(), target);
  }

  // optional uint32 old_sessionid = 3;
  if (has_old_sessionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->old_sessionid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int login_gt_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

    // optional string account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional uint32 old_sessionid = 3;
    if (has_old_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->old_sessionid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void login_gt_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const login_gt_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const login_gt_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void login_gt_req::MergeFrom(const login_gt_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_old_sessionid()) {
      set_old_sessionid(from.old_sessionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void login_gt_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void login_gt_req::CopyFrom(const login_gt_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool login_gt_req::IsInitialized() const {

  return true;
}

void login_gt_req::Swap(login_gt_req* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(account_, other->account_);
    std::swap(old_sessionid_, other->old_sessionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata login_gt_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = login_gt_req_descriptor_;
  metadata.reflection = login_gt_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int login_gt_ack::kPlayeridFieldNumber;
const int login_gt_ack::kGateIpFieldNumber;
const int login_gt_ack::kGateportFieldNumber;
const int login_gt_ack::kGateKeyFieldNumber;
const int login_gt_ack::kErrNoFieldNumber;
#endif  // !_MSC_VER

login_gt_ack::login_gt_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void login_gt_ack::InitAsDefaultInstance() {
}

login_gt_ack::login_gt_ack(const login_gt_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void login_gt_ack::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_ULONGLONG(0);
  gate_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gateport_ = 0;
  gate_key_ = 0;
  err_no_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

login_gt_ack::~login_gt_ack() {
  SharedDtor();
}

void login_gt_ack::SharedDtor() {
  if (gate_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete gate_ip_;
  }
  if (this != default_instance_) {
  }
}

void login_gt_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* login_gt_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return login_gt_ack_descriptor_;
}

const login_gt_ack& login_gt_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_2eproto();
  return *default_instance_;
}

login_gt_ack* login_gt_ack::default_instance_ = NULL;

login_gt_ack* login_gt_ack::New() const {
  return new login_gt_ack;
}

void login_gt_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_ULONGLONG(0);
    if (has_gate_ip()) {
      if (gate_ip_ != &::google::protobuf::internal::kEmptyString) {
        gate_ip_->clear();
      }
    }
    gateport_ = 0;
    gate_key_ = 0;
    err_no_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool login_gt_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_gate_ip;
        break;
      }

      // optional string gate_ip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gate_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gate_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gate_ip().data(), this->gate_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gateport;
        break;
      }

      // optional int32 gateport = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gateport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gateport_)));
          set_has_gateport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_gate_key;
        break;
      }

      // optional int32 gate_key = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gate_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gate_key_)));
          set_has_gate_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_err_no;
        break;
      }

      // optional int32 err_no = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_err_no:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_no_)));
          set_has_err_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void login_gt_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->playerid(), output);
  }

  // optional string gate_ip = 2;
  if (has_gate_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gate_ip().data(), this->gate_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->gate_ip(), output);
  }

  // optional int32 gateport = 3;
  if (has_gateport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gateport(), output);
  }

  // optional int32 gate_key = 4;
  if (has_gate_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gate_key(), output);
  }

  // optional int32 err_no = 5;
  if (has_err_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->err_no(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* login_gt_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->playerid(), target);
  }

  // optional string gate_ip = 2;
  if (has_gate_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gate_ip().data(), this->gate_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->gate_ip(), target);
  }

  // optional int32 gateport = 3;
  if (has_gateport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gateport(), target);
  }

  // optional int32 gate_key = 4;
  if (has_gate_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gate_key(), target);
  }

  // optional int32 err_no = 5;
  if (has_err_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->err_no(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int login_gt_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

    // optional string gate_ip = 2;
    if (has_gate_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gate_ip());
    }

    // optional int32 gateport = 3;
    if (has_gateport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gateport());
    }

    // optional int32 gate_key = 4;
    if (has_gate_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gate_key());
    }

    // optional int32 err_no = 5;
    if (has_err_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err_no());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void login_gt_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const login_gt_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const login_gt_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void login_gt_ack::MergeFrom(const login_gt_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_gate_ip()) {
      set_gate_ip(from.gate_ip());
    }
    if (from.has_gateport()) {
      set_gateport(from.gateport());
    }
    if (from.has_gate_key()) {
      set_gate_key(from.gate_key());
    }
    if (from.has_err_no()) {
      set_err_no(from.err_no());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void login_gt_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void login_gt_ack::CopyFrom(const login_gt_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool login_gt_ack::IsInitialized() const {

  return true;
}

void login_gt_ack::Swap(login_gt_ack* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(gate_ip_, other->gate_ip_);
    std::swap(gateport_, other->gateport_);
    std::swap(gate_key_, other->gate_key_);
    std::swap(err_no_, other->err_no_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata login_gt_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = login_gt_ack_descriptor_;
  metadata.reflection = login_gt_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int client_number_rpt::kNumberFieldNumber;
const int client_number_rpt::kGateIdFieldNumber;
#endif  // !_MSC_VER

client_number_rpt::client_number_rpt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void client_number_rpt::InitAsDefaultInstance() {
}

client_number_rpt::client_number_rpt(const client_number_rpt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void client_number_rpt::SharedCtor() {
  _cached_size_ = 0;
  number_ = 0u;
  gate_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

client_number_rpt::~client_number_rpt() {
  SharedDtor();
}

void client_number_rpt::SharedDtor() {
  if (gate_id_ != &::google::protobuf::internal::kEmptyString) {
    delete gate_id_;
  }
  if (this != default_instance_) {
  }
}

void client_number_rpt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* client_number_rpt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return client_number_rpt_descriptor_;
}

const client_number_rpt& client_number_rpt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_2eproto();
  return *default_instance_;
}

client_number_rpt* client_number_rpt::default_instance_ = NULL;

client_number_rpt* client_number_rpt::New() const {
  return new client_number_rpt;
}

void client_number_rpt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    number_ = 0u;
    if (has_gate_id()) {
      if (gate_id_ != &::google::protobuf::internal::kEmptyString) {
        gate_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool client_number_rpt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 number = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_gate_id;
        break;
      }

      // optional string gate_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gate_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gate_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gate_id().data(), this->gate_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void client_number_rpt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 number = 1;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->number(), output);
  }

  // optional string gate_id = 2;
  if (has_gate_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gate_id().data(), this->gate_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->gate_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* client_number_rpt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 number = 1;
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->number(), target);
  }

  // optional string gate_id = 2;
  if (has_gate_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gate_id().data(), this->gate_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->gate_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int client_number_rpt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 number = 1;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->number());
    }

    // optional string gate_id = 2;
    if (has_gate_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gate_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void client_number_rpt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const client_number_rpt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const client_number_rpt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void client_number_rpt::MergeFrom(const client_number_rpt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_number()) {
      set_number(from.number());
    }
    if (from.has_gate_id()) {
      set_gate_id(from.gate_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void client_number_rpt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void client_number_rpt::CopyFrom(const client_number_rpt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool client_number_rpt::IsInitialized() const {

  return true;
}

void client_number_rpt::Swap(client_number_rpt* other) {
  if (other != this) {
    std::swap(number_, other->number_);
    std::swap(gate_id_, other->gate_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata client_number_rpt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = client_number_rpt_descriptor_;
  metadata.reflection = client_number_rpt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int client_login_gate_time_out_rpt::kPlayeridFieldNumber;
#endif  // !_MSC_VER

client_login_gate_time_out_rpt::client_login_gate_time_out_rpt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void client_login_gate_time_out_rpt::InitAsDefaultInstance() {
}

client_login_gate_time_out_rpt::client_login_gate_time_out_rpt(const client_login_gate_time_out_rpt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void client_login_gate_time_out_rpt::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

client_login_gate_time_out_rpt::~client_login_gate_time_out_rpt() {
  SharedDtor();
}

void client_login_gate_time_out_rpt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void client_login_gate_time_out_rpt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* client_login_gate_time_out_rpt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return client_login_gate_time_out_rpt_descriptor_;
}

const client_login_gate_time_out_rpt& client_login_gate_time_out_rpt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_2eproto();
  return *default_instance_;
}

client_login_gate_time_out_rpt* client_login_gate_time_out_rpt::default_instance_ = NULL;

client_login_gate_time_out_rpt* client_login_gate_time_out_rpt::New() const {
  return new client_login_gate_time_out_rpt;
}

void client_login_gate_time_out_rpt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool client_login_gate_time_out_rpt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void client_login_gate_time_out_rpt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* client_login_gate_time_out_rpt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int client_login_gate_time_out_rpt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void client_login_gate_time_out_rpt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const client_login_gate_time_out_rpt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const client_login_gate_time_out_rpt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void client_login_gate_time_out_rpt::MergeFrom(const client_login_gate_time_out_rpt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void client_login_gate_time_out_rpt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void client_login_gate_time_out_rpt::CopyFrom(const client_login_gate_time_out_rpt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool client_login_gate_time_out_rpt::IsInitialized() const {

  return true;
}

void client_login_gate_time_out_rpt::Swap(client_login_gate_time_out_rpt* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata client_login_gate_time_out_rpt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = client_login_gate_time_out_rpt_descriptor_;
  metadata.reflection = client_login_gate_time_out_rpt_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace gameserver_gate
}  // namespace protoc

// @@protoc_insertion_point(global_scope)
