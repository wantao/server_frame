// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: table_config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "table_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tableconfig {

namespace {

const ::google::protobuf::Descriptor* PlayerLevelRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerLevelRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* SPlayerLevelList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SPlayerLevelList_reflection_ = NULL;
const ::google::protobuf::Descriptor* WillLearnSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WillLearnSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* PetRecordCfg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetRecordCfg_reflection_ = NULL;
const ::google::protobuf::Descriptor* PetListCfg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetListCfg_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerPetNumber_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerPetNumber_reflection_ = NULL;
const ::google::protobuf::Descriptor* SPlayerPetNumberList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SPlayerPetNumberList_reflection_ = NULL;
const ::google::protobuf::Descriptor* ZhiYeIDNameRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ZhiYeIDNameRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* ZhiYeIDNameList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ZhiYeIDNameList_reflection_ = NULL;
const ::google::protobuf::Descriptor* PetClassIDName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetClassIDName_reflection_ = NULL;
const ::google::protobuf::Descriptor* PetClassIDNameList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetClassIDNameList_reflection_ = NULL;
const ::google::protobuf::Descriptor* PetSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* PetSkillList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetSkillList_reflection_ = NULL;
const ::google::protobuf::Descriptor* HurtEffect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HurtEffect_reflection_ = NULL;
const ::google::protobuf::Descriptor* NormalGoodsRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NormalGoodsRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* NormalGoodsList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NormalGoodsList_reflection_ = NULL;
const ::google::protobuf::Descriptor* PetSkillPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetSkillPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* PetSkillProList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetSkillProList_reflection_ = NULL;
const ::google::protobuf::Descriptor* PetZhaoHuan_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetZhaoHuan_reflection_ = NULL;
const ::google::protobuf::Descriptor* PetZhaoHuanList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetZhaoHuanList_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LEARN_KIND_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_table_5fconfig_2eproto() {
  protobuf_AddDesc_table_5fconfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "table_config.proto");
  GOOGLE_CHECK(file != NULL);
  PlayerLevelRecord_descriptor_ = file->message_type(0);
  static const int PlayerLevelRecord_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLevelRecord, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLevelRecord, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLevelRecord, mp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLevelRecord, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLevelRecord, spirit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLevelRecord, action_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLevelRecord, friend_count_),
  };
  PlayerLevelRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerLevelRecord_descriptor_,
      PlayerLevelRecord::default_instance_,
      PlayerLevelRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLevelRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLevelRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerLevelRecord));
  SPlayerLevelList_descriptor_ = file->message_type(1);
  static const int SPlayerLevelList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPlayerLevelList, record_),
  };
  SPlayerLevelList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SPlayerLevelList_descriptor_,
      SPlayerLevelList::default_instance_,
      SPlayerLevelList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPlayerLevelList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPlayerLevelList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SPlayerLevelList));
  WillLearnSkill_descriptor_ = file->message_type(2);
  static const int WillLearnSkill_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WillLearnSkill, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WillLearnSkill, prt_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WillLearnSkill, value_),
  };
  WillLearnSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WillLearnSkill_descriptor_,
      WillLearnSkill::default_instance_,
      WillLearnSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WillLearnSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WillLearnSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WillLearnSkill));
  PetRecordCfg_descriptor_ = file->message_type(3);
  static const int PetRecordCfg_offsets_[24] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetRecordCfg, kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetRecordCfg, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetRecordCfg, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetRecordCfg, limit_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetRecordCfg, desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetRecordCfg, pet_kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetRecordCfg, rare_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetRecordCfg, recover_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetRecordCfg, head_pic_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetRecordCfg, dps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetRecordCfg, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetRecordCfg, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetRecordCfg, tongshi_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetRecordCfg, action_skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetRecordCfg, leader_skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetRecordCfg, skills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetRecordCfg, bind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetRecordCfg, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetRecordCfg, spirit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetRecordCfg, mp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetRecordCfg, max_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetRecordCfg, zhiye_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetRecordCfg, evolve_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetRecordCfg, evolve_conditions_),
  };
  PetRecordCfg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetRecordCfg_descriptor_,
      PetRecordCfg::default_instance_,
      PetRecordCfg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetRecordCfg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetRecordCfg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetRecordCfg));
  PetListCfg_descriptor_ = file->message_type(4);
  static const int PetListCfg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetListCfg, record_),
  };
  PetListCfg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetListCfg_descriptor_,
      PetListCfg::default_instance_,
      PetListCfg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetListCfg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetListCfg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetListCfg));
  PlayerPetNumber_descriptor_ = file->message_type(5);
  static const int PlayerPetNumber_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerPetNumber, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerPetNumber, number_),
  };
  PlayerPetNumber_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerPetNumber_descriptor_,
      PlayerPetNumber::default_instance_,
      PlayerPetNumber_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerPetNumber, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerPetNumber, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerPetNumber));
  SPlayerPetNumberList_descriptor_ = file->message_type(6);
  static const int SPlayerPetNumberList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPlayerPetNumberList, record_),
  };
  SPlayerPetNumberList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SPlayerPetNumberList_descriptor_,
      SPlayerPetNumberList::default_instance_,
      SPlayerPetNumberList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPlayerPetNumberList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPlayerPetNumberList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SPlayerPetNumberList));
  ZhiYeIDNameRecord_descriptor_ = file->message_type(7);
  static const int ZhiYeIDNameRecord_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZhiYeIDNameRecord, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZhiYeIDNameRecord, name_),
  };
  ZhiYeIDNameRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ZhiYeIDNameRecord_descriptor_,
      ZhiYeIDNameRecord::default_instance_,
      ZhiYeIDNameRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZhiYeIDNameRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZhiYeIDNameRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ZhiYeIDNameRecord));
  ZhiYeIDNameList_descriptor_ = file->message_type(8);
  static const int ZhiYeIDNameList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZhiYeIDNameList, record_),
  };
  ZhiYeIDNameList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ZhiYeIDNameList_descriptor_,
      ZhiYeIDNameList::default_instance_,
      ZhiYeIDNameList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZhiYeIDNameList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZhiYeIDNameList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ZhiYeIDNameList));
  PetClassIDName_descriptor_ = file->message_type(9);
  static const int PetClassIDName_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetClassIDName, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetClassIDName, name_),
  };
  PetClassIDName_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetClassIDName_descriptor_,
      PetClassIDName::default_instance_,
      PetClassIDName_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetClassIDName, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetClassIDName, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetClassIDName));
  PetClassIDNameList_descriptor_ = file->message_type(10);
  static const int PetClassIDNameList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetClassIDNameList, record_),
  };
  PetClassIDNameList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetClassIDNameList_descriptor_,
      PetClassIDNameList::default_instance_,
      PetClassIDNameList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetClassIDNameList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetClassIDNameList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetClassIDNameList));
  PetSkill_descriptor_ = file->message_type(11);
  static const int PetSkill_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetSkill, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetSkill, skill_range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetSkill, skill_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetSkill, skill_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetSkill, skill_desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetSkill, x1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetSkill, x2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetSkill, x3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetSkill, x4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetSkill, x5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetSkill, x6_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetSkill, x7_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetSkill, x8_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetSkill, x9_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetSkill, x10_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetSkill, maxlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetSkill, cooltime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetSkill, leader_type_),
  };
  PetSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetSkill_descriptor_,
      PetSkill::default_instance_,
      PetSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetSkill));
  PetSkillList_descriptor_ = file->message_type(12);
  static const int PetSkillList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetSkillList, record_),
  };
  PetSkillList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetSkillList_descriptor_,
      PetSkillList::default_instance_,
      PetSkillList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetSkillList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetSkillList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetSkillList));
  HurtEffect_descriptor_ = file->message_type(13);
  static const int HurtEffect_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HurtEffect, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HurtEffect, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HurtEffect, value_),
  };
  HurtEffect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HurtEffect_descriptor_,
      HurtEffect::default_instance_,
      HurtEffect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HurtEffect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HurtEffect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HurtEffect));
  NormalGoodsRecord_descriptor_ = file->message_type(14);
  static const int NormalGoodsRecord_offsets_[21] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalGoodsRecord, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalGoodsRecord, kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalGoodsRecord, kind_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalGoodsRecord, limit_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalGoodsRecord, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalGoodsRecord, desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalGoodsRecord, pet_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalGoodsRecord, ping_zhi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalGoodsRecord, hole_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalGoodsRecord, chip_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalGoodsRecord, chip_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalGoodsRecord, gem_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalGoodsRecord, gem_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalGoodsRecord, gem_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalGoodsRecord, jinjie_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalGoodsRecord, jinjie_mohe_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalGoodsRecord, jinjie_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalGoodsRecord, effects_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalGoodsRecord, can_put_on_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalGoodsRecord, produce_place_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalGoodsRecord, can_streng_material_),
  };
  NormalGoodsRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NormalGoodsRecord_descriptor_,
      NormalGoodsRecord::default_instance_,
      NormalGoodsRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalGoodsRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalGoodsRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NormalGoodsRecord));
  NormalGoodsList_descriptor_ = file->message_type(15);
  static const int NormalGoodsList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalGoodsList, record_),
  };
  NormalGoodsList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NormalGoodsList_descriptor_,
      NormalGoodsList::default_instance_,
      NormalGoodsList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalGoodsList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalGoodsList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NormalGoodsList));
  PetSkillPro_descriptor_ = file->message_type(16);
  static const int PetSkillPro_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetSkillPro, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetSkillPro, skill_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetSkillPro, inc_hurt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetSkillPro, inc_hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetSkillPro, dec_hurt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetSkillPro, huifu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetSkillPro, baoji_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetSkillPro, baoji_hurt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetSkillPro, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetSkillPro, zhan_dou_li_),
  };
  PetSkillPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetSkillPro_descriptor_,
      PetSkillPro::default_instance_,
      PetSkillPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetSkillPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetSkillPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetSkillPro));
  PetSkillProList_descriptor_ = file->message_type(17);
  static const int PetSkillProList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetSkillProList, record_),
  };
  PetSkillProList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetSkillProList_descriptor_,
      PetSkillProList::default_instance_,
      PetSkillProList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetSkillProList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetSkillProList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetSkillProList));
  PetZhaoHuan_descriptor_ = file->message_type(18);
  static const int PetZhaoHuan_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetZhaoHuan, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetZhaoHuan, rare_val_),
  };
  PetZhaoHuan_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetZhaoHuan_descriptor_,
      PetZhaoHuan::default_instance_,
      PetZhaoHuan_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetZhaoHuan, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetZhaoHuan, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetZhaoHuan));
  PetZhaoHuanList_descriptor_ = file->message_type(19);
  static const int PetZhaoHuanList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetZhaoHuanList, record_),
  };
  PetZhaoHuanList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetZhaoHuanList_descriptor_,
      PetZhaoHuanList::default_instance_,
      PetZhaoHuanList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetZhaoHuanList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetZhaoHuanList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetZhaoHuanList));
  LEARN_KIND_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_table_5fconfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerLevelRecord_descriptor_, &PlayerLevelRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SPlayerLevelList_descriptor_, &SPlayerLevelList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WillLearnSkill_descriptor_, &WillLearnSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetRecordCfg_descriptor_, &PetRecordCfg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetListCfg_descriptor_, &PetListCfg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerPetNumber_descriptor_, &PlayerPetNumber::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SPlayerPetNumberList_descriptor_, &SPlayerPetNumberList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ZhiYeIDNameRecord_descriptor_, &ZhiYeIDNameRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ZhiYeIDNameList_descriptor_, &ZhiYeIDNameList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetClassIDName_descriptor_, &PetClassIDName::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetClassIDNameList_descriptor_, &PetClassIDNameList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetSkill_descriptor_, &PetSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetSkillList_descriptor_, &PetSkillList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HurtEffect_descriptor_, &HurtEffect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NormalGoodsRecord_descriptor_, &NormalGoodsRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NormalGoodsList_descriptor_, &NormalGoodsList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetSkillPro_descriptor_, &PetSkillPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetSkillProList_descriptor_, &PetSkillProList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetZhaoHuan_descriptor_, &PetZhaoHuan::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetZhaoHuanList_descriptor_, &PetZhaoHuanList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_table_5fconfig_2eproto() {
  delete PlayerLevelRecord::default_instance_;
  delete PlayerLevelRecord_reflection_;
  delete SPlayerLevelList::default_instance_;
  delete SPlayerLevelList_reflection_;
  delete WillLearnSkill::default_instance_;
  delete WillLearnSkill_reflection_;
  delete PetRecordCfg::default_instance_;
  delete PetRecordCfg_reflection_;
  delete PetListCfg::default_instance_;
  delete PetListCfg_reflection_;
  delete PlayerPetNumber::default_instance_;
  delete PlayerPetNumber_reflection_;
  delete SPlayerPetNumberList::default_instance_;
  delete SPlayerPetNumberList_reflection_;
  delete ZhiYeIDNameRecord::default_instance_;
  delete ZhiYeIDNameRecord_reflection_;
  delete ZhiYeIDNameList::default_instance_;
  delete ZhiYeIDNameList_reflection_;
  delete PetClassIDName::default_instance_;
  delete PetClassIDName_reflection_;
  delete PetClassIDNameList::default_instance_;
  delete PetClassIDNameList_reflection_;
  delete PetSkill::default_instance_;
  delete PetSkill_reflection_;
  delete PetSkillList::default_instance_;
  delete PetSkillList_reflection_;
  delete HurtEffect::default_instance_;
  delete HurtEffect_reflection_;
  delete NormalGoodsRecord::default_instance_;
  delete NormalGoodsRecord_reflection_;
  delete NormalGoodsList::default_instance_;
  delete NormalGoodsList_reflection_;
  delete PetSkillPro::default_instance_;
  delete PetSkillPro_reflection_;
  delete PetSkillProList::default_instance_;
  delete PetSkillProList_reflection_;
  delete PetZhaoHuan::default_instance_;
  delete PetZhaoHuan_reflection_;
  delete PetZhaoHuanList::default_instance_;
  delete PetZhaoHuanList_reflection_;
}

void protobuf_AddDesc_table_5fconfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_options_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022table_config.proto\022\013tableconfig\032\roptio"
    "ns.proto\"\203\001\n\021PlayerLevelRecord\022\r\n\005level\030"
    "\001 \001(\005\022\013\n\003exp\030\002 \001(\r\022\n\n\002mp\030\003 \001(\r\022\n\n\002hp\030\004 \001"
    "(\r\022\016\n\006spirit\030\005 \001(\r\022\024\n\014action_count\030\006 \001(\r"
    "\022\024\n\014friend_count\030\007 \001(\r\"B\n\020SPlayerLevelLi"
    "st\022.\n\006record\030\001 \003(\0132\036.tableconfig.PlayerL"
    "evelRecord\"Z\n\016WillLearnSkill\022\020\n\010skill_id"
    "\030\001 \001(\r\022\'\n\006prt_id\030\002 \001(\0162\027.tableconfig.LEA"
    "RN_KIND\022\r\n\005value\030\003 \001(\r\"\277\003\n\014PetRecordCfg\022"
    "\014\n\004kind\030\001 \001(\005\022\n\n\002id\030\002 \001(\005\022\014\n\004name\030\003 \001(\t\022"
    "\024\n\014limit_number\030\004 \001(\005\022\014\n\004desc\030\005 \001(\t\022\020\n\010p"
    "et_kind\030\006 \001(\005\022\014\n\004rare\030\007 \001(\005\022\017\n\007recover\030\010"
    " \001(\r\022\023\n\013head_pic_id\030\t \001(\r\022\013\n\003dps\030\n \001(\002\022\n"
    "\n\002hp\030\013 \001(\r\022\r\n\005level\030\014 \001(\r\022\023\n\013tongshi_exp"
    "\030\r \001(\r\022\024\n\014action_skill\030\016 \001(\r\022\024\n\014leader_s"
    "kill\030\017 \001(\r\022+\n\006skills\030\020 \003(\0132\033.tableconfig"
    ".WillLearnSkill\022\014\n\004bind\030\021 \001(\005\022\r\n\005speed\030\022"
    " \001(\r\022\016\n\006spirit\030\023 \001(\r\022\n\n\002mp\030\024 \001(\r\022\021\n\tmax_"
    "level\030\025 \001(\r\022\r\n\005zhiye\030\026 \001(\r\022\021\n\tevolve_id\030"
    "\027 \001(\r\022\031\n\021evolve_conditions\030\030 \003(\r\"7\n\nPetL"
    "istCfg\022)\n\006record\030\001 \003(\0132\031.tableconfig.Pet"
    "RecordCfg\"0\n\017PlayerPetNumber\022\r\n\005level\030\001 "
    "\001(\005\022\016\n\006number\030\002 \001(\r\"D\n\024SPlayerPetNumberL"
    "ist\022,\n\006record\030\001 \003(\0132\034.tableconfig.Player"
    "PetNumber\"-\n\021ZhiYeIDNameRecord\022\n\n\002id\030\001 \001"
    "(\005\022\014\n\004name\030\002 \001(\t\"A\n\017ZhiYeIDNameList\022.\n\006r"
    "ecord\030\001 \003(\0132\036.tableconfig.ZhiYeIDNameRec"
    "ord\"*\n\016PetClassIDName\022\n\n\002id\030\001 \001(\005\022\014\n\004nam"
    "e\030\002 \001(\t\"A\n\022PetClassIDNameList\022+\n\006record\030"
    "\001 \003(\0132\033.tableconfig.PetClassIDName\"\236\002\n\010P"
    "etSkill\022\017\n\007skillid\030\001 \001(\005\022\023\n\013skill_range\030"
    "\002 \001(\005\022\022\n\nskill_type\030\003 \001(\005\022\022\n\nskill_name\030"
    "\004 \001(\t\022\022\n\nskill_desc\030\005 \001(\t\022\n\n\002x1\030\006 \001(\002\022\n\n"
    "\002x2\030\007 \001(\002\022\n\n\002x3\030\010 \001(\002\022\n\n\002x4\030\t \001(\002\022\n\n\002x5\030"
    "\n \001(\002\022\n\n\002x6\030\013 \001(\002\022\n\n\002x7\030\014 \001(\002\022\n\n\002x8\030\r \001("
    "\002\022\n\n\002x9\030\016 \001(\002\022\013\n\003x10\030\017 \001(\002\022\020\n\010maxlevel\030\020"
    " \001(\005\022\020\n\010cooltime\030\021 \001(\005\022\023\n\013leader_type\030\022 "
    "\001(\005\"5\n\014PetSkillList\022%\n\006record\030\001 \003(\0132\025.ta"
    "bleconfig.PetSkill\"6\n\nHurtEffect\022\013\n\003pos\030"
    "\001 \001(\r\022\014\n\004type\030\002 \001(\r\022\r\n\005value\030\003 \001(\002\"\266\003\n\021N"
    "ormalGoodsRecord\022\n\n\002id\030\001 \001(\r\022\014\n\004kind\030\002 \001"
    "(\r\022\021\n\tkind_type\030\003 \001(\r\022\024\n\014limit_number\030\004 "
    "\001(\r\022\014\n\004name\030\005 \001(\t\022\014\n\004desc\030\006 \001(\t\022\021\n\tpet_l"
    "evel\030\007 \001(\r\022\020\n\010ping_zhi\030\010 \001(\r\022\014\n\004hole\030\t \001"
    "(\r\022\023\n\013chip_number\030\n \001(\r\022\017\n\007chip_id\030\013 \001(\r"
    "\022\021\n\tgem_level\030\014 \001(\r\022\022\n\ngem_number\030\r \001(\r\022"
    "\016\n\006gem_id\030\016 \001(\r\022\025\n\rjinjie_number\030\017 \001(\r\022\026"
    "\n\016jinjie_mohe_id\030\020 \001(\r\022\021\n\tjinjie_id\030\021 \001("
    "\r\022(\n\007effects\030\022 \003(\0132\027.tableconfig.HurtEff"
    "ect\022\022\n\ncan_put_on\030\023 \001(\010\022\025\n\rproduce_place"
    "\030\024 \001(\t\022\033\n\023can_streng_material\030\025 \001(\010\"A\n\017N"
    "ormalGoodsList\022.\n\006record\030\001 \003(\0132\036.tableco"
    "nfig.NormalGoodsRecord\"\301\001\n\013PetSkillPro\022\020"
    "\n\010skill_id\030\001 \001(\005\022\023\n\013skill_level\030\002 \001(\005\022\020\n"
    "\010inc_hurt\030\003 \001(\002\022\016\n\006inc_hp\030\004 \001(\002\022\020\n\010dec_h"
    "urt\030\005 \001(\002\022\r\n\005huifu\030\006 \001(\002\022\020\n\010baoji_lv\030\007 \001"
    "(\002\022\022\n\nbaoji_hurt\030\010 \001(\002\022\r\n\005speed\030\t \001(\002\022\023\n"
    "\013zhan_dou_li\030\n \001(\005\";\n\017PetSkillProList\022(\n"
    "\006record\030\001 \003(\0132\030.tableconfig.PetSkillPro\""
    ".\n\013PetZhaoHuan\022\r\n\005level\030\001 \001(\005\022\020\n\010rare_va"
    "l\030\002 \003(\005\";\n\017PetZhaoHuanList\022(\n\006record\030\001 \003"
    "(\0132\030.tableconfig.PetZhaoHuan*\'\n\nLEARN_KI"
    "ND\022\014\n\010e_no_pro\020\000\022\013\n\007e_level\020\001", 2509);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "table_config.proto", &protobuf_RegisterTypes);
  PlayerLevelRecord::default_instance_ = new PlayerLevelRecord();
  SPlayerLevelList::default_instance_ = new SPlayerLevelList();
  WillLearnSkill::default_instance_ = new WillLearnSkill();
  PetRecordCfg::default_instance_ = new PetRecordCfg();
  PetListCfg::default_instance_ = new PetListCfg();
  PlayerPetNumber::default_instance_ = new PlayerPetNumber();
  SPlayerPetNumberList::default_instance_ = new SPlayerPetNumberList();
  ZhiYeIDNameRecord::default_instance_ = new ZhiYeIDNameRecord();
  ZhiYeIDNameList::default_instance_ = new ZhiYeIDNameList();
  PetClassIDName::default_instance_ = new PetClassIDName();
  PetClassIDNameList::default_instance_ = new PetClassIDNameList();
  PetSkill::default_instance_ = new PetSkill();
  PetSkillList::default_instance_ = new PetSkillList();
  HurtEffect::default_instance_ = new HurtEffect();
  NormalGoodsRecord::default_instance_ = new NormalGoodsRecord();
  NormalGoodsList::default_instance_ = new NormalGoodsList();
  PetSkillPro::default_instance_ = new PetSkillPro();
  PetSkillProList::default_instance_ = new PetSkillProList();
  PetZhaoHuan::default_instance_ = new PetZhaoHuan();
  PetZhaoHuanList::default_instance_ = new PetZhaoHuanList();
  PlayerLevelRecord::default_instance_->InitAsDefaultInstance();
  SPlayerLevelList::default_instance_->InitAsDefaultInstance();
  WillLearnSkill::default_instance_->InitAsDefaultInstance();
  PetRecordCfg::default_instance_->InitAsDefaultInstance();
  PetListCfg::default_instance_->InitAsDefaultInstance();
  PlayerPetNumber::default_instance_->InitAsDefaultInstance();
  SPlayerPetNumberList::default_instance_->InitAsDefaultInstance();
  ZhiYeIDNameRecord::default_instance_->InitAsDefaultInstance();
  ZhiYeIDNameList::default_instance_->InitAsDefaultInstance();
  PetClassIDName::default_instance_->InitAsDefaultInstance();
  PetClassIDNameList::default_instance_->InitAsDefaultInstance();
  PetSkill::default_instance_->InitAsDefaultInstance();
  PetSkillList::default_instance_->InitAsDefaultInstance();
  HurtEffect::default_instance_->InitAsDefaultInstance();
  NormalGoodsRecord::default_instance_->InitAsDefaultInstance();
  NormalGoodsList::default_instance_->InitAsDefaultInstance();
  PetSkillPro::default_instance_->InitAsDefaultInstance();
  PetSkillProList::default_instance_->InitAsDefaultInstance();
  PetZhaoHuan::default_instance_->InitAsDefaultInstance();
  PetZhaoHuanList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_table_5fconfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_table_5fconfig_2eproto {
  StaticDescriptorInitializer_table_5fconfig_2eproto() {
    protobuf_AddDesc_table_5fconfig_2eproto();
  }
} static_descriptor_initializer_table_5fconfig_2eproto_;
const ::google::protobuf::EnumDescriptor* LEARN_KIND_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LEARN_KIND_descriptor_;
}
bool LEARN_KIND_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerLevelRecord::kLevelFieldNumber;
const int PlayerLevelRecord::kExpFieldNumber;
const int PlayerLevelRecord::kMpFieldNumber;
const int PlayerLevelRecord::kHpFieldNumber;
const int PlayerLevelRecord::kSpiritFieldNumber;
const int PlayerLevelRecord::kActionCountFieldNumber;
const int PlayerLevelRecord::kFriendCountFieldNumber;
#endif  // !_MSC_VER

PlayerLevelRecord::PlayerLevelRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerLevelRecord::InitAsDefaultInstance() {
}

PlayerLevelRecord::PlayerLevelRecord(const PlayerLevelRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerLevelRecord::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0;
  exp_ = 0u;
  mp_ = 0u;
  hp_ = 0u;
  spirit_ = 0u;
  action_count_ = 0u;
  friend_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerLevelRecord::~PlayerLevelRecord() {
  SharedDtor();
}

void PlayerLevelRecord::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerLevelRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerLevelRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerLevelRecord_descriptor_;
}

const PlayerLevelRecord& PlayerLevelRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_table_5fconfig_2eproto();
  return *default_instance_;
}

PlayerLevelRecord* PlayerLevelRecord::default_instance_ = NULL;

PlayerLevelRecord* PlayerLevelRecord::New() const {
  return new PlayerLevelRecord;
}

void PlayerLevelRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0;
    exp_ = 0u;
    mp_ = 0u;
    hp_ = 0u;
    spirit_ = 0u;
    action_count_ = 0u;
    friend_count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerLevelRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_exp;
        break;
      }

      // optional uint32 exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mp;
        break;
      }

      // optional uint32 mp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mp_)));
          set_has_mp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_hp;
        break;
      }

      // optional uint32 hp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_spirit;
        break;
      }

      // optional uint32 spirit = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_spirit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spirit_)));
          set_has_spirit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_action_count;
        break;
      }

      // optional uint32 action_count = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &action_count_)));
          set_has_action_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_friend_count;
        break;
      }

      // optional uint32 friend_count = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_friend_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &friend_count_)));
          set_has_friend_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerLevelRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }

  // optional uint32 exp = 2;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->exp(), output);
  }

  // optional uint32 mp = 3;
  if (has_mp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mp(), output);
  }

  // optional uint32 hp = 4;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->hp(), output);
  }

  // optional uint32 spirit = 5;
  if (has_spirit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->spirit(), output);
  }

  // optional uint32 action_count = 6;
  if (has_action_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->action_count(), output);
  }

  // optional uint32 friend_count = 7;
  if (has_friend_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->friend_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerLevelRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }

  // optional uint32 exp = 2;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->exp(), target);
  }

  // optional uint32 mp = 3;
  if (has_mp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mp(), target);
  }

  // optional uint32 hp = 4;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->hp(), target);
  }

  // optional uint32 spirit = 5;
  if (has_spirit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->spirit(), target);
  }

  // optional uint32 action_count = 6;
  if (has_action_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->action_count(), target);
  }

  // optional uint32 friend_count = 7;
  if (has_friend_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->friend_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerLevelRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional uint32 exp = 2;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

    // optional uint32 mp = 3;
    if (has_mp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mp());
    }

    // optional uint32 hp = 4;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hp());
    }

    // optional uint32 spirit = 5;
    if (has_spirit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->spirit());
    }

    // optional uint32 action_count = 6;
    if (has_action_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->action_count());
    }

    // optional uint32 friend_count = 7;
    if (has_friend_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->friend_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerLevelRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerLevelRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerLevelRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerLevelRecord::MergeFrom(const PlayerLevelRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_mp()) {
      set_mp(from.mp());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_spirit()) {
      set_spirit(from.spirit());
    }
    if (from.has_action_count()) {
      set_action_count(from.action_count());
    }
    if (from.has_friend_count()) {
      set_friend_count(from.friend_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerLevelRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerLevelRecord::CopyFrom(const PlayerLevelRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerLevelRecord::IsInitialized() const {

  return true;
}

void PlayerLevelRecord::Swap(PlayerLevelRecord* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(mp_, other->mp_);
    std::swap(hp_, other->hp_);
    std::swap(spirit_, other->spirit_);
    std::swap(action_count_, other->action_count_);
    std::swap(friend_count_, other->friend_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerLevelRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerLevelRecord_descriptor_;
  metadata.reflection = PlayerLevelRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SPlayerLevelList::kRecordFieldNumber;
#endif  // !_MSC_VER

SPlayerLevelList::SPlayerLevelList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SPlayerLevelList::InitAsDefaultInstance() {
}

SPlayerLevelList::SPlayerLevelList(const SPlayerLevelList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SPlayerLevelList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SPlayerLevelList::~SPlayerLevelList() {
  SharedDtor();
}

void SPlayerLevelList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SPlayerLevelList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SPlayerLevelList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SPlayerLevelList_descriptor_;
}

const SPlayerLevelList& SPlayerLevelList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_table_5fconfig_2eproto();
  return *default_instance_;
}

SPlayerLevelList* SPlayerLevelList::default_instance_ = NULL;

SPlayerLevelList* SPlayerLevelList::New() const {
  return new SPlayerLevelList;
}

void SPlayerLevelList::Clear() {
  record_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SPlayerLevelList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tableconfig.PlayerLevelRecord record = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_record()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_record;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SPlayerLevelList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .tableconfig.PlayerLevelRecord record = 1;
  for (int i = 0; i < this->record_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->record(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SPlayerLevelList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .tableconfig.PlayerLevelRecord record = 1;
  for (int i = 0; i < this->record_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->record(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SPlayerLevelList::ByteSize() const {
  int total_size = 0;

  // repeated .tableconfig.PlayerLevelRecord record = 1;
  total_size += 1 * this->record_size();
  for (int i = 0; i < this->record_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->record(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SPlayerLevelList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SPlayerLevelList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SPlayerLevelList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SPlayerLevelList::MergeFrom(const SPlayerLevelList& from) {
  GOOGLE_CHECK_NE(&from, this);
  record_.MergeFrom(from.record_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SPlayerLevelList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SPlayerLevelList::CopyFrom(const SPlayerLevelList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SPlayerLevelList::IsInitialized() const {

  return true;
}

void SPlayerLevelList::Swap(SPlayerLevelList* other) {
  if (other != this) {
    record_.Swap(&other->record_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SPlayerLevelList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SPlayerLevelList_descriptor_;
  metadata.reflection = SPlayerLevelList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WillLearnSkill::kSkillIdFieldNumber;
const int WillLearnSkill::kPrtIdFieldNumber;
const int WillLearnSkill::kValueFieldNumber;
#endif  // !_MSC_VER

WillLearnSkill::WillLearnSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WillLearnSkill::InitAsDefaultInstance() {
}

WillLearnSkill::WillLearnSkill(const WillLearnSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WillLearnSkill::SharedCtor() {
  _cached_size_ = 0;
  skill_id_ = 0u;
  prt_id_ = 0;
  value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WillLearnSkill::~WillLearnSkill() {
  SharedDtor();
}

void WillLearnSkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WillLearnSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WillLearnSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WillLearnSkill_descriptor_;
}

const WillLearnSkill& WillLearnSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_table_5fconfig_2eproto();
  return *default_instance_;
}

WillLearnSkill* WillLearnSkill::default_instance_ = NULL;

WillLearnSkill* WillLearnSkill::New() const {
  return new WillLearnSkill;
}

void WillLearnSkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skill_id_ = 0u;
    prt_id_ = 0;
    value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WillLearnSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 skill_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_prt_id;
        break;
      }

      // optional .tableconfig.LEARN_KIND prt_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prt_id:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::tableconfig::LEARN_KIND_IsValid(value)) {
            set_prt_id(static_cast< ::tableconfig::LEARN_KIND >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_value;
        break;
      }

      // optional uint32 value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WillLearnSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 skill_id = 1;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->skill_id(), output);
  }

  // optional .tableconfig.LEARN_KIND prt_id = 2;
  if (has_prt_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->prt_id(), output);
  }

  // optional uint32 value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WillLearnSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 skill_id = 1;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->skill_id(), target);
  }

  // optional .tableconfig.LEARN_KIND prt_id = 2;
  if (has_prt_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->prt_id(), target);
  }

  // optional uint32 value = 3;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WillLearnSkill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 skill_id = 1;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_id());
    }

    // optional .tableconfig.LEARN_KIND prt_id = 2;
    if (has_prt_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->prt_id());
    }

    // optional uint32 value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WillLearnSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WillLearnSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WillLearnSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WillLearnSkill::MergeFrom(const WillLearnSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_prt_id()) {
      set_prt_id(from.prt_id());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WillLearnSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WillLearnSkill::CopyFrom(const WillLearnSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WillLearnSkill::IsInitialized() const {

  return true;
}

void WillLearnSkill::Swap(WillLearnSkill* other) {
  if (other != this) {
    std::swap(skill_id_, other->skill_id_);
    std::swap(prt_id_, other->prt_id_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WillLearnSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WillLearnSkill_descriptor_;
  metadata.reflection = WillLearnSkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PetRecordCfg::kKindFieldNumber;
const int PetRecordCfg::kIdFieldNumber;
const int PetRecordCfg::kNameFieldNumber;
const int PetRecordCfg::kLimitNumberFieldNumber;
const int PetRecordCfg::kDescFieldNumber;
const int PetRecordCfg::kPetKindFieldNumber;
const int PetRecordCfg::kRareFieldNumber;
const int PetRecordCfg::kRecoverFieldNumber;
const int PetRecordCfg::kHeadPicIdFieldNumber;
const int PetRecordCfg::kDpsFieldNumber;
const int PetRecordCfg::kHpFieldNumber;
const int PetRecordCfg::kLevelFieldNumber;
const int PetRecordCfg::kTongshiExpFieldNumber;
const int PetRecordCfg::kActionSkillFieldNumber;
const int PetRecordCfg::kLeaderSkillFieldNumber;
const int PetRecordCfg::kSkillsFieldNumber;
const int PetRecordCfg::kBindFieldNumber;
const int PetRecordCfg::kSpeedFieldNumber;
const int PetRecordCfg::kSpiritFieldNumber;
const int PetRecordCfg::kMpFieldNumber;
const int PetRecordCfg::kMaxLevelFieldNumber;
const int PetRecordCfg::kZhiyeFieldNumber;
const int PetRecordCfg::kEvolveIdFieldNumber;
const int PetRecordCfg::kEvolveConditionsFieldNumber;
#endif  // !_MSC_VER

PetRecordCfg::PetRecordCfg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PetRecordCfg::InitAsDefaultInstance() {
}

PetRecordCfg::PetRecordCfg(const PetRecordCfg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PetRecordCfg::SharedCtor() {
  _cached_size_ = 0;
  kind_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  limit_number_ = 0;
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pet_kind_ = 0;
  rare_ = 0;
  recover_ = 0u;
  head_pic_id_ = 0u;
  dps_ = 0;
  hp_ = 0u;
  level_ = 0u;
  tongshi_exp_ = 0u;
  action_skill_ = 0u;
  leader_skill_ = 0u;
  bind_ = 0;
  speed_ = 0u;
  spirit_ = 0u;
  mp_ = 0u;
  max_level_ = 0u;
  zhiye_ = 0u;
  evolve_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetRecordCfg::~PetRecordCfg() {
  SharedDtor();
}

void PetRecordCfg::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (this != default_instance_) {
  }
}

void PetRecordCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetRecordCfg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetRecordCfg_descriptor_;
}

const PetRecordCfg& PetRecordCfg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_table_5fconfig_2eproto();
  return *default_instance_;
}

PetRecordCfg* PetRecordCfg::default_instance_ = NULL;

PetRecordCfg* PetRecordCfg::New() const {
  return new PetRecordCfg;
}

void PetRecordCfg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    kind_ = 0;
    id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    limit_number_ = 0;
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::kEmptyString) {
        desc_->clear();
      }
    }
    pet_kind_ = 0;
    rare_ = 0;
    recover_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    head_pic_id_ = 0u;
    dps_ = 0;
    hp_ = 0u;
    level_ = 0u;
    tongshi_exp_ = 0u;
    action_skill_ = 0u;
    leader_skill_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    bind_ = 0;
    speed_ = 0u;
    spirit_ = 0u;
    mp_ = 0u;
    max_level_ = 0u;
    zhiye_ = 0u;
    evolve_id_ = 0u;
  }
  skills_.Clear();
  evolve_conditions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetRecordCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 kind = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kind_)));
          set_has_kind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_limit_number;
        break;
      }

      // optional int32 limit_number = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_limit_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_number_)));
          set_has_limit_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_desc;
        break;
      }

      // optional string desc = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_pet_kind;
        break;
      }

      // optional int32 pet_kind = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pet_kind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pet_kind_)));
          set_has_pet_kind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_rare;
        break;
      }

      // optional int32 rare = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rare:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rare_)));
          set_has_rare();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_recover;
        break;
      }

      // optional uint32 recover = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recover:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recover_)));
          set_has_recover();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_head_pic_id;
        break;
      }

      // optional uint32 head_pic_id = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_head_pic_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &head_pic_id_)));
          set_has_head_pic_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_dps;
        break;
      }

      // optional float dps = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dps_)));
          set_has_dps();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_hp;
        break;
      }

      // optional uint32 hp = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_level;
        break;
      }

      // optional uint32 level = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_tongshi_exp;
        break;
      }

      // optional uint32 tongshi_exp = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tongshi_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tongshi_exp_)));
          set_has_tongshi_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_action_skill;
        break;
      }

      // optional uint32 action_skill = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action_skill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &action_skill_)));
          set_has_action_skill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_leader_skill;
        break;
      }

      // optional uint32 leader_skill = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leader_skill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leader_skill_)));
          set_has_leader_skill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_skills;
        break;
      }

      // repeated .tableconfig.WillLearnSkill skills = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skills:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skills()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_skills;
        if (input->ExpectTag(136)) goto parse_bind;
        break;
      }

      // optional int32 bind = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bind_)));
          set_has_bind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_speed;
        break;
      }

      // optional uint32 speed = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_spirit;
        break;
      }

      // optional uint32 spirit = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_spirit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spirit_)));
          set_has_spirit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_mp;
        break;
      }

      // optional uint32 mp = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mp_)));
          set_has_mp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_max_level;
        break;
      }

      // optional uint32 max_level = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_level_)));
          set_has_max_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_zhiye;
        break;
      }

      // optional uint32 zhiye = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zhiye:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zhiye_)));
          set_has_zhiye();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_evolve_id;
        break;
      }

      // optional uint32 evolve_id = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_evolve_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &evolve_id_)));
          set_has_evolve_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_evolve_conditions;
        break;
      }

      // repeated uint32 evolve_conditions = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_evolve_conditions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 192, input, this->mutable_evolve_conditions())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_evolve_conditions())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_evolve_conditions;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PetRecordCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 kind = 1;
  if (has_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->kind(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // optional int32 limit_number = 4;
  if (has_limit_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->limit_number(), output);
  }

  // optional string desc = 5;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->desc(), output);
  }

  // optional int32 pet_kind = 6;
  if (has_pet_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->pet_kind(), output);
  }

  // optional int32 rare = 7;
  if (has_rare()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->rare(), output);
  }

  // optional uint32 recover = 8;
  if (has_recover()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->recover(), output);
  }

  // optional uint32 head_pic_id = 9;
  if (has_head_pic_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->head_pic_id(), output);
  }

  // optional float dps = 10;
  if (has_dps()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->dps(), output);
  }

  // optional uint32 hp = 11;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->hp(), output);
  }

  // optional uint32 level = 12;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->level(), output);
  }

  // optional uint32 tongshi_exp = 13;
  if (has_tongshi_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->tongshi_exp(), output);
  }

  // optional uint32 action_skill = 14;
  if (has_action_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->action_skill(), output);
  }

  // optional uint32 leader_skill = 15;
  if (has_leader_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->leader_skill(), output);
  }

  // repeated .tableconfig.WillLearnSkill skills = 16;
  for (int i = 0; i < this->skills_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->skills(i), output);
  }

  // optional int32 bind = 17;
  if (has_bind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->bind(), output);
  }

  // optional uint32 speed = 18;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->speed(), output);
  }

  // optional uint32 spirit = 19;
  if (has_spirit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->spirit(), output);
  }

  // optional uint32 mp = 20;
  if (has_mp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->mp(), output);
  }

  // optional uint32 max_level = 21;
  if (has_max_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->max_level(), output);
  }

  // optional uint32 zhiye = 22;
  if (has_zhiye()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->zhiye(), output);
  }

  // optional uint32 evolve_id = 23;
  if (has_evolve_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->evolve_id(), output);
  }

  // repeated uint32 evolve_conditions = 24;
  for (int i = 0; i < this->evolve_conditions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      24, this->evolve_conditions(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PetRecordCfg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 kind = 1;
  if (has_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->kind(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional int32 limit_number = 4;
  if (has_limit_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->limit_number(), target);
  }

  // optional string desc = 5;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->desc(), target);
  }

  // optional int32 pet_kind = 6;
  if (has_pet_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->pet_kind(), target);
  }

  // optional int32 rare = 7;
  if (has_rare()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->rare(), target);
  }

  // optional uint32 recover = 8;
  if (has_recover()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->recover(), target);
  }

  // optional uint32 head_pic_id = 9;
  if (has_head_pic_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->head_pic_id(), target);
  }

  // optional float dps = 10;
  if (has_dps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->dps(), target);
  }

  // optional uint32 hp = 11;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->hp(), target);
  }

  // optional uint32 level = 12;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->level(), target);
  }

  // optional uint32 tongshi_exp = 13;
  if (has_tongshi_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->tongshi_exp(), target);
  }

  // optional uint32 action_skill = 14;
  if (has_action_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->action_skill(), target);
  }

  // optional uint32 leader_skill = 15;
  if (has_leader_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->leader_skill(), target);
  }

  // repeated .tableconfig.WillLearnSkill skills = 16;
  for (int i = 0; i < this->skills_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->skills(i), target);
  }

  // optional int32 bind = 17;
  if (has_bind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->bind(), target);
  }

  // optional uint32 speed = 18;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->speed(), target);
  }

  // optional uint32 spirit = 19;
  if (has_spirit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->spirit(), target);
  }

  // optional uint32 mp = 20;
  if (has_mp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->mp(), target);
  }

  // optional uint32 max_level = 21;
  if (has_max_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->max_level(), target);
  }

  // optional uint32 zhiye = 22;
  if (has_zhiye()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->zhiye(), target);
  }

  // optional uint32 evolve_id = 23;
  if (has_evolve_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->evolve_id(), target);
  }

  // repeated uint32 evolve_conditions = 24;
  for (int i = 0; i < this->evolve_conditions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(24, this->evolve_conditions(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PetRecordCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 kind = 1;
    if (has_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kind());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 limit_number = 4;
    if (has_limit_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->limit_number());
    }

    // optional string desc = 5;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

    // optional int32 pet_kind = 6;
    if (has_pet_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pet_kind());
    }

    // optional int32 rare = 7;
    if (has_rare()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rare());
    }

    // optional uint32 recover = 8;
    if (has_recover()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recover());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 head_pic_id = 9;
    if (has_head_pic_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->head_pic_id());
    }

    // optional float dps = 10;
    if (has_dps()) {
      total_size += 1 + 4;
    }

    // optional uint32 hp = 11;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hp());
    }

    // optional uint32 level = 12;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 tongshi_exp = 13;
    if (has_tongshi_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tongshi_exp());
    }

    // optional uint32 action_skill = 14;
    if (has_action_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->action_skill());
    }

    // optional uint32 leader_skill = 15;
    if (has_leader_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leader_skill());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 bind = 17;
    if (has_bind()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bind());
    }

    // optional uint32 speed = 18;
    if (has_speed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->speed());
    }

    // optional uint32 spirit = 19;
    if (has_spirit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->spirit());
    }

    // optional uint32 mp = 20;
    if (has_mp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mp());
    }

    // optional uint32 max_level = 21;
    if (has_max_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_level());
    }

    // optional uint32 zhiye = 22;
    if (has_zhiye()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zhiye());
    }

    // optional uint32 evolve_id = 23;
    if (has_evolve_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->evolve_id());
    }

  }
  // repeated .tableconfig.WillLearnSkill skills = 16;
  total_size += 2 * this->skills_size();
  for (int i = 0; i < this->skills_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skills(i));
  }

  // repeated uint32 evolve_conditions = 24;
  {
    int data_size = 0;
    for (int i = 0; i < this->evolve_conditions_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->evolve_conditions(i));
    }
    total_size += 2 * this->evolve_conditions_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetRecordCfg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetRecordCfg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetRecordCfg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetRecordCfg::MergeFrom(const PetRecordCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  skills_.MergeFrom(from.skills_);
  evolve_conditions_.MergeFrom(from.evolve_conditions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_kind()) {
      set_kind(from.kind());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_limit_number()) {
      set_limit_number(from.limit_number());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
    if (from.has_pet_kind()) {
      set_pet_kind(from.pet_kind());
    }
    if (from.has_rare()) {
      set_rare(from.rare());
    }
    if (from.has_recover()) {
      set_recover(from.recover());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_head_pic_id()) {
      set_head_pic_id(from.head_pic_id());
    }
    if (from.has_dps()) {
      set_dps(from.dps());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_tongshi_exp()) {
      set_tongshi_exp(from.tongshi_exp());
    }
    if (from.has_action_skill()) {
      set_action_skill(from.action_skill());
    }
    if (from.has_leader_skill()) {
      set_leader_skill(from.leader_skill());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_bind()) {
      set_bind(from.bind());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_spirit()) {
      set_spirit(from.spirit());
    }
    if (from.has_mp()) {
      set_mp(from.mp());
    }
    if (from.has_max_level()) {
      set_max_level(from.max_level());
    }
    if (from.has_zhiye()) {
      set_zhiye(from.zhiye());
    }
    if (from.has_evolve_id()) {
      set_evolve_id(from.evolve_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetRecordCfg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetRecordCfg::CopyFrom(const PetRecordCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetRecordCfg::IsInitialized() const {

  return true;
}

void PetRecordCfg::Swap(PetRecordCfg* other) {
  if (other != this) {
    std::swap(kind_, other->kind_);
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(limit_number_, other->limit_number_);
    std::swap(desc_, other->desc_);
    std::swap(pet_kind_, other->pet_kind_);
    std::swap(rare_, other->rare_);
    std::swap(recover_, other->recover_);
    std::swap(head_pic_id_, other->head_pic_id_);
    std::swap(dps_, other->dps_);
    std::swap(hp_, other->hp_);
    std::swap(level_, other->level_);
    std::swap(tongshi_exp_, other->tongshi_exp_);
    std::swap(action_skill_, other->action_skill_);
    std::swap(leader_skill_, other->leader_skill_);
    skills_.Swap(&other->skills_);
    std::swap(bind_, other->bind_);
    std::swap(speed_, other->speed_);
    std::swap(spirit_, other->spirit_);
    std::swap(mp_, other->mp_);
    std::swap(max_level_, other->max_level_);
    std::swap(zhiye_, other->zhiye_);
    std::swap(evolve_id_, other->evolve_id_);
    evolve_conditions_.Swap(&other->evolve_conditions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetRecordCfg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetRecordCfg_descriptor_;
  metadata.reflection = PetRecordCfg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PetListCfg::kRecordFieldNumber;
#endif  // !_MSC_VER

PetListCfg::PetListCfg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PetListCfg::InitAsDefaultInstance() {
}

PetListCfg::PetListCfg(const PetListCfg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PetListCfg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetListCfg::~PetListCfg() {
  SharedDtor();
}

void PetListCfg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PetListCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetListCfg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetListCfg_descriptor_;
}

const PetListCfg& PetListCfg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_table_5fconfig_2eproto();
  return *default_instance_;
}

PetListCfg* PetListCfg::default_instance_ = NULL;

PetListCfg* PetListCfg::New() const {
  return new PetListCfg;
}

void PetListCfg::Clear() {
  record_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetListCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tableconfig.PetRecordCfg record = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_record()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_record;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PetListCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .tableconfig.PetRecordCfg record = 1;
  for (int i = 0; i < this->record_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->record(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PetListCfg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .tableconfig.PetRecordCfg record = 1;
  for (int i = 0; i < this->record_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->record(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PetListCfg::ByteSize() const {
  int total_size = 0;

  // repeated .tableconfig.PetRecordCfg record = 1;
  total_size += 1 * this->record_size();
  for (int i = 0; i < this->record_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->record(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetListCfg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetListCfg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetListCfg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetListCfg::MergeFrom(const PetListCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  record_.MergeFrom(from.record_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetListCfg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetListCfg::CopyFrom(const PetListCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetListCfg::IsInitialized() const {

  return true;
}

void PetListCfg::Swap(PetListCfg* other) {
  if (other != this) {
    record_.Swap(&other->record_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetListCfg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetListCfg_descriptor_;
  metadata.reflection = PetListCfg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerPetNumber::kLevelFieldNumber;
const int PlayerPetNumber::kNumberFieldNumber;
#endif  // !_MSC_VER

PlayerPetNumber::PlayerPetNumber()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerPetNumber::InitAsDefaultInstance() {
}

PlayerPetNumber::PlayerPetNumber(const PlayerPetNumber& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerPetNumber::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0;
  number_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerPetNumber::~PlayerPetNumber() {
  SharedDtor();
}

void PlayerPetNumber::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerPetNumber::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerPetNumber::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerPetNumber_descriptor_;
}

const PlayerPetNumber& PlayerPetNumber::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_table_5fconfig_2eproto();
  return *default_instance_;
}

PlayerPetNumber* PlayerPetNumber::default_instance_ = NULL;

PlayerPetNumber* PlayerPetNumber::New() const {
  return new PlayerPetNumber;
}

void PlayerPetNumber::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0;
    number_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerPetNumber::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_number;
        break;
      }

      // optional uint32 number = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerPetNumber::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }

  // optional uint32 number = 2;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->number(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerPetNumber::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }

  // optional uint32 number = 2;
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->number(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerPetNumber::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional uint32 number = 2;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->number());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerPetNumber::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerPetNumber* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerPetNumber*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerPetNumber::MergeFrom(const PlayerPetNumber& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_number()) {
      set_number(from.number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerPetNumber::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerPetNumber::CopyFrom(const PlayerPetNumber& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerPetNumber::IsInitialized() const {

  return true;
}

void PlayerPetNumber::Swap(PlayerPetNumber* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(number_, other->number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerPetNumber::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerPetNumber_descriptor_;
  metadata.reflection = PlayerPetNumber_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SPlayerPetNumberList::kRecordFieldNumber;
#endif  // !_MSC_VER

SPlayerPetNumberList::SPlayerPetNumberList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SPlayerPetNumberList::InitAsDefaultInstance() {
}

SPlayerPetNumberList::SPlayerPetNumberList(const SPlayerPetNumberList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SPlayerPetNumberList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SPlayerPetNumberList::~SPlayerPetNumberList() {
  SharedDtor();
}

void SPlayerPetNumberList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SPlayerPetNumberList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SPlayerPetNumberList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SPlayerPetNumberList_descriptor_;
}

const SPlayerPetNumberList& SPlayerPetNumberList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_table_5fconfig_2eproto();
  return *default_instance_;
}

SPlayerPetNumberList* SPlayerPetNumberList::default_instance_ = NULL;

SPlayerPetNumberList* SPlayerPetNumberList::New() const {
  return new SPlayerPetNumberList;
}

void SPlayerPetNumberList::Clear() {
  record_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SPlayerPetNumberList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tableconfig.PlayerPetNumber record = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_record()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_record;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SPlayerPetNumberList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .tableconfig.PlayerPetNumber record = 1;
  for (int i = 0; i < this->record_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->record(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SPlayerPetNumberList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .tableconfig.PlayerPetNumber record = 1;
  for (int i = 0; i < this->record_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->record(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SPlayerPetNumberList::ByteSize() const {
  int total_size = 0;

  // repeated .tableconfig.PlayerPetNumber record = 1;
  total_size += 1 * this->record_size();
  for (int i = 0; i < this->record_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->record(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SPlayerPetNumberList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SPlayerPetNumberList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SPlayerPetNumberList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SPlayerPetNumberList::MergeFrom(const SPlayerPetNumberList& from) {
  GOOGLE_CHECK_NE(&from, this);
  record_.MergeFrom(from.record_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SPlayerPetNumberList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SPlayerPetNumberList::CopyFrom(const SPlayerPetNumberList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SPlayerPetNumberList::IsInitialized() const {

  return true;
}

void SPlayerPetNumberList::Swap(SPlayerPetNumberList* other) {
  if (other != this) {
    record_.Swap(&other->record_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SPlayerPetNumberList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SPlayerPetNumberList_descriptor_;
  metadata.reflection = SPlayerPetNumberList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ZhiYeIDNameRecord::kIdFieldNumber;
const int ZhiYeIDNameRecord::kNameFieldNumber;
#endif  // !_MSC_VER

ZhiYeIDNameRecord::ZhiYeIDNameRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ZhiYeIDNameRecord::InitAsDefaultInstance() {
}

ZhiYeIDNameRecord::ZhiYeIDNameRecord(const ZhiYeIDNameRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ZhiYeIDNameRecord::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ZhiYeIDNameRecord::~ZhiYeIDNameRecord() {
  SharedDtor();
}

void ZhiYeIDNameRecord::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ZhiYeIDNameRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ZhiYeIDNameRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZhiYeIDNameRecord_descriptor_;
}

const ZhiYeIDNameRecord& ZhiYeIDNameRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_table_5fconfig_2eproto();
  return *default_instance_;
}

ZhiYeIDNameRecord* ZhiYeIDNameRecord::default_instance_ = NULL;

ZhiYeIDNameRecord* ZhiYeIDNameRecord::New() const {
  return new ZhiYeIDNameRecord;
}

void ZhiYeIDNameRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ZhiYeIDNameRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ZhiYeIDNameRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ZhiYeIDNameRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ZhiYeIDNameRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ZhiYeIDNameRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ZhiYeIDNameRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ZhiYeIDNameRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ZhiYeIDNameRecord::MergeFrom(const ZhiYeIDNameRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ZhiYeIDNameRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZhiYeIDNameRecord::CopyFrom(const ZhiYeIDNameRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZhiYeIDNameRecord::IsInitialized() const {

  return true;
}

void ZhiYeIDNameRecord::Swap(ZhiYeIDNameRecord* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ZhiYeIDNameRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ZhiYeIDNameRecord_descriptor_;
  metadata.reflection = ZhiYeIDNameRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ZhiYeIDNameList::kRecordFieldNumber;
#endif  // !_MSC_VER

ZhiYeIDNameList::ZhiYeIDNameList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ZhiYeIDNameList::InitAsDefaultInstance() {
}

ZhiYeIDNameList::ZhiYeIDNameList(const ZhiYeIDNameList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ZhiYeIDNameList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ZhiYeIDNameList::~ZhiYeIDNameList() {
  SharedDtor();
}

void ZhiYeIDNameList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ZhiYeIDNameList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ZhiYeIDNameList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZhiYeIDNameList_descriptor_;
}

const ZhiYeIDNameList& ZhiYeIDNameList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_table_5fconfig_2eproto();
  return *default_instance_;
}

ZhiYeIDNameList* ZhiYeIDNameList::default_instance_ = NULL;

ZhiYeIDNameList* ZhiYeIDNameList::New() const {
  return new ZhiYeIDNameList;
}

void ZhiYeIDNameList::Clear() {
  record_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ZhiYeIDNameList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tableconfig.ZhiYeIDNameRecord record = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_record()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_record;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ZhiYeIDNameList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .tableconfig.ZhiYeIDNameRecord record = 1;
  for (int i = 0; i < this->record_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->record(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ZhiYeIDNameList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .tableconfig.ZhiYeIDNameRecord record = 1;
  for (int i = 0; i < this->record_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->record(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ZhiYeIDNameList::ByteSize() const {
  int total_size = 0;

  // repeated .tableconfig.ZhiYeIDNameRecord record = 1;
  total_size += 1 * this->record_size();
  for (int i = 0; i < this->record_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->record(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ZhiYeIDNameList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ZhiYeIDNameList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ZhiYeIDNameList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ZhiYeIDNameList::MergeFrom(const ZhiYeIDNameList& from) {
  GOOGLE_CHECK_NE(&from, this);
  record_.MergeFrom(from.record_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ZhiYeIDNameList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZhiYeIDNameList::CopyFrom(const ZhiYeIDNameList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZhiYeIDNameList::IsInitialized() const {

  return true;
}

void ZhiYeIDNameList::Swap(ZhiYeIDNameList* other) {
  if (other != this) {
    record_.Swap(&other->record_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ZhiYeIDNameList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ZhiYeIDNameList_descriptor_;
  metadata.reflection = ZhiYeIDNameList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PetClassIDName::kIdFieldNumber;
const int PetClassIDName::kNameFieldNumber;
#endif  // !_MSC_VER

PetClassIDName::PetClassIDName()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PetClassIDName::InitAsDefaultInstance() {
}

PetClassIDName::PetClassIDName(const PetClassIDName& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PetClassIDName::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetClassIDName::~PetClassIDName() {
  SharedDtor();
}

void PetClassIDName::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void PetClassIDName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetClassIDName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetClassIDName_descriptor_;
}

const PetClassIDName& PetClassIDName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_table_5fconfig_2eproto();
  return *default_instance_;
}

PetClassIDName* PetClassIDName::default_instance_ = NULL;

PetClassIDName* PetClassIDName::New() const {
  return new PetClassIDName;
}

void PetClassIDName::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetClassIDName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PetClassIDName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PetClassIDName::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PetClassIDName::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetClassIDName::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetClassIDName* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetClassIDName*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetClassIDName::MergeFrom(const PetClassIDName& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetClassIDName::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetClassIDName::CopyFrom(const PetClassIDName& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetClassIDName::IsInitialized() const {

  return true;
}

void PetClassIDName::Swap(PetClassIDName* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetClassIDName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetClassIDName_descriptor_;
  metadata.reflection = PetClassIDName_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PetClassIDNameList::kRecordFieldNumber;
#endif  // !_MSC_VER

PetClassIDNameList::PetClassIDNameList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PetClassIDNameList::InitAsDefaultInstance() {
}

PetClassIDNameList::PetClassIDNameList(const PetClassIDNameList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PetClassIDNameList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetClassIDNameList::~PetClassIDNameList() {
  SharedDtor();
}

void PetClassIDNameList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PetClassIDNameList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetClassIDNameList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetClassIDNameList_descriptor_;
}

const PetClassIDNameList& PetClassIDNameList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_table_5fconfig_2eproto();
  return *default_instance_;
}

PetClassIDNameList* PetClassIDNameList::default_instance_ = NULL;

PetClassIDNameList* PetClassIDNameList::New() const {
  return new PetClassIDNameList;
}

void PetClassIDNameList::Clear() {
  record_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetClassIDNameList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tableconfig.PetClassIDName record = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_record()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_record;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PetClassIDNameList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .tableconfig.PetClassIDName record = 1;
  for (int i = 0; i < this->record_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->record(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PetClassIDNameList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .tableconfig.PetClassIDName record = 1;
  for (int i = 0; i < this->record_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->record(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PetClassIDNameList::ByteSize() const {
  int total_size = 0;

  // repeated .tableconfig.PetClassIDName record = 1;
  total_size += 1 * this->record_size();
  for (int i = 0; i < this->record_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->record(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetClassIDNameList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetClassIDNameList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetClassIDNameList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetClassIDNameList::MergeFrom(const PetClassIDNameList& from) {
  GOOGLE_CHECK_NE(&from, this);
  record_.MergeFrom(from.record_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetClassIDNameList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetClassIDNameList::CopyFrom(const PetClassIDNameList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetClassIDNameList::IsInitialized() const {

  return true;
}

void PetClassIDNameList::Swap(PetClassIDNameList* other) {
  if (other != this) {
    record_.Swap(&other->record_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetClassIDNameList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetClassIDNameList_descriptor_;
  metadata.reflection = PetClassIDNameList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PetSkill::kSkillidFieldNumber;
const int PetSkill::kSkillRangeFieldNumber;
const int PetSkill::kSkillTypeFieldNumber;
const int PetSkill::kSkillNameFieldNumber;
const int PetSkill::kSkillDescFieldNumber;
const int PetSkill::kX1FieldNumber;
const int PetSkill::kX2FieldNumber;
const int PetSkill::kX3FieldNumber;
const int PetSkill::kX4FieldNumber;
const int PetSkill::kX5FieldNumber;
const int PetSkill::kX6FieldNumber;
const int PetSkill::kX7FieldNumber;
const int PetSkill::kX8FieldNumber;
const int PetSkill::kX9FieldNumber;
const int PetSkill::kX10FieldNumber;
const int PetSkill::kMaxlevelFieldNumber;
const int PetSkill::kCooltimeFieldNumber;
const int PetSkill::kLeaderTypeFieldNumber;
#endif  // !_MSC_VER

PetSkill::PetSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PetSkill::InitAsDefaultInstance() {
}

PetSkill::PetSkill(const PetSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PetSkill::SharedCtor() {
  _cached_size_ = 0;
  skillid_ = 0;
  skill_range_ = 0;
  skill_type_ = 0;
  skill_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  skill_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  x1_ = 0;
  x2_ = 0;
  x3_ = 0;
  x4_ = 0;
  x5_ = 0;
  x6_ = 0;
  x7_ = 0;
  x8_ = 0;
  x9_ = 0;
  x10_ = 0;
  maxlevel_ = 0;
  cooltime_ = 0;
  leader_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetSkill::~PetSkill() {
  SharedDtor();
}

void PetSkill::SharedDtor() {
  if (skill_name_ != &::google::protobuf::internal::kEmptyString) {
    delete skill_name_;
  }
  if (skill_desc_ != &::google::protobuf::internal::kEmptyString) {
    delete skill_desc_;
  }
  if (this != default_instance_) {
  }
}

void PetSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetSkill_descriptor_;
}

const PetSkill& PetSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_table_5fconfig_2eproto();
  return *default_instance_;
}

PetSkill* PetSkill::default_instance_ = NULL;

PetSkill* PetSkill::New() const {
  return new PetSkill;
}

void PetSkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skillid_ = 0;
    skill_range_ = 0;
    skill_type_ = 0;
    if (has_skill_name()) {
      if (skill_name_ != &::google::protobuf::internal::kEmptyString) {
        skill_name_->clear();
      }
    }
    if (has_skill_desc()) {
      if (skill_desc_ != &::google::protobuf::internal::kEmptyString) {
        skill_desc_->clear();
      }
    }
    x1_ = 0;
    x2_ = 0;
    x3_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    x4_ = 0;
    x5_ = 0;
    x6_ = 0;
    x7_ = 0;
    x8_ = 0;
    x9_ = 0;
    x10_ = 0;
    maxlevel_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    cooltime_ = 0;
    leader_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 skillid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skill_range;
        break;
      }

      // optional int32 skill_range = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_range:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_range_)));
          set_has_skill_range();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_skill_type;
        break;
      }

      // optional int32 skill_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_type_)));
          set_has_skill_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_skill_name;
        break;
      }

      // optional string skill_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_skill_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->skill_name().data(), this->skill_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_skill_desc;
        break;
      }

      // optional string skill_desc = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_skill_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->skill_desc().data(), this->skill_desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_x1;
        break;
      }

      // optional float x1 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_x1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x1_)));
          set_has_x1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_x2;
        break;
      }

      // optional float x2 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_x2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x2_)));
          set_has_x2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_x3;
        break;
      }

      // optional float x3 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_x3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x3_)));
          set_has_x3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_x4;
        break;
      }

      // optional float x4 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_x4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x4_)));
          set_has_x4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_x5;
        break;
      }

      // optional float x5 = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_x5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x5_)));
          set_has_x5();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_x6;
        break;
      }

      // optional float x6 = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_x6:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x6_)));
          set_has_x6();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_x7;
        break;
      }

      // optional float x7 = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_x7:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x7_)));
          set_has_x7();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_x8;
        break;
      }

      // optional float x8 = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_x8:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x8_)));
          set_has_x8();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(117)) goto parse_x9;
        break;
      }

      // optional float x9 = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_x9:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x9_)));
          set_has_x9();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(125)) goto parse_x10;
        break;
      }

      // optional float x10 = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_x10:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x10_)));
          set_has_x10();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_maxlevel;
        break;
      }

      // optional int32 maxlevel = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxlevel_)));
          set_has_maxlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_cooltime;
        break;
      }

      // optional int32 cooltime = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cooltime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cooltime_)));
          set_has_cooltime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_leader_type;
        break;
      }

      // optional int32 leader_type = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leader_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leader_type_)));
          set_has_leader_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PetSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 skillid = 1;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->skillid(), output);
  }

  // optional int32 skill_range = 2;
  if (has_skill_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->skill_range(), output);
  }

  // optional int32 skill_type = 3;
  if (has_skill_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->skill_type(), output);
  }

  // optional string skill_name = 4;
  if (has_skill_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->skill_name().data(), this->skill_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->skill_name(), output);
  }

  // optional string skill_desc = 5;
  if (has_skill_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->skill_desc().data(), this->skill_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->skill_desc(), output);
  }

  // optional float x1 = 6;
  if (has_x1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->x1(), output);
  }

  // optional float x2 = 7;
  if (has_x2()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->x2(), output);
  }

  // optional float x3 = 8;
  if (has_x3()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->x3(), output);
  }

  // optional float x4 = 9;
  if (has_x4()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->x4(), output);
  }

  // optional float x5 = 10;
  if (has_x5()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->x5(), output);
  }

  // optional float x6 = 11;
  if (has_x6()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->x6(), output);
  }

  // optional float x7 = 12;
  if (has_x7()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->x7(), output);
  }

  // optional float x8 = 13;
  if (has_x8()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->x8(), output);
  }

  // optional float x9 = 14;
  if (has_x9()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->x9(), output);
  }

  // optional float x10 = 15;
  if (has_x10()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->x10(), output);
  }

  // optional int32 maxlevel = 16;
  if (has_maxlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->maxlevel(), output);
  }

  // optional int32 cooltime = 17;
  if (has_cooltime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->cooltime(), output);
  }

  // optional int32 leader_type = 18;
  if (has_leader_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->leader_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PetSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 skillid = 1;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->skillid(), target);
  }

  // optional int32 skill_range = 2;
  if (has_skill_range()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->skill_range(), target);
  }

  // optional int32 skill_type = 3;
  if (has_skill_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->skill_type(), target);
  }

  // optional string skill_name = 4;
  if (has_skill_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->skill_name().data(), this->skill_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->skill_name(), target);
  }

  // optional string skill_desc = 5;
  if (has_skill_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->skill_desc().data(), this->skill_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->skill_desc(), target);
  }

  // optional float x1 = 6;
  if (has_x1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->x1(), target);
  }

  // optional float x2 = 7;
  if (has_x2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->x2(), target);
  }

  // optional float x3 = 8;
  if (has_x3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->x3(), target);
  }

  // optional float x4 = 9;
  if (has_x4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->x4(), target);
  }

  // optional float x5 = 10;
  if (has_x5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->x5(), target);
  }

  // optional float x6 = 11;
  if (has_x6()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->x6(), target);
  }

  // optional float x7 = 12;
  if (has_x7()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->x7(), target);
  }

  // optional float x8 = 13;
  if (has_x8()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->x8(), target);
  }

  // optional float x9 = 14;
  if (has_x9()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->x9(), target);
  }

  // optional float x10 = 15;
  if (has_x10()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->x10(), target);
  }

  // optional int32 maxlevel = 16;
  if (has_maxlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->maxlevel(), target);
  }

  // optional int32 cooltime = 17;
  if (has_cooltime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->cooltime(), target);
  }

  // optional int32 leader_type = 18;
  if (has_leader_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->leader_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PetSkill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 skillid = 1;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillid());
    }

    // optional int32 skill_range = 2;
    if (has_skill_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_range());
    }

    // optional int32 skill_type = 3;
    if (has_skill_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_type());
    }

    // optional string skill_name = 4;
    if (has_skill_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->skill_name());
    }

    // optional string skill_desc = 5;
    if (has_skill_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->skill_desc());
    }

    // optional float x1 = 6;
    if (has_x1()) {
      total_size += 1 + 4;
    }

    // optional float x2 = 7;
    if (has_x2()) {
      total_size += 1 + 4;
    }

    // optional float x3 = 8;
    if (has_x3()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float x4 = 9;
    if (has_x4()) {
      total_size += 1 + 4;
    }

    // optional float x5 = 10;
    if (has_x5()) {
      total_size += 1 + 4;
    }

    // optional float x6 = 11;
    if (has_x6()) {
      total_size += 1 + 4;
    }

    // optional float x7 = 12;
    if (has_x7()) {
      total_size += 1 + 4;
    }

    // optional float x8 = 13;
    if (has_x8()) {
      total_size += 1 + 4;
    }

    // optional float x9 = 14;
    if (has_x9()) {
      total_size += 1 + 4;
    }

    // optional float x10 = 15;
    if (has_x10()) {
      total_size += 1 + 4;
    }

    // optional int32 maxlevel = 16;
    if (has_maxlevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxlevel());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 cooltime = 17;
    if (has_cooltime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cooltime());
    }

    // optional int32 leader_type = 18;
    if (has_leader_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leader_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetSkill::MergeFrom(const PetSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_skill_range()) {
      set_skill_range(from.skill_range());
    }
    if (from.has_skill_type()) {
      set_skill_type(from.skill_type());
    }
    if (from.has_skill_name()) {
      set_skill_name(from.skill_name());
    }
    if (from.has_skill_desc()) {
      set_skill_desc(from.skill_desc());
    }
    if (from.has_x1()) {
      set_x1(from.x1());
    }
    if (from.has_x2()) {
      set_x2(from.x2());
    }
    if (from.has_x3()) {
      set_x3(from.x3());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_x4()) {
      set_x4(from.x4());
    }
    if (from.has_x5()) {
      set_x5(from.x5());
    }
    if (from.has_x6()) {
      set_x6(from.x6());
    }
    if (from.has_x7()) {
      set_x7(from.x7());
    }
    if (from.has_x8()) {
      set_x8(from.x8());
    }
    if (from.has_x9()) {
      set_x9(from.x9());
    }
    if (from.has_x10()) {
      set_x10(from.x10());
    }
    if (from.has_maxlevel()) {
      set_maxlevel(from.maxlevel());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_cooltime()) {
      set_cooltime(from.cooltime());
    }
    if (from.has_leader_type()) {
      set_leader_type(from.leader_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetSkill::CopyFrom(const PetSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetSkill::IsInitialized() const {

  return true;
}

void PetSkill::Swap(PetSkill* other) {
  if (other != this) {
    std::swap(skillid_, other->skillid_);
    std::swap(skill_range_, other->skill_range_);
    std::swap(skill_type_, other->skill_type_);
    std::swap(skill_name_, other->skill_name_);
    std::swap(skill_desc_, other->skill_desc_);
    std::swap(x1_, other->x1_);
    std::swap(x2_, other->x2_);
    std::swap(x3_, other->x3_);
    std::swap(x4_, other->x4_);
    std::swap(x5_, other->x5_);
    std::swap(x6_, other->x6_);
    std::swap(x7_, other->x7_);
    std::swap(x8_, other->x8_);
    std::swap(x9_, other->x9_);
    std::swap(x10_, other->x10_);
    std::swap(maxlevel_, other->maxlevel_);
    std::swap(cooltime_, other->cooltime_);
    std::swap(leader_type_, other->leader_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetSkill_descriptor_;
  metadata.reflection = PetSkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PetSkillList::kRecordFieldNumber;
#endif  // !_MSC_VER

PetSkillList::PetSkillList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PetSkillList::InitAsDefaultInstance() {
}

PetSkillList::PetSkillList(const PetSkillList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PetSkillList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetSkillList::~PetSkillList() {
  SharedDtor();
}

void PetSkillList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PetSkillList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetSkillList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetSkillList_descriptor_;
}

const PetSkillList& PetSkillList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_table_5fconfig_2eproto();
  return *default_instance_;
}

PetSkillList* PetSkillList::default_instance_ = NULL;

PetSkillList* PetSkillList::New() const {
  return new PetSkillList;
}

void PetSkillList::Clear() {
  record_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetSkillList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tableconfig.PetSkill record = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_record()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_record;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PetSkillList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .tableconfig.PetSkill record = 1;
  for (int i = 0; i < this->record_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->record(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PetSkillList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .tableconfig.PetSkill record = 1;
  for (int i = 0; i < this->record_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->record(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PetSkillList::ByteSize() const {
  int total_size = 0;

  // repeated .tableconfig.PetSkill record = 1;
  total_size += 1 * this->record_size();
  for (int i = 0; i < this->record_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->record(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetSkillList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetSkillList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetSkillList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetSkillList::MergeFrom(const PetSkillList& from) {
  GOOGLE_CHECK_NE(&from, this);
  record_.MergeFrom(from.record_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetSkillList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetSkillList::CopyFrom(const PetSkillList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetSkillList::IsInitialized() const {

  return true;
}

void PetSkillList::Swap(PetSkillList* other) {
  if (other != this) {
    record_.Swap(&other->record_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetSkillList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetSkillList_descriptor_;
  metadata.reflection = PetSkillList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HurtEffect::kPosFieldNumber;
const int HurtEffect::kTypeFieldNumber;
const int HurtEffect::kValueFieldNumber;
#endif  // !_MSC_VER

HurtEffect::HurtEffect()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HurtEffect::InitAsDefaultInstance() {
}

HurtEffect::HurtEffect(const HurtEffect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HurtEffect::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0u;
  type_ = 0u;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HurtEffect::~HurtEffect() {
  SharedDtor();
}

void HurtEffect::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HurtEffect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HurtEffect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HurtEffect_descriptor_;
}

const HurtEffect& HurtEffect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_table_5fconfig_2eproto();
  return *default_instance_;
}

HurtEffect* HurtEffect::default_instance_ = NULL;

HurtEffect* HurtEffect::New() const {
  return new HurtEffect;
}

void HurtEffect::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pos_ = 0u;
    type_ = 0u;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HurtEffect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional uint32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_value;
        break;
      }

      // optional float value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HurtEffect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pos(), output);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // optional float value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HurtEffect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pos(), target);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // optional float value = 3;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HurtEffect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

    // optional uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional float value = 3;
    if (has_value()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HurtEffect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HurtEffect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HurtEffect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HurtEffect::MergeFrom(const HurtEffect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HurtEffect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HurtEffect::CopyFrom(const HurtEffect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HurtEffect::IsInitialized() const {

  return true;
}

void HurtEffect::Swap(HurtEffect* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HurtEffect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HurtEffect_descriptor_;
  metadata.reflection = HurtEffect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NormalGoodsRecord::kIdFieldNumber;
const int NormalGoodsRecord::kKindFieldNumber;
const int NormalGoodsRecord::kKindTypeFieldNumber;
const int NormalGoodsRecord::kLimitNumberFieldNumber;
const int NormalGoodsRecord::kNameFieldNumber;
const int NormalGoodsRecord::kDescFieldNumber;
const int NormalGoodsRecord::kPetLevelFieldNumber;
const int NormalGoodsRecord::kPingZhiFieldNumber;
const int NormalGoodsRecord::kHoleFieldNumber;
const int NormalGoodsRecord::kChipNumberFieldNumber;
const int NormalGoodsRecord::kChipIdFieldNumber;
const int NormalGoodsRecord::kGemLevelFieldNumber;
const int NormalGoodsRecord::kGemNumberFieldNumber;
const int NormalGoodsRecord::kGemIdFieldNumber;
const int NormalGoodsRecord::kJinjieNumberFieldNumber;
const int NormalGoodsRecord::kJinjieMoheIdFieldNumber;
const int NormalGoodsRecord::kJinjieIdFieldNumber;
const int NormalGoodsRecord::kEffectsFieldNumber;
const int NormalGoodsRecord::kCanPutOnFieldNumber;
const int NormalGoodsRecord::kProducePlaceFieldNumber;
const int NormalGoodsRecord::kCanStrengMaterialFieldNumber;
#endif  // !_MSC_VER

NormalGoodsRecord::NormalGoodsRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NormalGoodsRecord::InitAsDefaultInstance() {
}

NormalGoodsRecord::NormalGoodsRecord(const NormalGoodsRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NormalGoodsRecord::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  kind_ = 0u;
  kind_type_ = 0u;
  limit_number_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pet_level_ = 0u;
  ping_zhi_ = 0u;
  hole_ = 0u;
  chip_number_ = 0u;
  chip_id_ = 0u;
  gem_level_ = 0u;
  gem_number_ = 0u;
  gem_id_ = 0u;
  jinjie_number_ = 0u;
  jinjie_mohe_id_ = 0u;
  jinjie_id_ = 0u;
  can_put_on_ = false;
  produce_place_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  can_streng_material_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NormalGoodsRecord::~NormalGoodsRecord() {
  SharedDtor();
}

void NormalGoodsRecord::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (produce_place_ != &::google::protobuf::internal::kEmptyString) {
    delete produce_place_;
  }
  if (this != default_instance_) {
  }
}

void NormalGoodsRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NormalGoodsRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NormalGoodsRecord_descriptor_;
}

const NormalGoodsRecord& NormalGoodsRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_table_5fconfig_2eproto();
  return *default_instance_;
}

NormalGoodsRecord* NormalGoodsRecord::default_instance_ = NULL;

NormalGoodsRecord* NormalGoodsRecord::New() const {
  return new NormalGoodsRecord;
}

void NormalGoodsRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    kind_ = 0u;
    kind_type_ = 0u;
    limit_number_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::kEmptyString) {
        desc_->clear();
      }
    }
    pet_level_ = 0u;
    ping_zhi_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    hole_ = 0u;
    chip_number_ = 0u;
    chip_id_ = 0u;
    gem_level_ = 0u;
    gem_number_ = 0u;
    gem_id_ = 0u;
    jinjie_number_ = 0u;
    jinjie_mohe_id_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    jinjie_id_ = 0u;
    can_put_on_ = false;
    if (has_produce_place()) {
      if (produce_place_ != &::google::protobuf::internal::kEmptyString) {
        produce_place_->clear();
      }
    }
    can_streng_material_ = false;
  }
  effects_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NormalGoodsRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_kind;
        break;
      }

      // optional uint32 kind = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kind_)));
          set_has_kind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_kind_type;
        break;
      }

      // optional uint32 kind_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kind_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kind_type_)));
          set_has_kind_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_limit_number;
        break;
      }

      // optional uint32 limit_number = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_limit_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_number_)));
          set_has_limit_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }

      // optional string name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_desc;
        break;
      }

      // optional string desc = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_pet_level;
        break;
      }

      // optional uint32 pet_level = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pet_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pet_level_)));
          set_has_pet_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_ping_zhi;
        break;
      }

      // optional uint32 ping_zhi = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ping_zhi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_zhi_)));
          set_has_ping_zhi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_hole;
        break;
      }

      // optional uint32 hole = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hole:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hole_)));
          set_has_hole();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_chip_number;
        break;
      }

      // optional uint32 chip_number = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chip_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chip_number_)));
          set_has_chip_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_chip_id;
        break;
      }

      // optional uint32 chip_id = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chip_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chip_id_)));
          set_has_chip_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_gem_level;
        break;
      }

      // optional uint32 gem_level = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gem_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gem_level_)));
          set_has_gem_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_gem_number;
        break;
      }

      // optional uint32 gem_number = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gem_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gem_number_)));
          set_has_gem_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_gem_id;
        break;
      }

      // optional uint32 gem_id = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gem_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gem_id_)));
          set_has_gem_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_jinjie_number;
        break;
      }

      // optional uint32 jinjie_number = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jinjie_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &jinjie_number_)));
          set_has_jinjie_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_jinjie_mohe_id;
        break;
      }

      // optional uint32 jinjie_mohe_id = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jinjie_mohe_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &jinjie_mohe_id_)));
          set_has_jinjie_mohe_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_jinjie_id;
        break;
      }

      // optional uint32 jinjie_id = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jinjie_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &jinjie_id_)));
          set_has_jinjie_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_effects;
        break;
      }

      // repeated .tableconfig.HurtEffect effects = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_effects:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_effects()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_effects;
        if (input->ExpectTag(152)) goto parse_can_put_on;
        break;
      }

      // optional bool can_put_on = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_can_put_on:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_put_on_)));
          set_has_can_put_on();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_produce_place;
        break;
      }

      // optional string produce_place = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_produce_place:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_produce_place()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->produce_place().data(), this->produce_place().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_can_streng_material;
        break;
      }

      // optional bool can_streng_material = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_can_streng_material:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_streng_material_)));
          set_has_can_streng_material();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NormalGoodsRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 kind = 2;
  if (has_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->kind(), output);
  }

  // optional uint32 kind_type = 3;
  if (has_kind_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->kind_type(), output);
  }

  // optional uint32 limit_number = 4;
  if (has_limit_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->limit_number(), output);
  }

  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->name(), output);
  }

  // optional string desc = 6;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->desc(), output);
  }

  // optional uint32 pet_level = 7;
  if (has_pet_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->pet_level(), output);
  }

  // optional uint32 ping_zhi = 8;
  if (has_ping_zhi()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->ping_zhi(), output);
  }

  // optional uint32 hole = 9;
  if (has_hole()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->hole(), output);
  }

  // optional uint32 chip_number = 10;
  if (has_chip_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->chip_number(), output);
  }

  // optional uint32 chip_id = 11;
  if (has_chip_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->chip_id(), output);
  }

  // optional uint32 gem_level = 12;
  if (has_gem_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->gem_level(), output);
  }

  // optional uint32 gem_number = 13;
  if (has_gem_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->gem_number(), output);
  }

  // optional uint32 gem_id = 14;
  if (has_gem_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->gem_id(), output);
  }

  // optional uint32 jinjie_number = 15;
  if (has_jinjie_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->jinjie_number(), output);
  }

  // optional uint32 jinjie_mohe_id = 16;
  if (has_jinjie_mohe_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->jinjie_mohe_id(), output);
  }

  // optional uint32 jinjie_id = 17;
  if (has_jinjie_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->jinjie_id(), output);
  }

  // repeated .tableconfig.HurtEffect effects = 18;
  for (int i = 0; i < this->effects_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->effects(i), output);
  }

  // optional bool can_put_on = 19;
  if (has_can_put_on()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->can_put_on(), output);
  }

  // optional string produce_place = 20;
  if (has_produce_place()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->produce_place().data(), this->produce_place().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->produce_place(), output);
  }

  // optional bool can_streng_material = 21;
  if (has_can_streng_material()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->can_streng_material(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NormalGoodsRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 kind = 2;
  if (has_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->kind(), target);
  }

  // optional uint32 kind_type = 3;
  if (has_kind_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->kind_type(), target);
  }

  // optional uint32 limit_number = 4;
  if (has_limit_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->limit_number(), target);
  }

  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }

  // optional string desc = 6;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->desc(), target);
  }

  // optional uint32 pet_level = 7;
  if (has_pet_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->pet_level(), target);
  }

  // optional uint32 ping_zhi = 8;
  if (has_ping_zhi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->ping_zhi(), target);
  }

  // optional uint32 hole = 9;
  if (has_hole()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->hole(), target);
  }

  // optional uint32 chip_number = 10;
  if (has_chip_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->chip_number(), target);
  }

  // optional uint32 chip_id = 11;
  if (has_chip_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->chip_id(), target);
  }

  // optional uint32 gem_level = 12;
  if (has_gem_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->gem_level(), target);
  }

  // optional uint32 gem_number = 13;
  if (has_gem_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->gem_number(), target);
  }

  // optional uint32 gem_id = 14;
  if (has_gem_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->gem_id(), target);
  }

  // optional uint32 jinjie_number = 15;
  if (has_jinjie_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->jinjie_number(), target);
  }

  // optional uint32 jinjie_mohe_id = 16;
  if (has_jinjie_mohe_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->jinjie_mohe_id(), target);
  }

  // optional uint32 jinjie_id = 17;
  if (has_jinjie_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->jinjie_id(), target);
  }

  // repeated .tableconfig.HurtEffect effects = 18;
  for (int i = 0; i < this->effects_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->effects(i), target);
  }

  // optional bool can_put_on = 19;
  if (has_can_put_on()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->can_put_on(), target);
  }

  // optional string produce_place = 20;
  if (has_produce_place()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->produce_place().data(), this->produce_place().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->produce_place(), target);
  }

  // optional bool can_streng_material = 21;
  if (has_can_streng_material()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->can_streng_material(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NormalGoodsRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 kind = 2;
    if (has_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kind());
    }

    // optional uint32 kind_type = 3;
    if (has_kind_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kind_type());
    }

    // optional uint32 limit_number = 4;
    if (has_limit_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->limit_number());
    }

    // optional string name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string desc = 6;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

    // optional uint32 pet_level = 7;
    if (has_pet_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pet_level());
    }

    // optional uint32 ping_zhi = 8;
    if (has_ping_zhi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ping_zhi());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 hole = 9;
    if (has_hole()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hole());
    }

    // optional uint32 chip_number = 10;
    if (has_chip_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chip_number());
    }

    // optional uint32 chip_id = 11;
    if (has_chip_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chip_id());
    }

    // optional uint32 gem_level = 12;
    if (has_gem_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gem_level());
    }

    // optional uint32 gem_number = 13;
    if (has_gem_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gem_number());
    }

    // optional uint32 gem_id = 14;
    if (has_gem_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gem_id());
    }

    // optional uint32 jinjie_number = 15;
    if (has_jinjie_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->jinjie_number());
    }

    // optional uint32 jinjie_mohe_id = 16;
    if (has_jinjie_mohe_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->jinjie_mohe_id());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 jinjie_id = 17;
    if (has_jinjie_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->jinjie_id());
    }

    // optional bool can_put_on = 19;
    if (has_can_put_on()) {
      total_size += 2 + 1;
    }

    // optional string produce_place = 20;
    if (has_produce_place()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->produce_place());
    }

    // optional bool can_streng_material = 21;
    if (has_can_streng_material()) {
      total_size += 2 + 1;
    }

  }
  // repeated .tableconfig.HurtEffect effects = 18;
  total_size += 2 * this->effects_size();
  for (int i = 0; i < this->effects_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->effects(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NormalGoodsRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NormalGoodsRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NormalGoodsRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NormalGoodsRecord::MergeFrom(const NormalGoodsRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  effects_.MergeFrom(from.effects_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_kind()) {
      set_kind(from.kind());
    }
    if (from.has_kind_type()) {
      set_kind_type(from.kind_type());
    }
    if (from.has_limit_number()) {
      set_limit_number(from.limit_number());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
    if (from.has_pet_level()) {
      set_pet_level(from.pet_level());
    }
    if (from.has_ping_zhi()) {
      set_ping_zhi(from.ping_zhi());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_hole()) {
      set_hole(from.hole());
    }
    if (from.has_chip_number()) {
      set_chip_number(from.chip_number());
    }
    if (from.has_chip_id()) {
      set_chip_id(from.chip_id());
    }
    if (from.has_gem_level()) {
      set_gem_level(from.gem_level());
    }
    if (from.has_gem_number()) {
      set_gem_number(from.gem_number());
    }
    if (from.has_gem_id()) {
      set_gem_id(from.gem_id());
    }
    if (from.has_jinjie_number()) {
      set_jinjie_number(from.jinjie_number());
    }
    if (from.has_jinjie_mohe_id()) {
      set_jinjie_mohe_id(from.jinjie_mohe_id());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_jinjie_id()) {
      set_jinjie_id(from.jinjie_id());
    }
    if (from.has_can_put_on()) {
      set_can_put_on(from.can_put_on());
    }
    if (from.has_produce_place()) {
      set_produce_place(from.produce_place());
    }
    if (from.has_can_streng_material()) {
      set_can_streng_material(from.can_streng_material());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NormalGoodsRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NormalGoodsRecord::CopyFrom(const NormalGoodsRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NormalGoodsRecord::IsInitialized() const {

  return true;
}

void NormalGoodsRecord::Swap(NormalGoodsRecord* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(kind_, other->kind_);
    std::swap(kind_type_, other->kind_type_);
    std::swap(limit_number_, other->limit_number_);
    std::swap(name_, other->name_);
    std::swap(desc_, other->desc_);
    std::swap(pet_level_, other->pet_level_);
    std::swap(ping_zhi_, other->ping_zhi_);
    std::swap(hole_, other->hole_);
    std::swap(chip_number_, other->chip_number_);
    std::swap(chip_id_, other->chip_id_);
    std::swap(gem_level_, other->gem_level_);
    std::swap(gem_number_, other->gem_number_);
    std::swap(gem_id_, other->gem_id_);
    std::swap(jinjie_number_, other->jinjie_number_);
    std::swap(jinjie_mohe_id_, other->jinjie_mohe_id_);
    std::swap(jinjie_id_, other->jinjie_id_);
    effects_.Swap(&other->effects_);
    std::swap(can_put_on_, other->can_put_on_);
    std::swap(produce_place_, other->produce_place_);
    std::swap(can_streng_material_, other->can_streng_material_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NormalGoodsRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NormalGoodsRecord_descriptor_;
  metadata.reflection = NormalGoodsRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NormalGoodsList::kRecordFieldNumber;
#endif  // !_MSC_VER

NormalGoodsList::NormalGoodsList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NormalGoodsList::InitAsDefaultInstance() {
}

NormalGoodsList::NormalGoodsList(const NormalGoodsList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NormalGoodsList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NormalGoodsList::~NormalGoodsList() {
  SharedDtor();
}

void NormalGoodsList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NormalGoodsList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NormalGoodsList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NormalGoodsList_descriptor_;
}

const NormalGoodsList& NormalGoodsList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_table_5fconfig_2eproto();
  return *default_instance_;
}

NormalGoodsList* NormalGoodsList::default_instance_ = NULL;

NormalGoodsList* NormalGoodsList::New() const {
  return new NormalGoodsList;
}

void NormalGoodsList::Clear() {
  record_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NormalGoodsList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tableconfig.NormalGoodsRecord record = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_record()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_record;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NormalGoodsList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .tableconfig.NormalGoodsRecord record = 1;
  for (int i = 0; i < this->record_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->record(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NormalGoodsList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .tableconfig.NormalGoodsRecord record = 1;
  for (int i = 0; i < this->record_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->record(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NormalGoodsList::ByteSize() const {
  int total_size = 0;

  // repeated .tableconfig.NormalGoodsRecord record = 1;
  total_size += 1 * this->record_size();
  for (int i = 0; i < this->record_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->record(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NormalGoodsList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NormalGoodsList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NormalGoodsList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NormalGoodsList::MergeFrom(const NormalGoodsList& from) {
  GOOGLE_CHECK_NE(&from, this);
  record_.MergeFrom(from.record_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NormalGoodsList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NormalGoodsList::CopyFrom(const NormalGoodsList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NormalGoodsList::IsInitialized() const {

  return true;
}

void NormalGoodsList::Swap(NormalGoodsList* other) {
  if (other != this) {
    record_.Swap(&other->record_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NormalGoodsList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NormalGoodsList_descriptor_;
  metadata.reflection = NormalGoodsList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PetSkillPro::kSkillIdFieldNumber;
const int PetSkillPro::kSkillLevelFieldNumber;
const int PetSkillPro::kIncHurtFieldNumber;
const int PetSkillPro::kIncHpFieldNumber;
const int PetSkillPro::kDecHurtFieldNumber;
const int PetSkillPro::kHuifuFieldNumber;
const int PetSkillPro::kBaojiLvFieldNumber;
const int PetSkillPro::kBaojiHurtFieldNumber;
const int PetSkillPro::kSpeedFieldNumber;
const int PetSkillPro::kZhanDouLiFieldNumber;
#endif  // !_MSC_VER

PetSkillPro::PetSkillPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PetSkillPro::InitAsDefaultInstance() {
}

PetSkillPro::PetSkillPro(const PetSkillPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PetSkillPro::SharedCtor() {
  _cached_size_ = 0;
  skill_id_ = 0;
  skill_level_ = 0;
  inc_hurt_ = 0;
  inc_hp_ = 0;
  dec_hurt_ = 0;
  huifu_ = 0;
  baoji_lv_ = 0;
  baoji_hurt_ = 0;
  speed_ = 0;
  zhan_dou_li_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetSkillPro::~PetSkillPro() {
  SharedDtor();
}

void PetSkillPro::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PetSkillPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetSkillPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetSkillPro_descriptor_;
}

const PetSkillPro& PetSkillPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_table_5fconfig_2eproto();
  return *default_instance_;
}

PetSkillPro* PetSkillPro::default_instance_ = NULL;

PetSkillPro* PetSkillPro::New() const {
  return new PetSkillPro;
}

void PetSkillPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skill_id_ = 0;
    skill_level_ = 0;
    inc_hurt_ = 0;
    inc_hp_ = 0;
    dec_hurt_ = 0;
    huifu_ = 0;
    baoji_lv_ = 0;
    baoji_hurt_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    speed_ = 0;
    zhan_dou_li_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetSkillPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 skill_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skill_level;
        break;
      }

      // optional int32 skill_level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_level_)));
          set_has_skill_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_inc_hurt;
        break;
      }

      // optional float inc_hurt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_inc_hurt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &inc_hurt_)));
          set_has_inc_hurt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_inc_hp;
        break;
      }

      // optional float inc_hp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_inc_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &inc_hp_)));
          set_has_inc_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_dec_hurt;
        break;
      }

      // optional float dec_hurt = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dec_hurt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dec_hurt_)));
          set_has_dec_hurt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_huifu;
        break;
      }

      // optional float huifu = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_huifu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &huifu_)));
          set_has_huifu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_baoji_lv;
        break;
      }

      // optional float baoji_lv = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_baoji_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &baoji_lv_)));
          set_has_baoji_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_baoji_hurt;
        break;
      }

      // optional float baoji_hurt = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_baoji_hurt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &baoji_hurt_)));
          set_has_baoji_hurt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_speed;
        break;
      }

      // optional float speed = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_zhan_dou_li;
        break;
      }

      // optional int32 zhan_dou_li = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zhan_dou_li:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zhan_dou_li_)));
          set_has_zhan_dou_li();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PetSkillPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 skill_id = 1;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->skill_id(), output);
  }

  // optional int32 skill_level = 2;
  if (has_skill_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->skill_level(), output);
  }

  // optional float inc_hurt = 3;
  if (has_inc_hurt()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->inc_hurt(), output);
  }

  // optional float inc_hp = 4;
  if (has_inc_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->inc_hp(), output);
  }

  // optional float dec_hurt = 5;
  if (has_dec_hurt()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->dec_hurt(), output);
  }

  // optional float huifu = 6;
  if (has_huifu()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->huifu(), output);
  }

  // optional float baoji_lv = 7;
  if (has_baoji_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->baoji_lv(), output);
  }

  // optional float baoji_hurt = 8;
  if (has_baoji_hurt()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->baoji_hurt(), output);
  }

  // optional float speed = 9;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->speed(), output);
  }

  // optional int32 zhan_dou_li = 10;
  if (has_zhan_dou_li()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->zhan_dou_li(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PetSkillPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 skill_id = 1;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->skill_id(), target);
  }

  // optional int32 skill_level = 2;
  if (has_skill_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->skill_level(), target);
  }

  // optional float inc_hurt = 3;
  if (has_inc_hurt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->inc_hurt(), target);
  }

  // optional float inc_hp = 4;
  if (has_inc_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->inc_hp(), target);
  }

  // optional float dec_hurt = 5;
  if (has_dec_hurt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->dec_hurt(), target);
  }

  // optional float huifu = 6;
  if (has_huifu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->huifu(), target);
  }

  // optional float baoji_lv = 7;
  if (has_baoji_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->baoji_lv(), target);
  }

  // optional float baoji_hurt = 8;
  if (has_baoji_hurt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->baoji_hurt(), target);
  }

  // optional float speed = 9;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->speed(), target);
  }

  // optional int32 zhan_dou_li = 10;
  if (has_zhan_dou_li()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->zhan_dou_li(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PetSkillPro::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 skill_id = 1;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_id());
    }

    // optional int32 skill_level = 2;
    if (has_skill_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_level());
    }

    // optional float inc_hurt = 3;
    if (has_inc_hurt()) {
      total_size += 1 + 4;
    }

    // optional float inc_hp = 4;
    if (has_inc_hp()) {
      total_size += 1 + 4;
    }

    // optional float dec_hurt = 5;
    if (has_dec_hurt()) {
      total_size += 1 + 4;
    }

    // optional float huifu = 6;
    if (has_huifu()) {
      total_size += 1 + 4;
    }

    // optional float baoji_lv = 7;
    if (has_baoji_lv()) {
      total_size += 1 + 4;
    }

    // optional float baoji_hurt = 8;
    if (has_baoji_hurt()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float speed = 9;
    if (has_speed()) {
      total_size += 1 + 4;
    }

    // optional int32 zhan_dou_li = 10;
    if (has_zhan_dou_li()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zhan_dou_li());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetSkillPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetSkillPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetSkillPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetSkillPro::MergeFrom(const PetSkillPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_skill_level()) {
      set_skill_level(from.skill_level());
    }
    if (from.has_inc_hurt()) {
      set_inc_hurt(from.inc_hurt());
    }
    if (from.has_inc_hp()) {
      set_inc_hp(from.inc_hp());
    }
    if (from.has_dec_hurt()) {
      set_dec_hurt(from.dec_hurt());
    }
    if (from.has_huifu()) {
      set_huifu(from.huifu());
    }
    if (from.has_baoji_lv()) {
      set_baoji_lv(from.baoji_lv());
    }
    if (from.has_baoji_hurt()) {
      set_baoji_hurt(from.baoji_hurt());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_zhan_dou_li()) {
      set_zhan_dou_li(from.zhan_dou_li());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetSkillPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetSkillPro::CopyFrom(const PetSkillPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetSkillPro::IsInitialized() const {

  return true;
}

void PetSkillPro::Swap(PetSkillPro* other) {
  if (other != this) {
    std::swap(skill_id_, other->skill_id_);
    std::swap(skill_level_, other->skill_level_);
    std::swap(inc_hurt_, other->inc_hurt_);
    std::swap(inc_hp_, other->inc_hp_);
    std::swap(dec_hurt_, other->dec_hurt_);
    std::swap(huifu_, other->huifu_);
    std::swap(baoji_lv_, other->baoji_lv_);
    std::swap(baoji_hurt_, other->baoji_hurt_);
    std::swap(speed_, other->speed_);
    std::swap(zhan_dou_li_, other->zhan_dou_li_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetSkillPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetSkillPro_descriptor_;
  metadata.reflection = PetSkillPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PetSkillProList::kRecordFieldNumber;
#endif  // !_MSC_VER

PetSkillProList::PetSkillProList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PetSkillProList::InitAsDefaultInstance() {
}

PetSkillProList::PetSkillProList(const PetSkillProList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PetSkillProList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetSkillProList::~PetSkillProList() {
  SharedDtor();
}

void PetSkillProList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PetSkillProList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetSkillProList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetSkillProList_descriptor_;
}

const PetSkillProList& PetSkillProList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_table_5fconfig_2eproto();
  return *default_instance_;
}

PetSkillProList* PetSkillProList::default_instance_ = NULL;

PetSkillProList* PetSkillProList::New() const {
  return new PetSkillProList;
}

void PetSkillProList::Clear() {
  record_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetSkillProList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tableconfig.PetSkillPro record = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_record()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_record;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PetSkillProList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .tableconfig.PetSkillPro record = 1;
  for (int i = 0; i < this->record_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->record(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PetSkillProList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .tableconfig.PetSkillPro record = 1;
  for (int i = 0; i < this->record_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->record(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PetSkillProList::ByteSize() const {
  int total_size = 0;

  // repeated .tableconfig.PetSkillPro record = 1;
  total_size += 1 * this->record_size();
  for (int i = 0; i < this->record_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->record(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetSkillProList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetSkillProList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetSkillProList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetSkillProList::MergeFrom(const PetSkillProList& from) {
  GOOGLE_CHECK_NE(&from, this);
  record_.MergeFrom(from.record_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetSkillProList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetSkillProList::CopyFrom(const PetSkillProList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetSkillProList::IsInitialized() const {

  return true;
}

void PetSkillProList::Swap(PetSkillProList* other) {
  if (other != this) {
    record_.Swap(&other->record_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetSkillProList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetSkillProList_descriptor_;
  metadata.reflection = PetSkillProList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PetZhaoHuan::kLevelFieldNumber;
const int PetZhaoHuan::kRareValFieldNumber;
#endif  // !_MSC_VER

PetZhaoHuan::PetZhaoHuan()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PetZhaoHuan::InitAsDefaultInstance() {
}

PetZhaoHuan::PetZhaoHuan(const PetZhaoHuan& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PetZhaoHuan::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetZhaoHuan::~PetZhaoHuan() {
  SharedDtor();
}

void PetZhaoHuan::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PetZhaoHuan::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetZhaoHuan::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetZhaoHuan_descriptor_;
}

const PetZhaoHuan& PetZhaoHuan::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_table_5fconfig_2eproto();
  return *default_instance_;
}

PetZhaoHuan* PetZhaoHuan::default_instance_ = NULL;

PetZhaoHuan* PetZhaoHuan::New() const {
  return new PetZhaoHuan;
}

void PetZhaoHuan::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0;
  }
  rare_val_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetZhaoHuan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rare_val;
        break;
      }

      // repeated int32 rare_val = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rare_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_rare_val())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_rare_val())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rare_val;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PetZhaoHuan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }

  // repeated int32 rare_val = 2;
  for (int i = 0; i < this->rare_val_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->rare_val(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PetZhaoHuan::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }

  // repeated int32 rare_val = 2;
  for (int i = 0; i < this->rare_val_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->rare_val(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PetZhaoHuan::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

  }
  // repeated int32 rare_val = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->rare_val_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->rare_val(i));
    }
    total_size += 1 * this->rare_val_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetZhaoHuan::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetZhaoHuan* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetZhaoHuan*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetZhaoHuan::MergeFrom(const PetZhaoHuan& from) {
  GOOGLE_CHECK_NE(&from, this);
  rare_val_.MergeFrom(from.rare_val_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetZhaoHuan::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetZhaoHuan::CopyFrom(const PetZhaoHuan& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetZhaoHuan::IsInitialized() const {

  return true;
}

void PetZhaoHuan::Swap(PetZhaoHuan* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    rare_val_.Swap(&other->rare_val_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetZhaoHuan::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetZhaoHuan_descriptor_;
  metadata.reflection = PetZhaoHuan_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PetZhaoHuanList::kRecordFieldNumber;
#endif  // !_MSC_VER

PetZhaoHuanList::PetZhaoHuanList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PetZhaoHuanList::InitAsDefaultInstance() {
}

PetZhaoHuanList::PetZhaoHuanList(const PetZhaoHuanList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PetZhaoHuanList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetZhaoHuanList::~PetZhaoHuanList() {
  SharedDtor();
}

void PetZhaoHuanList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PetZhaoHuanList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetZhaoHuanList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetZhaoHuanList_descriptor_;
}

const PetZhaoHuanList& PetZhaoHuanList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_table_5fconfig_2eproto();
  return *default_instance_;
}

PetZhaoHuanList* PetZhaoHuanList::default_instance_ = NULL;

PetZhaoHuanList* PetZhaoHuanList::New() const {
  return new PetZhaoHuanList;
}

void PetZhaoHuanList::Clear() {
  record_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetZhaoHuanList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tableconfig.PetZhaoHuan record = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_record()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_record;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PetZhaoHuanList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .tableconfig.PetZhaoHuan record = 1;
  for (int i = 0; i < this->record_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->record(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PetZhaoHuanList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .tableconfig.PetZhaoHuan record = 1;
  for (int i = 0; i < this->record_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->record(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PetZhaoHuanList::ByteSize() const {
  int total_size = 0;

  // repeated .tableconfig.PetZhaoHuan record = 1;
  total_size += 1 * this->record_size();
  for (int i = 0; i < this->record_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->record(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetZhaoHuanList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetZhaoHuanList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetZhaoHuanList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetZhaoHuanList::MergeFrom(const PetZhaoHuanList& from) {
  GOOGLE_CHECK_NE(&from, this);
  record_.MergeFrom(from.record_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetZhaoHuanList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetZhaoHuanList::CopyFrom(const PetZhaoHuanList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetZhaoHuanList::IsInitialized() const {

  return true;
}

void PetZhaoHuanList::Swap(PetZhaoHuanList* other) {
  if (other != this) {
    record_.Swap(&other->record_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetZhaoHuanList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetZhaoHuanList_descriptor_;
  metadata.reflection = PetZhaoHuanList_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace tableconfig

// @@protoc_insertion_point(global_scope)
