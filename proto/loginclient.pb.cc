// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: loginclient.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "loginclient.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protoc {
namespace loginclient {

namespace {

const ::google::protobuf::Descriptor* ClientLoginReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientLoginReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientLoginAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientLoginAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientCreateAccountReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientCreateAccountReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientCreateAccountAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientCreateAccountAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientWebLoginReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientWebLoginReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* OnePlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OnePlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccountAllPlayerInfoRpt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountAllPlayerInfoRpt_reflection_ = NULL;
const ::google::protobuf::Descriptor* SelectActivePlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SelectActivePlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* WaitingLoinNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WaitingLoinNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* SelfModeCreatekAccountReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SelfModeCreatekAccountReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SelfModeCreatekAccountAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SelfModeCreatekAccountAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* SelfModeActiveAccountReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SelfModeActiveAccountReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SelfModeActiveAccountAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SelfModeActiveAccountAck_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_loginclient_2eproto() {
  protobuf_AddDesc_loginclient_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "loginclient.proto");
  GOOGLE_CHECK(file != NULL);
  ClientLoginReq_descriptor_ = file->message_type(0);
  static const int ClientLoginReq_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLoginReq, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLoginReq, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLoginReq, session_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLoginReq, opt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLoginReq, login_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLoginReq, version_id_),
  };
  ClientLoginReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientLoginReq_descriptor_,
      ClientLoginReq::default_instance_,
      ClientLoginReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLoginReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLoginReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientLoginReq));
  ClientLoginAck_descriptor_ = file->message_type(1);
  static const int ClientLoginAck_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLoginAck, digit_account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLoginAck, gate_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLoginAck, gate_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLoginAck, gate_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLoginAck, err_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLoginAck, error_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLoginAck, account_),
  };
  ClientLoginAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientLoginAck_descriptor_,
      ClientLoginAck::default_instance_,
      ClientLoginAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLoginAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLoginAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientLoginAck));
  ClientCreateAccountReq_descriptor_ = file->message_type(2);
  static const int ClientCreateAccountReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientCreateAccountReq, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientCreateAccountReq, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientCreateAccountReq, session_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientCreateAccountReq, opt_),
  };
  ClientCreateAccountReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientCreateAccountReq_descriptor_,
      ClientCreateAccountReq::default_instance_,
      ClientCreateAccountReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientCreateAccountReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientCreateAccountReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientCreateAccountReq));
  ClientCreateAccountAck_descriptor_ = file->message_type(3);
  static const int ClientCreateAccountAck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientCreateAccountAck, err_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientCreateAccountAck, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientCreateAccountAck, opt_),
  };
  ClientCreateAccountAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientCreateAccountAck_descriptor_,
      ClientCreateAccountAck::default_instance_,
      ClientCreateAccountAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientCreateAccountAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientCreateAccountAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientCreateAccountAck));
  ClientWebLoginReq_descriptor_ = file->message_type(4);
  static const int ClientWebLoginReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientWebLoginReq, session_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientWebLoginReq, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientWebLoginReq, version_id_),
  };
  ClientWebLoginReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientWebLoginReq_descriptor_,
      ClientWebLoginReq::default_instance_,
      ClientWebLoginReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientWebLoginReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientWebLoginReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientWebLoginReq));
  OnePlayerInfo_descriptor_ = file->message_type(5);
  static const int OnePlayerInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnePlayerInfo, digitid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnePlayerInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnePlayerInfo, exp_),
  };
  OnePlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OnePlayerInfo_descriptor_,
      OnePlayerInfo::default_instance_,
      OnePlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnePlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnePlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OnePlayerInfo));
  AccountAllPlayerInfoRpt_descriptor_ = file->message_type(6);
  static const int AccountAllPlayerInfoRpt_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountAllPlayerInfoRpt, players_),
  };
  AccountAllPlayerInfoRpt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccountAllPlayerInfoRpt_descriptor_,
      AccountAllPlayerInfoRpt::default_instance_,
      AccountAllPlayerInfoRpt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountAllPlayerInfoRpt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountAllPlayerInfoRpt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccountAllPlayerInfoRpt));
  SelectActivePlayer_descriptor_ = file->message_type(7);
  static const int SelectActivePlayer_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectActivePlayer, digitid_),
  };
  SelectActivePlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SelectActivePlayer_descriptor_,
      SelectActivePlayer::default_instance_,
      SelectActivePlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectActivePlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectActivePlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SelectActivePlayer));
  WaitingLoinNtf_descriptor_ = file->message_type(8);
  static const int WaitingLoinNtf_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaitingLoinNtf, number_),
  };
  WaitingLoinNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WaitingLoinNtf_descriptor_,
      WaitingLoinNtf::default_instance_,
      WaitingLoinNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaitingLoinNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaitingLoinNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WaitingLoinNtf));
  SelfModeCreatekAccountReq_descriptor_ = file->message_type(9);
  static const int SelfModeCreatekAccountReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelfModeCreatekAccountReq, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelfModeCreatekAccountReq, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelfModeCreatekAccountReq, invitation_code_),
  };
  SelfModeCreatekAccountReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SelfModeCreatekAccountReq_descriptor_,
      SelfModeCreatekAccountReq::default_instance_,
      SelfModeCreatekAccountReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelfModeCreatekAccountReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelfModeCreatekAccountReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SelfModeCreatekAccountReq));
  SelfModeCreatekAccountAck_descriptor_ = file->message_type(10);
  static const int SelfModeCreatekAccountAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelfModeCreatekAccountAck, err_no_),
  };
  SelfModeCreatekAccountAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SelfModeCreatekAccountAck_descriptor_,
      SelfModeCreatekAccountAck::default_instance_,
      SelfModeCreatekAccountAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelfModeCreatekAccountAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelfModeCreatekAccountAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SelfModeCreatekAccountAck));
  SelfModeActiveAccountReq_descriptor_ = file->message_type(11);
  static const int SelfModeActiveAccountReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelfModeActiveAccountReq, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelfModeActiveAccountReq, invitation_code_),
  };
  SelfModeActiveAccountReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SelfModeActiveAccountReq_descriptor_,
      SelfModeActiveAccountReq::default_instance_,
      SelfModeActiveAccountReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelfModeActiveAccountReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelfModeActiveAccountReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SelfModeActiveAccountReq));
  SelfModeActiveAccountAck_descriptor_ = file->message_type(12);
  static const int SelfModeActiveAccountAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelfModeActiveAccountAck, err_no_),
  };
  SelfModeActiveAccountAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SelfModeActiveAccountAck_descriptor_,
      SelfModeActiveAccountAck::default_instance_,
      SelfModeActiveAccountAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelfModeActiveAccountAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelfModeActiveAccountAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SelfModeActiveAccountAck));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_loginclient_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientLoginReq_descriptor_, &ClientLoginReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientLoginAck_descriptor_, &ClientLoginAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientCreateAccountReq_descriptor_, &ClientCreateAccountReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientCreateAccountAck_descriptor_, &ClientCreateAccountAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientWebLoginReq_descriptor_, &ClientWebLoginReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OnePlayerInfo_descriptor_, &OnePlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccountAllPlayerInfoRpt_descriptor_, &AccountAllPlayerInfoRpt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SelectActivePlayer_descriptor_, &SelectActivePlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WaitingLoinNtf_descriptor_, &WaitingLoinNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SelfModeCreatekAccountReq_descriptor_, &SelfModeCreatekAccountReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SelfModeCreatekAccountAck_descriptor_, &SelfModeCreatekAccountAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SelfModeActiveAccountReq_descriptor_, &SelfModeActiveAccountReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SelfModeActiveAccountAck_descriptor_, &SelfModeActiveAccountAck::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_loginclient_2eproto() {
  delete ClientLoginReq::default_instance_;
  delete ClientLoginReq_reflection_;
  delete ClientLoginAck::default_instance_;
  delete ClientLoginAck_reflection_;
  delete ClientCreateAccountReq::default_instance_;
  delete ClientCreateAccountReq_reflection_;
  delete ClientCreateAccountAck::default_instance_;
  delete ClientCreateAccountAck_reflection_;
  delete ClientWebLoginReq::default_instance_;
  delete ClientWebLoginReq_reflection_;
  delete OnePlayerInfo::default_instance_;
  delete OnePlayerInfo_reflection_;
  delete AccountAllPlayerInfoRpt::default_instance_;
  delete AccountAllPlayerInfoRpt_reflection_;
  delete SelectActivePlayer::default_instance_;
  delete SelectActivePlayer_reflection_;
  delete WaitingLoinNtf::default_instance_;
  delete WaitingLoinNtf_reflection_;
  delete SelfModeCreatekAccountReq::default_instance_;
  delete SelfModeCreatekAccountReq_reflection_;
  delete SelfModeCreatekAccountAck::default_instance_;
  delete SelfModeCreatekAccountAck_reflection_;
  delete SelfModeActiveAccountReq::default_instance_;
  delete SelfModeActiveAccountReq_reflection_;
  delete SelfModeActiveAccountAck::default_instance_;
  delete SelfModeActiveAccountAck_reflection_;
}

void protobuf_AddDesc_loginclient_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_options_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021loginclient.proto\022\022protoc.loginclient\032"
    "\roptions.proto\"|\n\016ClientLoginReq\022\017\n\007acco"
    "unt\030\001 \002(\t\022\020\n\010password\030\002 \001(\t\022\023\n\013session_k"
    "ey\030\003 \001(\t\022\013\n\003opt\030\004 \001(\005\022\021\n\tlogin_key\030\005 \001(\t"
    "\022\022\n\nversion_id\030\006 \001(\r\"\221\001\n\016ClientLoginAck\022"
    "\025\n\rdigit_account\030\001 \001(\004\022\017\n\007gate_ip\030\002 \001(\t\022"
    "\021\n\tgate_port\030\003 \001(\r\022\020\n\010gate_key\030\004 \001(\005\022\016\n\006"
    "err_no\030\005 \001(\005\022\021\n\terror_msg\030\006 \001(\t\022\017\n\007accou"
    "nt\030\007 \001(\t\"]\n\026ClientCreateAccountReq\022\017\n\007ac"
    "count\030\001 \002(\t\022\020\n\010password\030\002 \001(\t\022\023\n\013session"
    "_key\030\003 \001(\t\022\013\n\003opt\030\004 \001(\005\"F\n\026ClientCreateA"
    "ccountAck\022\016\n\006err_no\030\001 \001(\005\022\017\n\007account\030\002 \001"
    "(\t\022\013\n\003opt\030\003 \001(\004\"M\n\021ClientWebLoginReq\022\023\n\013"
    "session_key\030\001 \002(\t\022\017\n\007account\030\002 \001(\t\022\022\n\nve"
    "rsion_id\030\003 \001(\r\";\n\rOnePlayerInfo\022\017\n\007digit"
    "id\030\001 \001(\004\022\014\n\004name\030\002 \001(\t\022\013\n\003exp\030\003 \001(\r\"M\n\027A"
    "ccountAllPlayerInfoRpt\0222\n\007players\030\001 \003(\0132"
    "!.protoc.loginclient.OnePlayerInfo\"%\n\022Se"
    "lectActivePlayer\022\017\n\007digitid\030\001 \001(\004\" \n\016Wai"
    "tingLoinNtf\022\016\n\006number\030\001 \001(\005\"W\n\031SelfModeC"
    "reatekAccountReq\022\017\n\007account\030\001 \001(\t\022\020\n\010pas"
    "sword\030\002 \001(\t\022\027\n\017invitation_code\030\003 \001(\t\"+\n\031"
    "SelfModeCreatekAccountAck\022\016\n\006err_no\030\001 \001("
    "\005\"D\n\030SelfModeActiveAccountReq\022\017\n\007account"
    "\030\001 \001(\t\022\027\n\017invitation_code\030\002 \001(\t\"*\n\030SelfM"
    "odeActiveAccountAck\022\016\n\006err_no\030\001 \001(\005", 1035);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "loginclient.proto", &protobuf_RegisterTypes);
  ClientLoginReq::default_instance_ = new ClientLoginReq();
  ClientLoginAck::default_instance_ = new ClientLoginAck();
  ClientCreateAccountReq::default_instance_ = new ClientCreateAccountReq();
  ClientCreateAccountAck::default_instance_ = new ClientCreateAccountAck();
  ClientWebLoginReq::default_instance_ = new ClientWebLoginReq();
  OnePlayerInfo::default_instance_ = new OnePlayerInfo();
  AccountAllPlayerInfoRpt::default_instance_ = new AccountAllPlayerInfoRpt();
  SelectActivePlayer::default_instance_ = new SelectActivePlayer();
  WaitingLoinNtf::default_instance_ = new WaitingLoinNtf();
  SelfModeCreatekAccountReq::default_instance_ = new SelfModeCreatekAccountReq();
  SelfModeCreatekAccountAck::default_instance_ = new SelfModeCreatekAccountAck();
  SelfModeActiveAccountReq::default_instance_ = new SelfModeActiveAccountReq();
  SelfModeActiveAccountAck::default_instance_ = new SelfModeActiveAccountAck();
  ClientLoginReq::default_instance_->InitAsDefaultInstance();
  ClientLoginAck::default_instance_->InitAsDefaultInstance();
  ClientCreateAccountReq::default_instance_->InitAsDefaultInstance();
  ClientCreateAccountAck::default_instance_->InitAsDefaultInstance();
  ClientWebLoginReq::default_instance_->InitAsDefaultInstance();
  OnePlayerInfo::default_instance_->InitAsDefaultInstance();
  AccountAllPlayerInfoRpt::default_instance_->InitAsDefaultInstance();
  SelectActivePlayer::default_instance_->InitAsDefaultInstance();
  WaitingLoinNtf::default_instance_->InitAsDefaultInstance();
  SelfModeCreatekAccountReq::default_instance_->InitAsDefaultInstance();
  SelfModeCreatekAccountAck::default_instance_->InitAsDefaultInstance();
  SelfModeActiveAccountReq::default_instance_->InitAsDefaultInstance();
  SelfModeActiveAccountAck::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_loginclient_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_loginclient_2eproto {
  StaticDescriptorInitializer_loginclient_2eproto() {
    protobuf_AddDesc_loginclient_2eproto();
  }
} static_descriptor_initializer_loginclient_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ClientLoginReq::kAccountFieldNumber;
const int ClientLoginReq::kPasswordFieldNumber;
const int ClientLoginReq::kSessionKeyFieldNumber;
const int ClientLoginReq::kOptFieldNumber;
const int ClientLoginReq::kLoginKeyFieldNumber;
const int ClientLoginReq::kVersionIdFieldNumber;
#endif  // !_MSC_VER

ClientLoginReq::ClientLoginReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientLoginReq::InitAsDefaultInstance() {
}

ClientLoginReq::ClientLoginReq(const ClientLoginReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientLoginReq::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  session_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  opt_ = 0;
  login_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  version_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientLoginReq::~ClientLoginReq() {
  SharedDtor();
}

void ClientLoginReq::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (session_key_ != &::google::protobuf::internal::kEmptyString) {
    delete session_key_;
  }
  if (login_key_ != &::google::protobuf::internal::kEmptyString) {
    delete login_key_;
  }
  if (this != default_instance_) {
  }
}

void ClientLoginReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientLoginReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientLoginReq_descriptor_;
}

const ClientLoginReq& ClientLoginReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_loginclient_2eproto();
  return *default_instance_;
}

ClientLoginReq* ClientLoginReq::default_instance_ = NULL;

ClientLoginReq* ClientLoginReq::New() const {
  return new ClientLoginReq;
}

void ClientLoginReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    if (has_session_key()) {
      if (session_key_ != &::google::protobuf::internal::kEmptyString) {
        session_key_->clear();
      }
    }
    opt_ = 0;
    if (has_login_key()) {
      if (login_key_ != &::google::protobuf::internal::kEmptyString) {
        login_key_->clear();
      }
    }
    version_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientLoginReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // optional string password = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_session_key;
        break;
      }

      // optional string session_key = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_session_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->session_key().data(), this->session_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_opt;
        break;
      }

      // optional int32 opt = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opt_)));
          set_has_opt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_login_key;
        break;
      }

      // optional string login_key = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_login_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_login_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->login_key().data(), this->login_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_version_id;
        break;
      }

      // optional uint32 version_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_version_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_id_)));
          set_has_version_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientLoginReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->account(), output);
  }

  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->password(), output);
  }

  // optional string session_key = 3;
  if (has_session_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_key().data(), this->session_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->session_key(), output);
  }

  // optional int32 opt = 4;
  if (has_opt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->opt(), output);
  }

  // optional string login_key = 5;
  if (has_login_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->login_key().data(), this->login_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->login_key(), output);
  }

  // optional uint32 version_id = 6;
  if (has_version_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->version_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientLoginReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }

  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  // optional string session_key = 3;
  if (has_session_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_key().data(), this->session_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->session_key(), target);
  }

  // optional int32 opt = 4;
  if (has_opt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->opt(), target);
  }

  // optional string login_key = 5;
  if (has_login_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->login_key().data(), this->login_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->login_key(), target);
  }

  // optional uint32 version_id = 6;
  if (has_version_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->version_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientLoginReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional string password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional string session_key = 3;
    if (has_session_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session_key());
    }

    // optional int32 opt = 4;
    if (has_opt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opt());
    }

    // optional string login_key = 5;
    if (has_login_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->login_key());
    }

    // optional uint32 version_id = 6;
    if (has_version_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientLoginReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientLoginReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientLoginReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientLoginReq::MergeFrom(const ClientLoginReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_session_key()) {
      set_session_key(from.session_key());
    }
    if (from.has_opt()) {
      set_opt(from.opt());
    }
    if (from.has_login_key()) {
      set_login_key(from.login_key());
    }
    if (from.has_version_id()) {
      set_version_id(from.version_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientLoginReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientLoginReq::CopyFrom(const ClientLoginReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientLoginReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ClientLoginReq::Swap(ClientLoginReq* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(password_, other->password_);
    std::swap(session_key_, other->session_key_);
    std::swap(opt_, other->opt_);
    std::swap(login_key_, other->login_key_);
    std::swap(version_id_, other->version_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientLoginReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientLoginReq_descriptor_;
  metadata.reflection = ClientLoginReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientLoginAck::kDigitAccountFieldNumber;
const int ClientLoginAck::kGateIpFieldNumber;
const int ClientLoginAck::kGatePortFieldNumber;
const int ClientLoginAck::kGateKeyFieldNumber;
const int ClientLoginAck::kErrNoFieldNumber;
const int ClientLoginAck::kErrorMsgFieldNumber;
const int ClientLoginAck::kAccountFieldNumber;
#endif  // !_MSC_VER

ClientLoginAck::ClientLoginAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientLoginAck::InitAsDefaultInstance() {
}

ClientLoginAck::ClientLoginAck(const ClientLoginAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientLoginAck::SharedCtor() {
  _cached_size_ = 0;
  digit_account_ = GOOGLE_ULONGLONG(0);
  gate_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gate_port_ = 0u;
  gate_key_ = 0;
  err_no_ = 0;
  error_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientLoginAck::~ClientLoginAck() {
  SharedDtor();
}

void ClientLoginAck::SharedDtor() {
  if (gate_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete gate_ip_;
  }
  if (error_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete error_msg_;
  }
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (this != default_instance_) {
  }
}

void ClientLoginAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientLoginAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientLoginAck_descriptor_;
}

const ClientLoginAck& ClientLoginAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_loginclient_2eproto();
  return *default_instance_;
}

ClientLoginAck* ClientLoginAck::default_instance_ = NULL;

ClientLoginAck* ClientLoginAck::New() const {
  return new ClientLoginAck;
}

void ClientLoginAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    digit_account_ = GOOGLE_ULONGLONG(0);
    if (has_gate_ip()) {
      if (gate_ip_ != &::google::protobuf::internal::kEmptyString) {
        gate_ip_->clear();
      }
    }
    gate_port_ = 0u;
    gate_key_ = 0;
    err_no_ = 0;
    if (has_error_msg()) {
      if (error_msg_ != &::google::protobuf::internal::kEmptyString) {
        error_msg_->clear();
      }
    }
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientLoginAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 digit_account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &digit_account_)));
          set_has_digit_account();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_gate_ip;
        break;
      }

      // optional string gate_ip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gate_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gate_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gate_ip().data(), this->gate_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gate_port;
        break;
      }

      // optional uint32 gate_port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gate_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gate_port_)));
          set_has_gate_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_gate_key;
        break;
      }

      // optional int32 gate_key = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gate_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gate_key_)));
          set_has_gate_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_err_no;
        break;
      }

      // optional int32 err_no = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_err_no:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_no_)));
          set_has_err_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_error_msg;
        break;
      }

      // optional string error_msg = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->error_msg().data(), this->error_msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_account;
        break;
      }

      // optional string account = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientLoginAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 digit_account = 1;
  if (has_digit_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->digit_account(), output);
  }

  // optional string gate_ip = 2;
  if (has_gate_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gate_ip().data(), this->gate_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->gate_ip(), output);
  }

  // optional uint32 gate_port = 3;
  if (has_gate_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->gate_port(), output);
  }

  // optional int32 gate_key = 4;
  if (has_gate_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gate_key(), output);
  }

  // optional int32 err_no = 5;
  if (has_err_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->err_no(), output);
  }

  // optional string error_msg = 6;
  if (has_error_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error_msg().data(), this->error_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->error_msg(), output);
  }

  // optional string account = 7;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->account(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientLoginAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 digit_account = 1;
  if (has_digit_account()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->digit_account(), target);
  }

  // optional string gate_ip = 2;
  if (has_gate_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gate_ip().data(), this->gate_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->gate_ip(), target);
  }

  // optional uint32 gate_port = 3;
  if (has_gate_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->gate_port(), target);
  }

  // optional int32 gate_key = 4;
  if (has_gate_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gate_key(), target);
  }

  // optional int32 err_no = 5;
  if (has_err_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->err_no(), target);
  }

  // optional string error_msg = 6;
  if (has_error_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error_msg().data(), this->error_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->error_msg(), target);
  }

  // optional string account = 7;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->account(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientLoginAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 digit_account = 1;
    if (has_digit_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->digit_account());
    }

    // optional string gate_ip = 2;
    if (has_gate_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gate_ip());
    }

    // optional uint32 gate_port = 3;
    if (has_gate_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gate_port());
    }

    // optional int32 gate_key = 4;
    if (has_gate_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gate_key());
    }

    // optional int32 err_no = 5;
    if (has_err_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err_no());
    }

    // optional string error_msg = 6;
    if (has_error_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_msg());
    }

    // optional string account = 7;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientLoginAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientLoginAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientLoginAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientLoginAck::MergeFrom(const ClientLoginAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_digit_account()) {
      set_digit_account(from.digit_account());
    }
    if (from.has_gate_ip()) {
      set_gate_ip(from.gate_ip());
    }
    if (from.has_gate_port()) {
      set_gate_port(from.gate_port());
    }
    if (from.has_gate_key()) {
      set_gate_key(from.gate_key());
    }
    if (from.has_err_no()) {
      set_err_no(from.err_no());
    }
    if (from.has_error_msg()) {
      set_error_msg(from.error_msg());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientLoginAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientLoginAck::CopyFrom(const ClientLoginAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientLoginAck::IsInitialized() const {

  return true;
}

void ClientLoginAck::Swap(ClientLoginAck* other) {
  if (other != this) {
    std::swap(digit_account_, other->digit_account_);
    std::swap(gate_ip_, other->gate_ip_);
    std::swap(gate_port_, other->gate_port_);
    std::swap(gate_key_, other->gate_key_);
    std::swap(err_no_, other->err_no_);
    std::swap(error_msg_, other->error_msg_);
    std::swap(account_, other->account_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientLoginAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientLoginAck_descriptor_;
  metadata.reflection = ClientLoginAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientCreateAccountReq::kAccountFieldNumber;
const int ClientCreateAccountReq::kPasswordFieldNumber;
const int ClientCreateAccountReq::kSessionKeyFieldNumber;
const int ClientCreateAccountReq::kOptFieldNumber;
#endif  // !_MSC_VER

ClientCreateAccountReq::ClientCreateAccountReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientCreateAccountReq::InitAsDefaultInstance() {
}

ClientCreateAccountReq::ClientCreateAccountReq(const ClientCreateAccountReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientCreateAccountReq::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  session_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  opt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientCreateAccountReq::~ClientCreateAccountReq() {
  SharedDtor();
}

void ClientCreateAccountReq::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (session_key_ != &::google::protobuf::internal::kEmptyString) {
    delete session_key_;
  }
  if (this != default_instance_) {
  }
}

void ClientCreateAccountReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientCreateAccountReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientCreateAccountReq_descriptor_;
}

const ClientCreateAccountReq& ClientCreateAccountReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_loginclient_2eproto();
  return *default_instance_;
}

ClientCreateAccountReq* ClientCreateAccountReq::default_instance_ = NULL;

ClientCreateAccountReq* ClientCreateAccountReq::New() const {
  return new ClientCreateAccountReq;
}

void ClientCreateAccountReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    if (has_session_key()) {
      if (session_key_ != &::google::protobuf::internal::kEmptyString) {
        session_key_->clear();
      }
    }
    opt_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientCreateAccountReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // optional string password = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_session_key;
        break;
      }

      // optional string session_key = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_session_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->session_key().data(), this->session_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_opt;
        break;
      }

      // optional int32 opt = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opt_)));
          set_has_opt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientCreateAccountReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->account(), output);
  }

  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->password(), output);
  }

  // optional string session_key = 3;
  if (has_session_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_key().data(), this->session_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->session_key(), output);
  }

  // optional int32 opt = 4;
  if (has_opt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->opt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientCreateAccountReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }

  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  // optional string session_key = 3;
  if (has_session_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_key().data(), this->session_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->session_key(), target);
  }

  // optional int32 opt = 4;
  if (has_opt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->opt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientCreateAccountReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional string password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional string session_key = 3;
    if (has_session_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session_key());
    }

    // optional int32 opt = 4;
    if (has_opt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientCreateAccountReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientCreateAccountReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientCreateAccountReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientCreateAccountReq::MergeFrom(const ClientCreateAccountReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_session_key()) {
      set_session_key(from.session_key());
    }
    if (from.has_opt()) {
      set_opt(from.opt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientCreateAccountReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientCreateAccountReq::CopyFrom(const ClientCreateAccountReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientCreateAccountReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ClientCreateAccountReq::Swap(ClientCreateAccountReq* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(password_, other->password_);
    std::swap(session_key_, other->session_key_);
    std::swap(opt_, other->opt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientCreateAccountReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientCreateAccountReq_descriptor_;
  metadata.reflection = ClientCreateAccountReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientCreateAccountAck::kErrNoFieldNumber;
const int ClientCreateAccountAck::kAccountFieldNumber;
const int ClientCreateAccountAck::kOptFieldNumber;
#endif  // !_MSC_VER

ClientCreateAccountAck::ClientCreateAccountAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientCreateAccountAck::InitAsDefaultInstance() {
}

ClientCreateAccountAck::ClientCreateAccountAck(const ClientCreateAccountAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientCreateAccountAck::SharedCtor() {
  _cached_size_ = 0;
  err_no_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  opt_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientCreateAccountAck::~ClientCreateAccountAck() {
  SharedDtor();
}

void ClientCreateAccountAck::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (this != default_instance_) {
  }
}

void ClientCreateAccountAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientCreateAccountAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientCreateAccountAck_descriptor_;
}

const ClientCreateAccountAck& ClientCreateAccountAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_loginclient_2eproto();
  return *default_instance_;
}

ClientCreateAccountAck* ClientCreateAccountAck::default_instance_ = NULL;

ClientCreateAccountAck* ClientCreateAccountAck::New() const {
  return new ClientCreateAccountAck;
}

void ClientCreateAccountAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    err_no_ = 0;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    opt_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientCreateAccountAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 err_no = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_no_)));
          set_has_err_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }

      // optional string account = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_opt;
        break;
      }

      // optional uint64 opt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &opt_)));
          set_has_opt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientCreateAccountAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 err_no = 1;
  if (has_err_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->err_no(), output);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->account(), output);
  }

  // optional uint64 opt = 3;
  if (has_opt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->opt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientCreateAccountAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 err_no = 1;
  if (has_err_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->err_no(), target);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account(), target);
  }

  // optional uint64 opt = 3;
  if (has_opt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->opt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientCreateAccountAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 err_no = 1;
    if (has_err_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err_no());
    }

    // optional string account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional uint64 opt = 3;
    if (has_opt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->opt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientCreateAccountAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientCreateAccountAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientCreateAccountAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientCreateAccountAck::MergeFrom(const ClientCreateAccountAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_err_no()) {
      set_err_no(from.err_no());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_opt()) {
      set_opt(from.opt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientCreateAccountAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientCreateAccountAck::CopyFrom(const ClientCreateAccountAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientCreateAccountAck::IsInitialized() const {

  return true;
}

void ClientCreateAccountAck::Swap(ClientCreateAccountAck* other) {
  if (other != this) {
    std::swap(err_no_, other->err_no_);
    std::swap(account_, other->account_);
    std::swap(opt_, other->opt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientCreateAccountAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientCreateAccountAck_descriptor_;
  metadata.reflection = ClientCreateAccountAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientWebLoginReq::kSessionKeyFieldNumber;
const int ClientWebLoginReq::kAccountFieldNumber;
const int ClientWebLoginReq::kVersionIdFieldNumber;
#endif  // !_MSC_VER

ClientWebLoginReq::ClientWebLoginReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientWebLoginReq::InitAsDefaultInstance() {
}

ClientWebLoginReq::ClientWebLoginReq(const ClientWebLoginReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientWebLoginReq::SharedCtor() {
  _cached_size_ = 0;
  session_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  version_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientWebLoginReq::~ClientWebLoginReq() {
  SharedDtor();
}

void ClientWebLoginReq::SharedDtor() {
  if (session_key_ != &::google::protobuf::internal::kEmptyString) {
    delete session_key_;
  }
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (this != default_instance_) {
  }
}

void ClientWebLoginReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientWebLoginReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientWebLoginReq_descriptor_;
}

const ClientWebLoginReq& ClientWebLoginReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_loginclient_2eproto();
  return *default_instance_;
}

ClientWebLoginReq* ClientWebLoginReq::default_instance_ = NULL;

ClientWebLoginReq* ClientWebLoginReq::New() const {
  return new ClientWebLoginReq;
}

void ClientWebLoginReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_session_key()) {
      if (session_key_ != &::google::protobuf::internal::kEmptyString) {
        session_key_->clear();
      }
    }
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    version_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientWebLoginReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string session_key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->session_key().data(), this->session_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }

      // optional string account = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_version_id;
        break;
      }

      // optional uint32 version_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_version_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_id_)));
          set_has_version_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientWebLoginReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string session_key = 1;
  if (has_session_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_key().data(), this->session_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->session_key(), output);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->account(), output);
  }

  // optional uint32 version_id = 3;
  if (has_version_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->version_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientWebLoginReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string session_key = 1;
  if (has_session_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_key().data(), this->session_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->session_key(), target);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account(), target);
  }

  // optional uint32 version_id = 3;
  if (has_version_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->version_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientWebLoginReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string session_key = 1;
    if (has_session_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session_key());
    }

    // optional string account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional uint32 version_id = 3;
    if (has_version_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientWebLoginReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientWebLoginReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientWebLoginReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientWebLoginReq::MergeFrom(const ClientWebLoginReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session_key()) {
      set_session_key(from.session_key());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_version_id()) {
      set_version_id(from.version_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientWebLoginReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientWebLoginReq::CopyFrom(const ClientWebLoginReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientWebLoginReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ClientWebLoginReq::Swap(ClientWebLoginReq* other) {
  if (other != this) {
    std::swap(session_key_, other->session_key_);
    std::swap(account_, other->account_);
    std::swap(version_id_, other->version_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientWebLoginReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientWebLoginReq_descriptor_;
  metadata.reflection = ClientWebLoginReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OnePlayerInfo::kDigitidFieldNumber;
const int OnePlayerInfo::kNameFieldNumber;
const int OnePlayerInfo::kExpFieldNumber;
#endif  // !_MSC_VER

OnePlayerInfo::OnePlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OnePlayerInfo::InitAsDefaultInstance() {
}

OnePlayerInfo::OnePlayerInfo(const OnePlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OnePlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  digitid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  exp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OnePlayerInfo::~OnePlayerInfo() {
  SharedDtor();
}

void OnePlayerInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void OnePlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OnePlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OnePlayerInfo_descriptor_;
}

const OnePlayerInfo& OnePlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_loginclient_2eproto();
  return *default_instance_;
}

OnePlayerInfo* OnePlayerInfo::default_instance_ = NULL;

OnePlayerInfo* OnePlayerInfo::New() const {
  return new OnePlayerInfo;
}

void OnePlayerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    digitid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    exp_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OnePlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 digitid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &digitid_)));
          set_has_digitid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_exp;
        break;
      }

      // optional uint32 exp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OnePlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 digitid = 1;
  if (has_digitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->digitid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional uint32 exp = 3;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OnePlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 digitid = 1;
  if (has_digitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->digitid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 exp = 3;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OnePlayerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 digitid = 1;
    if (has_digitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->digitid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 exp = 3;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OnePlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OnePlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OnePlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OnePlayerInfo::MergeFrom(const OnePlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_digitid()) {
      set_digitid(from.digitid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OnePlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OnePlayerInfo::CopyFrom(const OnePlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnePlayerInfo::IsInitialized() const {

  return true;
}

void OnePlayerInfo::Swap(OnePlayerInfo* other) {
  if (other != this) {
    std::swap(digitid_, other->digitid_);
    std::swap(name_, other->name_);
    std::swap(exp_, other->exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OnePlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OnePlayerInfo_descriptor_;
  metadata.reflection = OnePlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AccountAllPlayerInfoRpt::kPlayersFieldNumber;
#endif  // !_MSC_VER

AccountAllPlayerInfoRpt::AccountAllPlayerInfoRpt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AccountAllPlayerInfoRpt::InitAsDefaultInstance() {
}

AccountAllPlayerInfoRpt::AccountAllPlayerInfoRpt(const AccountAllPlayerInfoRpt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AccountAllPlayerInfoRpt::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountAllPlayerInfoRpt::~AccountAllPlayerInfoRpt() {
  SharedDtor();
}

void AccountAllPlayerInfoRpt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AccountAllPlayerInfoRpt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountAllPlayerInfoRpt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountAllPlayerInfoRpt_descriptor_;
}

const AccountAllPlayerInfoRpt& AccountAllPlayerInfoRpt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_loginclient_2eproto();
  return *default_instance_;
}

AccountAllPlayerInfoRpt* AccountAllPlayerInfoRpt::default_instance_ = NULL;

AccountAllPlayerInfoRpt* AccountAllPlayerInfoRpt::New() const {
  return new AccountAllPlayerInfoRpt;
}

void AccountAllPlayerInfoRpt::Clear() {
  players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccountAllPlayerInfoRpt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protoc.loginclient.OnePlayerInfo players = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_players;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AccountAllPlayerInfoRpt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protoc.loginclient.OnePlayerInfo players = 1;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->players(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AccountAllPlayerInfoRpt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protoc.loginclient.OnePlayerInfo players = 1;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->players(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AccountAllPlayerInfoRpt::ByteSize() const {
  int total_size = 0;

  // repeated .protoc.loginclient.OnePlayerInfo players = 1;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountAllPlayerInfoRpt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccountAllPlayerInfoRpt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccountAllPlayerInfoRpt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccountAllPlayerInfoRpt::MergeFrom(const AccountAllPlayerInfoRpt& from) {
  GOOGLE_CHECK_NE(&from, this);
  players_.MergeFrom(from.players_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccountAllPlayerInfoRpt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountAllPlayerInfoRpt::CopyFrom(const AccountAllPlayerInfoRpt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountAllPlayerInfoRpt::IsInitialized() const {

  return true;
}

void AccountAllPlayerInfoRpt::Swap(AccountAllPlayerInfoRpt* other) {
  if (other != this) {
    players_.Swap(&other->players_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccountAllPlayerInfoRpt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountAllPlayerInfoRpt_descriptor_;
  metadata.reflection = AccountAllPlayerInfoRpt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SelectActivePlayer::kDigitidFieldNumber;
#endif  // !_MSC_VER

SelectActivePlayer::SelectActivePlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SelectActivePlayer::InitAsDefaultInstance() {
}

SelectActivePlayer::SelectActivePlayer(const SelectActivePlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SelectActivePlayer::SharedCtor() {
  _cached_size_ = 0;
  digitid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SelectActivePlayer::~SelectActivePlayer() {
  SharedDtor();
}

void SelectActivePlayer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SelectActivePlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SelectActivePlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SelectActivePlayer_descriptor_;
}

const SelectActivePlayer& SelectActivePlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_loginclient_2eproto();
  return *default_instance_;
}

SelectActivePlayer* SelectActivePlayer::default_instance_ = NULL;

SelectActivePlayer* SelectActivePlayer::New() const {
  return new SelectActivePlayer;
}

void SelectActivePlayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    digitid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SelectActivePlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 digitid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &digitid_)));
          set_has_digitid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SelectActivePlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 digitid = 1;
  if (has_digitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->digitid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SelectActivePlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 digitid = 1;
  if (has_digitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->digitid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SelectActivePlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 digitid = 1;
    if (has_digitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->digitid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SelectActivePlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SelectActivePlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SelectActivePlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SelectActivePlayer::MergeFrom(const SelectActivePlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_digitid()) {
      set_digitid(from.digitid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SelectActivePlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SelectActivePlayer::CopyFrom(const SelectActivePlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectActivePlayer::IsInitialized() const {

  return true;
}

void SelectActivePlayer::Swap(SelectActivePlayer* other) {
  if (other != this) {
    std::swap(digitid_, other->digitid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SelectActivePlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SelectActivePlayer_descriptor_;
  metadata.reflection = SelectActivePlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WaitingLoinNtf::kNumberFieldNumber;
#endif  // !_MSC_VER

WaitingLoinNtf::WaitingLoinNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WaitingLoinNtf::InitAsDefaultInstance() {
}

WaitingLoinNtf::WaitingLoinNtf(const WaitingLoinNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WaitingLoinNtf::SharedCtor() {
  _cached_size_ = 0;
  number_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WaitingLoinNtf::~WaitingLoinNtf() {
  SharedDtor();
}

void WaitingLoinNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WaitingLoinNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WaitingLoinNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WaitingLoinNtf_descriptor_;
}

const WaitingLoinNtf& WaitingLoinNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_loginclient_2eproto();
  return *default_instance_;
}

WaitingLoinNtf* WaitingLoinNtf::default_instance_ = NULL;

WaitingLoinNtf* WaitingLoinNtf::New() const {
  return new WaitingLoinNtf;
}

void WaitingLoinNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    number_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WaitingLoinNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 number = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WaitingLoinNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 number = 1;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->number(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WaitingLoinNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 number = 1;
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->number(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WaitingLoinNtf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 number = 1;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->number());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WaitingLoinNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WaitingLoinNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WaitingLoinNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WaitingLoinNtf::MergeFrom(const WaitingLoinNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_number()) {
      set_number(from.number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WaitingLoinNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WaitingLoinNtf::CopyFrom(const WaitingLoinNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WaitingLoinNtf::IsInitialized() const {

  return true;
}

void WaitingLoinNtf::Swap(WaitingLoinNtf* other) {
  if (other != this) {
    std::swap(number_, other->number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WaitingLoinNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WaitingLoinNtf_descriptor_;
  metadata.reflection = WaitingLoinNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SelfModeCreatekAccountReq::kAccountFieldNumber;
const int SelfModeCreatekAccountReq::kPasswordFieldNumber;
const int SelfModeCreatekAccountReq::kInvitationCodeFieldNumber;
#endif  // !_MSC_VER

SelfModeCreatekAccountReq::SelfModeCreatekAccountReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SelfModeCreatekAccountReq::InitAsDefaultInstance() {
}

SelfModeCreatekAccountReq::SelfModeCreatekAccountReq(const SelfModeCreatekAccountReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SelfModeCreatekAccountReq::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  invitation_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SelfModeCreatekAccountReq::~SelfModeCreatekAccountReq() {
  SharedDtor();
}

void SelfModeCreatekAccountReq::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (invitation_code_ != &::google::protobuf::internal::kEmptyString) {
    delete invitation_code_;
  }
  if (this != default_instance_) {
  }
}

void SelfModeCreatekAccountReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SelfModeCreatekAccountReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SelfModeCreatekAccountReq_descriptor_;
}

const SelfModeCreatekAccountReq& SelfModeCreatekAccountReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_loginclient_2eproto();
  return *default_instance_;
}

SelfModeCreatekAccountReq* SelfModeCreatekAccountReq::default_instance_ = NULL;

SelfModeCreatekAccountReq* SelfModeCreatekAccountReq::New() const {
  return new SelfModeCreatekAccountReq;
}

void SelfModeCreatekAccountReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    if (has_invitation_code()) {
      if (invitation_code_ != &::google::protobuf::internal::kEmptyString) {
        invitation_code_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SelfModeCreatekAccountReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // optional string password = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_invitation_code;
        break;
      }

      // optional string invitation_code = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_invitation_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_invitation_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->invitation_code().data(), this->invitation_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SelfModeCreatekAccountReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->account(), output);
  }

  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->password(), output);
  }

  // optional string invitation_code = 3;
  if (has_invitation_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->invitation_code().data(), this->invitation_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->invitation_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SelfModeCreatekAccountReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }

  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  // optional string invitation_code = 3;
  if (has_invitation_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->invitation_code().data(), this->invitation_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->invitation_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SelfModeCreatekAccountReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional string password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional string invitation_code = 3;
    if (has_invitation_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->invitation_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SelfModeCreatekAccountReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SelfModeCreatekAccountReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SelfModeCreatekAccountReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SelfModeCreatekAccountReq::MergeFrom(const SelfModeCreatekAccountReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_invitation_code()) {
      set_invitation_code(from.invitation_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SelfModeCreatekAccountReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SelfModeCreatekAccountReq::CopyFrom(const SelfModeCreatekAccountReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelfModeCreatekAccountReq::IsInitialized() const {

  return true;
}

void SelfModeCreatekAccountReq::Swap(SelfModeCreatekAccountReq* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(password_, other->password_);
    std::swap(invitation_code_, other->invitation_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SelfModeCreatekAccountReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SelfModeCreatekAccountReq_descriptor_;
  metadata.reflection = SelfModeCreatekAccountReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SelfModeCreatekAccountAck::kErrNoFieldNumber;
#endif  // !_MSC_VER

SelfModeCreatekAccountAck::SelfModeCreatekAccountAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SelfModeCreatekAccountAck::InitAsDefaultInstance() {
}

SelfModeCreatekAccountAck::SelfModeCreatekAccountAck(const SelfModeCreatekAccountAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SelfModeCreatekAccountAck::SharedCtor() {
  _cached_size_ = 0;
  err_no_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SelfModeCreatekAccountAck::~SelfModeCreatekAccountAck() {
  SharedDtor();
}

void SelfModeCreatekAccountAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SelfModeCreatekAccountAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SelfModeCreatekAccountAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SelfModeCreatekAccountAck_descriptor_;
}

const SelfModeCreatekAccountAck& SelfModeCreatekAccountAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_loginclient_2eproto();
  return *default_instance_;
}

SelfModeCreatekAccountAck* SelfModeCreatekAccountAck::default_instance_ = NULL;

SelfModeCreatekAccountAck* SelfModeCreatekAccountAck::New() const {
  return new SelfModeCreatekAccountAck;
}

void SelfModeCreatekAccountAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    err_no_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SelfModeCreatekAccountAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 err_no = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_no_)));
          set_has_err_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SelfModeCreatekAccountAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 err_no = 1;
  if (has_err_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->err_no(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SelfModeCreatekAccountAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 err_no = 1;
  if (has_err_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->err_no(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SelfModeCreatekAccountAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 err_no = 1;
    if (has_err_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err_no());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SelfModeCreatekAccountAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SelfModeCreatekAccountAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SelfModeCreatekAccountAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SelfModeCreatekAccountAck::MergeFrom(const SelfModeCreatekAccountAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_err_no()) {
      set_err_no(from.err_no());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SelfModeCreatekAccountAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SelfModeCreatekAccountAck::CopyFrom(const SelfModeCreatekAccountAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelfModeCreatekAccountAck::IsInitialized() const {

  return true;
}

void SelfModeCreatekAccountAck::Swap(SelfModeCreatekAccountAck* other) {
  if (other != this) {
    std::swap(err_no_, other->err_no_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SelfModeCreatekAccountAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SelfModeCreatekAccountAck_descriptor_;
  metadata.reflection = SelfModeCreatekAccountAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SelfModeActiveAccountReq::kAccountFieldNumber;
const int SelfModeActiveAccountReq::kInvitationCodeFieldNumber;
#endif  // !_MSC_VER

SelfModeActiveAccountReq::SelfModeActiveAccountReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SelfModeActiveAccountReq::InitAsDefaultInstance() {
}

SelfModeActiveAccountReq::SelfModeActiveAccountReq(const SelfModeActiveAccountReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SelfModeActiveAccountReq::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  invitation_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SelfModeActiveAccountReq::~SelfModeActiveAccountReq() {
  SharedDtor();
}

void SelfModeActiveAccountReq::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (invitation_code_ != &::google::protobuf::internal::kEmptyString) {
    delete invitation_code_;
  }
  if (this != default_instance_) {
  }
}

void SelfModeActiveAccountReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SelfModeActiveAccountReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SelfModeActiveAccountReq_descriptor_;
}

const SelfModeActiveAccountReq& SelfModeActiveAccountReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_loginclient_2eproto();
  return *default_instance_;
}

SelfModeActiveAccountReq* SelfModeActiveAccountReq::default_instance_ = NULL;

SelfModeActiveAccountReq* SelfModeActiveAccountReq::New() const {
  return new SelfModeActiveAccountReq;
}

void SelfModeActiveAccountReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_invitation_code()) {
      if (invitation_code_ != &::google::protobuf::internal::kEmptyString) {
        invitation_code_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SelfModeActiveAccountReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_invitation_code;
        break;
      }

      // optional string invitation_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_invitation_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_invitation_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->invitation_code().data(), this->invitation_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SelfModeActiveAccountReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->account(), output);
  }

  // optional string invitation_code = 2;
  if (has_invitation_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->invitation_code().data(), this->invitation_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->invitation_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SelfModeActiveAccountReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }

  // optional string invitation_code = 2;
  if (has_invitation_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->invitation_code().data(), this->invitation_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->invitation_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SelfModeActiveAccountReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional string invitation_code = 2;
    if (has_invitation_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->invitation_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SelfModeActiveAccountReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SelfModeActiveAccountReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SelfModeActiveAccountReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SelfModeActiveAccountReq::MergeFrom(const SelfModeActiveAccountReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_invitation_code()) {
      set_invitation_code(from.invitation_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SelfModeActiveAccountReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SelfModeActiveAccountReq::CopyFrom(const SelfModeActiveAccountReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelfModeActiveAccountReq::IsInitialized() const {

  return true;
}

void SelfModeActiveAccountReq::Swap(SelfModeActiveAccountReq* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(invitation_code_, other->invitation_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SelfModeActiveAccountReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SelfModeActiveAccountReq_descriptor_;
  metadata.reflection = SelfModeActiveAccountReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SelfModeActiveAccountAck::kErrNoFieldNumber;
#endif  // !_MSC_VER

SelfModeActiveAccountAck::SelfModeActiveAccountAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SelfModeActiveAccountAck::InitAsDefaultInstance() {
}

SelfModeActiveAccountAck::SelfModeActiveAccountAck(const SelfModeActiveAccountAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SelfModeActiveAccountAck::SharedCtor() {
  _cached_size_ = 0;
  err_no_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SelfModeActiveAccountAck::~SelfModeActiveAccountAck() {
  SharedDtor();
}

void SelfModeActiveAccountAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SelfModeActiveAccountAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SelfModeActiveAccountAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SelfModeActiveAccountAck_descriptor_;
}

const SelfModeActiveAccountAck& SelfModeActiveAccountAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_loginclient_2eproto();
  return *default_instance_;
}

SelfModeActiveAccountAck* SelfModeActiveAccountAck::default_instance_ = NULL;

SelfModeActiveAccountAck* SelfModeActiveAccountAck::New() const {
  return new SelfModeActiveAccountAck;
}

void SelfModeActiveAccountAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    err_no_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SelfModeActiveAccountAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 err_no = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_no_)));
          set_has_err_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SelfModeActiveAccountAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 err_no = 1;
  if (has_err_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->err_no(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SelfModeActiveAccountAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 err_no = 1;
  if (has_err_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->err_no(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SelfModeActiveAccountAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 err_no = 1;
    if (has_err_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err_no());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SelfModeActiveAccountAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SelfModeActiveAccountAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SelfModeActiveAccountAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SelfModeActiveAccountAck::MergeFrom(const SelfModeActiveAccountAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_err_no()) {
      set_err_no(from.err_no());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SelfModeActiveAccountAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SelfModeActiveAccountAck::CopyFrom(const SelfModeActiveAccountAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelfModeActiveAccountAck::IsInitialized() const {

  return true;
}

void SelfModeActiveAccountAck::Swap(SelfModeActiveAccountAck* other) {
  if (other != this) {
    std::swap(err_no_, other->err_no_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SelfModeActiveAccountAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SelfModeActiveAccountAck_descriptor_;
  metadata.reflection = SelfModeActiveAccountAck_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace loginclient
}  // namespace protoc

// @@protoc_insertion_point(global_scope)
