// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gameserver_dbserver.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "gameserver_dbserver.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protoc {
namespace gs_dbs {

namespace {

const ::google::protobuf::Descriptor* GameServerRpt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameServerRpt_reflection_ = NULL;
const ::google::protobuf::Descriptor* DBServerRpt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBServerRpt_reflection_ = NULL;
const ::google::protobuf::Descriptor* KickOutRpt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KickOutRpt_reflection_ = NULL;
const ::google::protobuf::Descriptor* KickOutAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KickOutAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* RandCheckReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RandCheckReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RandCheckAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RandCheckAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeartPingReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeartPingReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeartPingAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeartPingAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetIDReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetIDReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetIDAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetIDAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMListRpt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMListRpt_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMListRpt_gm_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMListRpt_gm_reflection_ = NULL;
const ::google::protobuf::Descriptor* CheckNewNameReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CheckNewNameReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CheckNewNameAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CheckNewNameAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* GSState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GSState_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameServerStateNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameServerStateNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllGameServerStateRpt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllGameServerStateRpt_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMMessageNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMMessageNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMMessageExecuteAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMMessageExecuteAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetGSOnlinePlayerNumberReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetGSOnlinePlayerNumberReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GSPlayerNumber_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GSPlayerNumber_reflection_ = NULL;
const ::google::protobuf::Descriptor* GSOnlinePlayerNumberRpt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GSOnlinePlayerNumberRpt_reflection_ = NULL;
const ::google::protobuf::Descriptor* OtherGSOnlinePlayerRpt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OtherGSOnlinePlayerRpt_reflection_ = NULL;
const ::google::protobuf::Descriptor* OtherGSPlayerOnlineRpt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OtherGSPlayerOnlineRpt_reflection_ = NULL;
const ::google::protobuf::Descriptor* OtherGSPlayerOfflineRpt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OtherGSPlayerOfflineRpt_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChongZhiPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChongZhiPlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* OfflineChongZhiNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OfflineChongZhiNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerLeaveGameRpt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerLeaveGameRpt_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetGM_ListReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetGM_ListReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetGM_ListAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetGM_ListAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* DBSServerCloseNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBSServerCloseNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* CheckInGSReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CheckInGSReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CheckInGSAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CheckInGSAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* get_login_key_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  get_login_key_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* get_login_key_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  get_login_key_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* login_gs_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  login_gs_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* login_gs_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  login_gs_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* online_gs_rpt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  online_gs_rpt_reflection_ = NULL;
const ::google::protobuf::Descriptor* switch_gs_lock_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  switch_gs_lock_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* switch_gs_lock_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  switch_gs_lock_ack_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_gameserver_5fdbserver_2eproto() {
  protobuf_AddDesc_gameserver_5fdbserver_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "gameserver_dbserver.proto");
  GOOGLE_CHECK(file != NULL);
  GameServerRpt_descriptor_ = file->message_type(0);
  static const int GameServerRpt_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameServerRpt, gsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameServerRpt, gsname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameServerRpt, max_number_),
  };
  GameServerRpt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameServerRpt_descriptor_,
      GameServerRpt::default_instance_,
      GameServerRpt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameServerRpt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameServerRpt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameServerRpt));
  DBServerRpt_descriptor_ = file->message_type(1);
  static const int DBServerRpt_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBServerRpt, dbid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBServerRpt, dbname_),
  };
  DBServerRpt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DBServerRpt_descriptor_,
      DBServerRpt::default_instance_,
      DBServerRpt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBServerRpt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBServerRpt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DBServerRpt));
  KickOutRpt_descriptor_ = file->message_type(2);
  static const int KickOutRpt_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickOutRpt, playerid_),
  };
  KickOutRpt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KickOutRpt_descriptor_,
      KickOutRpt::default_instance_,
      KickOutRpt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickOutRpt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickOutRpt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KickOutRpt));
  KickOutAck_descriptor_ = file->message_type(3);
  static const int KickOutAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickOutAck, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickOutAck, error_no_),
  };
  KickOutAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KickOutAck_descriptor_,
      KickOutAck::default_instance_,
      KickOutAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickOutAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickOutAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KickOutAck));
  RandCheckReq_descriptor_ = file->message_type(4);
  static const int RandCheckReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandCheckReq, key_),
  };
  RandCheckReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RandCheckReq_descriptor_,
      RandCheckReq::default_instance_,
      RandCheckReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandCheckReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandCheckReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RandCheckReq));
  RandCheckAck_descriptor_ = file->message_type(5);
  static const int RandCheckAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandCheckAck, rand_text_),
  };
  RandCheckAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RandCheckAck_descriptor_,
      RandCheckAck::default_instance_,
      RandCheckAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandCheckAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandCheckAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RandCheckAck));
  HeartPingReq_descriptor_ = file->message_type(6);
  static const int HeartPingReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartPingReq, opt_),
  };
  HeartPingReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeartPingReq_descriptor_,
      HeartPingReq::default_instance_,
      HeartPingReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartPingReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartPingReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeartPingReq));
  HeartPingAck_descriptor_ = file->message_type(7);
  static const int HeartPingAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartPingAck, opt_),
  };
  HeartPingAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeartPingAck_descriptor_,
      HeartPingAck::default_instance_,
      HeartPingAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartPingAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartPingAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeartPingAck));
  GetIDReq_descriptor_ = file->message_type(8);
  static const int GetIDReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetIDReq, kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetIDReq, number_),
  };
  GetIDReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetIDReq_descriptor_,
      GetIDReq::default_instance_,
      GetIDReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetIDReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetIDReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetIDReq));
  GetIDAck_descriptor_ = file->message_type(9);
  static const int GetIDAck_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetIDAck, kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetIDAck, number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetIDAck, begin_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetIDAck, end_id_),
  };
  GetIDAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetIDAck_descriptor_,
      GetIDAck::default_instance_,
      GetIDAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetIDAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetIDAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetIDAck));
  GMListRpt_descriptor_ = file->message_type(10);
  static const int GMListRpt_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMListRpt, table_),
  };
  GMListRpt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMListRpt_descriptor_,
      GMListRpt::default_instance_,
      GMListRpt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMListRpt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMListRpt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMListRpt));
  GMListRpt_gm_descriptor_ = GMListRpt_descriptor_->nested_type(0);
  static const int GMListRpt_gm_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMListRpt_gm, gm_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMListRpt_gm, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMListRpt_gm, password_),
  };
  GMListRpt_gm_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMListRpt_gm_descriptor_,
      GMListRpt_gm::default_instance_,
      GMListRpt_gm_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMListRpt_gm, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMListRpt_gm, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMListRpt_gm));
  CheckNewNameReq_descriptor_ = file->message_type(11);
  static const int CheckNewNameReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckNewNameReq, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckNewNameReq, newname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckNewNameReq, head_pic_id_),
  };
  CheckNewNameReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CheckNewNameReq_descriptor_,
      CheckNewNameReq::default_instance_,
      CheckNewNameReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckNewNameReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckNewNameReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CheckNewNameReq));
  CheckNewNameAck_descriptor_ = file->message_type(12);
  static const int CheckNewNameAck_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckNewNameAck, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckNewNameAck, newname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckNewNameAck, head_pic_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckNewNameAck, error_no_),
  };
  CheckNewNameAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CheckNewNameAck_descriptor_,
      CheckNewNameAck::default_instance_,
      CheckNewNameAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckNewNameAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckNewNameAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CheckNewNameAck));
  GSState_descriptor_ = file->message_type(13);
  static const int GSState_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GSState, gsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GSState, gsname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GSState, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GSState, cur_online_number_),
  };
  GSState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GSState_descriptor_,
      GSState::default_instance_,
      GSState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GSState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GSState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GSState));
  GameServerStateNtf_descriptor_ = file->message_type(14);
  static const int GameServerStateNtf_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameServerStateNtf, gs_),
  };
  GameServerStateNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameServerStateNtf_descriptor_,
      GameServerStateNtf::default_instance_,
      GameServerStateNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameServerStateNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameServerStateNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameServerStateNtf));
  AllGameServerStateRpt_descriptor_ = file->message_type(15);
  static const int AllGameServerStateRpt_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllGameServerStateRpt, gs_),
  };
  AllGameServerStateRpt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllGameServerStateRpt_descriptor_,
      AllGameServerStateRpt::default_instance_,
      AllGameServerStateRpt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllGameServerStateRpt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllGameServerStateRpt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllGameServerStateRpt));
  GMMessageNtf_descriptor_ = file->message_type(16);
  static const int GMMessageNtf_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMMessageNtf, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMMessageNtf, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMMessageNtf, playername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMMessageNtf, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMMessageNtf, src_gs_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMMessageNtf, cmd_),
  };
  GMMessageNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMMessageNtf_descriptor_,
      GMMessageNtf::default_instance_,
      GMMessageNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMMessageNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMMessageNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMMessageNtf));
  GMMessageExecuteAck_descriptor_ = file->message_type(17);
  static const int GMMessageExecuteAck_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMMessageExecuteAck, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMMessageExecuteAck, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMMessageExecuteAck, playername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMMessageExecuteAck, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMMessageExecuteAck, src_gs_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMMessageExecuteAck, dest_gs_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMMessageExecuteAck, to_client_message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMMessageExecuteAck, to_client_message_),
  };
  GMMessageExecuteAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMMessageExecuteAck_descriptor_,
      GMMessageExecuteAck::default_instance_,
      GMMessageExecuteAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMMessageExecuteAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMMessageExecuteAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMMessageExecuteAck));
  GetGSOnlinePlayerNumberReq_descriptor_ = file->message_type(18);
  static const int GetGSOnlinePlayerNumberReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGSOnlinePlayerNumberReq, kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGSOnlinePlayerNumberReq, playerid_),
  };
  GetGSOnlinePlayerNumberReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetGSOnlinePlayerNumberReq_descriptor_,
      GetGSOnlinePlayerNumberReq::default_instance_,
      GetGSOnlinePlayerNumberReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGSOnlinePlayerNumberReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGSOnlinePlayerNumberReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetGSOnlinePlayerNumberReq));
  GSPlayerNumber_descriptor_ = file->message_type(19);
  static const int GSPlayerNumber_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GSPlayerNumber, gs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GSPlayerNumber, gsname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GSPlayerNumber, number_),
  };
  GSPlayerNumber_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GSPlayerNumber_descriptor_,
      GSPlayerNumber::default_instance_,
      GSPlayerNumber_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GSPlayerNumber, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GSPlayerNumber, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GSPlayerNumber));
  GSOnlinePlayerNumberRpt_descriptor_ = file->message_type(20);
  static const int GSOnlinePlayerNumberRpt_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GSOnlinePlayerNumberRpt, gsn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GSOnlinePlayerNumberRpt, playerid_),
  };
  GSOnlinePlayerNumberRpt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GSOnlinePlayerNumberRpt_descriptor_,
      GSOnlinePlayerNumberRpt::default_instance_,
      GSOnlinePlayerNumberRpt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GSOnlinePlayerNumberRpt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GSOnlinePlayerNumberRpt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GSOnlinePlayerNumberRpt));
  OtherGSOnlinePlayerRpt_descriptor_ = file->message_type(21);
  static const int OtherGSOnlinePlayerRpt_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherGSOnlinePlayerRpt, isonline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherGSOnlinePlayerRpt, playerid_),
  };
  OtherGSOnlinePlayerRpt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OtherGSOnlinePlayerRpt_descriptor_,
      OtherGSOnlinePlayerRpt::default_instance_,
      OtherGSOnlinePlayerRpt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherGSOnlinePlayerRpt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherGSOnlinePlayerRpt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OtherGSOnlinePlayerRpt));
  OtherGSPlayerOnlineRpt_descriptor_ = file->message_type(22);
  static const int OtherGSPlayerOnlineRpt_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherGSPlayerOnlineRpt, playerid_),
  };
  OtherGSPlayerOnlineRpt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OtherGSPlayerOnlineRpt_descriptor_,
      OtherGSPlayerOnlineRpt::default_instance_,
      OtherGSPlayerOnlineRpt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherGSPlayerOnlineRpt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherGSPlayerOnlineRpt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OtherGSPlayerOnlineRpt));
  OtherGSPlayerOfflineRpt_descriptor_ = file->message_type(23);
  static const int OtherGSPlayerOfflineRpt_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherGSPlayerOfflineRpt, playerid_),
  };
  OtherGSPlayerOfflineRpt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OtherGSPlayerOfflineRpt_descriptor_,
      OtherGSPlayerOfflineRpt::default_instance_,
      OtherGSPlayerOfflineRpt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherGSPlayerOfflineRpt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherGSPlayerOfflineRpt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OtherGSPlayerOfflineRpt));
  ChongZhiPlayer_descriptor_ = file->message_type(24);
  static const int ChongZhiPlayer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChongZhiPlayer, transaction_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChongZhiPlayer, playerid_),
  };
  ChongZhiPlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChongZhiPlayer_descriptor_,
      ChongZhiPlayer::default_instance_,
      ChongZhiPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChongZhiPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChongZhiPlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChongZhiPlayer));
  OfflineChongZhiNtf_descriptor_ = file->message_type(25);
  static const int OfflineChongZhiNtf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineChongZhiNtf, area_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineChongZhiNtf, chongzhi_user_),
  };
  OfflineChongZhiNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OfflineChongZhiNtf_descriptor_,
      OfflineChongZhiNtf::default_instance_,
      OfflineChongZhiNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineChongZhiNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineChongZhiNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OfflineChongZhiNtf));
  PlayerLeaveGameRpt_descriptor_ = file->message_type(26);
  static const int PlayerLeaveGameRpt_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLeaveGameRpt, playerid_),
  };
  PlayerLeaveGameRpt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerLeaveGameRpt_descriptor_,
      PlayerLeaveGameRpt::default_instance_,
      PlayerLeaveGameRpt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLeaveGameRpt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLeaveGameRpt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerLeaveGameRpt));
  GetGM_ListReq_descriptor_ = file->message_type(27);
  static const int GetGM_ListReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGM_ListReq, playerid_),
  };
  GetGM_ListReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetGM_ListReq_descriptor_,
      GetGM_ListReq::default_instance_,
      GetGM_ListReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGM_ListReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGM_ListReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetGM_ListReq));
  GetGM_ListAck_descriptor_ = file->message_type(28);
  static const int GetGM_ListAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGM_ListAck, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGM_ListAck, err_no_),
  };
  GetGM_ListAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetGM_ListAck_descriptor_,
      GetGM_ListAck::default_instance_,
      GetGM_ListAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGM_ListAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGM_ListAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetGM_ListAck));
  DBSServerCloseNtf_descriptor_ = file->message_type(29);
  static const int DBSServerCloseNtf_offsets_[1] = {
  };
  DBSServerCloseNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DBSServerCloseNtf_descriptor_,
      DBSServerCloseNtf::default_instance_,
      DBSServerCloseNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBSServerCloseNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBSServerCloseNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DBSServerCloseNtf));
  CheckInGSReq_descriptor_ = file->message_type(30);
  static const int CheckInGSReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckInGSReq, playerid_),
  };
  CheckInGSReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CheckInGSReq_descriptor_,
      CheckInGSReq::default_instance_,
      CheckInGSReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckInGSReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckInGSReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CheckInGSReq));
  CheckInGSAck_descriptor_ = file->message_type(31);
  static const int CheckInGSAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckInGSAck, playerid_),
  };
  CheckInGSAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CheckInGSAck_descriptor_,
      CheckInGSAck::default_instance_,
      CheckInGSAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckInGSAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckInGSAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CheckInGSAck));
  get_login_key_req_descriptor_ = file->message_type(32);
  static const int get_login_key_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_login_key_req, playerid_),
  };
  get_login_key_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      get_login_key_req_descriptor_,
      get_login_key_req::default_instance_,
      get_login_key_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_login_key_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_login_key_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(get_login_key_req));
  get_login_key_ack_descriptor_ = file->message_type(33);
  static const int get_login_key_ack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_login_key_ack, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_login_key_ack, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_login_key_ack, leave_time_),
  };
  get_login_key_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      get_login_key_ack_descriptor_,
      get_login_key_ack::default_instance_,
      get_login_key_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_login_key_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_login_key_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(get_login_key_ack));
  login_gs_req_descriptor_ = file->message_type(34);
  static const int login_gs_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_gs_req, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_gs_req, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_gs_req, area_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_gs_req, platform_id_),
  };
  login_gs_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      login_gs_req_descriptor_,
      login_gs_req::default_instance_,
      login_gs_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_gs_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_gs_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(login_gs_req));
  login_gs_ack_descriptor_ = file->message_type(35);
  static const int login_gs_ack_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_gs_ack, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_gs_ack, gate_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_gs_ack, gateport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_gs_ack, gate_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_gs_ack, err_no_),
  };
  login_gs_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      login_gs_ack_descriptor_,
      login_gs_ack::default_instance_,
      login_gs_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_gs_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_gs_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(login_gs_ack));
  online_gs_rpt_descriptor_ = file->message_type(36);
  static const int online_gs_rpt_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(online_gs_rpt, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(online_gs_rpt, gsid_),
  };
  online_gs_rpt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      online_gs_rpt_descriptor_,
      online_gs_rpt::default_instance_,
      online_gs_rpt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(online_gs_rpt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(online_gs_rpt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(online_gs_rpt));
  switch_gs_lock_req_descriptor_ = file->message_type(37);
  static const int switch_gs_lock_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(switch_gs_lock_req, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(switch_gs_lock_req, gsid_),
  };
  switch_gs_lock_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      switch_gs_lock_req_descriptor_,
      switch_gs_lock_req::default_instance_,
      switch_gs_lock_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(switch_gs_lock_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(switch_gs_lock_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(switch_gs_lock_req));
  switch_gs_lock_ack_descriptor_ = file->message_type(38);
  static const int switch_gs_lock_ack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(switch_gs_lock_ack, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(switch_gs_lock_ack, gsid_),
  };
  switch_gs_lock_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      switch_gs_lock_ack_descriptor_,
      switch_gs_lock_ack::default_instance_,
      switch_gs_lock_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(switch_gs_lock_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(switch_gs_lock_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(switch_gs_lock_ack));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_gameserver_5fdbserver_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameServerRpt_descriptor_, &GameServerRpt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DBServerRpt_descriptor_, &DBServerRpt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KickOutRpt_descriptor_, &KickOutRpt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KickOutAck_descriptor_, &KickOutAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RandCheckReq_descriptor_, &RandCheckReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RandCheckAck_descriptor_, &RandCheckAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeartPingReq_descriptor_, &HeartPingReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeartPingAck_descriptor_, &HeartPingAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetIDReq_descriptor_, &GetIDReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetIDAck_descriptor_, &GetIDAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMListRpt_descriptor_, &GMListRpt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMListRpt_gm_descriptor_, &GMListRpt_gm::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CheckNewNameReq_descriptor_, &CheckNewNameReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CheckNewNameAck_descriptor_, &CheckNewNameAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GSState_descriptor_, &GSState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameServerStateNtf_descriptor_, &GameServerStateNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllGameServerStateRpt_descriptor_, &AllGameServerStateRpt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMMessageNtf_descriptor_, &GMMessageNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMMessageExecuteAck_descriptor_, &GMMessageExecuteAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetGSOnlinePlayerNumberReq_descriptor_, &GetGSOnlinePlayerNumberReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GSPlayerNumber_descriptor_, &GSPlayerNumber::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GSOnlinePlayerNumberRpt_descriptor_, &GSOnlinePlayerNumberRpt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OtherGSOnlinePlayerRpt_descriptor_, &OtherGSOnlinePlayerRpt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OtherGSPlayerOnlineRpt_descriptor_, &OtherGSPlayerOnlineRpt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OtherGSPlayerOfflineRpt_descriptor_, &OtherGSPlayerOfflineRpt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChongZhiPlayer_descriptor_, &ChongZhiPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OfflineChongZhiNtf_descriptor_, &OfflineChongZhiNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerLeaveGameRpt_descriptor_, &PlayerLeaveGameRpt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetGM_ListReq_descriptor_, &GetGM_ListReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetGM_ListAck_descriptor_, &GetGM_ListAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DBSServerCloseNtf_descriptor_, &DBSServerCloseNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CheckInGSReq_descriptor_, &CheckInGSReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CheckInGSAck_descriptor_, &CheckInGSAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    get_login_key_req_descriptor_, &get_login_key_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    get_login_key_ack_descriptor_, &get_login_key_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    login_gs_req_descriptor_, &login_gs_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    login_gs_ack_descriptor_, &login_gs_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    online_gs_rpt_descriptor_, &online_gs_rpt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    switch_gs_lock_req_descriptor_, &switch_gs_lock_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    switch_gs_lock_ack_descriptor_, &switch_gs_lock_ack::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_gameserver_5fdbserver_2eproto() {
  delete GameServerRpt::default_instance_;
  delete GameServerRpt_reflection_;
  delete DBServerRpt::default_instance_;
  delete DBServerRpt_reflection_;
  delete KickOutRpt::default_instance_;
  delete KickOutRpt_reflection_;
  delete KickOutAck::default_instance_;
  delete KickOutAck_reflection_;
  delete RandCheckReq::default_instance_;
  delete RandCheckReq_reflection_;
  delete RandCheckAck::default_instance_;
  delete RandCheckAck_reflection_;
  delete HeartPingReq::default_instance_;
  delete HeartPingReq_reflection_;
  delete HeartPingAck::default_instance_;
  delete HeartPingAck_reflection_;
  delete GetIDReq::default_instance_;
  delete GetIDReq_reflection_;
  delete GetIDAck::default_instance_;
  delete GetIDAck_reflection_;
  delete GMListRpt::default_instance_;
  delete GMListRpt_reflection_;
  delete GMListRpt_gm::default_instance_;
  delete GMListRpt_gm_reflection_;
  delete CheckNewNameReq::default_instance_;
  delete CheckNewNameReq_reflection_;
  delete CheckNewNameAck::default_instance_;
  delete CheckNewNameAck_reflection_;
  delete GSState::default_instance_;
  delete GSState_reflection_;
  delete GameServerStateNtf::default_instance_;
  delete GameServerStateNtf_reflection_;
  delete AllGameServerStateRpt::default_instance_;
  delete AllGameServerStateRpt_reflection_;
  delete GMMessageNtf::default_instance_;
  delete GMMessageNtf_reflection_;
  delete GMMessageExecuteAck::default_instance_;
  delete GMMessageExecuteAck_reflection_;
  delete GetGSOnlinePlayerNumberReq::default_instance_;
  delete GetGSOnlinePlayerNumberReq_reflection_;
  delete GSPlayerNumber::default_instance_;
  delete GSPlayerNumber_reflection_;
  delete GSOnlinePlayerNumberRpt::default_instance_;
  delete GSOnlinePlayerNumberRpt_reflection_;
  delete OtherGSOnlinePlayerRpt::default_instance_;
  delete OtherGSOnlinePlayerRpt_reflection_;
  delete OtherGSPlayerOnlineRpt::default_instance_;
  delete OtherGSPlayerOnlineRpt_reflection_;
  delete OtherGSPlayerOfflineRpt::default_instance_;
  delete OtherGSPlayerOfflineRpt_reflection_;
  delete ChongZhiPlayer::default_instance_;
  delete ChongZhiPlayer_reflection_;
  delete OfflineChongZhiNtf::default_instance_;
  delete OfflineChongZhiNtf_reflection_;
  delete PlayerLeaveGameRpt::default_instance_;
  delete PlayerLeaveGameRpt_reflection_;
  delete GetGM_ListReq::default_instance_;
  delete GetGM_ListReq_reflection_;
  delete GetGM_ListAck::default_instance_;
  delete GetGM_ListAck_reflection_;
  delete DBSServerCloseNtf::default_instance_;
  delete DBSServerCloseNtf_reflection_;
  delete CheckInGSReq::default_instance_;
  delete CheckInGSReq_reflection_;
  delete CheckInGSAck::default_instance_;
  delete CheckInGSAck_reflection_;
  delete get_login_key_req::default_instance_;
  delete get_login_key_req_reflection_;
  delete get_login_key_ack::default_instance_;
  delete get_login_key_ack_reflection_;
  delete login_gs_req::default_instance_;
  delete login_gs_req_reflection_;
  delete login_gs_ack::default_instance_;
  delete login_gs_ack_reflection_;
  delete online_gs_rpt::default_instance_;
  delete online_gs_rpt_reflection_;
  delete switch_gs_lock_req::default_instance_;
  delete switch_gs_lock_req_reflection_;
  delete switch_gs_lock_ack::default_instance_;
  delete switch_gs_lock_ack_reflection_;
}

void protobuf_AddDesc_gameserver_5fdbserver_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031gameserver_dbserver.proto\022\rprotoc.gs_d"
    "bs\"A\n\rGameServerRpt\022\014\n\004gsid\030\001 \001(\t\022\016\n\006gsn"
    "ame\030\002 \001(\t\022\022\n\nmax_number\030\003 \001(\005\"+\n\013DBServe"
    "rRpt\022\014\n\004dbid\030\001 \001(\t\022\016\n\006dbname\030\002 \001(\t\"\036\n\nKi"
    "ckOutRpt\022\020\n\010playerid\030\001 \001(\004\"0\n\nKickOutAck"
    "\022\020\n\010playerid\030\001 \001(\004\022\020\n\010error_no\030\002 \001(\005\"\033\n\014"
    "RandCheckReq\022\013\n\003key\030\001 \001(\014\"!\n\014RandCheckAc"
    "k\022\021\n\trand_text\030\001 \001(\014\"\033\n\014HeartPingReq\022\013\n\003"
    "opt\030\001 \001(\005\"\033\n\014HeartPingAck\022\013\n\003opt\030\001 \001(\005\"("
    "\n\010GetIDReq\022\014\n\004kind\030\001 \001(\r\022\016\n\006number\030\002 \001(\r"
    "\"J\n\010GetIDAck\022\014\n\004kind\030\001 \001(\r\022\016\n\006number\030\002 \001"
    "(\r\022\020\n\010begin_id\030\003 \001(\004\022\016\n\006end_id\030\004 \001(\004\"r\n\t"
    "GMListRpt\022*\n\005table\030\001 \003(\0132\033.protoc.gs_dbs"
    ".GMListRpt.gm\0329\n\002gm\022\020\n\010gm_level\030\002 \001(\005\022\017\n"
    "\007account\030\003 \001(\t\022\020\n\010password\030\004 \001(\t\"I\n\017Chec"
    "kNewNameReq\022\020\n\010playerid\030\001 \002(\004\022\017\n\007newname"
    "\030\002 \002(\t\022\023\n\013head_pic_id\030\003 \001(\r\"[\n\017CheckNewN"
    "ameAck\022\020\n\010playerid\030\001 \002(\004\022\017\n\007newname\030\002 \002("
    "\t\022\023\n\013head_pic_id\030\003 \001(\r\022\020\n\010error_no\030\004 \002(\005"
    "\"Q\n\007GSState\022\014\n\004gsid\030\001 \001(\t\022\016\n\006gsname\030\002 \001("
    "\t\022\r\n\005state\030\003 \001(\005\022\031\n\021cur_online_number\030\004 "
    "\001(\005\"8\n\022GameServerStateNtf\022\"\n\002gs\030\001 \001(\0132\026."
    "protoc.gs_dbs.GSState\";\n\025AllGameServerSt"
    "ateRpt\022\"\n\002gs\030\001 \003(\0132\026.protoc.gs_dbs.GSSta"
    "te\"q\n\014GMMessageNtf\022\020\n\010playerid\030\001 \001(\004\022\017\n\007"
    "account\030\002 \001(\t\022\022\n\nplayername\030\003 \001(\t\022\n\n\002ip\030"
    "\004 \001(\t\022\021\n\tsrc_gs_id\030\005 \001(\t\022\013\n\003cmd\030\006 \001(\t\"\271\001"
    "\n\023GMMessageExecuteAck\022\020\n\010playerid\030\001 \001(\004\022"
    "\017\n\007account\030\002 \001(\t\022\022\n\nplayername\030\003 \001(\t\022\013\n\003"
    "cmd\030\004 \001(\t\022\021\n\tsrc_gs_id\030\005 \001(\t\022\022\n\ndest_gs_"
    "id\030\006 \001(\t\022\034\n\024to_client_message_id\030\007 \001(\005\022\031"
    "\n\021to_client_message\030\010 \001(\014\"<\n\032GetGSOnline"
    "PlayerNumberReq\022\014\n\004kind\030\001 \001(\005\022\020\n\010playeri"
    "d\030\002 \001(\004\"<\n\016GSPlayerNumber\022\n\n\002gs\030\001 \001(\t\022\016\n"
    "\006gsname\030\002 \001(\t\022\016\n\006number\030\003 \001(\005\"W\n\027GSOnlin"
    "ePlayerNumberRpt\022*\n\003gsn\030\001 \003(\0132\035.protoc.g"
    "s_dbs.GSPlayerNumber\022\020\n\010playerid\030\002 \001(\004\"<"
    "\n\026OtherGSOnlinePlayerRpt\022\020\n\010isonline\030\001 \001"
    "(\005\022\020\n\010playerid\030\002 \003(\004\"*\n\026OtherGSPlayerOnl"
    "ineRpt\022\020\n\010playerid\030\001 \001(\004\"+\n\027OtherGSPlaye"
    "rOfflineRpt\022\020\n\010playerid\030\001 \001(\004\":\n\016ChongZh"
    "iPlayer\022\026\n\016transaction_id\030\001 \001(\004\022\020\n\010playe"
    "rid\030\002 \001(\004\"[\n\022OfflineChongZhiNtf\022\017\n\007area_"
    "no\030\001 \001(\r\0224\n\rchongzhi_user\030\002 \003(\0132\035.protoc"
    ".gs_dbs.ChongZhiPlayer\"&\n\022PlayerLeaveGam"
    "eRpt\022\020\n\010playerid\030\001 \001(\004\"!\n\rGetGM_ListReq\022"
    "\020\n\010playerid\030\001 \001(\004\"1\n\rGetGM_ListAck\022\020\n\010pl"
    "ayerid\030\001 \001(\004\022\016\n\006err_no\030\002 \001(\005\"\023\n\021DBSServe"
    "rCloseNtf\" \n\014CheckInGSReq\022\020\n\010playerid\030\003 "
    "\001(\004\" \n\014CheckInGSAck\022\020\n\010playerid\030\003 \001(\004\"%\n"
    "\021get_login_key_req\022\020\n\010playerid\030\001 \001(\004\"F\n\021"
    "get_login_key_ack\022\020\n\010playerid\030\001 \001(\004\022\013\n\003k"
    "ey\030\002 \001(\t\022\022\n\nleave_time\030\003 \001(\005\"W\n\014login_gs"
    "_req\022\020\n\010playerid\030\001 \001(\004\022\017\n\007account\030\002 \001(\t\022"
    "\017\n\007area_id\030\003 \001(\r\022\023\n\013platform_id\030\004 \001(\005\"e\n"
    "\014login_gs_ack\022\020\n\010playerid\030\001 \001(\004\022\017\n\007gate_"
    "ip\030\002 \001(\t\022\020\n\010gateport\030\003 \001(\005\022\020\n\010gate_key\030\004"
    " \001(\005\022\016\n\006err_no\030\005 \001(\005\"/\n\ronline_gs_rpt\022\020\n"
    "\010playerid\030\001 \001(\004\022\014\n\004gsid\030\002 \001(\t\"4\n\022switch_"
    "gs_lock_req\022\020\n\010playerid\030\001 \001(\004\022\014\n\004gsid\030\002 "
    "\001(\t\"4\n\022switch_gs_lock_ack\022\020\n\010playerid\030\001 "
    "\001(\004\022\014\n\004gsid\030\002 \001(\t", 2457);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gameserver_dbserver.proto", &protobuf_RegisterTypes);
  GameServerRpt::default_instance_ = new GameServerRpt();
  DBServerRpt::default_instance_ = new DBServerRpt();
  KickOutRpt::default_instance_ = new KickOutRpt();
  KickOutAck::default_instance_ = new KickOutAck();
  RandCheckReq::default_instance_ = new RandCheckReq();
  RandCheckAck::default_instance_ = new RandCheckAck();
  HeartPingReq::default_instance_ = new HeartPingReq();
  HeartPingAck::default_instance_ = new HeartPingAck();
  GetIDReq::default_instance_ = new GetIDReq();
  GetIDAck::default_instance_ = new GetIDAck();
  GMListRpt::default_instance_ = new GMListRpt();
  GMListRpt_gm::default_instance_ = new GMListRpt_gm();
  CheckNewNameReq::default_instance_ = new CheckNewNameReq();
  CheckNewNameAck::default_instance_ = new CheckNewNameAck();
  GSState::default_instance_ = new GSState();
  GameServerStateNtf::default_instance_ = new GameServerStateNtf();
  AllGameServerStateRpt::default_instance_ = new AllGameServerStateRpt();
  GMMessageNtf::default_instance_ = new GMMessageNtf();
  GMMessageExecuteAck::default_instance_ = new GMMessageExecuteAck();
  GetGSOnlinePlayerNumberReq::default_instance_ = new GetGSOnlinePlayerNumberReq();
  GSPlayerNumber::default_instance_ = new GSPlayerNumber();
  GSOnlinePlayerNumberRpt::default_instance_ = new GSOnlinePlayerNumberRpt();
  OtherGSOnlinePlayerRpt::default_instance_ = new OtherGSOnlinePlayerRpt();
  OtherGSPlayerOnlineRpt::default_instance_ = new OtherGSPlayerOnlineRpt();
  OtherGSPlayerOfflineRpt::default_instance_ = new OtherGSPlayerOfflineRpt();
  ChongZhiPlayer::default_instance_ = new ChongZhiPlayer();
  OfflineChongZhiNtf::default_instance_ = new OfflineChongZhiNtf();
  PlayerLeaveGameRpt::default_instance_ = new PlayerLeaveGameRpt();
  GetGM_ListReq::default_instance_ = new GetGM_ListReq();
  GetGM_ListAck::default_instance_ = new GetGM_ListAck();
  DBSServerCloseNtf::default_instance_ = new DBSServerCloseNtf();
  CheckInGSReq::default_instance_ = new CheckInGSReq();
  CheckInGSAck::default_instance_ = new CheckInGSAck();
  get_login_key_req::default_instance_ = new get_login_key_req();
  get_login_key_ack::default_instance_ = new get_login_key_ack();
  login_gs_req::default_instance_ = new login_gs_req();
  login_gs_ack::default_instance_ = new login_gs_ack();
  online_gs_rpt::default_instance_ = new online_gs_rpt();
  switch_gs_lock_req::default_instance_ = new switch_gs_lock_req();
  switch_gs_lock_ack::default_instance_ = new switch_gs_lock_ack();
  GameServerRpt::default_instance_->InitAsDefaultInstance();
  DBServerRpt::default_instance_->InitAsDefaultInstance();
  KickOutRpt::default_instance_->InitAsDefaultInstance();
  KickOutAck::default_instance_->InitAsDefaultInstance();
  RandCheckReq::default_instance_->InitAsDefaultInstance();
  RandCheckAck::default_instance_->InitAsDefaultInstance();
  HeartPingReq::default_instance_->InitAsDefaultInstance();
  HeartPingAck::default_instance_->InitAsDefaultInstance();
  GetIDReq::default_instance_->InitAsDefaultInstance();
  GetIDAck::default_instance_->InitAsDefaultInstance();
  GMListRpt::default_instance_->InitAsDefaultInstance();
  GMListRpt_gm::default_instance_->InitAsDefaultInstance();
  CheckNewNameReq::default_instance_->InitAsDefaultInstance();
  CheckNewNameAck::default_instance_->InitAsDefaultInstance();
  GSState::default_instance_->InitAsDefaultInstance();
  GameServerStateNtf::default_instance_->InitAsDefaultInstance();
  AllGameServerStateRpt::default_instance_->InitAsDefaultInstance();
  GMMessageNtf::default_instance_->InitAsDefaultInstance();
  GMMessageExecuteAck::default_instance_->InitAsDefaultInstance();
  GetGSOnlinePlayerNumberReq::default_instance_->InitAsDefaultInstance();
  GSPlayerNumber::default_instance_->InitAsDefaultInstance();
  GSOnlinePlayerNumberRpt::default_instance_->InitAsDefaultInstance();
  OtherGSOnlinePlayerRpt::default_instance_->InitAsDefaultInstance();
  OtherGSPlayerOnlineRpt::default_instance_->InitAsDefaultInstance();
  OtherGSPlayerOfflineRpt::default_instance_->InitAsDefaultInstance();
  ChongZhiPlayer::default_instance_->InitAsDefaultInstance();
  OfflineChongZhiNtf::default_instance_->InitAsDefaultInstance();
  PlayerLeaveGameRpt::default_instance_->InitAsDefaultInstance();
  GetGM_ListReq::default_instance_->InitAsDefaultInstance();
  GetGM_ListAck::default_instance_->InitAsDefaultInstance();
  DBSServerCloseNtf::default_instance_->InitAsDefaultInstance();
  CheckInGSReq::default_instance_->InitAsDefaultInstance();
  CheckInGSAck::default_instance_->InitAsDefaultInstance();
  get_login_key_req::default_instance_->InitAsDefaultInstance();
  get_login_key_ack::default_instance_->InitAsDefaultInstance();
  login_gs_req::default_instance_->InitAsDefaultInstance();
  login_gs_ack::default_instance_->InitAsDefaultInstance();
  online_gs_rpt::default_instance_->InitAsDefaultInstance();
  switch_gs_lock_req::default_instance_->InitAsDefaultInstance();
  switch_gs_lock_ack::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_gameserver_5fdbserver_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_gameserver_5fdbserver_2eproto {
  StaticDescriptorInitializer_gameserver_5fdbserver_2eproto() {
    protobuf_AddDesc_gameserver_5fdbserver_2eproto();
  }
} static_descriptor_initializer_gameserver_5fdbserver_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int GameServerRpt::kGsidFieldNumber;
const int GameServerRpt::kGsnameFieldNumber;
const int GameServerRpt::kMaxNumberFieldNumber;
#endif  // !_MSC_VER

GameServerRpt::GameServerRpt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameServerRpt::InitAsDefaultInstance() {
}

GameServerRpt::GameServerRpt(const GameServerRpt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameServerRpt::SharedCtor() {
  _cached_size_ = 0;
  gsid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gsname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  max_number_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameServerRpt::~GameServerRpt() {
  SharedDtor();
}

void GameServerRpt::SharedDtor() {
  if (gsid_ != &::google::protobuf::internal::kEmptyString) {
    delete gsid_;
  }
  if (gsname_ != &::google::protobuf::internal::kEmptyString) {
    delete gsname_;
  }
  if (this != default_instance_) {
  }
}

void GameServerRpt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameServerRpt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameServerRpt_descriptor_;
}

const GameServerRpt& GameServerRpt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fdbserver_2eproto();
  return *default_instance_;
}

GameServerRpt* GameServerRpt::default_instance_ = NULL;

GameServerRpt* GameServerRpt::New() const {
  return new GameServerRpt;
}

void GameServerRpt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_gsid()) {
      if (gsid_ != &::google::protobuf::internal::kEmptyString) {
        gsid_->clear();
      }
    }
    if (has_gsname()) {
      if (gsname_ != &::google::protobuf::internal::kEmptyString) {
        gsname_->clear();
      }
    }
    max_number_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameServerRpt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string gsid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gsid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gsid().data(), this->gsid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_gsname;
        break;
      }

      // optional string gsname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gsname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gsname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gsname().data(), this->gsname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_max_number;
        break;
      }

      // optional int32 max_number = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_number_)));
          set_has_max_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameServerRpt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string gsid = 1;
  if (has_gsid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gsid().data(), this->gsid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->gsid(), output);
  }

  // optional string gsname = 2;
  if (has_gsname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gsname().data(), this->gsname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->gsname(), output);
  }

  // optional int32 max_number = 3;
  if (has_max_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->max_number(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameServerRpt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string gsid = 1;
  if (has_gsid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gsid().data(), this->gsid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gsid(), target);
  }

  // optional string gsname = 2;
  if (has_gsname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gsname().data(), this->gsname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->gsname(), target);
  }

  // optional int32 max_number = 3;
  if (has_max_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->max_number(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameServerRpt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string gsid = 1;
    if (has_gsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gsid());
    }

    // optional string gsname = 2;
    if (has_gsname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gsname());
    }

    // optional int32 max_number = 3;
    if (has_max_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_number());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameServerRpt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameServerRpt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameServerRpt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameServerRpt::MergeFrom(const GameServerRpt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gsid()) {
      set_gsid(from.gsid());
    }
    if (from.has_gsname()) {
      set_gsname(from.gsname());
    }
    if (from.has_max_number()) {
      set_max_number(from.max_number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameServerRpt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameServerRpt::CopyFrom(const GameServerRpt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameServerRpt::IsInitialized() const {

  return true;
}

void GameServerRpt::Swap(GameServerRpt* other) {
  if (other != this) {
    std::swap(gsid_, other->gsid_);
    std::swap(gsname_, other->gsname_);
    std::swap(max_number_, other->max_number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameServerRpt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameServerRpt_descriptor_;
  metadata.reflection = GameServerRpt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DBServerRpt::kDbidFieldNumber;
const int DBServerRpt::kDbnameFieldNumber;
#endif  // !_MSC_VER

DBServerRpt::DBServerRpt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DBServerRpt::InitAsDefaultInstance() {
}

DBServerRpt::DBServerRpt(const DBServerRpt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DBServerRpt::SharedCtor() {
  _cached_size_ = 0;
  dbid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dbname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBServerRpt::~DBServerRpt() {
  SharedDtor();
}

void DBServerRpt::SharedDtor() {
  if (dbid_ != &::google::protobuf::internal::kEmptyString) {
    delete dbid_;
  }
  if (dbname_ != &::google::protobuf::internal::kEmptyString) {
    delete dbname_;
  }
  if (this != default_instance_) {
  }
}

void DBServerRpt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBServerRpt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBServerRpt_descriptor_;
}

const DBServerRpt& DBServerRpt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fdbserver_2eproto();
  return *default_instance_;
}

DBServerRpt* DBServerRpt::default_instance_ = NULL;

DBServerRpt* DBServerRpt::New() const {
  return new DBServerRpt;
}

void DBServerRpt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_dbid()) {
      if (dbid_ != &::google::protobuf::internal::kEmptyString) {
        dbid_->clear();
      }
    }
    if (has_dbname()) {
      if (dbname_ != &::google::protobuf::internal::kEmptyString) {
        dbname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DBServerRpt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string dbid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dbid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dbid().data(), this->dbid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dbname;
        break;
      }

      // optional string dbname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dbname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dbname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dbname().data(), this->dbname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DBServerRpt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string dbid = 1;
  if (has_dbid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dbid().data(), this->dbid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->dbid(), output);
  }

  // optional string dbname = 2;
  if (has_dbname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dbname().data(), this->dbname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->dbname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DBServerRpt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string dbid = 1;
  if (has_dbid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dbid().data(), this->dbid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->dbid(), target);
  }

  // optional string dbname = 2;
  if (has_dbname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dbname().data(), this->dbname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->dbname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DBServerRpt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string dbid = 1;
    if (has_dbid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dbid());
    }

    // optional string dbname = 2;
    if (has_dbname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dbname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBServerRpt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DBServerRpt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DBServerRpt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBServerRpt::MergeFrom(const DBServerRpt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dbid()) {
      set_dbid(from.dbid());
    }
    if (from.has_dbname()) {
      set_dbname(from.dbname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DBServerRpt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBServerRpt::CopyFrom(const DBServerRpt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBServerRpt::IsInitialized() const {

  return true;
}

void DBServerRpt::Swap(DBServerRpt* other) {
  if (other != this) {
    std::swap(dbid_, other->dbid_);
    std::swap(dbname_, other->dbname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DBServerRpt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBServerRpt_descriptor_;
  metadata.reflection = DBServerRpt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KickOutRpt::kPlayeridFieldNumber;
#endif  // !_MSC_VER

KickOutRpt::KickOutRpt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KickOutRpt::InitAsDefaultInstance() {
}

KickOutRpt::KickOutRpt(const KickOutRpt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KickOutRpt::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KickOutRpt::~KickOutRpt() {
  SharedDtor();
}

void KickOutRpt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KickOutRpt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KickOutRpt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KickOutRpt_descriptor_;
}

const KickOutRpt& KickOutRpt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fdbserver_2eproto();
  return *default_instance_;
}

KickOutRpt* KickOutRpt::default_instance_ = NULL;

KickOutRpt* KickOutRpt::New() const {
  return new KickOutRpt;
}

void KickOutRpt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KickOutRpt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KickOutRpt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KickOutRpt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KickOutRpt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KickOutRpt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KickOutRpt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KickOutRpt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KickOutRpt::MergeFrom(const KickOutRpt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KickOutRpt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KickOutRpt::CopyFrom(const KickOutRpt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KickOutRpt::IsInitialized() const {

  return true;
}

void KickOutRpt::Swap(KickOutRpt* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KickOutRpt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KickOutRpt_descriptor_;
  metadata.reflection = KickOutRpt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KickOutAck::kPlayeridFieldNumber;
const int KickOutAck::kErrorNoFieldNumber;
#endif  // !_MSC_VER

KickOutAck::KickOutAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KickOutAck::InitAsDefaultInstance() {
}

KickOutAck::KickOutAck(const KickOutAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KickOutAck::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_ULONGLONG(0);
  error_no_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KickOutAck::~KickOutAck() {
  SharedDtor();
}

void KickOutAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KickOutAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KickOutAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KickOutAck_descriptor_;
}

const KickOutAck& KickOutAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fdbserver_2eproto();
  return *default_instance_;
}

KickOutAck* KickOutAck::default_instance_ = NULL;

KickOutAck* KickOutAck::New() const {
  return new KickOutAck;
}

void KickOutAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_ULONGLONG(0);
    error_no_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KickOutAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_error_no;
        break;
      }

      // optional int32 error_no = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error_no:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_no_)));
          set_has_error_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KickOutAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->playerid(), output);
  }

  // optional int32 error_no = 2;
  if (has_error_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->error_no(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KickOutAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->playerid(), target);
  }

  // optional int32 error_no = 2;
  if (has_error_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->error_no(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KickOutAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

    // optional int32 error_no = 2;
    if (has_error_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_no());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KickOutAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KickOutAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KickOutAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KickOutAck::MergeFrom(const KickOutAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_error_no()) {
      set_error_no(from.error_no());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KickOutAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KickOutAck::CopyFrom(const KickOutAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KickOutAck::IsInitialized() const {

  return true;
}

void KickOutAck::Swap(KickOutAck* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(error_no_, other->error_no_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KickOutAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KickOutAck_descriptor_;
  metadata.reflection = KickOutAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RandCheckReq::kKeyFieldNumber;
#endif  // !_MSC_VER

RandCheckReq::RandCheckReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RandCheckReq::InitAsDefaultInstance() {
}

RandCheckReq::RandCheckReq(const RandCheckReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RandCheckReq::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RandCheckReq::~RandCheckReq() {
  SharedDtor();
}

void RandCheckReq::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void RandCheckReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RandCheckReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RandCheckReq_descriptor_;
}

const RandCheckReq& RandCheckReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fdbserver_2eproto();
  return *default_instance_;
}

RandCheckReq* RandCheckReq::default_instance_ = NULL;

RandCheckReq* RandCheckReq::New() const {
  return new RandCheckReq;
}

void RandCheckReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RandCheckReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RandCheckReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RandCheckReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes key = 1;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RandCheckReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RandCheckReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RandCheckReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RandCheckReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RandCheckReq::MergeFrom(const RandCheckReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RandCheckReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RandCheckReq::CopyFrom(const RandCheckReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RandCheckReq::IsInitialized() const {

  return true;
}

void RandCheckReq::Swap(RandCheckReq* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RandCheckReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RandCheckReq_descriptor_;
  metadata.reflection = RandCheckReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RandCheckAck::kRandTextFieldNumber;
#endif  // !_MSC_VER

RandCheckAck::RandCheckAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RandCheckAck::InitAsDefaultInstance() {
}

RandCheckAck::RandCheckAck(const RandCheckAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RandCheckAck::SharedCtor() {
  _cached_size_ = 0;
  rand_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RandCheckAck::~RandCheckAck() {
  SharedDtor();
}

void RandCheckAck::SharedDtor() {
  if (rand_text_ != &::google::protobuf::internal::kEmptyString) {
    delete rand_text_;
  }
  if (this != default_instance_) {
  }
}

void RandCheckAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RandCheckAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RandCheckAck_descriptor_;
}

const RandCheckAck& RandCheckAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fdbserver_2eproto();
  return *default_instance_;
}

RandCheckAck* RandCheckAck::default_instance_ = NULL;

RandCheckAck* RandCheckAck::New() const {
  return new RandCheckAck;
}

void RandCheckAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rand_text()) {
      if (rand_text_ != &::google::protobuf::internal::kEmptyString) {
        rand_text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RandCheckAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes rand_text = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_rand_text()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RandCheckAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes rand_text = 1;
  if (has_rand_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->rand_text(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RandCheckAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes rand_text = 1;
  if (has_rand_text()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->rand_text(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RandCheckAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes rand_text = 1;
    if (has_rand_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->rand_text());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RandCheckAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RandCheckAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RandCheckAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RandCheckAck::MergeFrom(const RandCheckAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rand_text()) {
      set_rand_text(from.rand_text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RandCheckAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RandCheckAck::CopyFrom(const RandCheckAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RandCheckAck::IsInitialized() const {

  return true;
}

void RandCheckAck::Swap(RandCheckAck* other) {
  if (other != this) {
    std::swap(rand_text_, other->rand_text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RandCheckAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RandCheckAck_descriptor_;
  metadata.reflection = RandCheckAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeartPingReq::kOptFieldNumber;
#endif  // !_MSC_VER

HeartPingReq::HeartPingReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeartPingReq::InitAsDefaultInstance() {
}

HeartPingReq::HeartPingReq(const HeartPingReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeartPingReq::SharedCtor() {
  _cached_size_ = 0;
  opt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeartPingReq::~HeartPingReq() {
  SharedDtor();
}

void HeartPingReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeartPingReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeartPingReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeartPingReq_descriptor_;
}

const HeartPingReq& HeartPingReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fdbserver_2eproto();
  return *default_instance_;
}

HeartPingReq* HeartPingReq::default_instance_ = NULL;

HeartPingReq* HeartPingReq::New() const {
  return new HeartPingReq;
}

void HeartPingReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opt_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeartPingReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 opt = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opt_)));
          set_has_opt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HeartPingReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 opt = 1;
  if (has_opt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeartPingReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 opt = 1;
  if (has_opt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->opt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeartPingReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 opt = 1;
    if (has_opt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeartPingReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeartPingReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeartPingReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeartPingReq::MergeFrom(const HeartPingReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opt()) {
      set_opt(from.opt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeartPingReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartPingReq::CopyFrom(const HeartPingReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartPingReq::IsInitialized() const {

  return true;
}

void HeartPingReq::Swap(HeartPingReq* other) {
  if (other != this) {
    std::swap(opt_, other->opt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeartPingReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeartPingReq_descriptor_;
  metadata.reflection = HeartPingReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeartPingAck::kOptFieldNumber;
#endif  // !_MSC_VER

HeartPingAck::HeartPingAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeartPingAck::InitAsDefaultInstance() {
}

HeartPingAck::HeartPingAck(const HeartPingAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeartPingAck::SharedCtor() {
  _cached_size_ = 0;
  opt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeartPingAck::~HeartPingAck() {
  SharedDtor();
}

void HeartPingAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeartPingAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeartPingAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeartPingAck_descriptor_;
}

const HeartPingAck& HeartPingAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fdbserver_2eproto();
  return *default_instance_;
}

HeartPingAck* HeartPingAck::default_instance_ = NULL;

HeartPingAck* HeartPingAck::New() const {
  return new HeartPingAck;
}

void HeartPingAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opt_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeartPingAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 opt = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opt_)));
          set_has_opt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HeartPingAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 opt = 1;
  if (has_opt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeartPingAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 opt = 1;
  if (has_opt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->opt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeartPingAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 opt = 1;
    if (has_opt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeartPingAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeartPingAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeartPingAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeartPingAck::MergeFrom(const HeartPingAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opt()) {
      set_opt(from.opt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeartPingAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartPingAck::CopyFrom(const HeartPingAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartPingAck::IsInitialized() const {

  return true;
}

void HeartPingAck::Swap(HeartPingAck* other) {
  if (other != this) {
    std::swap(opt_, other->opt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeartPingAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeartPingAck_descriptor_;
  metadata.reflection = HeartPingAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetIDReq::kKindFieldNumber;
const int GetIDReq::kNumberFieldNumber;
#endif  // !_MSC_VER

GetIDReq::GetIDReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetIDReq::InitAsDefaultInstance() {
}

GetIDReq::GetIDReq(const GetIDReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetIDReq::SharedCtor() {
  _cached_size_ = 0;
  kind_ = 0u;
  number_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetIDReq::~GetIDReq() {
  SharedDtor();
}

void GetIDReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetIDReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetIDReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetIDReq_descriptor_;
}

const GetIDReq& GetIDReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fdbserver_2eproto();
  return *default_instance_;
}

GetIDReq* GetIDReq::default_instance_ = NULL;

GetIDReq* GetIDReq::New() const {
  return new GetIDReq;
}

void GetIDReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    kind_ = 0u;
    number_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetIDReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 kind = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kind_)));
          set_has_kind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_number;
        break;
      }

      // optional uint32 number = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetIDReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 kind = 1;
  if (has_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->kind(), output);
  }

  // optional uint32 number = 2;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->number(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetIDReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 kind = 1;
  if (has_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->kind(), target);
  }

  // optional uint32 number = 2;
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->number(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetIDReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 kind = 1;
    if (has_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kind());
    }

    // optional uint32 number = 2;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->number());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetIDReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetIDReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetIDReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetIDReq::MergeFrom(const GetIDReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_kind()) {
      set_kind(from.kind());
    }
    if (from.has_number()) {
      set_number(from.number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetIDReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetIDReq::CopyFrom(const GetIDReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetIDReq::IsInitialized() const {

  return true;
}

void GetIDReq::Swap(GetIDReq* other) {
  if (other != this) {
    std::swap(kind_, other->kind_);
    std::swap(number_, other->number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetIDReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetIDReq_descriptor_;
  metadata.reflection = GetIDReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetIDAck::kKindFieldNumber;
const int GetIDAck::kNumberFieldNumber;
const int GetIDAck::kBeginIdFieldNumber;
const int GetIDAck::kEndIdFieldNumber;
#endif  // !_MSC_VER

GetIDAck::GetIDAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetIDAck::InitAsDefaultInstance() {
}

GetIDAck::GetIDAck(const GetIDAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetIDAck::SharedCtor() {
  _cached_size_ = 0;
  kind_ = 0u;
  number_ = 0u;
  begin_id_ = GOOGLE_ULONGLONG(0);
  end_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetIDAck::~GetIDAck() {
  SharedDtor();
}

void GetIDAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetIDAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetIDAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetIDAck_descriptor_;
}

const GetIDAck& GetIDAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fdbserver_2eproto();
  return *default_instance_;
}

GetIDAck* GetIDAck::default_instance_ = NULL;

GetIDAck* GetIDAck::New() const {
  return new GetIDAck;
}

void GetIDAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    kind_ = 0u;
    number_ = 0u;
    begin_id_ = GOOGLE_ULONGLONG(0);
    end_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetIDAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 kind = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kind_)));
          set_has_kind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_number;
        break;
      }

      // optional uint32 number = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_begin_id;
        break;
      }

      // optional uint64 begin_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_begin_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &begin_id_)));
          set_has_begin_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_end_id;
        break;
      }

      // optional uint64 end_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &end_id_)));
          set_has_end_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetIDAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 kind = 1;
  if (has_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->kind(), output);
  }

  // optional uint32 number = 2;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->number(), output);
  }

  // optional uint64 begin_id = 3;
  if (has_begin_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->begin_id(), output);
  }

  // optional uint64 end_id = 4;
  if (has_end_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->end_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetIDAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 kind = 1;
  if (has_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->kind(), target);
  }

  // optional uint32 number = 2;
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->number(), target);
  }

  // optional uint64 begin_id = 3;
  if (has_begin_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->begin_id(), target);
  }

  // optional uint64 end_id = 4;
  if (has_end_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->end_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetIDAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 kind = 1;
    if (has_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kind());
    }

    // optional uint32 number = 2;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->number());
    }

    // optional uint64 begin_id = 3;
    if (has_begin_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->begin_id());
    }

    // optional uint64 end_id = 4;
    if (has_end_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->end_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetIDAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetIDAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetIDAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetIDAck::MergeFrom(const GetIDAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_kind()) {
      set_kind(from.kind());
    }
    if (from.has_number()) {
      set_number(from.number());
    }
    if (from.has_begin_id()) {
      set_begin_id(from.begin_id());
    }
    if (from.has_end_id()) {
      set_end_id(from.end_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetIDAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetIDAck::CopyFrom(const GetIDAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetIDAck::IsInitialized() const {

  return true;
}

void GetIDAck::Swap(GetIDAck* other) {
  if (other != this) {
    std::swap(kind_, other->kind_);
    std::swap(number_, other->number_);
    std::swap(begin_id_, other->begin_id_);
    std::swap(end_id_, other->end_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetIDAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetIDAck_descriptor_;
  metadata.reflection = GetIDAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMListRpt_gm::kGmLevelFieldNumber;
const int GMListRpt_gm::kAccountFieldNumber;
const int GMListRpt_gm::kPasswordFieldNumber;
#endif  // !_MSC_VER

GMListRpt_gm::GMListRpt_gm()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMListRpt_gm::InitAsDefaultInstance() {
}

GMListRpt_gm::GMListRpt_gm(const GMListRpt_gm& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMListRpt_gm::SharedCtor() {
  _cached_size_ = 0;
  gm_level_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMListRpt_gm::~GMListRpt_gm() {
  SharedDtor();
}

void GMListRpt_gm::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void GMListRpt_gm::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMListRpt_gm::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMListRpt_gm_descriptor_;
}

const GMListRpt_gm& GMListRpt_gm::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fdbserver_2eproto();
  return *default_instance_;
}

GMListRpt_gm* GMListRpt_gm::default_instance_ = NULL;

GMListRpt_gm* GMListRpt_gm::New() const {
  return new GMListRpt_gm;
}

void GMListRpt_gm::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gm_level_ = 0;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMListRpt_gm::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gm_level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gm_level_)));
          set_has_gm_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_account;
        break;
      }

      // optional string account = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_password;
        break;
      }

      // optional string password = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMListRpt_gm::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 gm_level = 2;
  if (has_gm_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gm_level(), output);
  }

  // optional string account = 3;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->account(), output);
  }

  // optional string password = 4;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->password(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMListRpt_gm::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 gm_level = 2;
  if (has_gm_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gm_level(), target);
  }

  // optional string account = 3;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->account(), target);
  }

  // optional string password = 4;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->password(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMListRpt_gm::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gm_level = 2;
    if (has_gm_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gm_level());
    }

    // optional string account = 3;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional string password = 4;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMListRpt_gm::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMListRpt_gm* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMListRpt_gm*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMListRpt_gm::MergeFrom(const GMListRpt_gm& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gm_level()) {
      set_gm_level(from.gm_level());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMListRpt_gm::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMListRpt_gm::CopyFrom(const GMListRpt_gm& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMListRpt_gm::IsInitialized() const {

  return true;
}

void GMListRpt_gm::Swap(GMListRpt_gm* other) {
  if (other != this) {
    std::swap(gm_level_, other->gm_level_);
    std::swap(account_, other->account_);
    std::swap(password_, other->password_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMListRpt_gm::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMListRpt_gm_descriptor_;
  metadata.reflection = GMListRpt_gm_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int GMListRpt::kTableFieldNumber;
#endif  // !_MSC_VER

GMListRpt::GMListRpt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMListRpt::InitAsDefaultInstance() {
}

GMListRpt::GMListRpt(const GMListRpt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMListRpt::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMListRpt::~GMListRpt() {
  SharedDtor();
}

void GMListRpt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMListRpt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMListRpt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMListRpt_descriptor_;
}

const GMListRpt& GMListRpt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fdbserver_2eproto();
  return *default_instance_;
}

GMListRpt* GMListRpt::default_instance_ = NULL;

GMListRpt* GMListRpt::New() const {
  return new GMListRpt;
}

void GMListRpt::Clear() {
  table_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMListRpt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protoc.gs_dbs.GMListRpt.gm table = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_table;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMListRpt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protoc.gs_dbs.GMListRpt.gm table = 1;
  for (int i = 0; i < this->table_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->table(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMListRpt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protoc.gs_dbs.GMListRpt.gm table = 1;
  for (int i = 0; i < this->table_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->table(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMListRpt::ByteSize() const {
  int total_size = 0;

  // repeated .protoc.gs_dbs.GMListRpt.gm table = 1;
  total_size += 1 * this->table_size();
  for (int i = 0; i < this->table_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->table(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMListRpt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMListRpt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMListRpt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMListRpt::MergeFrom(const GMListRpt& from) {
  GOOGLE_CHECK_NE(&from, this);
  table_.MergeFrom(from.table_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMListRpt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMListRpt::CopyFrom(const GMListRpt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMListRpt::IsInitialized() const {

  return true;
}

void GMListRpt::Swap(GMListRpt* other) {
  if (other != this) {
    table_.Swap(&other->table_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMListRpt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMListRpt_descriptor_;
  metadata.reflection = GMListRpt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CheckNewNameReq::kPlayeridFieldNumber;
const int CheckNewNameReq::kNewnameFieldNumber;
const int CheckNewNameReq::kHeadPicIdFieldNumber;
#endif  // !_MSC_VER

CheckNewNameReq::CheckNewNameReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CheckNewNameReq::InitAsDefaultInstance() {
}

CheckNewNameReq::CheckNewNameReq(const CheckNewNameReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CheckNewNameReq::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_ULONGLONG(0);
  newname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  head_pic_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CheckNewNameReq::~CheckNewNameReq() {
  SharedDtor();
}

void CheckNewNameReq::SharedDtor() {
  if (newname_ != &::google::protobuf::internal::kEmptyString) {
    delete newname_;
  }
  if (this != default_instance_) {
  }
}

void CheckNewNameReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckNewNameReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CheckNewNameReq_descriptor_;
}

const CheckNewNameReq& CheckNewNameReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fdbserver_2eproto();
  return *default_instance_;
}

CheckNewNameReq* CheckNewNameReq::default_instance_ = NULL;

CheckNewNameReq* CheckNewNameReq::New() const {
  return new CheckNewNameReq;
}

void CheckNewNameReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_ULONGLONG(0);
    if (has_newname()) {
      if (newname_ != &::google::protobuf::internal::kEmptyString) {
        newname_->clear();
      }
    }
    head_pic_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CheckNewNameReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_newname;
        break;
      }

      // required string newname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_newname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_newname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->newname().data(), this->newname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_head_pic_id;
        break;
      }

      // optional uint32 head_pic_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_head_pic_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &head_pic_id_)));
          set_has_head_pic_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CheckNewNameReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->playerid(), output);
  }

  // required string newname = 2;
  if (has_newname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->newname().data(), this->newname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->newname(), output);
  }

  // optional uint32 head_pic_id = 3;
  if (has_head_pic_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->head_pic_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CheckNewNameReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->playerid(), target);
  }

  // required string newname = 2;
  if (has_newname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->newname().data(), this->newname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->newname(), target);
  }

  // optional uint32 head_pic_id = 3;
  if (has_head_pic_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->head_pic_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CheckNewNameReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

    // required string newname = 2;
    if (has_newname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->newname());
    }

    // optional uint32 head_pic_id = 3;
    if (has_head_pic_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->head_pic_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckNewNameReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CheckNewNameReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CheckNewNameReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CheckNewNameReq::MergeFrom(const CheckNewNameReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_newname()) {
      set_newname(from.newname());
    }
    if (from.has_head_pic_id()) {
      set_head_pic_id(from.head_pic_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CheckNewNameReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckNewNameReq::CopyFrom(const CheckNewNameReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckNewNameReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CheckNewNameReq::Swap(CheckNewNameReq* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(newname_, other->newname_);
    std::swap(head_pic_id_, other->head_pic_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CheckNewNameReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CheckNewNameReq_descriptor_;
  metadata.reflection = CheckNewNameReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CheckNewNameAck::kPlayeridFieldNumber;
const int CheckNewNameAck::kNewnameFieldNumber;
const int CheckNewNameAck::kHeadPicIdFieldNumber;
const int CheckNewNameAck::kErrorNoFieldNumber;
#endif  // !_MSC_VER

CheckNewNameAck::CheckNewNameAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CheckNewNameAck::InitAsDefaultInstance() {
}

CheckNewNameAck::CheckNewNameAck(const CheckNewNameAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CheckNewNameAck::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_ULONGLONG(0);
  newname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  head_pic_id_ = 0u;
  error_no_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CheckNewNameAck::~CheckNewNameAck() {
  SharedDtor();
}

void CheckNewNameAck::SharedDtor() {
  if (newname_ != &::google::protobuf::internal::kEmptyString) {
    delete newname_;
  }
  if (this != default_instance_) {
  }
}

void CheckNewNameAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckNewNameAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CheckNewNameAck_descriptor_;
}

const CheckNewNameAck& CheckNewNameAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fdbserver_2eproto();
  return *default_instance_;
}

CheckNewNameAck* CheckNewNameAck::default_instance_ = NULL;

CheckNewNameAck* CheckNewNameAck::New() const {
  return new CheckNewNameAck;
}

void CheckNewNameAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_ULONGLONG(0);
    if (has_newname()) {
      if (newname_ != &::google::protobuf::internal::kEmptyString) {
        newname_->clear();
      }
    }
    head_pic_id_ = 0u;
    error_no_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CheckNewNameAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_newname;
        break;
      }

      // required string newname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_newname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_newname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->newname().data(), this->newname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_head_pic_id;
        break;
      }

      // optional uint32 head_pic_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_head_pic_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &head_pic_id_)));
          set_has_head_pic_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_error_no;
        break;
      }

      // required int32 error_no = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error_no:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_no_)));
          set_has_error_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CheckNewNameAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->playerid(), output);
  }

  // required string newname = 2;
  if (has_newname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->newname().data(), this->newname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->newname(), output);
  }

  // optional uint32 head_pic_id = 3;
  if (has_head_pic_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->head_pic_id(), output);
  }

  // required int32 error_no = 4;
  if (has_error_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->error_no(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CheckNewNameAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->playerid(), target);
  }

  // required string newname = 2;
  if (has_newname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->newname().data(), this->newname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->newname(), target);
  }

  // optional uint32 head_pic_id = 3;
  if (has_head_pic_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->head_pic_id(), target);
  }

  // required int32 error_no = 4;
  if (has_error_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->error_no(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CheckNewNameAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

    // required string newname = 2;
    if (has_newname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->newname());
    }

    // optional uint32 head_pic_id = 3;
    if (has_head_pic_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->head_pic_id());
    }

    // required int32 error_no = 4;
    if (has_error_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_no());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckNewNameAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CheckNewNameAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CheckNewNameAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CheckNewNameAck::MergeFrom(const CheckNewNameAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_newname()) {
      set_newname(from.newname());
    }
    if (from.has_head_pic_id()) {
      set_head_pic_id(from.head_pic_id());
    }
    if (from.has_error_no()) {
      set_error_no(from.error_no());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CheckNewNameAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckNewNameAck::CopyFrom(const CheckNewNameAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckNewNameAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  return true;
}

void CheckNewNameAck::Swap(CheckNewNameAck* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(newname_, other->newname_);
    std::swap(head_pic_id_, other->head_pic_id_);
    std::swap(error_no_, other->error_no_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CheckNewNameAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CheckNewNameAck_descriptor_;
  metadata.reflection = CheckNewNameAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GSState::kGsidFieldNumber;
const int GSState::kGsnameFieldNumber;
const int GSState::kStateFieldNumber;
const int GSState::kCurOnlineNumberFieldNumber;
#endif  // !_MSC_VER

GSState::GSState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GSState::InitAsDefaultInstance() {
}

GSState::GSState(const GSState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GSState::SharedCtor() {
  _cached_size_ = 0;
  gsid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gsname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  state_ = 0;
  cur_online_number_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GSState::~GSState() {
  SharedDtor();
}

void GSState::SharedDtor() {
  if (gsid_ != &::google::protobuf::internal::kEmptyString) {
    delete gsid_;
  }
  if (gsname_ != &::google::protobuf::internal::kEmptyString) {
    delete gsname_;
  }
  if (this != default_instance_) {
  }
}

void GSState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GSState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GSState_descriptor_;
}

const GSState& GSState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fdbserver_2eproto();
  return *default_instance_;
}

GSState* GSState::default_instance_ = NULL;

GSState* GSState::New() const {
  return new GSState;
}

void GSState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_gsid()) {
      if (gsid_ != &::google::protobuf::internal::kEmptyString) {
        gsid_->clear();
      }
    }
    if (has_gsname()) {
      if (gsname_ != &::google::protobuf::internal::kEmptyString) {
        gsname_->clear();
      }
    }
    state_ = 0;
    cur_online_number_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GSState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string gsid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gsid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gsid().data(), this->gsid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_gsname;
        break;
      }

      // optional string gsname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gsname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gsname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gsname().data(), this->gsname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }

      // optional int32 state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cur_online_number;
        break;
      }

      // optional int32 cur_online_number = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_online_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_online_number_)));
          set_has_cur_online_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GSState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string gsid = 1;
  if (has_gsid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gsid().data(), this->gsid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->gsid(), output);
  }

  // optional string gsname = 2;
  if (has_gsname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gsname().data(), this->gsname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->gsname(), output);
  }

  // optional int32 state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->state(), output);
  }

  // optional int32 cur_online_number = 4;
  if (has_cur_online_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cur_online_number(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GSState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string gsid = 1;
  if (has_gsid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gsid().data(), this->gsid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gsid(), target);
  }

  // optional string gsname = 2;
  if (has_gsname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gsname().data(), this->gsname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->gsname(), target);
  }

  // optional int32 state = 3;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->state(), target);
  }

  // optional int32 cur_online_number = 4;
  if (has_cur_online_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cur_online_number(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GSState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string gsid = 1;
    if (has_gsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gsid());
    }

    // optional string gsname = 2;
    if (has_gsname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gsname());
    }

    // optional int32 state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 cur_online_number = 4;
    if (has_cur_online_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_online_number());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GSState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GSState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GSState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GSState::MergeFrom(const GSState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gsid()) {
      set_gsid(from.gsid());
    }
    if (from.has_gsname()) {
      set_gsname(from.gsname());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_cur_online_number()) {
      set_cur_online_number(from.cur_online_number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GSState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GSState::CopyFrom(const GSState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GSState::IsInitialized() const {

  return true;
}

void GSState::Swap(GSState* other) {
  if (other != this) {
    std::swap(gsid_, other->gsid_);
    std::swap(gsname_, other->gsname_);
    std::swap(state_, other->state_);
    std::swap(cur_online_number_, other->cur_online_number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GSState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GSState_descriptor_;
  metadata.reflection = GSState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameServerStateNtf::kGsFieldNumber;
#endif  // !_MSC_VER

GameServerStateNtf::GameServerStateNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameServerStateNtf::InitAsDefaultInstance() {
  gs_ = const_cast< ::protoc::gs_dbs::GSState*>(&::protoc::gs_dbs::GSState::default_instance());
}

GameServerStateNtf::GameServerStateNtf(const GameServerStateNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameServerStateNtf::SharedCtor() {
  _cached_size_ = 0;
  gs_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameServerStateNtf::~GameServerStateNtf() {
  SharedDtor();
}

void GameServerStateNtf::SharedDtor() {
  if (this != default_instance_) {
    delete gs_;
  }
}

void GameServerStateNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameServerStateNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameServerStateNtf_descriptor_;
}

const GameServerStateNtf& GameServerStateNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fdbserver_2eproto();
  return *default_instance_;
}

GameServerStateNtf* GameServerStateNtf::default_instance_ = NULL;

GameServerStateNtf* GameServerStateNtf::New() const {
  return new GameServerStateNtf;
}

void GameServerStateNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_gs()) {
      if (gs_ != NULL) gs_->::protoc::gs_dbs::GSState::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameServerStateNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protoc.gs_dbs.GSState gs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameServerStateNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .protoc.gs_dbs.GSState gs = 1;
  if (has_gs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->gs(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameServerStateNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .protoc.gs_dbs.GSState gs = 1;
  if (has_gs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->gs(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameServerStateNtf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .protoc.gs_dbs.GSState gs = 1;
    if (has_gs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gs());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameServerStateNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameServerStateNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameServerStateNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameServerStateNtf::MergeFrom(const GameServerStateNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gs()) {
      mutable_gs()->::protoc::gs_dbs::GSState::MergeFrom(from.gs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameServerStateNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameServerStateNtf::CopyFrom(const GameServerStateNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameServerStateNtf::IsInitialized() const {

  return true;
}

void GameServerStateNtf::Swap(GameServerStateNtf* other) {
  if (other != this) {
    std::swap(gs_, other->gs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameServerStateNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameServerStateNtf_descriptor_;
  metadata.reflection = GameServerStateNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllGameServerStateRpt::kGsFieldNumber;
#endif  // !_MSC_VER

AllGameServerStateRpt::AllGameServerStateRpt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllGameServerStateRpt::InitAsDefaultInstance() {
}

AllGameServerStateRpt::AllGameServerStateRpt(const AllGameServerStateRpt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllGameServerStateRpt::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllGameServerStateRpt::~AllGameServerStateRpt() {
  SharedDtor();
}

void AllGameServerStateRpt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllGameServerStateRpt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllGameServerStateRpt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllGameServerStateRpt_descriptor_;
}

const AllGameServerStateRpt& AllGameServerStateRpt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fdbserver_2eproto();
  return *default_instance_;
}

AllGameServerStateRpt* AllGameServerStateRpt::default_instance_ = NULL;

AllGameServerStateRpt* AllGameServerStateRpt::New() const {
  return new AllGameServerStateRpt;
}

void AllGameServerStateRpt::Clear() {
  gs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllGameServerStateRpt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protoc.gs_dbs.GSState gs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_gs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllGameServerStateRpt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protoc.gs_dbs.GSState gs = 1;
  for (int i = 0; i < this->gs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->gs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllGameServerStateRpt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protoc.gs_dbs.GSState gs = 1;
  for (int i = 0; i < this->gs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->gs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllGameServerStateRpt::ByteSize() const {
  int total_size = 0;

  // repeated .protoc.gs_dbs.GSState gs = 1;
  total_size += 1 * this->gs_size();
  for (int i = 0; i < this->gs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllGameServerStateRpt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllGameServerStateRpt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllGameServerStateRpt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllGameServerStateRpt::MergeFrom(const AllGameServerStateRpt& from) {
  GOOGLE_CHECK_NE(&from, this);
  gs_.MergeFrom(from.gs_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllGameServerStateRpt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllGameServerStateRpt::CopyFrom(const AllGameServerStateRpt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllGameServerStateRpt::IsInitialized() const {

  return true;
}

void AllGameServerStateRpt::Swap(AllGameServerStateRpt* other) {
  if (other != this) {
    gs_.Swap(&other->gs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllGameServerStateRpt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllGameServerStateRpt_descriptor_;
  metadata.reflection = AllGameServerStateRpt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMMessageNtf::kPlayeridFieldNumber;
const int GMMessageNtf::kAccountFieldNumber;
const int GMMessageNtf::kPlayernameFieldNumber;
const int GMMessageNtf::kIpFieldNumber;
const int GMMessageNtf::kSrcGsIdFieldNumber;
const int GMMessageNtf::kCmdFieldNumber;
#endif  // !_MSC_VER

GMMessageNtf::GMMessageNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMMessageNtf::InitAsDefaultInstance() {
}

GMMessageNtf::GMMessageNtf(const GMMessageNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMMessageNtf::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_ULONGLONG(0);
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  src_gs_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cmd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMMessageNtf::~GMMessageNtf() {
  SharedDtor();
}

void GMMessageNtf::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    delete playername_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (src_gs_id_ != &::google::protobuf::internal::kEmptyString) {
    delete src_gs_id_;
  }
  if (cmd_ != &::google::protobuf::internal::kEmptyString) {
    delete cmd_;
  }
  if (this != default_instance_) {
  }
}

void GMMessageNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMMessageNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMMessageNtf_descriptor_;
}

const GMMessageNtf& GMMessageNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fdbserver_2eproto();
  return *default_instance_;
}

GMMessageNtf* GMMessageNtf::default_instance_ = NULL;

GMMessageNtf* GMMessageNtf::New() const {
  return new GMMessageNtf;
}

void GMMessageNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_ULONGLONG(0);
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_playername()) {
      if (playername_ != &::google::protobuf::internal::kEmptyString) {
        playername_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    if (has_src_gs_id()) {
      if (src_gs_id_ != &::google::protobuf::internal::kEmptyString) {
        src_gs_id_->clear();
      }
    }
    if (has_cmd()) {
      if (cmd_ != &::google::protobuf::internal::kEmptyString) {
        cmd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMMessageNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }

      // optional string account = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_playername;
        break;
      }

      // optional string playername = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playername().data(), this->playername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ip;
        break;
      }

      // optional string ip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_src_gs_id;
        break;
      }

      // optional string src_gs_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_src_gs_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_src_gs_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->src_gs_id().data(), this->src_gs_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_cmd;
        break;
      }

      // optional string cmd = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cmd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cmd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cmd().data(), this->cmd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMMessageNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->playerid(), output);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->account(), output);
  }

  // optional string playername = 3;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->playername(), output);
  }

  // optional string ip = 4;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->ip(), output);
  }

  // optional string src_gs_id = 5;
  if (has_src_gs_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->src_gs_id().data(), this->src_gs_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->src_gs_id(), output);
  }

  // optional string cmd = 6;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cmd().data(), this->cmd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->cmd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMMessageNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->playerid(), target);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account(), target);
  }

  // optional string playername = 3;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->playername(), target);
  }

  // optional string ip = 4;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->ip(), target);
  }

  // optional string src_gs_id = 5;
  if (has_src_gs_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->src_gs_id().data(), this->src_gs_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->src_gs_id(), target);
  }

  // optional string cmd = 6;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cmd().data(), this->cmd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->cmd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMMessageNtf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

    // optional string account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional string playername = 3;
    if (has_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playername());
    }

    // optional string ip = 4;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional string src_gs_id = 5;
    if (has_src_gs_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->src_gs_id());
    }

    // optional string cmd = 6;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cmd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMMessageNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMMessageNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMMessageNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMMessageNtf::MergeFrom(const GMMessageNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_playername()) {
      set_playername(from.playername());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_src_gs_id()) {
      set_src_gs_id(from.src_gs_id());
    }
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMMessageNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMMessageNtf::CopyFrom(const GMMessageNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMMessageNtf::IsInitialized() const {

  return true;
}

void GMMessageNtf::Swap(GMMessageNtf* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(account_, other->account_);
    std::swap(playername_, other->playername_);
    std::swap(ip_, other->ip_);
    std::swap(src_gs_id_, other->src_gs_id_);
    std::swap(cmd_, other->cmd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMMessageNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMMessageNtf_descriptor_;
  metadata.reflection = GMMessageNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMMessageExecuteAck::kPlayeridFieldNumber;
const int GMMessageExecuteAck::kAccountFieldNumber;
const int GMMessageExecuteAck::kPlayernameFieldNumber;
const int GMMessageExecuteAck::kCmdFieldNumber;
const int GMMessageExecuteAck::kSrcGsIdFieldNumber;
const int GMMessageExecuteAck::kDestGsIdFieldNumber;
const int GMMessageExecuteAck::kToClientMessageIdFieldNumber;
const int GMMessageExecuteAck::kToClientMessageFieldNumber;
#endif  // !_MSC_VER

GMMessageExecuteAck::GMMessageExecuteAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMMessageExecuteAck::InitAsDefaultInstance() {
}

GMMessageExecuteAck::GMMessageExecuteAck(const GMMessageExecuteAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMMessageExecuteAck::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_ULONGLONG(0);
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cmd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  src_gs_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dest_gs_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  to_client_message_id_ = 0;
  to_client_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMMessageExecuteAck::~GMMessageExecuteAck() {
  SharedDtor();
}

void GMMessageExecuteAck::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    delete playername_;
  }
  if (cmd_ != &::google::protobuf::internal::kEmptyString) {
    delete cmd_;
  }
  if (src_gs_id_ != &::google::protobuf::internal::kEmptyString) {
    delete src_gs_id_;
  }
  if (dest_gs_id_ != &::google::protobuf::internal::kEmptyString) {
    delete dest_gs_id_;
  }
  if (to_client_message_ != &::google::protobuf::internal::kEmptyString) {
    delete to_client_message_;
  }
  if (this != default_instance_) {
  }
}

void GMMessageExecuteAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMMessageExecuteAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMMessageExecuteAck_descriptor_;
}

const GMMessageExecuteAck& GMMessageExecuteAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fdbserver_2eproto();
  return *default_instance_;
}

GMMessageExecuteAck* GMMessageExecuteAck::default_instance_ = NULL;

GMMessageExecuteAck* GMMessageExecuteAck::New() const {
  return new GMMessageExecuteAck;
}

void GMMessageExecuteAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_ULONGLONG(0);
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_playername()) {
      if (playername_ != &::google::protobuf::internal::kEmptyString) {
        playername_->clear();
      }
    }
    if (has_cmd()) {
      if (cmd_ != &::google::protobuf::internal::kEmptyString) {
        cmd_->clear();
      }
    }
    if (has_src_gs_id()) {
      if (src_gs_id_ != &::google::protobuf::internal::kEmptyString) {
        src_gs_id_->clear();
      }
    }
    if (has_dest_gs_id()) {
      if (dest_gs_id_ != &::google::protobuf::internal::kEmptyString) {
        dest_gs_id_->clear();
      }
    }
    to_client_message_id_ = 0;
    if (has_to_client_message()) {
      if (to_client_message_ != &::google::protobuf::internal::kEmptyString) {
        to_client_message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMMessageExecuteAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }

      // optional string account = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_playername;
        break;
      }

      // optional string playername = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playername().data(), this->playername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_cmd;
        break;
      }

      // optional string cmd = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cmd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cmd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cmd().data(), this->cmd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_src_gs_id;
        break;
      }

      // optional string src_gs_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_src_gs_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_src_gs_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->src_gs_id().data(), this->src_gs_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_dest_gs_id;
        break;
      }

      // optional string dest_gs_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dest_gs_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dest_gs_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dest_gs_id().data(), this->dest_gs_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_to_client_message_id;
        break;
      }

      // optional int32 to_client_message_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_to_client_message_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &to_client_message_id_)));
          set_has_to_client_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_to_client_message;
        break;
      }

      // optional bytes to_client_message = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_to_client_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_to_client_message()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMMessageExecuteAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->playerid(), output);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->account(), output);
  }

  // optional string playername = 3;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->playername(), output);
  }

  // optional string cmd = 4;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cmd().data(), this->cmd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->cmd(), output);
  }

  // optional string src_gs_id = 5;
  if (has_src_gs_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->src_gs_id().data(), this->src_gs_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->src_gs_id(), output);
  }

  // optional string dest_gs_id = 6;
  if (has_dest_gs_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dest_gs_id().data(), this->dest_gs_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->dest_gs_id(), output);
  }

  // optional int32 to_client_message_id = 7;
  if (has_to_client_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->to_client_message_id(), output);
  }

  // optional bytes to_client_message = 8;
  if (has_to_client_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->to_client_message(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMMessageExecuteAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->playerid(), target);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account(), target);
  }

  // optional string playername = 3;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->playername(), target);
  }

  // optional string cmd = 4;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cmd().data(), this->cmd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->cmd(), target);
  }

  // optional string src_gs_id = 5;
  if (has_src_gs_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->src_gs_id().data(), this->src_gs_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->src_gs_id(), target);
  }

  // optional string dest_gs_id = 6;
  if (has_dest_gs_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dest_gs_id().data(), this->dest_gs_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->dest_gs_id(), target);
  }

  // optional int32 to_client_message_id = 7;
  if (has_to_client_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->to_client_message_id(), target);
  }

  // optional bytes to_client_message = 8;
  if (has_to_client_message()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->to_client_message(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMMessageExecuteAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

    // optional string account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional string playername = 3;
    if (has_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playername());
    }

    // optional string cmd = 4;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cmd());
    }

    // optional string src_gs_id = 5;
    if (has_src_gs_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->src_gs_id());
    }

    // optional string dest_gs_id = 6;
    if (has_dest_gs_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dest_gs_id());
    }

    // optional int32 to_client_message_id = 7;
    if (has_to_client_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->to_client_message_id());
    }

    // optional bytes to_client_message = 8;
    if (has_to_client_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->to_client_message());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMMessageExecuteAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMMessageExecuteAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMMessageExecuteAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMMessageExecuteAck::MergeFrom(const GMMessageExecuteAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_playername()) {
      set_playername(from.playername());
    }
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_src_gs_id()) {
      set_src_gs_id(from.src_gs_id());
    }
    if (from.has_dest_gs_id()) {
      set_dest_gs_id(from.dest_gs_id());
    }
    if (from.has_to_client_message_id()) {
      set_to_client_message_id(from.to_client_message_id());
    }
    if (from.has_to_client_message()) {
      set_to_client_message(from.to_client_message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMMessageExecuteAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMMessageExecuteAck::CopyFrom(const GMMessageExecuteAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMMessageExecuteAck::IsInitialized() const {

  return true;
}

void GMMessageExecuteAck::Swap(GMMessageExecuteAck* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(account_, other->account_);
    std::swap(playername_, other->playername_);
    std::swap(cmd_, other->cmd_);
    std::swap(src_gs_id_, other->src_gs_id_);
    std::swap(dest_gs_id_, other->dest_gs_id_);
    std::swap(to_client_message_id_, other->to_client_message_id_);
    std::swap(to_client_message_, other->to_client_message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMMessageExecuteAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMMessageExecuteAck_descriptor_;
  metadata.reflection = GMMessageExecuteAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetGSOnlinePlayerNumberReq::kKindFieldNumber;
const int GetGSOnlinePlayerNumberReq::kPlayeridFieldNumber;
#endif  // !_MSC_VER

GetGSOnlinePlayerNumberReq::GetGSOnlinePlayerNumberReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetGSOnlinePlayerNumberReq::InitAsDefaultInstance() {
}

GetGSOnlinePlayerNumberReq::GetGSOnlinePlayerNumberReq(const GetGSOnlinePlayerNumberReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetGSOnlinePlayerNumberReq::SharedCtor() {
  _cached_size_ = 0;
  kind_ = 0;
  playerid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetGSOnlinePlayerNumberReq::~GetGSOnlinePlayerNumberReq() {
  SharedDtor();
}

void GetGSOnlinePlayerNumberReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetGSOnlinePlayerNumberReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetGSOnlinePlayerNumberReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetGSOnlinePlayerNumberReq_descriptor_;
}

const GetGSOnlinePlayerNumberReq& GetGSOnlinePlayerNumberReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fdbserver_2eproto();
  return *default_instance_;
}

GetGSOnlinePlayerNumberReq* GetGSOnlinePlayerNumberReq::default_instance_ = NULL;

GetGSOnlinePlayerNumberReq* GetGSOnlinePlayerNumberReq::New() const {
  return new GetGSOnlinePlayerNumberReq;
}

void GetGSOnlinePlayerNumberReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    kind_ = 0;
    playerid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetGSOnlinePlayerNumberReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 kind = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kind_)));
          set_has_kind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerid;
        break;
      }

      // optional uint64 playerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetGSOnlinePlayerNumberReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 kind = 1;
  if (has_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->kind(), output);
  }

  // optional uint64 playerid = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetGSOnlinePlayerNumberReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 kind = 1;
  if (has_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->kind(), target);
  }

  // optional uint64 playerid = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetGSOnlinePlayerNumberReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 kind = 1;
    if (has_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kind());
    }

    // optional uint64 playerid = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGSOnlinePlayerNumberReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetGSOnlinePlayerNumberReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetGSOnlinePlayerNumberReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetGSOnlinePlayerNumberReq::MergeFrom(const GetGSOnlinePlayerNumberReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_kind()) {
      set_kind(from.kind());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetGSOnlinePlayerNumberReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGSOnlinePlayerNumberReq::CopyFrom(const GetGSOnlinePlayerNumberReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGSOnlinePlayerNumberReq::IsInitialized() const {

  return true;
}

void GetGSOnlinePlayerNumberReq::Swap(GetGSOnlinePlayerNumberReq* other) {
  if (other != this) {
    std::swap(kind_, other->kind_);
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetGSOnlinePlayerNumberReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetGSOnlinePlayerNumberReq_descriptor_;
  metadata.reflection = GetGSOnlinePlayerNumberReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GSPlayerNumber::kGsFieldNumber;
const int GSPlayerNumber::kGsnameFieldNumber;
const int GSPlayerNumber::kNumberFieldNumber;
#endif  // !_MSC_VER

GSPlayerNumber::GSPlayerNumber()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GSPlayerNumber::InitAsDefaultInstance() {
}

GSPlayerNumber::GSPlayerNumber(const GSPlayerNumber& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GSPlayerNumber::SharedCtor() {
  _cached_size_ = 0;
  gs_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gsname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  number_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GSPlayerNumber::~GSPlayerNumber() {
  SharedDtor();
}

void GSPlayerNumber::SharedDtor() {
  if (gs_ != &::google::protobuf::internal::kEmptyString) {
    delete gs_;
  }
  if (gsname_ != &::google::protobuf::internal::kEmptyString) {
    delete gsname_;
  }
  if (this != default_instance_) {
  }
}

void GSPlayerNumber::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GSPlayerNumber::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GSPlayerNumber_descriptor_;
}

const GSPlayerNumber& GSPlayerNumber::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fdbserver_2eproto();
  return *default_instance_;
}

GSPlayerNumber* GSPlayerNumber::default_instance_ = NULL;

GSPlayerNumber* GSPlayerNumber::New() const {
  return new GSPlayerNumber;
}

void GSPlayerNumber::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_gs()) {
      if (gs_ != &::google::protobuf::internal::kEmptyString) {
        gs_->clear();
      }
    }
    if (has_gsname()) {
      if (gsname_ != &::google::protobuf::internal::kEmptyString) {
        gsname_->clear();
      }
    }
    number_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GSPlayerNumber::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string gs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gs()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gs().data(), this->gs().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_gsname;
        break;
      }

      // optional string gsname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gsname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gsname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gsname().data(), this->gsname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_number;
        break;
      }

      // optional int32 number = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GSPlayerNumber::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string gs = 1;
  if (has_gs()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gs().data(), this->gs().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->gs(), output);
  }

  // optional string gsname = 2;
  if (has_gsname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gsname().data(), this->gsname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->gsname(), output);
  }

  // optional int32 number = 3;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->number(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GSPlayerNumber::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string gs = 1;
  if (has_gs()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gs().data(), this->gs().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gs(), target);
  }

  // optional string gsname = 2;
  if (has_gsname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gsname().data(), this->gsname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->gsname(), target);
  }

  // optional int32 number = 3;
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->number(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GSPlayerNumber::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string gs = 1;
    if (has_gs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gs());
    }

    // optional string gsname = 2;
    if (has_gsname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gsname());
    }

    // optional int32 number = 3;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->number());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GSPlayerNumber::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GSPlayerNumber* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GSPlayerNumber*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GSPlayerNumber::MergeFrom(const GSPlayerNumber& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gs()) {
      set_gs(from.gs());
    }
    if (from.has_gsname()) {
      set_gsname(from.gsname());
    }
    if (from.has_number()) {
      set_number(from.number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GSPlayerNumber::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GSPlayerNumber::CopyFrom(const GSPlayerNumber& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GSPlayerNumber::IsInitialized() const {

  return true;
}

void GSPlayerNumber::Swap(GSPlayerNumber* other) {
  if (other != this) {
    std::swap(gs_, other->gs_);
    std::swap(gsname_, other->gsname_);
    std::swap(number_, other->number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GSPlayerNumber::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GSPlayerNumber_descriptor_;
  metadata.reflection = GSPlayerNumber_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GSOnlinePlayerNumberRpt::kGsnFieldNumber;
const int GSOnlinePlayerNumberRpt::kPlayeridFieldNumber;
#endif  // !_MSC_VER

GSOnlinePlayerNumberRpt::GSOnlinePlayerNumberRpt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GSOnlinePlayerNumberRpt::InitAsDefaultInstance() {
}

GSOnlinePlayerNumberRpt::GSOnlinePlayerNumberRpt(const GSOnlinePlayerNumberRpt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GSOnlinePlayerNumberRpt::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GSOnlinePlayerNumberRpt::~GSOnlinePlayerNumberRpt() {
  SharedDtor();
}

void GSOnlinePlayerNumberRpt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GSOnlinePlayerNumberRpt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GSOnlinePlayerNumberRpt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GSOnlinePlayerNumberRpt_descriptor_;
}

const GSOnlinePlayerNumberRpt& GSOnlinePlayerNumberRpt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fdbserver_2eproto();
  return *default_instance_;
}

GSOnlinePlayerNumberRpt* GSOnlinePlayerNumberRpt::default_instance_ = NULL;

GSOnlinePlayerNumberRpt* GSOnlinePlayerNumberRpt::New() const {
  return new GSOnlinePlayerNumberRpt;
}

void GSOnlinePlayerNumberRpt::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    playerid_ = GOOGLE_ULONGLONG(0);
  }
  gsn_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GSOnlinePlayerNumberRpt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protoc.gs_dbs.GSPlayerNumber gsn = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gsn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gsn()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_gsn;
        if (input->ExpectTag(16)) goto parse_playerid;
        break;
      }

      // optional uint64 playerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GSOnlinePlayerNumberRpt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protoc.gs_dbs.GSPlayerNumber gsn = 1;
  for (int i = 0; i < this->gsn_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->gsn(i), output);
  }

  // optional uint64 playerid = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GSOnlinePlayerNumberRpt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protoc.gs_dbs.GSPlayerNumber gsn = 1;
  for (int i = 0; i < this->gsn_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->gsn(i), target);
  }

  // optional uint64 playerid = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GSOnlinePlayerNumberRpt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint64 playerid = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

  }
  // repeated .protoc.gs_dbs.GSPlayerNumber gsn = 1;
  total_size += 1 * this->gsn_size();
  for (int i = 0; i < this->gsn_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gsn(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GSOnlinePlayerNumberRpt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GSOnlinePlayerNumberRpt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GSOnlinePlayerNumberRpt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GSOnlinePlayerNumberRpt::MergeFrom(const GSOnlinePlayerNumberRpt& from) {
  GOOGLE_CHECK_NE(&from, this);
  gsn_.MergeFrom(from.gsn_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GSOnlinePlayerNumberRpt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GSOnlinePlayerNumberRpt::CopyFrom(const GSOnlinePlayerNumberRpt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GSOnlinePlayerNumberRpt::IsInitialized() const {

  return true;
}

void GSOnlinePlayerNumberRpt::Swap(GSOnlinePlayerNumberRpt* other) {
  if (other != this) {
    gsn_.Swap(&other->gsn_);
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GSOnlinePlayerNumberRpt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GSOnlinePlayerNumberRpt_descriptor_;
  metadata.reflection = GSOnlinePlayerNumberRpt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OtherGSOnlinePlayerRpt::kIsonlineFieldNumber;
const int OtherGSOnlinePlayerRpt::kPlayeridFieldNumber;
#endif  // !_MSC_VER

OtherGSOnlinePlayerRpt::OtherGSOnlinePlayerRpt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OtherGSOnlinePlayerRpt::InitAsDefaultInstance() {
}

OtherGSOnlinePlayerRpt::OtherGSOnlinePlayerRpt(const OtherGSOnlinePlayerRpt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OtherGSOnlinePlayerRpt::SharedCtor() {
  _cached_size_ = 0;
  isonline_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OtherGSOnlinePlayerRpt::~OtherGSOnlinePlayerRpt() {
  SharedDtor();
}

void OtherGSOnlinePlayerRpt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OtherGSOnlinePlayerRpt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OtherGSOnlinePlayerRpt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OtherGSOnlinePlayerRpt_descriptor_;
}

const OtherGSOnlinePlayerRpt& OtherGSOnlinePlayerRpt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fdbserver_2eproto();
  return *default_instance_;
}

OtherGSOnlinePlayerRpt* OtherGSOnlinePlayerRpt::default_instance_ = NULL;

OtherGSOnlinePlayerRpt* OtherGSOnlinePlayerRpt::New() const {
  return new OtherGSOnlinePlayerRpt;
}

void OtherGSOnlinePlayerRpt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    isonline_ = 0;
  }
  playerid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OtherGSOnlinePlayerRpt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 isonline = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isonline_)));
          set_has_isonline();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerid;
        break;
      }

      // repeated uint64 playerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_playerid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_playerid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerid;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OtherGSOnlinePlayerRpt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 isonline = 1;
  if (has_isonline()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->isonline(), output);
  }

  // repeated uint64 playerid = 2;
  for (int i = 0; i < this->playerid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->playerid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OtherGSOnlinePlayerRpt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 isonline = 1;
  if (has_isonline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->isonline(), target);
  }

  // repeated uint64 playerid = 2;
  for (int i = 0; i < this->playerid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->playerid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OtherGSOnlinePlayerRpt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 isonline = 1;
    if (has_isonline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isonline());
    }

  }
  // repeated uint64 playerid = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->playerid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->playerid(i));
    }
    total_size += 1 * this->playerid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OtherGSOnlinePlayerRpt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OtherGSOnlinePlayerRpt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OtherGSOnlinePlayerRpt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OtherGSOnlinePlayerRpt::MergeFrom(const OtherGSOnlinePlayerRpt& from) {
  GOOGLE_CHECK_NE(&from, this);
  playerid_.MergeFrom(from.playerid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isonline()) {
      set_isonline(from.isonline());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OtherGSOnlinePlayerRpt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OtherGSOnlinePlayerRpt::CopyFrom(const OtherGSOnlinePlayerRpt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OtherGSOnlinePlayerRpt::IsInitialized() const {

  return true;
}

void OtherGSOnlinePlayerRpt::Swap(OtherGSOnlinePlayerRpt* other) {
  if (other != this) {
    std::swap(isonline_, other->isonline_);
    playerid_.Swap(&other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OtherGSOnlinePlayerRpt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OtherGSOnlinePlayerRpt_descriptor_;
  metadata.reflection = OtherGSOnlinePlayerRpt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OtherGSPlayerOnlineRpt::kPlayeridFieldNumber;
#endif  // !_MSC_VER

OtherGSPlayerOnlineRpt::OtherGSPlayerOnlineRpt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OtherGSPlayerOnlineRpt::InitAsDefaultInstance() {
}

OtherGSPlayerOnlineRpt::OtherGSPlayerOnlineRpt(const OtherGSPlayerOnlineRpt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OtherGSPlayerOnlineRpt::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OtherGSPlayerOnlineRpt::~OtherGSPlayerOnlineRpt() {
  SharedDtor();
}

void OtherGSPlayerOnlineRpt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OtherGSPlayerOnlineRpt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OtherGSPlayerOnlineRpt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OtherGSPlayerOnlineRpt_descriptor_;
}

const OtherGSPlayerOnlineRpt& OtherGSPlayerOnlineRpt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fdbserver_2eproto();
  return *default_instance_;
}

OtherGSPlayerOnlineRpt* OtherGSPlayerOnlineRpt::default_instance_ = NULL;

OtherGSPlayerOnlineRpt* OtherGSPlayerOnlineRpt::New() const {
  return new OtherGSPlayerOnlineRpt;
}

void OtherGSPlayerOnlineRpt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OtherGSPlayerOnlineRpt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OtherGSPlayerOnlineRpt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OtherGSPlayerOnlineRpt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OtherGSPlayerOnlineRpt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OtherGSPlayerOnlineRpt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OtherGSPlayerOnlineRpt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OtherGSPlayerOnlineRpt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OtherGSPlayerOnlineRpt::MergeFrom(const OtherGSPlayerOnlineRpt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OtherGSPlayerOnlineRpt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OtherGSPlayerOnlineRpt::CopyFrom(const OtherGSPlayerOnlineRpt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OtherGSPlayerOnlineRpt::IsInitialized() const {

  return true;
}

void OtherGSPlayerOnlineRpt::Swap(OtherGSPlayerOnlineRpt* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OtherGSPlayerOnlineRpt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OtherGSPlayerOnlineRpt_descriptor_;
  metadata.reflection = OtherGSPlayerOnlineRpt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OtherGSPlayerOfflineRpt::kPlayeridFieldNumber;
#endif  // !_MSC_VER

OtherGSPlayerOfflineRpt::OtherGSPlayerOfflineRpt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OtherGSPlayerOfflineRpt::InitAsDefaultInstance() {
}

OtherGSPlayerOfflineRpt::OtherGSPlayerOfflineRpt(const OtherGSPlayerOfflineRpt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OtherGSPlayerOfflineRpt::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OtherGSPlayerOfflineRpt::~OtherGSPlayerOfflineRpt() {
  SharedDtor();
}

void OtherGSPlayerOfflineRpt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OtherGSPlayerOfflineRpt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OtherGSPlayerOfflineRpt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OtherGSPlayerOfflineRpt_descriptor_;
}

const OtherGSPlayerOfflineRpt& OtherGSPlayerOfflineRpt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fdbserver_2eproto();
  return *default_instance_;
}

OtherGSPlayerOfflineRpt* OtherGSPlayerOfflineRpt::default_instance_ = NULL;

OtherGSPlayerOfflineRpt* OtherGSPlayerOfflineRpt::New() const {
  return new OtherGSPlayerOfflineRpt;
}

void OtherGSPlayerOfflineRpt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OtherGSPlayerOfflineRpt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OtherGSPlayerOfflineRpt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OtherGSPlayerOfflineRpt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OtherGSPlayerOfflineRpt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OtherGSPlayerOfflineRpt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OtherGSPlayerOfflineRpt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OtherGSPlayerOfflineRpt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OtherGSPlayerOfflineRpt::MergeFrom(const OtherGSPlayerOfflineRpt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OtherGSPlayerOfflineRpt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OtherGSPlayerOfflineRpt::CopyFrom(const OtherGSPlayerOfflineRpt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OtherGSPlayerOfflineRpt::IsInitialized() const {

  return true;
}

void OtherGSPlayerOfflineRpt::Swap(OtherGSPlayerOfflineRpt* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OtherGSPlayerOfflineRpt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OtherGSPlayerOfflineRpt_descriptor_;
  metadata.reflection = OtherGSPlayerOfflineRpt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChongZhiPlayer::kTransactionIdFieldNumber;
const int ChongZhiPlayer::kPlayeridFieldNumber;
#endif  // !_MSC_VER

ChongZhiPlayer::ChongZhiPlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChongZhiPlayer::InitAsDefaultInstance() {
}

ChongZhiPlayer::ChongZhiPlayer(const ChongZhiPlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChongZhiPlayer::SharedCtor() {
  _cached_size_ = 0;
  transaction_id_ = GOOGLE_ULONGLONG(0);
  playerid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChongZhiPlayer::~ChongZhiPlayer() {
  SharedDtor();
}

void ChongZhiPlayer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChongZhiPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChongZhiPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChongZhiPlayer_descriptor_;
}

const ChongZhiPlayer& ChongZhiPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fdbserver_2eproto();
  return *default_instance_;
}

ChongZhiPlayer* ChongZhiPlayer::default_instance_ = NULL;

ChongZhiPlayer* ChongZhiPlayer::New() const {
  return new ChongZhiPlayer;
}

void ChongZhiPlayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    transaction_id_ = GOOGLE_ULONGLONG(0);
    playerid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChongZhiPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 transaction_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &transaction_id_)));
          set_has_transaction_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerid;
        break;
      }

      // optional uint64 playerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChongZhiPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 transaction_id = 1;
  if (has_transaction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->transaction_id(), output);
  }

  // optional uint64 playerid = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChongZhiPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 transaction_id = 1;
  if (has_transaction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->transaction_id(), target);
  }

  // optional uint64 playerid = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChongZhiPlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 transaction_id = 1;
    if (has_transaction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->transaction_id());
    }

    // optional uint64 playerid = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChongZhiPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChongZhiPlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChongZhiPlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChongZhiPlayer::MergeFrom(const ChongZhiPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_transaction_id()) {
      set_transaction_id(from.transaction_id());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChongZhiPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChongZhiPlayer::CopyFrom(const ChongZhiPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChongZhiPlayer::IsInitialized() const {

  return true;
}

void ChongZhiPlayer::Swap(ChongZhiPlayer* other) {
  if (other != this) {
    std::swap(transaction_id_, other->transaction_id_);
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChongZhiPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChongZhiPlayer_descriptor_;
  metadata.reflection = ChongZhiPlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OfflineChongZhiNtf::kAreaNoFieldNumber;
const int OfflineChongZhiNtf::kChongzhiUserFieldNumber;
#endif  // !_MSC_VER

OfflineChongZhiNtf::OfflineChongZhiNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OfflineChongZhiNtf::InitAsDefaultInstance() {
}

OfflineChongZhiNtf::OfflineChongZhiNtf(const OfflineChongZhiNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OfflineChongZhiNtf::SharedCtor() {
  _cached_size_ = 0;
  area_no_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OfflineChongZhiNtf::~OfflineChongZhiNtf() {
  SharedDtor();
}

void OfflineChongZhiNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OfflineChongZhiNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OfflineChongZhiNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OfflineChongZhiNtf_descriptor_;
}

const OfflineChongZhiNtf& OfflineChongZhiNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fdbserver_2eproto();
  return *default_instance_;
}

OfflineChongZhiNtf* OfflineChongZhiNtf::default_instance_ = NULL;

OfflineChongZhiNtf* OfflineChongZhiNtf::New() const {
  return new OfflineChongZhiNtf;
}

void OfflineChongZhiNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    area_no_ = 0u;
  }
  chongzhi_user_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OfflineChongZhiNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 area_no = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &area_no_)));
          set_has_area_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_chongzhi_user;
        break;
      }

      // repeated .protoc.gs_dbs.ChongZhiPlayer chongzhi_user = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chongzhi_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chongzhi_user()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_chongzhi_user;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OfflineChongZhiNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 area_no = 1;
  if (has_area_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->area_no(), output);
  }

  // repeated .protoc.gs_dbs.ChongZhiPlayer chongzhi_user = 2;
  for (int i = 0; i < this->chongzhi_user_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->chongzhi_user(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OfflineChongZhiNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 area_no = 1;
  if (has_area_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->area_no(), target);
  }

  // repeated .protoc.gs_dbs.ChongZhiPlayer chongzhi_user = 2;
  for (int i = 0; i < this->chongzhi_user_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->chongzhi_user(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OfflineChongZhiNtf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 area_no = 1;
    if (has_area_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->area_no());
    }

  }
  // repeated .protoc.gs_dbs.ChongZhiPlayer chongzhi_user = 2;
  total_size += 1 * this->chongzhi_user_size();
  for (int i = 0; i < this->chongzhi_user_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chongzhi_user(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OfflineChongZhiNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OfflineChongZhiNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OfflineChongZhiNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OfflineChongZhiNtf::MergeFrom(const OfflineChongZhiNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  chongzhi_user_.MergeFrom(from.chongzhi_user_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_area_no()) {
      set_area_no(from.area_no());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OfflineChongZhiNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OfflineChongZhiNtf::CopyFrom(const OfflineChongZhiNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OfflineChongZhiNtf::IsInitialized() const {

  return true;
}

void OfflineChongZhiNtf::Swap(OfflineChongZhiNtf* other) {
  if (other != this) {
    std::swap(area_no_, other->area_no_);
    chongzhi_user_.Swap(&other->chongzhi_user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OfflineChongZhiNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OfflineChongZhiNtf_descriptor_;
  metadata.reflection = OfflineChongZhiNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerLeaveGameRpt::kPlayeridFieldNumber;
#endif  // !_MSC_VER

PlayerLeaveGameRpt::PlayerLeaveGameRpt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerLeaveGameRpt::InitAsDefaultInstance() {
}

PlayerLeaveGameRpt::PlayerLeaveGameRpt(const PlayerLeaveGameRpt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerLeaveGameRpt::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerLeaveGameRpt::~PlayerLeaveGameRpt() {
  SharedDtor();
}

void PlayerLeaveGameRpt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerLeaveGameRpt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerLeaveGameRpt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerLeaveGameRpt_descriptor_;
}

const PlayerLeaveGameRpt& PlayerLeaveGameRpt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fdbserver_2eproto();
  return *default_instance_;
}

PlayerLeaveGameRpt* PlayerLeaveGameRpt::default_instance_ = NULL;

PlayerLeaveGameRpt* PlayerLeaveGameRpt::New() const {
  return new PlayerLeaveGameRpt;
}

void PlayerLeaveGameRpt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerLeaveGameRpt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerLeaveGameRpt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerLeaveGameRpt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerLeaveGameRpt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerLeaveGameRpt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerLeaveGameRpt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerLeaveGameRpt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerLeaveGameRpt::MergeFrom(const PlayerLeaveGameRpt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerLeaveGameRpt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerLeaveGameRpt::CopyFrom(const PlayerLeaveGameRpt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerLeaveGameRpt::IsInitialized() const {

  return true;
}

void PlayerLeaveGameRpt::Swap(PlayerLeaveGameRpt* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerLeaveGameRpt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerLeaveGameRpt_descriptor_;
  metadata.reflection = PlayerLeaveGameRpt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetGM_ListReq::kPlayeridFieldNumber;
#endif  // !_MSC_VER

GetGM_ListReq::GetGM_ListReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetGM_ListReq::InitAsDefaultInstance() {
}

GetGM_ListReq::GetGM_ListReq(const GetGM_ListReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetGM_ListReq::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetGM_ListReq::~GetGM_ListReq() {
  SharedDtor();
}

void GetGM_ListReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetGM_ListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetGM_ListReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetGM_ListReq_descriptor_;
}

const GetGM_ListReq& GetGM_ListReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fdbserver_2eproto();
  return *default_instance_;
}

GetGM_ListReq* GetGM_ListReq::default_instance_ = NULL;

GetGM_ListReq* GetGM_ListReq::New() const {
  return new GetGM_ListReq;
}

void GetGM_ListReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetGM_ListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetGM_ListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetGM_ListReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetGM_ListReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGM_ListReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetGM_ListReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetGM_ListReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetGM_ListReq::MergeFrom(const GetGM_ListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetGM_ListReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGM_ListReq::CopyFrom(const GetGM_ListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGM_ListReq::IsInitialized() const {

  return true;
}

void GetGM_ListReq::Swap(GetGM_ListReq* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetGM_ListReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetGM_ListReq_descriptor_;
  metadata.reflection = GetGM_ListReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetGM_ListAck::kPlayeridFieldNumber;
const int GetGM_ListAck::kErrNoFieldNumber;
#endif  // !_MSC_VER

GetGM_ListAck::GetGM_ListAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetGM_ListAck::InitAsDefaultInstance() {
}

GetGM_ListAck::GetGM_ListAck(const GetGM_ListAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetGM_ListAck::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_ULONGLONG(0);
  err_no_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetGM_ListAck::~GetGM_ListAck() {
  SharedDtor();
}

void GetGM_ListAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetGM_ListAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetGM_ListAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetGM_ListAck_descriptor_;
}

const GetGM_ListAck& GetGM_ListAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fdbserver_2eproto();
  return *default_instance_;
}

GetGM_ListAck* GetGM_ListAck::default_instance_ = NULL;

GetGM_ListAck* GetGM_ListAck::New() const {
  return new GetGM_ListAck;
}

void GetGM_ListAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_ULONGLONG(0);
    err_no_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetGM_ListAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_err_no;
        break;
      }

      // optional int32 err_no = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_err_no:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_no_)));
          set_has_err_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetGM_ListAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->playerid(), output);
  }

  // optional int32 err_no = 2;
  if (has_err_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->err_no(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetGM_ListAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->playerid(), target);
  }

  // optional int32 err_no = 2;
  if (has_err_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->err_no(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetGM_ListAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

    // optional int32 err_no = 2;
    if (has_err_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err_no());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGM_ListAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetGM_ListAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetGM_ListAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetGM_ListAck::MergeFrom(const GetGM_ListAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_err_no()) {
      set_err_no(from.err_no());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetGM_ListAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGM_ListAck::CopyFrom(const GetGM_ListAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGM_ListAck::IsInitialized() const {

  return true;
}

void GetGM_ListAck::Swap(GetGM_ListAck* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(err_no_, other->err_no_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetGM_ListAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetGM_ListAck_descriptor_;
  metadata.reflection = GetGM_ListAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

DBSServerCloseNtf::DBSServerCloseNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DBSServerCloseNtf::InitAsDefaultInstance() {
}

DBSServerCloseNtf::DBSServerCloseNtf(const DBSServerCloseNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DBSServerCloseNtf::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBSServerCloseNtf::~DBSServerCloseNtf() {
  SharedDtor();
}

void DBSServerCloseNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DBSServerCloseNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBSServerCloseNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBSServerCloseNtf_descriptor_;
}

const DBSServerCloseNtf& DBSServerCloseNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fdbserver_2eproto();
  return *default_instance_;
}

DBSServerCloseNtf* DBSServerCloseNtf::default_instance_ = NULL;

DBSServerCloseNtf* DBSServerCloseNtf::New() const {
  return new DBSServerCloseNtf;
}

void DBSServerCloseNtf::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DBSServerCloseNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void DBSServerCloseNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DBSServerCloseNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DBSServerCloseNtf::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBSServerCloseNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DBSServerCloseNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DBSServerCloseNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBSServerCloseNtf::MergeFrom(const DBSServerCloseNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DBSServerCloseNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBSServerCloseNtf::CopyFrom(const DBSServerCloseNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBSServerCloseNtf::IsInitialized() const {

  return true;
}

void DBSServerCloseNtf::Swap(DBSServerCloseNtf* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DBSServerCloseNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBSServerCloseNtf_descriptor_;
  metadata.reflection = DBSServerCloseNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CheckInGSReq::kPlayeridFieldNumber;
#endif  // !_MSC_VER

CheckInGSReq::CheckInGSReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CheckInGSReq::InitAsDefaultInstance() {
}

CheckInGSReq::CheckInGSReq(const CheckInGSReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CheckInGSReq::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CheckInGSReq::~CheckInGSReq() {
  SharedDtor();
}

void CheckInGSReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CheckInGSReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckInGSReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CheckInGSReq_descriptor_;
}

const CheckInGSReq& CheckInGSReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fdbserver_2eproto();
  return *default_instance_;
}

CheckInGSReq* CheckInGSReq::default_instance_ = NULL;

CheckInGSReq* CheckInGSReq::New() const {
  return new CheckInGSReq;
}

void CheckInGSReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CheckInGSReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 playerid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CheckInGSReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 playerid = 3;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CheckInGSReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 playerid = 3;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CheckInGSReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 playerid = 3;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckInGSReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CheckInGSReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CheckInGSReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CheckInGSReq::MergeFrom(const CheckInGSReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CheckInGSReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckInGSReq::CopyFrom(const CheckInGSReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckInGSReq::IsInitialized() const {

  return true;
}

void CheckInGSReq::Swap(CheckInGSReq* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CheckInGSReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CheckInGSReq_descriptor_;
  metadata.reflection = CheckInGSReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CheckInGSAck::kPlayeridFieldNumber;
#endif  // !_MSC_VER

CheckInGSAck::CheckInGSAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CheckInGSAck::InitAsDefaultInstance() {
}

CheckInGSAck::CheckInGSAck(const CheckInGSAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CheckInGSAck::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CheckInGSAck::~CheckInGSAck() {
  SharedDtor();
}

void CheckInGSAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CheckInGSAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckInGSAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CheckInGSAck_descriptor_;
}

const CheckInGSAck& CheckInGSAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fdbserver_2eproto();
  return *default_instance_;
}

CheckInGSAck* CheckInGSAck::default_instance_ = NULL;

CheckInGSAck* CheckInGSAck::New() const {
  return new CheckInGSAck;
}

void CheckInGSAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CheckInGSAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 playerid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CheckInGSAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 playerid = 3;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CheckInGSAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 playerid = 3;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CheckInGSAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 playerid = 3;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckInGSAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CheckInGSAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CheckInGSAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CheckInGSAck::MergeFrom(const CheckInGSAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CheckInGSAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckInGSAck::CopyFrom(const CheckInGSAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckInGSAck::IsInitialized() const {

  return true;
}

void CheckInGSAck::Swap(CheckInGSAck* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CheckInGSAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CheckInGSAck_descriptor_;
  metadata.reflection = CheckInGSAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int get_login_key_req::kPlayeridFieldNumber;
#endif  // !_MSC_VER

get_login_key_req::get_login_key_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void get_login_key_req::InitAsDefaultInstance() {
}

get_login_key_req::get_login_key_req(const get_login_key_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void get_login_key_req::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

get_login_key_req::~get_login_key_req() {
  SharedDtor();
}

void get_login_key_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void get_login_key_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_login_key_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return get_login_key_req_descriptor_;
}

const get_login_key_req& get_login_key_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fdbserver_2eproto();
  return *default_instance_;
}

get_login_key_req* get_login_key_req::default_instance_ = NULL;

get_login_key_req* get_login_key_req::New() const {
  return new get_login_key_req;
}

void get_login_key_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool get_login_key_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void get_login_key_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* get_login_key_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int get_login_key_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_login_key_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const get_login_key_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const get_login_key_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void get_login_key_req::MergeFrom(const get_login_key_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void get_login_key_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_login_key_req::CopyFrom(const get_login_key_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_login_key_req::IsInitialized() const {

  return true;
}

void get_login_key_req::Swap(get_login_key_req* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata get_login_key_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = get_login_key_req_descriptor_;
  metadata.reflection = get_login_key_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int get_login_key_ack::kPlayeridFieldNumber;
const int get_login_key_ack::kKeyFieldNumber;
const int get_login_key_ack::kLeaveTimeFieldNumber;
#endif  // !_MSC_VER

get_login_key_ack::get_login_key_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void get_login_key_ack::InitAsDefaultInstance() {
}

get_login_key_ack::get_login_key_ack(const get_login_key_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void get_login_key_ack::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_ULONGLONG(0);
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  leave_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

get_login_key_ack::~get_login_key_ack() {
  SharedDtor();
}

void get_login_key_ack::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void get_login_key_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_login_key_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return get_login_key_ack_descriptor_;
}

const get_login_key_ack& get_login_key_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fdbserver_2eproto();
  return *default_instance_;
}

get_login_key_ack* get_login_key_ack::default_instance_ = NULL;

get_login_key_ack* get_login_key_ack::New() const {
  return new get_login_key_ack;
}

void get_login_key_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_ULONGLONG(0);
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    leave_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool get_login_key_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // optional string key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_leave_time;
        break;
      }

      // optional int32 leave_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leave_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leave_time_)));
          set_has_leave_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void get_login_key_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->playerid(), output);
  }

  // optional string key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->key(), output);
  }

  // optional int32 leave_time = 3;
  if (has_leave_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->leave_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* get_login_key_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->playerid(), target);
  }

  // optional string key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->key(), target);
  }

  // optional int32 leave_time = 3;
  if (has_leave_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->leave_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int get_login_key_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

    // optional string key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional int32 leave_time = 3;
    if (has_leave_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leave_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_login_key_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const get_login_key_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const get_login_key_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void get_login_key_ack::MergeFrom(const get_login_key_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_leave_time()) {
      set_leave_time(from.leave_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void get_login_key_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_login_key_ack::CopyFrom(const get_login_key_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_login_key_ack::IsInitialized() const {

  return true;
}

void get_login_key_ack::Swap(get_login_key_ack* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(key_, other->key_);
    std::swap(leave_time_, other->leave_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata get_login_key_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = get_login_key_ack_descriptor_;
  metadata.reflection = get_login_key_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int login_gs_req::kPlayeridFieldNumber;
const int login_gs_req::kAccountFieldNumber;
const int login_gs_req::kAreaIdFieldNumber;
const int login_gs_req::kPlatformIdFieldNumber;
#endif  // !_MSC_VER

login_gs_req::login_gs_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void login_gs_req::InitAsDefaultInstance() {
}

login_gs_req::login_gs_req(const login_gs_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void login_gs_req::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_ULONGLONG(0);
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  area_id_ = 0u;
  platform_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

login_gs_req::~login_gs_req() {
  SharedDtor();
}

void login_gs_req::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (this != default_instance_) {
  }
}

void login_gs_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* login_gs_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return login_gs_req_descriptor_;
}

const login_gs_req& login_gs_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fdbserver_2eproto();
  return *default_instance_;
}

login_gs_req* login_gs_req::default_instance_ = NULL;

login_gs_req* login_gs_req::New() const {
  return new login_gs_req;
}

void login_gs_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_ULONGLONG(0);
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    area_id_ = 0u;
    platform_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool login_gs_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }

      // optional string account = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_area_id;
        break;
      }

      // optional uint32 area_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_area_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &area_id_)));
          set_has_area_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_platform_id;
        break;
      }

      // optional int32 platform_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_platform_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &platform_id_)));
          set_has_platform_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void login_gs_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->playerid(), output);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->account(), output);
  }

  // optional uint32 area_id = 3;
  if (has_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->area_id(), output);
  }

  // optional int32 platform_id = 4;
  if (has_platform_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->platform_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* login_gs_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->playerid(), target);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account(), target);
  }

  // optional uint32 area_id = 3;
  if (has_area_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->area_id(), target);
  }

  // optional int32 platform_id = 4;
  if (has_platform_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->platform_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int login_gs_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

    // optional string account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional uint32 area_id = 3;
    if (has_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->area_id());
    }

    // optional int32 platform_id = 4;
    if (has_platform_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->platform_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void login_gs_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const login_gs_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const login_gs_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void login_gs_req::MergeFrom(const login_gs_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_area_id()) {
      set_area_id(from.area_id());
    }
    if (from.has_platform_id()) {
      set_platform_id(from.platform_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void login_gs_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void login_gs_req::CopyFrom(const login_gs_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool login_gs_req::IsInitialized() const {

  return true;
}

void login_gs_req::Swap(login_gs_req* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(account_, other->account_);
    std::swap(area_id_, other->area_id_);
    std::swap(platform_id_, other->platform_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata login_gs_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = login_gs_req_descriptor_;
  metadata.reflection = login_gs_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int login_gs_ack::kPlayeridFieldNumber;
const int login_gs_ack::kGateIpFieldNumber;
const int login_gs_ack::kGateportFieldNumber;
const int login_gs_ack::kGateKeyFieldNumber;
const int login_gs_ack::kErrNoFieldNumber;
#endif  // !_MSC_VER

login_gs_ack::login_gs_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void login_gs_ack::InitAsDefaultInstance() {
}

login_gs_ack::login_gs_ack(const login_gs_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void login_gs_ack::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_ULONGLONG(0);
  gate_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gateport_ = 0;
  gate_key_ = 0;
  err_no_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

login_gs_ack::~login_gs_ack() {
  SharedDtor();
}

void login_gs_ack::SharedDtor() {
  if (gate_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete gate_ip_;
  }
  if (this != default_instance_) {
  }
}

void login_gs_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* login_gs_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return login_gs_ack_descriptor_;
}

const login_gs_ack& login_gs_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fdbserver_2eproto();
  return *default_instance_;
}

login_gs_ack* login_gs_ack::default_instance_ = NULL;

login_gs_ack* login_gs_ack::New() const {
  return new login_gs_ack;
}

void login_gs_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_ULONGLONG(0);
    if (has_gate_ip()) {
      if (gate_ip_ != &::google::protobuf::internal::kEmptyString) {
        gate_ip_->clear();
      }
    }
    gateport_ = 0;
    gate_key_ = 0;
    err_no_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool login_gs_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_gate_ip;
        break;
      }

      // optional string gate_ip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gate_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gate_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gate_ip().data(), this->gate_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gateport;
        break;
      }

      // optional int32 gateport = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gateport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gateport_)));
          set_has_gateport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_gate_key;
        break;
      }

      // optional int32 gate_key = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gate_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gate_key_)));
          set_has_gate_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_err_no;
        break;
      }

      // optional int32 err_no = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_err_no:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_no_)));
          set_has_err_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void login_gs_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->playerid(), output);
  }

  // optional string gate_ip = 2;
  if (has_gate_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gate_ip().data(), this->gate_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->gate_ip(), output);
  }

  // optional int32 gateport = 3;
  if (has_gateport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gateport(), output);
  }

  // optional int32 gate_key = 4;
  if (has_gate_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gate_key(), output);
  }

  // optional int32 err_no = 5;
  if (has_err_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->err_no(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* login_gs_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->playerid(), target);
  }

  // optional string gate_ip = 2;
  if (has_gate_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gate_ip().data(), this->gate_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->gate_ip(), target);
  }

  // optional int32 gateport = 3;
  if (has_gateport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gateport(), target);
  }

  // optional int32 gate_key = 4;
  if (has_gate_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gate_key(), target);
  }

  // optional int32 err_no = 5;
  if (has_err_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->err_no(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int login_gs_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

    // optional string gate_ip = 2;
    if (has_gate_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gate_ip());
    }

    // optional int32 gateport = 3;
    if (has_gateport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gateport());
    }

    // optional int32 gate_key = 4;
    if (has_gate_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gate_key());
    }

    // optional int32 err_no = 5;
    if (has_err_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err_no());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void login_gs_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const login_gs_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const login_gs_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void login_gs_ack::MergeFrom(const login_gs_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_gate_ip()) {
      set_gate_ip(from.gate_ip());
    }
    if (from.has_gateport()) {
      set_gateport(from.gateport());
    }
    if (from.has_gate_key()) {
      set_gate_key(from.gate_key());
    }
    if (from.has_err_no()) {
      set_err_no(from.err_no());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void login_gs_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void login_gs_ack::CopyFrom(const login_gs_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool login_gs_ack::IsInitialized() const {

  return true;
}

void login_gs_ack::Swap(login_gs_ack* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(gate_ip_, other->gate_ip_);
    std::swap(gateport_, other->gateport_);
    std::swap(gate_key_, other->gate_key_);
    std::swap(err_no_, other->err_no_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata login_gs_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = login_gs_ack_descriptor_;
  metadata.reflection = login_gs_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int online_gs_rpt::kPlayeridFieldNumber;
const int online_gs_rpt::kGsidFieldNumber;
#endif  // !_MSC_VER

online_gs_rpt::online_gs_rpt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void online_gs_rpt::InitAsDefaultInstance() {
}

online_gs_rpt::online_gs_rpt(const online_gs_rpt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void online_gs_rpt::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_ULONGLONG(0);
  gsid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

online_gs_rpt::~online_gs_rpt() {
  SharedDtor();
}

void online_gs_rpt::SharedDtor() {
  if (gsid_ != &::google::protobuf::internal::kEmptyString) {
    delete gsid_;
  }
  if (this != default_instance_) {
  }
}

void online_gs_rpt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* online_gs_rpt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return online_gs_rpt_descriptor_;
}

const online_gs_rpt& online_gs_rpt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fdbserver_2eproto();
  return *default_instance_;
}

online_gs_rpt* online_gs_rpt::default_instance_ = NULL;

online_gs_rpt* online_gs_rpt::New() const {
  return new online_gs_rpt;
}

void online_gs_rpt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_ULONGLONG(0);
    if (has_gsid()) {
      if (gsid_ != &::google::protobuf::internal::kEmptyString) {
        gsid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool online_gs_rpt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_gsid;
        break;
      }

      // optional string gsid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gsid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gsid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gsid().data(), this->gsid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void online_gs_rpt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->playerid(), output);
  }

  // optional string gsid = 2;
  if (has_gsid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gsid().data(), this->gsid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->gsid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* online_gs_rpt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->playerid(), target);
  }

  // optional string gsid = 2;
  if (has_gsid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gsid().data(), this->gsid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->gsid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int online_gs_rpt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

    // optional string gsid = 2;
    if (has_gsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gsid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void online_gs_rpt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const online_gs_rpt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const online_gs_rpt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void online_gs_rpt::MergeFrom(const online_gs_rpt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_gsid()) {
      set_gsid(from.gsid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void online_gs_rpt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void online_gs_rpt::CopyFrom(const online_gs_rpt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool online_gs_rpt::IsInitialized() const {

  return true;
}

void online_gs_rpt::Swap(online_gs_rpt* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(gsid_, other->gsid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata online_gs_rpt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = online_gs_rpt_descriptor_;
  metadata.reflection = online_gs_rpt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int switch_gs_lock_req::kPlayeridFieldNumber;
const int switch_gs_lock_req::kGsidFieldNumber;
#endif  // !_MSC_VER

switch_gs_lock_req::switch_gs_lock_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void switch_gs_lock_req::InitAsDefaultInstance() {
}

switch_gs_lock_req::switch_gs_lock_req(const switch_gs_lock_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void switch_gs_lock_req::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_ULONGLONG(0);
  gsid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

switch_gs_lock_req::~switch_gs_lock_req() {
  SharedDtor();
}

void switch_gs_lock_req::SharedDtor() {
  if (gsid_ != &::google::protobuf::internal::kEmptyString) {
    delete gsid_;
  }
  if (this != default_instance_) {
  }
}

void switch_gs_lock_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* switch_gs_lock_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return switch_gs_lock_req_descriptor_;
}

const switch_gs_lock_req& switch_gs_lock_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fdbserver_2eproto();
  return *default_instance_;
}

switch_gs_lock_req* switch_gs_lock_req::default_instance_ = NULL;

switch_gs_lock_req* switch_gs_lock_req::New() const {
  return new switch_gs_lock_req;
}

void switch_gs_lock_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_ULONGLONG(0);
    if (has_gsid()) {
      if (gsid_ != &::google::protobuf::internal::kEmptyString) {
        gsid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool switch_gs_lock_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_gsid;
        break;
      }

      // optional string gsid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gsid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gsid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gsid().data(), this->gsid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void switch_gs_lock_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->playerid(), output);
  }

  // optional string gsid = 2;
  if (has_gsid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gsid().data(), this->gsid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->gsid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* switch_gs_lock_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->playerid(), target);
  }

  // optional string gsid = 2;
  if (has_gsid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gsid().data(), this->gsid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->gsid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int switch_gs_lock_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

    // optional string gsid = 2;
    if (has_gsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gsid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void switch_gs_lock_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const switch_gs_lock_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const switch_gs_lock_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void switch_gs_lock_req::MergeFrom(const switch_gs_lock_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_gsid()) {
      set_gsid(from.gsid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void switch_gs_lock_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void switch_gs_lock_req::CopyFrom(const switch_gs_lock_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool switch_gs_lock_req::IsInitialized() const {

  return true;
}

void switch_gs_lock_req::Swap(switch_gs_lock_req* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(gsid_, other->gsid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata switch_gs_lock_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = switch_gs_lock_req_descriptor_;
  metadata.reflection = switch_gs_lock_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int switch_gs_lock_ack::kPlayeridFieldNumber;
const int switch_gs_lock_ack::kGsidFieldNumber;
#endif  // !_MSC_VER

switch_gs_lock_ack::switch_gs_lock_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void switch_gs_lock_ack::InitAsDefaultInstance() {
}

switch_gs_lock_ack::switch_gs_lock_ack(const switch_gs_lock_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void switch_gs_lock_ack::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_ULONGLONG(0);
  gsid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

switch_gs_lock_ack::~switch_gs_lock_ack() {
  SharedDtor();
}

void switch_gs_lock_ack::SharedDtor() {
  if (gsid_ != &::google::protobuf::internal::kEmptyString) {
    delete gsid_;
  }
  if (this != default_instance_) {
  }
}

void switch_gs_lock_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* switch_gs_lock_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return switch_gs_lock_ack_descriptor_;
}

const switch_gs_lock_ack& switch_gs_lock_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fdbserver_2eproto();
  return *default_instance_;
}

switch_gs_lock_ack* switch_gs_lock_ack::default_instance_ = NULL;

switch_gs_lock_ack* switch_gs_lock_ack::New() const {
  return new switch_gs_lock_ack;
}

void switch_gs_lock_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_ULONGLONG(0);
    if (has_gsid()) {
      if (gsid_ != &::google::protobuf::internal::kEmptyString) {
        gsid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool switch_gs_lock_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_gsid;
        break;
      }

      // optional string gsid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gsid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gsid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gsid().data(), this->gsid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void switch_gs_lock_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->playerid(), output);
  }

  // optional string gsid = 2;
  if (has_gsid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gsid().data(), this->gsid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->gsid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* switch_gs_lock_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->playerid(), target);
  }

  // optional string gsid = 2;
  if (has_gsid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gsid().data(), this->gsid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->gsid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int switch_gs_lock_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

    // optional string gsid = 2;
    if (has_gsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gsid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void switch_gs_lock_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const switch_gs_lock_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const switch_gs_lock_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void switch_gs_lock_ack::MergeFrom(const switch_gs_lock_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_gsid()) {
      set_gsid(from.gsid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void switch_gs_lock_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void switch_gs_lock_ack::CopyFrom(const switch_gs_lock_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool switch_gs_lock_ack::IsInitialized() const {

  return true;
}

void switch_gs_lock_ack::Swap(switch_gs_lock_ack* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(gsid_, other->gsid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata switch_gs_lock_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = switch_gs_lock_ack_descriptor_;
  metadata.reflection = switch_gs_lock_ack_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace gs_dbs
}  // namespace protoc

// @@protoc_insertion_point(global_scope)
