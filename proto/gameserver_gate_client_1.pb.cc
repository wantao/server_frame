// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gameserver_gate_client_1.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "gameserver_gate_client_1.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protoc {
namespace gameproto {

namespace {

const ::google::protobuf::Descriptor* GetServerCurrentTimeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetServerCurrentTimeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetServerCurrentTimeAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetServerCurrentTimeAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetStrengFailTimesReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetStrengFailTimesReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PostTrasnFileReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PostTrasnFileReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PostTrasnFileAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PostTrasnFileAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrasnFileRpt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrasnFileRpt_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransFileCompleteRpt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransFileCompleteRpt_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_gameserver_5fgate_5fclient_5f1_2eproto() {
  protobuf_AddDesc_gameserver_5fgate_5fclient_5f1_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "gameserver_gate_client_1.proto");
  GOOGLE_CHECK(file != NULL);
  GetServerCurrentTimeReq_descriptor_ = file->message_type(0);
  static const int GetServerCurrentTimeReq_offsets_[1] = {
  };
  GetServerCurrentTimeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetServerCurrentTimeReq_descriptor_,
      GetServerCurrentTimeReq::default_instance_,
      GetServerCurrentTimeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetServerCurrentTimeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetServerCurrentTimeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetServerCurrentTimeReq));
  GetServerCurrentTimeAck_descriptor_ = file->message_type(1);
  static const int GetServerCurrentTimeAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetServerCurrentTimeAck, cur_time_),
  };
  GetServerCurrentTimeAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetServerCurrentTimeAck_descriptor_,
      GetServerCurrentTimeAck::default_instance_,
      GetServerCurrentTimeAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetServerCurrentTimeAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetServerCurrentTimeAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetServerCurrentTimeAck));
  GetStrengFailTimesReq_descriptor_ = file->message_type(2);
  static const int GetStrengFailTimesReq_offsets_[1] = {
  };
  GetStrengFailTimesReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetStrengFailTimesReq_descriptor_,
      GetStrengFailTimesReq::default_instance_,
      GetStrengFailTimesReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStrengFailTimesReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStrengFailTimesReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetStrengFailTimesReq));
  PostTrasnFileReq_descriptor_ = file->message_type(3);
  static const int PostTrasnFileReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostTrasnFileReq, file_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostTrasnFileReq, file_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostTrasnFileReq, file_md5_),
  };
  PostTrasnFileReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PostTrasnFileReq_descriptor_,
      PostTrasnFileReq::default_instance_,
      PostTrasnFileReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostTrasnFileReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostTrasnFileReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PostTrasnFileReq));
  PostTrasnFileAck_descriptor_ = file->message_type(4);
  static const int PostTrasnFileAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostTrasnFileAck, err_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostTrasnFileAck, randkeys_),
  };
  PostTrasnFileAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PostTrasnFileAck_descriptor_,
      PostTrasnFileAck::default_instance_,
      PostTrasnFileAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostTrasnFileAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostTrasnFileAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PostTrasnFileAck));
  TrasnFileRpt_descriptor_ = file->message_type(5);
  static const int TrasnFileRpt_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrasnFileRpt, keys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrasnFileRpt, file_data_),
  };
  TrasnFileRpt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrasnFileRpt_descriptor_,
      TrasnFileRpt::default_instance_,
      TrasnFileRpt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrasnFileRpt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrasnFileRpt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrasnFileRpt));
  TransFileCompleteRpt_descriptor_ = file->message_type(6);
  static const int TransFileCompleteRpt_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransFileCompleteRpt, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransFileCompleteRpt, err_no_),
  };
  TransFileCompleteRpt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransFileCompleteRpt_descriptor_,
      TransFileCompleteRpt::default_instance_,
      TransFileCompleteRpt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransFileCompleteRpt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransFileCompleteRpt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransFileCompleteRpt));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_gameserver_5fgate_5fclient_5f1_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetServerCurrentTimeReq_descriptor_, &GetServerCurrentTimeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetServerCurrentTimeAck_descriptor_, &GetServerCurrentTimeAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetStrengFailTimesReq_descriptor_, &GetStrengFailTimesReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PostTrasnFileReq_descriptor_, &PostTrasnFileReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PostTrasnFileAck_descriptor_, &PostTrasnFileAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrasnFileRpt_descriptor_, &TrasnFileRpt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransFileCompleteRpt_descriptor_, &TransFileCompleteRpt::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_gameserver_5fgate_5fclient_5f1_2eproto() {
  delete GetServerCurrentTimeReq::default_instance_;
  delete GetServerCurrentTimeReq_reflection_;
  delete GetServerCurrentTimeAck::default_instance_;
  delete GetServerCurrentTimeAck_reflection_;
  delete GetStrengFailTimesReq::default_instance_;
  delete GetStrengFailTimesReq_reflection_;
  delete PostTrasnFileReq::default_instance_;
  delete PostTrasnFileReq_reflection_;
  delete PostTrasnFileAck::default_instance_;
  delete PostTrasnFileAck_reflection_;
  delete TrasnFileRpt::default_instance_;
  delete TrasnFileRpt_reflection_;
  delete TransFileCompleteRpt::default_instance_;
  delete TransFileCompleteRpt_reflection_;
}

void protobuf_AddDesc_gameserver_5fgate_5fclient_5f1_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_options_2eproto();
  ::protoc::gameproto::protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\036gameserver_gate_client_1.proto\022\020protoc"
    ".gameproto\032\roptions.proto\032\034gameserver_ga"
    "te_client.proto\"K\n\027GetServerCurrentTimeR"
    "eq:0\222\313\004(protoc.gameproto.GetServerCurren"
    "tTimeReq\210\313\004\001\"]\n\027GetServerCurrentTimeAck\022"
    "\020\n\010cur_time\030\001 \001(\003:0\222\313\004(protoc.gameproto."
    "GetServerCurrentTimeAck\210\313\004\001\"G\n\025GetStreng"
    "FailTimesReq:.\222\313\004&protoc.gameproto.GetSt"
    "rengFailTimesReq\210\313\004\001\"L\n\020PostTrasnFileReq"
    "\022\023\n\013file_length\030\001 \001(\005\022\021\n\tfile_name\030\002 \001(\t"
    "\022\020\n\010file_md5\030\003 \001(\t\"4\n\020PostTrasnFileAck\022\016"
    "\n\006err_no\030\001 \001(\005\022\020\n\010randkeys\030\002 \001(\014\"/\n\014Tras"
    "nFileRpt\022\014\n\004keys\030\001 \001(\014\022\021\n\tfile_data\030\002 \001("
    "\014\"6\n\024TransFileCompleteRpt\022\016\n\006length\030\001 \001("
    "\005\022\016\n\006err_no\030\002 \001(\005", 577);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gameserver_gate_client_1.proto", &protobuf_RegisterTypes);
  GetServerCurrentTimeReq::default_instance_ = new GetServerCurrentTimeReq();
  GetServerCurrentTimeAck::default_instance_ = new GetServerCurrentTimeAck();
  GetStrengFailTimesReq::default_instance_ = new GetStrengFailTimesReq();
  PostTrasnFileReq::default_instance_ = new PostTrasnFileReq();
  PostTrasnFileAck::default_instance_ = new PostTrasnFileAck();
  TrasnFileRpt::default_instance_ = new TrasnFileRpt();
  TransFileCompleteRpt::default_instance_ = new TransFileCompleteRpt();
  GetServerCurrentTimeReq::default_instance_->InitAsDefaultInstance();
  GetServerCurrentTimeAck::default_instance_->InitAsDefaultInstance();
  GetStrengFailTimesReq::default_instance_->InitAsDefaultInstance();
  PostTrasnFileReq::default_instance_->InitAsDefaultInstance();
  PostTrasnFileAck::default_instance_->InitAsDefaultInstance();
  TrasnFileRpt::default_instance_->InitAsDefaultInstance();
  TransFileCompleteRpt::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_gameserver_5fgate_5fclient_5f1_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_gameserver_5fgate_5fclient_5f1_2eproto {
  StaticDescriptorInitializer_gameserver_5fgate_5fclient_5f1_2eproto() {
    protobuf_AddDesc_gameserver_5fgate_5fclient_5f1_2eproto();
  }
} static_descriptor_initializer_gameserver_5fgate_5fclient_5f1_2eproto_;

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetServerCurrentTimeReq::GetServerCurrentTimeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetServerCurrentTimeReq::InitAsDefaultInstance() {
}

GetServerCurrentTimeReq::GetServerCurrentTimeReq(const GetServerCurrentTimeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetServerCurrentTimeReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetServerCurrentTimeReq::~GetServerCurrentTimeReq() {
  SharedDtor();
}

void GetServerCurrentTimeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetServerCurrentTimeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetServerCurrentTimeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetServerCurrentTimeReq_descriptor_;
}

const GetServerCurrentTimeReq& GetServerCurrentTimeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_5f1_2eproto();
  return *default_instance_;
}

GetServerCurrentTimeReq* GetServerCurrentTimeReq::default_instance_ = NULL;

GetServerCurrentTimeReq* GetServerCurrentTimeReq::New() const {
  return new GetServerCurrentTimeReq;
}

void GetServerCurrentTimeReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetServerCurrentTimeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetServerCurrentTimeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetServerCurrentTimeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetServerCurrentTimeReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetServerCurrentTimeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetServerCurrentTimeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetServerCurrentTimeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetServerCurrentTimeReq::MergeFrom(const GetServerCurrentTimeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetServerCurrentTimeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetServerCurrentTimeReq::CopyFrom(const GetServerCurrentTimeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServerCurrentTimeReq::IsInitialized() const {

  return true;
}

void GetServerCurrentTimeReq::Swap(GetServerCurrentTimeReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetServerCurrentTimeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetServerCurrentTimeReq_descriptor_;
  metadata.reflection = GetServerCurrentTimeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetServerCurrentTimeAck::kCurTimeFieldNumber;
#endif  // !_MSC_VER

GetServerCurrentTimeAck::GetServerCurrentTimeAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetServerCurrentTimeAck::InitAsDefaultInstance() {
}

GetServerCurrentTimeAck::GetServerCurrentTimeAck(const GetServerCurrentTimeAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetServerCurrentTimeAck::SharedCtor() {
  _cached_size_ = 0;
  cur_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetServerCurrentTimeAck::~GetServerCurrentTimeAck() {
  SharedDtor();
}

void GetServerCurrentTimeAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetServerCurrentTimeAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetServerCurrentTimeAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetServerCurrentTimeAck_descriptor_;
}

const GetServerCurrentTimeAck& GetServerCurrentTimeAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_5f1_2eproto();
  return *default_instance_;
}

GetServerCurrentTimeAck* GetServerCurrentTimeAck::default_instance_ = NULL;

GetServerCurrentTimeAck* GetServerCurrentTimeAck::New() const {
  return new GetServerCurrentTimeAck;
}

void GetServerCurrentTimeAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cur_time_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetServerCurrentTimeAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 cur_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cur_time_)));
          set_has_cur_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetServerCurrentTimeAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 cur_time = 1;
  if (has_cur_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->cur_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetServerCurrentTimeAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 cur_time = 1;
  if (has_cur_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->cur_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetServerCurrentTimeAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 cur_time = 1;
    if (has_cur_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cur_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetServerCurrentTimeAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetServerCurrentTimeAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetServerCurrentTimeAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetServerCurrentTimeAck::MergeFrom(const GetServerCurrentTimeAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cur_time()) {
      set_cur_time(from.cur_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetServerCurrentTimeAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetServerCurrentTimeAck::CopyFrom(const GetServerCurrentTimeAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServerCurrentTimeAck::IsInitialized() const {

  return true;
}

void GetServerCurrentTimeAck::Swap(GetServerCurrentTimeAck* other) {
  if (other != this) {
    std::swap(cur_time_, other->cur_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetServerCurrentTimeAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetServerCurrentTimeAck_descriptor_;
  metadata.reflection = GetServerCurrentTimeAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetStrengFailTimesReq::GetStrengFailTimesReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetStrengFailTimesReq::InitAsDefaultInstance() {
}

GetStrengFailTimesReq::GetStrengFailTimesReq(const GetStrengFailTimesReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetStrengFailTimesReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetStrengFailTimesReq::~GetStrengFailTimesReq() {
  SharedDtor();
}

void GetStrengFailTimesReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetStrengFailTimesReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetStrengFailTimesReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetStrengFailTimesReq_descriptor_;
}

const GetStrengFailTimesReq& GetStrengFailTimesReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_5f1_2eproto();
  return *default_instance_;
}

GetStrengFailTimesReq* GetStrengFailTimesReq::default_instance_ = NULL;

GetStrengFailTimesReq* GetStrengFailTimesReq::New() const {
  return new GetStrengFailTimesReq;
}

void GetStrengFailTimesReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetStrengFailTimesReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetStrengFailTimesReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetStrengFailTimesReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetStrengFailTimesReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetStrengFailTimesReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetStrengFailTimesReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetStrengFailTimesReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetStrengFailTimesReq::MergeFrom(const GetStrengFailTimesReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetStrengFailTimesReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStrengFailTimesReq::CopyFrom(const GetStrengFailTimesReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStrengFailTimesReq::IsInitialized() const {

  return true;
}

void GetStrengFailTimesReq::Swap(GetStrengFailTimesReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetStrengFailTimesReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetStrengFailTimesReq_descriptor_;
  metadata.reflection = GetStrengFailTimesReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PostTrasnFileReq::kFileLengthFieldNumber;
const int PostTrasnFileReq::kFileNameFieldNumber;
const int PostTrasnFileReq::kFileMd5FieldNumber;
#endif  // !_MSC_VER

PostTrasnFileReq::PostTrasnFileReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PostTrasnFileReq::InitAsDefaultInstance() {
}

PostTrasnFileReq::PostTrasnFileReq(const PostTrasnFileReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PostTrasnFileReq::SharedCtor() {
  _cached_size_ = 0;
  file_length_ = 0;
  file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  file_md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PostTrasnFileReq::~PostTrasnFileReq() {
  SharedDtor();
}

void PostTrasnFileReq::SharedDtor() {
  if (file_name_ != &::google::protobuf::internal::kEmptyString) {
    delete file_name_;
  }
  if (file_md5_ != &::google::protobuf::internal::kEmptyString) {
    delete file_md5_;
  }
  if (this != default_instance_) {
  }
}

void PostTrasnFileReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PostTrasnFileReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PostTrasnFileReq_descriptor_;
}

const PostTrasnFileReq& PostTrasnFileReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_5f1_2eproto();
  return *default_instance_;
}

PostTrasnFileReq* PostTrasnFileReq::default_instance_ = NULL;

PostTrasnFileReq* PostTrasnFileReq::New() const {
  return new PostTrasnFileReq;
}

void PostTrasnFileReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    file_length_ = 0;
    if (has_file_name()) {
      if (file_name_ != &::google::protobuf::internal::kEmptyString) {
        file_name_->clear();
      }
    }
    if (has_file_md5()) {
      if (file_md5_ != &::google::protobuf::internal::kEmptyString) {
        file_md5_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PostTrasnFileReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 file_length = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &file_length_)));
          set_has_file_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_file_name;
        break;
      }

      // optional string file_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->file_name().data(), this->file_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_file_md5;
        break;
      }

      // optional string file_md5 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file_md5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_md5()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->file_md5().data(), this->file_md5().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PostTrasnFileReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 file_length = 1;
  if (has_file_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->file_length(), output);
  }

  // optional string file_name = 2;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->file_name(), output);
  }

  // optional string file_md5 = 3;
  if (has_file_md5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_md5().data(), this->file_md5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->file_md5(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PostTrasnFileReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 file_length = 1;
  if (has_file_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->file_length(), target);
  }

  // optional string file_name = 2;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->file_name(), target);
  }

  // optional string file_md5 = 3;
  if (has_file_md5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_md5().data(), this->file_md5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->file_md5(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PostTrasnFileReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 file_length = 1;
    if (has_file_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->file_length());
    }

    // optional string file_name = 2;
    if (has_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_name());
    }

    // optional string file_md5 = 3;
    if (has_file_md5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_md5());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PostTrasnFileReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PostTrasnFileReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PostTrasnFileReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PostTrasnFileReq::MergeFrom(const PostTrasnFileReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_file_length()) {
      set_file_length(from.file_length());
    }
    if (from.has_file_name()) {
      set_file_name(from.file_name());
    }
    if (from.has_file_md5()) {
      set_file_md5(from.file_md5());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PostTrasnFileReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostTrasnFileReq::CopyFrom(const PostTrasnFileReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostTrasnFileReq::IsInitialized() const {

  return true;
}

void PostTrasnFileReq::Swap(PostTrasnFileReq* other) {
  if (other != this) {
    std::swap(file_length_, other->file_length_);
    std::swap(file_name_, other->file_name_);
    std::swap(file_md5_, other->file_md5_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PostTrasnFileReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PostTrasnFileReq_descriptor_;
  metadata.reflection = PostTrasnFileReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PostTrasnFileAck::kErrNoFieldNumber;
const int PostTrasnFileAck::kRandkeysFieldNumber;
#endif  // !_MSC_VER

PostTrasnFileAck::PostTrasnFileAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PostTrasnFileAck::InitAsDefaultInstance() {
}

PostTrasnFileAck::PostTrasnFileAck(const PostTrasnFileAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PostTrasnFileAck::SharedCtor() {
  _cached_size_ = 0;
  err_no_ = 0;
  randkeys_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PostTrasnFileAck::~PostTrasnFileAck() {
  SharedDtor();
}

void PostTrasnFileAck::SharedDtor() {
  if (randkeys_ != &::google::protobuf::internal::kEmptyString) {
    delete randkeys_;
  }
  if (this != default_instance_) {
  }
}

void PostTrasnFileAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PostTrasnFileAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PostTrasnFileAck_descriptor_;
}

const PostTrasnFileAck& PostTrasnFileAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_5f1_2eproto();
  return *default_instance_;
}

PostTrasnFileAck* PostTrasnFileAck::default_instance_ = NULL;

PostTrasnFileAck* PostTrasnFileAck::New() const {
  return new PostTrasnFileAck;
}

void PostTrasnFileAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    err_no_ = 0;
    if (has_randkeys()) {
      if (randkeys_ != &::google::protobuf::internal::kEmptyString) {
        randkeys_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PostTrasnFileAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 err_no = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_no_)));
          set_has_err_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_randkeys;
        break;
      }

      // optional bytes randkeys = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_randkeys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_randkeys()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PostTrasnFileAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 err_no = 1;
  if (has_err_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->err_no(), output);
  }

  // optional bytes randkeys = 2;
  if (has_randkeys()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->randkeys(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PostTrasnFileAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 err_no = 1;
  if (has_err_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->err_no(), target);
  }

  // optional bytes randkeys = 2;
  if (has_randkeys()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->randkeys(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PostTrasnFileAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 err_no = 1;
    if (has_err_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err_no());
    }

    // optional bytes randkeys = 2;
    if (has_randkeys()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->randkeys());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PostTrasnFileAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PostTrasnFileAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PostTrasnFileAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PostTrasnFileAck::MergeFrom(const PostTrasnFileAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_err_no()) {
      set_err_no(from.err_no());
    }
    if (from.has_randkeys()) {
      set_randkeys(from.randkeys());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PostTrasnFileAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostTrasnFileAck::CopyFrom(const PostTrasnFileAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostTrasnFileAck::IsInitialized() const {

  return true;
}

void PostTrasnFileAck::Swap(PostTrasnFileAck* other) {
  if (other != this) {
    std::swap(err_no_, other->err_no_);
    std::swap(randkeys_, other->randkeys_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PostTrasnFileAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PostTrasnFileAck_descriptor_;
  metadata.reflection = PostTrasnFileAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TrasnFileRpt::kKeysFieldNumber;
const int TrasnFileRpt::kFileDataFieldNumber;
#endif  // !_MSC_VER

TrasnFileRpt::TrasnFileRpt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TrasnFileRpt::InitAsDefaultInstance() {
}

TrasnFileRpt::TrasnFileRpt(const TrasnFileRpt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TrasnFileRpt::SharedCtor() {
  _cached_size_ = 0;
  keys_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  file_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrasnFileRpt::~TrasnFileRpt() {
  SharedDtor();
}

void TrasnFileRpt::SharedDtor() {
  if (keys_ != &::google::protobuf::internal::kEmptyString) {
    delete keys_;
  }
  if (file_data_ != &::google::protobuf::internal::kEmptyString) {
    delete file_data_;
  }
  if (this != default_instance_) {
  }
}

void TrasnFileRpt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrasnFileRpt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrasnFileRpt_descriptor_;
}

const TrasnFileRpt& TrasnFileRpt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_5f1_2eproto();
  return *default_instance_;
}

TrasnFileRpt* TrasnFileRpt::default_instance_ = NULL;

TrasnFileRpt* TrasnFileRpt::New() const {
  return new TrasnFileRpt;
}

void TrasnFileRpt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_keys()) {
      if (keys_ != &::google::protobuf::internal::kEmptyString) {
        keys_->clear();
      }
    }
    if (has_file_data()) {
      if (file_data_ != &::google::protobuf::internal::kEmptyString) {
        file_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrasnFileRpt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes keys = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_keys()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_file_data;
        break;
      }

      // optional bytes file_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_file_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TrasnFileRpt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes keys = 1;
  if (has_keys()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->keys(), output);
  }

  // optional bytes file_data = 2;
  if (has_file_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->file_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TrasnFileRpt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes keys = 1;
  if (has_keys()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->keys(), target);
  }

  // optional bytes file_data = 2;
  if (has_file_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->file_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TrasnFileRpt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes keys = 1;
    if (has_keys()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->keys());
    }

    // optional bytes file_data = 2;
    if (has_file_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->file_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrasnFileRpt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrasnFileRpt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrasnFileRpt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrasnFileRpt::MergeFrom(const TrasnFileRpt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_keys()) {
      set_keys(from.keys());
    }
    if (from.has_file_data()) {
      set_file_data(from.file_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrasnFileRpt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrasnFileRpt::CopyFrom(const TrasnFileRpt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrasnFileRpt::IsInitialized() const {

  return true;
}

void TrasnFileRpt::Swap(TrasnFileRpt* other) {
  if (other != this) {
    std::swap(keys_, other->keys_);
    std::swap(file_data_, other->file_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrasnFileRpt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrasnFileRpt_descriptor_;
  metadata.reflection = TrasnFileRpt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TransFileCompleteRpt::kLengthFieldNumber;
const int TransFileCompleteRpt::kErrNoFieldNumber;
#endif  // !_MSC_VER

TransFileCompleteRpt::TransFileCompleteRpt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TransFileCompleteRpt::InitAsDefaultInstance() {
}

TransFileCompleteRpt::TransFileCompleteRpt(const TransFileCompleteRpt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TransFileCompleteRpt::SharedCtor() {
  _cached_size_ = 0;
  length_ = 0;
  err_no_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransFileCompleteRpt::~TransFileCompleteRpt() {
  SharedDtor();
}

void TransFileCompleteRpt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TransFileCompleteRpt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransFileCompleteRpt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransFileCompleteRpt_descriptor_;
}

const TransFileCompleteRpt& TransFileCompleteRpt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_5f1_2eproto();
  return *default_instance_;
}

TransFileCompleteRpt* TransFileCompleteRpt::default_instance_ = NULL;

TransFileCompleteRpt* TransFileCompleteRpt::New() const {
  return new TransFileCompleteRpt;
}

void TransFileCompleteRpt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    length_ = 0;
    err_no_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransFileCompleteRpt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 length = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_err_no;
        break;
      }

      // optional int32 err_no = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_err_no:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_no_)));
          set_has_err_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TransFileCompleteRpt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 length = 1;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->length(), output);
  }

  // optional int32 err_no = 2;
  if (has_err_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->err_no(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TransFileCompleteRpt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 length = 1;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->length(), target);
  }

  // optional int32 err_no = 2;
  if (has_err_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->err_no(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TransFileCompleteRpt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 length = 1;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->length());
    }

    // optional int32 err_no = 2;
    if (has_err_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err_no());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransFileCompleteRpt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransFileCompleteRpt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransFileCompleteRpt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransFileCompleteRpt::MergeFrom(const TransFileCompleteRpt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_length()) {
      set_length(from.length());
    }
    if (from.has_err_no()) {
      set_err_no(from.err_no());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransFileCompleteRpt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransFileCompleteRpt::CopyFrom(const TransFileCompleteRpt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransFileCompleteRpt::IsInitialized() const {

  return true;
}

void TransFileCompleteRpt::Swap(TransFileCompleteRpt* other) {
  if (other != this) {
    std::swap(length_, other->length_);
    std::swap(err_no_, other->err_no_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransFileCompleteRpt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransFileCompleteRpt_descriptor_;
  metadata.reflection = TransFileCompleteRpt_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace gameproto
}  // namespace protoc

// @@protoc_insertion_point(global_scope)
