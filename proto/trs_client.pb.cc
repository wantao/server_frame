// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trs_client.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "trs_client.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protoc {
namespace trs {

namespace {

const ::google::protobuf::Descriptor* CRandCheckReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CRandCheckReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CRandCheckAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CRandCheckAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PostTrasnFileReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PostTrasnFileReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PostTrasnFileAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PostTrasnFileAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrasnFileRpt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrasnFileRpt_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransFileCompleteRpt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransFileCompleteRpt_reflection_ = NULL;
const ::google::protobuf::Descriptor* PostTransLogFileReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PostTransLogFileReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PostTransLogFileAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PostTransLogFileAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplyCanTransLogFile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplyCanTransLogFile_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransLogFileRpt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransLogFileRpt_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransLogCompleteRpt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransLogCompleteRpt_reflection_ = NULL;
const ::google::protobuf::Descriptor* CheckServerStateReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CheckServerStateReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerState_reflection_ = NULL;
const ::google::protobuf::Descriptor* CheckServerStateAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CheckServerStateAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpenServersReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenServersReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExecuteSql_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExecuteSql_reflection_ = NULL;
const ::google::protobuf::Descriptor* OtherServerReportRpt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OtherServerReportRpt_reflection_ = NULL;
const ::google::protobuf::Descriptor* CheckPasswordRpt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CheckPasswordRpt_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerErrorMsgRpt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerErrorMsgRpt_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProtocID_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_trs_5fclient_2eproto() {
  protobuf_AddDesc_trs_5fclient_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "trs_client.proto");
  GOOGLE_CHECK(file != NULL);
  CRandCheckReq_descriptor_ = file->message_type(0);
  static const int CRandCheckReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRandCheckReq, randkeys_),
  };
  CRandCheckReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CRandCheckReq_descriptor_,
      CRandCheckReq::default_instance_,
      CRandCheckReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRandCheckReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRandCheckReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CRandCheckReq));
  CRandCheckAck_descriptor_ = file->message_type(1);
  static const int CRandCheckAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRandCheckAck, keys_),
  };
  CRandCheckAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CRandCheckAck_descriptor_,
      CRandCheckAck::default_instance_,
      CRandCheckAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRandCheckAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRandCheckAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CRandCheckAck));
  PostTrasnFileReq_descriptor_ = file->message_type(2);
  static const int PostTrasnFileReq_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostTrasnFileReq, file_length_zip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostTrasnFileReq, file_length_uzip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostTrasnFileReq, file_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostTrasnFileReq, file_md5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostTrasnFileReq, server_name_),
  };
  PostTrasnFileReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PostTrasnFileReq_descriptor_,
      PostTrasnFileReq::default_instance_,
      PostTrasnFileReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostTrasnFileReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostTrasnFileReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PostTrasnFileReq));
  PostTrasnFileAck_descriptor_ = file->message_type(3);
  static const int PostTrasnFileAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostTrasnFileAck, err_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostTrasnFileAck, err_msg_),
  };
  PostTrasnFileAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PostTrasnFileAck_descriptor_,
      PostTrasnFileAck::default_instance_,
      PostTrasnFileAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostTrasnFileAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostTrasnFileAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PostTrasnFileAck));
  TrasnFileRpt_descriptor_ = file->message_type(4);
  static const int TrasnFileRpt_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrasnFileRpt, file_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrasnFileRpt, blast_),
  };
  TrasnFileRpt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrasnFileRpt_descriptor_,
      TrasnFileRpt::default_instance_,
      TrasnFileRpt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrasnFileRpt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrasnFileRpt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrasnFileRpt));
  TransFileCompleteRpt_descriptor_ = file->message_type(5);
  static const int TransFileCompleteRpt_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransFileCompleteRpt, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransFileCompleteRpt, err_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransFileCompleteRpt, err_msg_),
  };
  TransFileCompleteRpt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransFileCompleteRpt_descriptor_,
      TransFileCompleteRpt::default_instance_,
      TransFileCompleteRpt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransFileCompleteRpt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransFileCompleteRpt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransFileCompleteRpt));
  PostTransLogFileReq_descriptor_ = file->message_type(6);
  static const int PostTransLogFileReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostTransLogFileReq, server_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostTransLogFileReq, logtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostTransLogFileReq, day_idx_),
  };
  PostTransLogFileReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PostTransLogFileReq_descriptor_,
      PostTransLogFileReq::default_instance_,
      PostTransLogFileReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostTransLogFileReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostTransLogFileReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PostTransLogFileReq));
  PostTransLogFileAck_descriptor_ = file->message_type(7);
  static const int PostTransLogFileAck_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostTransLogFileAck, file_length_zip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostTransLogFileAck, file_length_uzip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostTransLogFileAck, file_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostTransLogFileAck, file_md5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostTransLogFileAck, server_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostTransLogFileAck, err_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostTransLogFileAck, err_msg_),
  };
  PostTransLogFileAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PostTransLogFileAck_descriptor_,
      PostTransLogFileAck::default_instance_,
      PostTransLogFileAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostTransLogFileAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostTransLogFileAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PostTransLogFileAck));
  ReplyCanTransLogFile_descriptor_ = file->message_type(8);
  static const int ReplyCanTransLogFile_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyCanTransLogFile, err_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyCanTransLogFile, err_msg_),
  };
  ReplyCanTransLogFile_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplyCanTransLogFile_descriptor_,
      ReplyCanTransLogFile::default_instance_,
      ReplyCanTransLogFile_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyCanTransLogFile, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyCanTransLogFile, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplyCanTransLogFile));
  TransLogFileRpt_descriptor_ = file->message_type(9);
  static const int TransLogFileRpt_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransLogFileRpt, file_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransLogFileRpt, percent_),
  };
  TransLogFileRpt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransLogFileRpt_descriptor_,
      TransLogFileRpt::default_instance_,
      TransLogFileRpt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransLogFileRpt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransLogFileRpt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransLogFileRpt));
  TransLogCompleteRpt_descriptor_ = file->message_type(10);
  static const int TransLogCompleteRpt_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransLogCompleteRpt, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransLogCompleteRpt, err_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransLogCompleteRpt, err_msg_),
  };
  TransLogCompleteRpt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransLogCompleteRpt_descriptor_,
      TransLogCompleteRpt::default_instance_,
      TransLogCompleteRpt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransLogCompleteRpt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransLogCompleteRpt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransLogCompleteRpt));
  CheckServerStateReq_descriptor_ = file->message_type(11);
  static const int CheckServerStateReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckServerStateReq, server_),
  };
  CheckServerStateReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CheckServerStateReq_descriptor_,
      CheckServerStateReq::default_instance_,
      CheckServerStateReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckServerStateReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckServerStateReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CheckServerStateReq));
  ServerState_descriptor_ = file->message_type(12);
  static const int ServerState_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerState, area_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerState, area_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerState, server_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerState, server_),
  };
  ServerState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerState_descriptor_,
      ServerState::default_instance_,
      ServerState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerState));
  CheckServerStateAck_descriptor_ = file->message_type(13);
  static const int CheckServerStateAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckServerStateAck, ss_),
  };
  CheckServerStateAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CheckServerStateAck_descriptor_,
      CheckServerStateAck::default_instance_,
      CheckServerStateAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckServerStateAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckServerStateAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CheckServerStateAck));
  OpenServersReq_descriptor_ = file->message_type(14);
  static const int OpenServersReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenServersReq, opt_),
  };
  OpenServersReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OpenServersReq_descriptor_,
      OpenServersReq::default_instance_,
      OpenServersReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenServersReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenServersReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OpenServersReq));
  ExecuteSql_descriptor_ = file->message_type(15);
  static const int ExecuteSql_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecuteSql, str_info_),
  };
  ExecuteSql_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExecuteSql_descriptor_,
      ExecuteSql::default_instance_,
      ExecuteSql_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecuteSql, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecuteSql, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExecuteSql));
  OtherServerReportRpt_descriptor_ = file->message_type(16);
  static const int OtherServerReportRpt_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherServerReportRpt, server_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherServerReportRpt, server_id_),
  };
  OtherServerReportRpt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OtherServerReportRpt_descriptor_,
      OtherServerReportRpt::default_instance_,
      OtherServerReportRpt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherServerReportRpt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherServerReportRpt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OtherServerReportRpt));
  CheckPasswordRpt_descriptor_ = file->message_type(17);
  static const int CheckPasswordRpt_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckPasswordRpt, psw_),
  };
  CheckPasswordRpt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CheckPasswordRpt_descriptor_,
      CheckPasswordRpt::default_instance_,
      CheckPasswordRpt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckPasswordRpt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckPasswordRpt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CheckPasswordRpt));
  ServerErrorMsgRpt_descriptor_ = file->message_type(18);
  static const int ServerErrorMsgRpt_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerErrorMsgRpt, err_msg_),
  };
  ServerErrorMsgRpt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerErrorMsgRpt_descriptor_,
      ServerErrorMsgRpt::default_instance_,
      ServerErrorMsgRpt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerErrorMsgRpt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerErrorMsgRpt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerErrorMsgRpt));
  ProtocID_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_trs_5fclient_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CRandCheckReq_descriptor_, &CRandCheckReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CRandCheckAck_descriptor_, &CRandCheckAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PostTrasnFileReq_descriptor_, &PostTrasnFileReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PostTrasnFileAck_descriptor_, &PostTrasnFileAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrasnFileRpt_descriptor_, &TrasnFileRpt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransFileCompleteRpt_descriptor_, &TransFileCompleteRpt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PostTransLogFileReq_descriptor_, &PostTransLogFileReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PostTransLogFileAck_descriptor_, &PostTransLogFileAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplyCanTransLogFile_descriptor_, &ReplyCanTransLogFile::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransLogFileRpt_descriptor_, &TransLogFileRpt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransLogCompleteRpt_descriptor_, &TransLogCompleteRpt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CheckServerStateReq_descriptor_, &CheckServerStateReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerState_descriptor_, &ServerState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CheckServerStateAck_descriptor_, &CheckServerStateAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OpenServersReq_descriptor_, &OpenServersReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExecuteSql_descriptor_, &ExecuteSql::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OtherServerReportRpt_descriptor_, &OtherServerReportRpt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CheckPasswordRpt_descriptor_, &CheckPasswordRpt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerErrorMsgRpt_descriptor_, &ServerErrorMsgRpt::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_trs_5fclient_2eproto() {
  delete CRandCheckReq::default_instance_;
  delete CRandCheckReq_reflection_;
  delete CRandCheckAck::default_instance_;
  delete CRandCheckAck_reflection_;
  delete PostTrasnFileReq::default_instance_;
  delete PostTrasnFileReq_reflection_;
  delete PostTrasnFileAck::default_instance_;
  delete PostTrasnFileAck_reflection_;
  delete TrasnFileRpt::default_instance_;
  delete TrasnFileRpt_reflection_;
  delete TransFileCompleteRpt::default_instance_;
  delete TransFileCompleteRpt_reflection_;
  delete PostTransLogFileReq::default_instance_;
  delete PostTransLogFileReq_reflection_;
  delete PostTransLogFileAck::default_instance_;
  delete PostTransLogFileAck_reflection_;
  delete ReplyCanTransLogFile::default_instance_;
  delete ReplyCanTransLogFile_reflection_;
  delete TransLogFileRpt::default_instance_;
  delete TransLogFileRpt_reflection_;
  delete TransLogCompleteRpt::default_instance_;
  delete TransLogCompleteRpt_reflection_;
  delete CheckServerStateReq::default_instance_;
  delete CheckServerStateReq_reflection_;
  delete ServerState::default_instance_;
  delete ServerState_reflection_;
  delete CheckServerStateAck::default_instance_;
  delete CheckServerStateAck_reflection_;
  delete OpenServersReq::default_instance_;
  delete OpenServersReq_reflection_;
  delete ExecuteSql::default_instance_;
  delete ExecuteSql_reflection_;
  delete OtherServerReportRpt::default_instance_;
  delete OtherServerReportRpt_reflection_;
  delete CheckPasswordRpt::default_instance_;
  delete CheckPasswordRpt_reflection_;
  delete ServerErrorMsgRpt::default_instance_;
  delete ServerErrorMsgRpt_reflection_;
}

void protobuf_AddDesc_trs_5fclient_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020trs_client.proto\022\nprotoc.trs\"!\n\rCRandC"
    "heckReq\022\020\n\010randkeys\030\001 \001(\014\"\035\n\rCRandCheckA"
    "ck\022\014\n\004keys\030\001 \001(\014\"\177\n\020PostTrasnFileReq\022\027\n\017"
    "file_length_zip\030\001 \001(\r\022\030\n\020file_length_uzi"
    "p\030\002 \001(\r\022\021\n\tfile_name\030\003 \001(\t\022\020\n\010file_md5\030\004"
    " \001(\t\022\023\n\013server_name\030\005 \001(\t\"3\n\020PostTrasnFi"
    "leAck\022\016\n\006err_no\030\001 \001(\005\022\017\n\007err_msg\030\002 \001(\t\"0"
    "\n\014TrasnFileRpt\022\021\n\tfile_data\030\001 \001(\014\022\r\n\005bla"
    "st\030\002 \001(\010\"G\n\024TransFileCompleteRpt\022\016\n\006leng"
    "th\030\001 \001(\005\022\016\n\006err_no\030\002 \001(\005\022\017\n\007err_msg\030\003 \001("
    "\t\"L\n\023PostTransLogFileReq\022\023\n\013server_name\030"
    "\001 \001(\t\022\017\n\007logtype\030\002 \001(\t\022\017\n\007day_idx\030\003 \001(\005\""
    "\243\001\n\023PostTransLogFileAck\022\027\n\017file_length_z"
    "ip\030\001 \001(\r\022\030\n\020file_length_uzip\030\002 \001(\r\022\021\n\tfi"
    "le_name\030\003 \001(\t\022\020\n\010file_md5\030\004 \001(\t\022\023\n\013serve"
    "r_name\030\005 \001(\t\022\016\n\006err_no\030\006 \001(\005\022\017\n\007err_msg\030"
    "\007 \001(\t\"7\n\024ReplyCanTransLogFile\022\016\n\006err_no\030"
    "\001 \001(\005\022\017\n\007err_msg\030\002 \001(\t\"5\n\017TransLogFileRp"
    "t\022\021\n\tfile_data\030\001 \001(\014\022\017\n\007percent\030\002 \001(\005\"F\n"
    "\023TransLogCompleteRpt\022\016\n\006length\030\001 \001(\005\022\016\n\006"
    "err_no\030\002 \001(\005\022\017\n\007err_msg\030\003 \001(\t\"%\n\023CheckSe"
    "rverStateReq\022\016\n\006server\030\001 \001(\t\"V\n\013ServerSt"
    "ate\022\017\n\007area_no\030\001 \001(\t\022\021\n\tarea_name\030\002 \001(\t\022"
    "\023\n\013server_name\030\003 \003(\t\022\016\n\006server\030\004 \001(\t\":\n\023"
    "CheckServerStateAck\022#\n\002ss\030\001 \003(\0132\027.protoc"
    ".trs.ServerState\"\035\n\016OpenServersReq\022\013\n\003op"
    "t\030\001 \001(\005\"\036\n\nExecuteSql\022\020\n\010str_info\030\001 \001(\t\""
    ">\n\024OtherServerReportRpt\022\023\n\013server_name\030\001"
    " \001(\t\022\021\n\tserver_id\030\002 \001(\t\"\037\n\020CheckPassword"
    "Rpt\022\013\n\003psw\030\001 \001(\t\"$\n\021ServerErrorMsgRpt\022\017\n"
    "\007err_msg\030\001 \001(\t*\362\003\n\010ProtocID\022\024\n\020id_CRandC"
    "heckReq\020\001\022\024\n\020id_CRandCheckAck\020\002\022\027\n\023id_Po"
    "stTrasnFileReq\020\003\022\027\n\023id_PostTrasnFileAck\020"
    "\004\022\023\n\017id_TrasnFileRpt\020\005\022\033\n\027id_TransFileCo"
    "mpleteRpt\020\006\022\032\n\026id_CheckServerStateReq\020\007\022"
    "\032\n\026id_CheckServerStateAck\020\010\022\025\n\021id_OpenSe"
    "rversReq\020\t\022\027\n\023id_CheckPasswordRpt\020\n\022\030\n\024i"
    "d_ServerErrorMsgRpt\020\013\022\032\n\026id_PostTransLog"
    "FileReq\020\014\022\032\n\026id_PostTransLogFileAck\020\r\022\033\n"
    "\027id_ReplyCanTransLogFile\020\016\022\026\n\022id_TransLo"
    "gFileRpt\020\017\022\032\n\026id_TransLogCompleteRpt\020\020\022\024"
    "\n\020id_ExecuteSqlNtf\020\021\022\033\n\027id_OtherServerRe"
    "portRpt\020d\022\030\n\022one_packg_max_size\020\340\324\003", 1715);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "trs_client.proto", &protobuf_RegisterTypes);
  CRandCheckReq::default_instance_ = new CRandCheckReq();
  CRandCheckAck::default_instance_ = new CRandCheckAck();
  PostTrasnFileReq::default_instance_ = new PostTrasnFileReq();
  PostTrasnFileAck::default_instance_ = new PostTrasnFileAck();
  TrasnFileRpt::default_instance_ = new TrasnFileRpt();
  TransFileCompleteRpt::default_instance_ = new TransFileCompleteRpt();
  PostTransLogFileReq::default_instance_ = new PostTransLogFileReq();
  PostTransLogFileAck::default_instance_ = new PostTransLogFileAck();
  ReplyCanTransLogFile::default_instance_ = new ReplyCanTransLogFile();
  TransLogFileRpt::default_instance_ = new TransLogFileRpt();
  TransLogCompleteRpt::default_instance_ = new TransLogCompleteRpt();
  CheckServerStateReq::default_instance_ = new CheckServerStateReq();
  ServerState::default_instance_ = new ServerState();
  CheckServerStateAck::default_instance_ = new CheckServerStateAck();
  OpenServersReq::default_instance_ = new OpenServersReq();
  ExecuteSql::default_instance_ = new ExecuteSql();
  OtherServerReportRpt::default_instance_ = new OtherServerReportRpt();
  CheckPasswordRpt::default_instance_ = new CheckPasswordRpt();
  ServerErrorMsgRpt::default_instance_ = new ServerErrorMsgRpt();
  CRandCheckReq::default_instance_->InitAsDefaultInstance();
  CRandCheckAck::default_instance_->InitAsDefaultInstance();
  PostTrasnFileReq::default_instance_->InitAsDefaultInstance();
  PostTrasnFileAck::default_instance_->InitAsDefaultInstance();
  TrasnFileRpt::default_instance_->InitAsDefaultInstance();
  TransFileCompleteRpt::default_instance_->InitAsDefaultInstance();
  PostTransLogFileReq::default_instance_->InitAsDefaultInstance();
  PostTransLogFileAck::default_instance_->InitAsDefaultInstance();
  ReplyCanTransLogFile::default_instance_->InitAsDefaultInstance();
  TransLogFileRpt::default_instance_->InitAsDefaultInstance();
  TransLogCompleteRpt::default_instance_->InitAsDefaultInstance();
  CheckServerStateReq::default_instance_->InitAsDefaultInstance();
  ServerState::default_instance_->InitAsDefaultInstance();
  CheckServerStateAck::default_instance_->InitAsDefaultInstance();
  OpenServersReq::default_instance_->InitAsDefaultInstance();
  ExecuteSql::default_instance_->InitAsDefaultInstance();
  OtherServerReportRpt::default_instance_->InitAsDefaultInstance();
  CheckPasswordRpt::default_instance_->InitAsDefaultInstance();
  ServerErrorMsgRpt::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_trs_5fclient_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_trs_5fclient_2eproto {
  StaticDescriptorInitializer_trs_5fclient_2eproto() {
    protobuf_AddDesc_trs_5fclient_2eproto();
  }
} static_descriptor_initializer_trs_5fclient_2eproto_;
const ::google::protobuf::EnumDescriptor* ProtocID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtocID_descriptor_;
}
bool ProtocID_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 100:
    case 60000:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int CRandCheckReq::kRandkeysFieldNumber;
#endif  // !_MSC_VER

CRandCheckReq::CRandCheckReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CRandCheckReq::InitAsDefaultInstance() {
}

CRandCheckReq::CRandCheckReq(const CRandCheckReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CRandCheckReq::SharedCtor() {
  _cached_size_ = 0;
  randkeys_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CRandCheckReq::~CRandCheckReq() {
  SharedDtor();
}

void CRandCheckReq::SharedDtor() {
  if (randkeys_ != &::google::protobuf::internal::kEmptyString) {
    delete randkeys_;
  }
  if (this != default_instance_) {
  }
}

void CRandCheckReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CRandCheckReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CRandCheckReq_descriptor_;
}

const CRandCheckReq& CRandCheckReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trs_5fclient_2eproto();
  return *default_instance_;
}

CRandCheckReq* CRandCheckReq::default_instance_ = NULL;

CRandCheckReq* CRandCheckReq::New() const {
  return new CRandCheckReq;
}

void CRandCheckReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_randkeys()) {
      if (randkeys_ != &::google::protobuf::internal::kEmptyString) {
        randkeys_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CRandCheckReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes randkeys = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_randkeys()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CRandCheckReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes randkeys = 1;
  if (has_randkeys()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->randkeys(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CRandCheckReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes randkeys = 1;
  if (has_randkeys()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->randkeys(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CRandCheckReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes randkeys = 1;
    if (has_randkeys()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->randkeys());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CRandCheckReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CRandCheckReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CRandCheckReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CRandCheckReq::MergeFrom(const CRandCheckReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_randkeys()) {
      set_randkeys(from.randkeys());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CRandCheckReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CRandCheckReq::CopyFrom(const CRandCheckReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRandCheckReq::IsInitialized() const {

  return true;
}

void CRandCheckReq::Swap(CRandCheckReq* other) {
  if (other != this) {
    std::swap(randkeys_, other->randkeys_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CRandCheckReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CRandCheckReq_descriptor_;
  metadata.reflection = CRandCheckReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CRandCheckAck::kKeysFieldNumber;
#endif  // !_MSC_VER

CRandCheckAck::CRandCheckAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CRandCheckAck::InitAsDefaultInstance() {
}

CRandCheckAck::CRandCheckAck(const CRandCheckAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CRandCheckAck::SharedCtor() {
  _cached_size_ = 0;
  keys_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CRandCheckAck::~CRandCheckAck() {
  SharedDtor();
}

void CRandCheckAck::SharedDtor() {
  if (keys_ != &::google::protobuf::internal::kEmptyString) {
    delete keys_;
  }
  if (this != default_instance_) {
  }
}

void CRandCheckAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CRandCheckAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CRandCheckAck_descriptor_;
}

const CRandCheckAck& CRandCheckAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trs_5fclient_2eproto();
  return *default_instance_;
}

CRandCheckAck* CRandCheckAck::default_instance_ = NULL;

CRandCheckAck* CRandCheckAck::New() const {
  return new CRandCheckAck;
}

void CRandCheckAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_keys()) {
      if (keys_ != &::google::protobuf::internal::kEmptyString) {
        keys_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CRandCheckAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes keys = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_keys()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CRandCheckAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes keys = 1;
  if (has_keys()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->keys(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CRandCheckAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes keys = 1;
  if (has_keys()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->keys(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CRandCheckAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes keys = 1;
    if (has_keys()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->keys());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CRandCheckAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CRandCheckAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CRandCheckAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CRandCheckAck::MergeFrom(const CRandCheckAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_keys()) {
      set_keys(from.keys());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CRandCheckAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CRandCheckAck::CopyFrom(const CRandCheckAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRandCheckAck::IsInitialized() const {

  return true;
}

void CRandCheckAck::Swap(CRandCheckAck* other) {
  if (other != this) {
    std::swap(keys_, other->keys_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CRandCheckAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CRandCheckAck_descriptor_;
  metadata.reflection = CRandCheckAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PostTrasnFileReq::kFileLengthZipFieldNumber;
const int PostTrasnFileReq::kFileLengthUzipFieldNumber;
const int PostTrasnFileReq::kFileNameFieldNumber;
const int PostTrasnFileReq::kFileMd5FieldNumber;
const int PostTrasnFileReq::kServerNameFieldNumber;
#endif  // !_MSC_VER

PostTrasnFileReq::PostTrasnFileReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PostTrasnFileReq::InitAsDefaultInstance() {
}

PostTrasnFileReq::PostTrasnFileReq(const PostTrasnFileReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PostTrasnFileReq::SharedCtor() {
  _cached_size_ = 0;
  file_length_zip_ = 0u;
  file_length_uzip_ = 0u;
  file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  file_md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  server_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PostTrasnFileReq::~PostTrasnFileReq() {
  SharedDtor();
}

void PostTrasnFileReq::SharedDtor() {
  if (file_name_ != &::google::protobuf::internal::kEmptyString) {
    delete file_name_;
  }
  if (file_md5_ != &::google::protobuf::internal::kEmptyString) {
    delete file_md5_;
  }
  if (server_name_ != &::google::protobuf::internal::kEmptyString) {
    delete server_name_;
  }
  if (this != default_instance_) {
  }
}

void PostTrasnFileReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PostTrasnFileReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PostTrasnFileReq_descriptor_;
}

const PostTrasnFileReq& PostTrasnFileReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trs_5fclient_2eproto();
  return *default_instance_;
}

PostTrasnFileReq* PostTrasnFileReq::default_instance_ = NULL;

PostTrasnFileReq* PostTrasnFileReq::New() const {
  return new PostTrasnFileReq;
}

void PostTrasnFileReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    file_length_zip_ = 0u;
    file_length_uzip_ = 0u;
    if (has_file_name()) {
      if (file_name_ != &::google::protobuf::internal::kEmptyString) {
        file_name_->clear();
      }
    }
    if (has_file_md5()) {
      if (file_md5_ != &::google::protobuf::internal::kEmptyString) {
        file_md5_->clear();
      }
    }
    if (has_server_name()) {
      if (server_name_ != &::google::protobuf::internal::kEmptyString) {
        server_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PostTrasnFileReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 file_length_zip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &file_length_zip_)));
          set_has_file_length_zip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_file_length_uzip;
        break;
      }

      // optional uint32 file_length_uzip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_file_length_uzip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &file_length_uzip_)));
          set_has_file_length_uzip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_file_name;
        break;
      }

      // optional string file_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->file_name().data(), this->file_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_file_md5;
        break;
      }

      // optional string file_md5 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file_md5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_md5()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->file_md5().data(), this->file_md5().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_server_name;
        break;
      }

      // optional string server_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_name().data(), this->server_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PostTrasnFileReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 file_length_zip = 1;
  if (has_file_length_zip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->file_length_zip(), output);
  }

  // optional uint32 file_length_uzip = 2;
  if (has_file_length_uzip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->file_length_uzip(), output);
  }

  // optional string file_name = 3;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->file_name(), output);
  }

  // optional string file_md5 = 4;
  if (has_file_md5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_md5().data(), this->file_md5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->file_md5(), output);
  }

  // optional string server_name = 5;
  if (has_server_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_name().data(), this->server_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->server_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PostTrasnFileReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 file_length_zip = 1;
  if (has_file_length_zip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->file_length_zip(), target);
  }

  // optional uint32 file_length_uzip = 2;
  if (has_file_length_uzip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->file_length_uzip(), target);
  }

  // optional string file_name = 3;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->file_name(), target);
  }

  // optional string file_md5 = 4;
  if (has_file_md5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_md5().data(), this->file_md5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->file_md5(), target);
  }

  // optional string server_name = 5;
  if (has_server_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_name().data(), this->server_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->server_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PostTrasnFileReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 file_length_zip = 1;
    if (has_file_length_zip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->file_length_zip());
    }

    // optional uint32 file_length_uzip = 2;
    if (has_file_length_uzip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->file_length_uzip());
    }

    // optional string file_name = 3;
    if (has_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_name());
    }

    // optional string file_md5 = 4;
    if (has_file_md5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_md5());
    }

    // optional string server_name = 5;
    if (has_server_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PostTrasnFileReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PostTrasnFileReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PostTrasnFileReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PostTrasnFileReq::MergeFrom(const PostTrasnFileReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_file_length_zip()) {
      set_file_length_zip(from.file_length_zip());
    }
    if (from.has_file_length_uzip()) {
      set_file_length_uzip(from.file_length_uzip());
    }
    if (from.has_file_name()) {
      set_file_name(from.file_name());
    }
    if (from.has_file_md5()) {
      set_file_md5(from.file_md5());
    }
    if (from.has_server_name()) {
      set_server_name(from.server_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PostTrasnFileReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostTrasnFileReq::CopyFrom(const PostTrasnFileReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostTrasnFileReq::IsInitialized() const {

  return true;
}

void PostTrasnFileReq::Swap(PostTrasnFileReq* other) {
  if (other != this) {
    std::swap(file_length_zip_, other->file_length_zip_);
    std::swap(file_length_uzip_, other->file_length_uzip_);
    std::swap(file_name_, other->file_name_);
    std::swap(file_md5_, other->file_md5_);
    std::swap(server_name_, other->server_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PostTrasnFileReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PostTrasnFileReq_descriptor_;
  metadata.reflection = PostTrasnFileReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PostTrasnFileAck::kErrNoFieldNumber;
const int PostTrasnFileAck::kErrMsgFieldNumber;
#endif  // !_MSC_VER

PostTrasnFileAck::PostTrasnFileAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PostTrasnFileAck::InitAsDefaultInstance() {
}

PostTrasnFileAck::PostTrasnFileAck(const PostTrasnFileAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PostTrasnFileAck::SharedCtor() {
  _cached_size_ = 0;
  err_no_ = 0;
  err_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PostTrasnFileAck::~PostTrasnFileAck() {
  SharedDtor();
}

void PostTrasnFileAck::SharedDtor() {
  if (err_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete err_msg_;
  }
  if (this != default_instance_) {
  }
}

void PostTrasnFileAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PostTrasnFileAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PostTrasnFileAck_descriptor_;
}

const PostTrasnFileAck& PostTrasnFileAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trs_5fclient_2eproto();
  return *default_instance_;
}

PostTrasnFileAck* PostTrasnFileAck::default_instance_ = NULL;

PostTrasnFileAck* PostTrasnFileAck::New() const {
  return new PostTrasnFileAck;
}

void PostTrasnFileAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    err_no_ = 0;
    if (has_err_msg()) {
      if (err_msg_ != &::google::protobuf::internal::kEmptyString) {
        err_msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PostTrasnFileAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 err_no = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_no_)));
          set_has_err_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_err_msg;
        break;
      }

      // optional string err_msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_err_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_err_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->err_msg().data(), this->err_msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PostTrasnFileAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 err_no = 1;
  if (has_err_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->err_no(), output);
  }

  // optional string err_msg = 2;
  if (has_err_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->err_msg().data(), this->err_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->err_msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PostTrasnFileAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 err_no = 1;
  if (has_err_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->err_no(), target);
  }

  // optional string err_msg = 2;
  if (has_err_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->err_msg().data(), this->err_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->err_msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PostTrasnFileAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 err_no = 1;
    if (has_err_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err_no());
    }

    // optional string err_msg = 2;
    if (has_err_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->err_msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PostTrasnFileAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PostTrasnFileAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PostTrasnFileAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PostTrasnFileAck::MergeFrom(const PostTrasnFileAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_err_no()) {
      set_err_no(from.err_no());
    }
    if (from.has_err_msg()) {
      set_err_msg(from.err_msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PostTrasnFileAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostTrasnFileAck::CopyFrom(const PostTrasnFileAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostTrasnFileAck::IsInitialized() const {

  return true;
}

void PostTrasnFileAck::Swap(PostTrasnFileAck* other) {
  if (other != this) {
    std::swap(err_no_, other->err_no_);
    std::swap(err_msg_, other->err_msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PostTrasnFileAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PostTrasnFileAck_descriptor_;
  metadata.reflection = PostTrasnFileAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TrasnFileRpt::kFileDataFieldNumber;
const int TrasnFileRpt::kBlastFieldNumber;
#endif  // !_MSC_VER

TrasnFileRpt::TrasnFileRpt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TrasnFileRpt::InitAsDefaultInstance() {
}

TrasnFileRpt::TrasnFileRpt(const TrasnFileRpt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TrasnFileRpt::SharedCtor() {
  _cached_size_ = 0;
  file_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  blast_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrasnFileRpt::~TrasnFileRpt() {
  SharedDtor();
}

void TrasnFileRpt::SharedDtor() {
  if (file_data_ != &::google::protobuf::internal::kEmptyString) {
    delete file_data_;
  }
  if (this != default_instance_) {
  }
}

void TrasnFileRpt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrasnFileRpt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrasnFileRpt_descriptor_;
}

const TrasnFileRpt& TrasnFileRpt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trs_5fclient_2eproto();
  return *default_instance_;
}

TrasnFileRpt* TrasnFileRpt::default_instance_ = NULL;

TrasnFileRpt* TrasnFileRpt::New() const {
  return new TrasnFileRpt;
}

void TrasnFileRpt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_file_data()) {
      if (file_data_ != &::google::protobuf::internal::kEmptyString) {
        file_data_->clear();
      }
    }
    blast_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrasnFileRpt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes file_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_file_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_blast;
        break;
      }

      // optional bool blast = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blast:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &blast_)));
          set_has_blast();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TrasnFileRpt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes file_data = 1;
  if (has_file_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->file_data(), output);
  }

  // optional bool blast = 2;
  if (has_blast()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->blast(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TrasnFileRpt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes file_data = 1;
  if (has_file_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->file_data(), target);
  }

  // optional bool blast = 2;
  if (has_blast()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->blast(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TrasnFileRpt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes file_data = 1;
    if (has_file_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->file_data());
    }

    // optional bool blast = 2;
    if (has_blast()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrasnFileRpt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrasnFileRpt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrasnFileRpt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrasnFileRpt::MergeFrom(const TrasnFileRpt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_file_data()) {
      set_file_data(from.file_data());
    }
    if (from.has_blast()) {
      set_blast(from.blast());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrasnFileRpt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrasnFileRpt::CopyFrom(const TrasnFileRpt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrasnFileRpt::IsInitialized() const {

  return true;
}

void TrasnFileRpt::Swap(TrasnFileRpt* other) {
  if (other != this) {
    std::swap(file_data_, other->file_data_);
    std::swap(blast_, other->blast_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrasnFileRpt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrasnFileRpt_descriptor_;
  metadata.reflection = TrasnFileRpt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TransFileCompleteRpt::kLengthFieldNumber;
const int TransFileCompleteRpt::kErrNoFieldNumber;
const int TransFileCompleteRpt::kErrMsgFieldNumber;
#endif  // !_MSC_VER

TransFileCompleteRpt::TransFileCompleteRpt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TransFileCompleteRpt::InitAsDefaultInstance() {
}

TransFileCompleteRpt::TransFileCompleteRpt(const TransFileCompleteRpt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TransFileCompleteRpt::SharedCtor() {
  _cached_size_ = 0;
  length_ = 0;
  err_no_ = 0;
  err_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransFileCompleteRpt::~TransFileCompleteRpt() {
  SharedDtor();
}

void TransFileCompleteRpt::SharedDtor() {
  if (err_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete err_msg_;
  }
  if (this != default_instance_) {
  }
}

void TransFileCompleteRpt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransFileCompleteRpt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransFileCompleteRpt_descriptor_;
}

const TransFileCompleteRpt& TransFileCompleteRpt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trs_5fclient_2eproto();
  return *default_instance_;
}

TransFileCompleteRpt* TransFileCompleteRpt::default_instance_ = NULL;

TransFileCompleteRpt* TransFileCompleteRpt::New() const {
  return new TransFileCompleteRpt;
}

void TransFileCompleteRpt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    length_ = 0;
    err_no_ = 0;
    if (has_err_msg()) {
      if (err_msg_ != &::google::protobuf::internal::kEmptyString) {
        err_msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransFileCompleteRpt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 length = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_err_no;
        break;
      }

      // optional int32 err_no = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_err_no:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_no_)));
          set_has_err_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_err_msg;
        break;
      }

      // optional string err_msg = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_err_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_err_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->err_msg().data(), this->err_msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TransFileCompleteRpt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 length = 1;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->length(), output);
  }

  // optional int32 err_no = 2;
  if (has_err_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->err_no(), output);
  }

  // optional string err_msg = 3;
  if (has_err_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->err_msg().data(), this->err_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->err_msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TransFileCompleteRpt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 length = 1;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->length(), target);
  }

  // optional int32 err_no = 2;
  if (has_err_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->err_no(), target);
  }

  // optional string err_msg = 3;
  if (has_err_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->err_msg().data(), this->err_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->err_msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TransFileCompleteRpt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 length = 1;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->length());
    }

    // optional int32 err_no = 2;
    if (has_err_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err_no());
    }

    // optional string err_msg = 3;
    if (has_err_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->err_msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransFileCompleteRpt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransFileCompleteRpt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransFileCompleteRpt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransFileCompleteRpt::MergeFrom(const TransFileCompleteRpt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_length()) {
      set_length(from.length());
    }
    if (from.has_err_no()) {
      set_err_no(from.err_no());
    }
    if (from.has_err_msg()) {
      set_err_msg(from.err_msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransFileCompleteRpt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransFileCompleteRpt::CopyFrom(const TransFileCompleteRpt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransFileCompleteRpt::IsInitialized() const {

  return true;
}

void TransFileCompleteRpt::Swap(TransFileCompleteRpt* other) {
  if (other != this) {
    std::swap(length_, other->length_);
    std::swap(err_no_, other->err_no_);
    std::swap(err_msg_, other->err_msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransFileCompleteRpt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransFileCompleteRpt_descriptor_;
  metadata.reflection = TransFileCompleteRpt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PostTransLogFileReq::kServerNameFieldNumber;
const int PostTransLogFileReq::kLogtypeFieldNumber;
const int PostTransLogFileReq::kDayIdxFieldNumber;
#endif  // !_MSC_VER

PostTransLogFileReq::PostTransLogFileReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PostTransLogFileReq::InitAsDefaultInstance() {
}

PostTransLogFileReq::PostTransLogFileReq(const PostTransLogFileReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PostTransLogFileReq::SharedCtor() {
  _cached_size_ = 0;
  server_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  logtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  day_idx_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PostTransLogFileReq::~PostTransLogFileReq() {
  SharedDtor();
}

void PostTransLogFileReq::SharedDtor() {
  if (server_name_ != &::google::protobuf::internal::kEmptyString) {
    delete server_name_;
  }
  if (logtype_ != &::google::protobuf::internal::kEmptyString) {
    delete logtype_;
  }
  if (this != default_instance_) {
  }
}

void PostTransLogFileReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PostTransLogFileReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PostTransLogFileReq_descriptor_;
}

const PostTransLogFileReq& PostTransLogFileReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trs_5fclient_2eproto();
  return *default_instance_;
}

PostTransLogFileReq* PostTransLogFileReq::default_instance_ = NULL;

PostTransLogFileReq* PostTransLogFileReq::New() const {
  return new PostTransLogFileReq;
}

void PostTransLogFileReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_server_name()) {
      if (server_name_ != &::google::protobuf::internal::kEmptyString) {
        server_name_->clear();
      }
    }
    if (has_logtype()) {
      if (logtype_ != &::google::protobuf::internal::kEmptyString) {
        logtype_->clear();
      }
    }
    day_idx_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PostTransLogFileReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string server_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_name().data(), this->server_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_logtype;
        break;
      }

      // optional string logtype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_logtype:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logtype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->logtype().data(), this->logtype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_day_idx;
        break;
      }

      // optional int32 day_idx = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_day_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &day_idx_)));
          set_has_day_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PostTransLogFileReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string server_name = 1;
  if (has_server_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_name().data(), this->server_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->server_name(), output);
  }

  // optional string logtype = 2;
  if (has_logtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->logtype().data(), this->logtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->logtype(), output);
  }

  // optional int32 day_idx = 3;
  if (has_day_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->day_idx(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PostTransLogFileReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string server_name = 1;
  if (has_server_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_name().data(), this->server_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->server_name(), target);
  }

  // optional string logtype = 2;
  if (has_logtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->logtype().data(), this->logtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->logtype(), target);
  }

  // optional int32 day_idx = 3;
  if (has_day_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->day_idx(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PostTransLogFileReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string server_name = 1;
    if (has_server_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_name());
    }

    // optional string logtype = 2;
    if (has_logtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->logtype());
    }

    // optional int32 day_idx = 3;
    if (has_day_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->day_idx());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PostTransLogFileReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PostTransLogFileReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PostTransLogFileReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PostTransLogFileReq::MergeFrom(const PostTransLogFileReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_name()) {
      set_server_name(from.server_name());
    }
    if (from.has_logtype()) {
      set_logtype(from.logtype());
    }
    if (from.has_day_idx()) {
      set_day_idx(from.day_idx());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PostTransLogFileReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostTransLogFileReq::CopyFrom(const PostTransLogFileReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostTransLogFileReq::IsInitialized() const {

  return true;
}

void PostTransLogFileReq::Swap(PostTransLogFileReq* other) {
  if (other != this) {
    std::swap(server_name_, other->server_name_);
    std::swap(logtype_, other->logtype_);
    std::swap(day_idx_, other->day_idx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PostTransLogFileReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PostTransLogFileReq_descriptor_;
  metadata.reflection = PostTransLogFileReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PostTransLogFileAck::kFileLengthZipFieldNumber;
const int PostTransLogFileAck::kFileLengthUzipFieldNumber;
const int PostTransLogFileAck::kFileNameFieldNumber;
const int PostTransLogFileAck::kFileMd5FieldNumber;
const int PostTransLogFileAck::kServerNameFieldNumber;
const int PostTransLogFileAck::kErrNoFieldNumber;
const int PostTransLogFileAck::kErrMsgFieldNumber;
#endif  // !_MSC_VER

PostTransLogFileAck::PostTransLogFileAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PostTransLogFileAck::InitAsDefaultInstance() {
}

PostTransLogFileAck::PostTransLogFileAck(const PostTransLogFileAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PostTransLogFileAck::SharedCtor() {
  _cached_size_ = 0;
  file_length_zip_ = 0u;
  file_length_uzip_ = 0u;
  file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  file_md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  server_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  err_no_ = 0;
  err_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PostTransLogFileAck::~PostTransLogFileAck() {
  SharedDtor();
}

void PostTransLogFileAck::SharedDtor() {
  if (file_name_ != &::google::protobuf::internal::kEmptyString) {
    delete file_name_;
  }
  if (file_md5_ != &::google::protobuf::internal::kEmptyString) {
    delete file_md5_;
  }
  if (server_name_ != &::google::protobuf::internal::kEmptyString) {
    delete server_name_;
  }
  if (err_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete err_msg_;
  }
  if (this != default_instance_) {
  }
}

void PostTransLogFileAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PostTransLogFileAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PostTransLogFileAck_descriptor_;
}

const PostTransLogFileAck& PostTransLogFileAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trs_5fclient_2eproto();
  return *default_instance_;
}

PostTransLogFileAck* PostTransLogFileAck::default_instance_ = NULL;

PostTransLogFileAck* PostTransLogFileAck::New() const {
  return new PostTransLogFileAck;
}

void PostTransLogFileAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    file_length_zip_ = 0u;
    file_length_uzip_ = 0u;
    if (has_file_name()) {
      if (file_name_ != &::google::protobuf::internal::kEmptyString) {
        file_name_->clear();
      }
    }
    if (has_file_md5()) {
      if (file_md5_ != &::google::protobuf::internal::kEmptyString) {
        file_md5_->clear();
      }
    }
    if (has_server_name()) {
      if (server_name_ != &::google::protobuf::internal::kEmptyString) {
        server_name_->clear();
      }
    }
    err_no_ = 0;
    if (has_err_msg()) {
      if (err_msg_ != &::google::protobuf::internal::kEmptyString) {
        err_msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PostTransLogFileAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 file_length_zip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &file_length_zip_)));
          set_has_file_length_zip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_file_length_uzip;
        break;
      }

      // optional uint32 file_length_uzip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_file_length_uzip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &file_length_uzip_)));
          set_has_file_length_uzip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_file_name;
        break;
      }

      // optional string file_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->file_name().data(), this->file_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_file_md5;
        break;
      }

      // optional string file_md5 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file_md5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_md5()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->file_md5().data(), this->file_md5().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_server_name;
        break;
      }

      // optional string server_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_name().data(), this->server_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_err_no;
        break;
      }

      // optional int32 err_no = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_err_no:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_no_)));
          set_has_err_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_err_msg;
        break;
      }

      // optional string err_msg = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_err_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_err_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->err_msg().data(), this->err_msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PostTransLogFileAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 file_length_zip = 1;
  if (has_file_length_zip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->file_length_zip(), output);
  }

  // optional uint32 file_length_uzip = 2;
  if (has_file_length_uzip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->file_length_uzip(), output);
  }

  // optional string file_name = 3;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->file_name(), output);
  }

  // optional string file_md5 = 4;
  if (has_file_md5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_md5().data(), this->file_md5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->file_md5(), output);
  }

  // optional string server_name = 5;
  if (has_server_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_name().data(), this->server_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->server_name(), output);
  }

  // optional int32 err_no = 6;
  if (has_err_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->err_no(), output);
  }

  // optional string err_msg = 7;
  if (has_err_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->err_msg().data(), this->err_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->err_msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PostTransLogFileAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 file_length_zip = 1;
  if (has_file_length_zip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->file_length_zip(), target);
  }

  // optional uint32 file_length_uzip = 2;
  if (has_file_length_uzip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->file_length_uzip(), target);
  }

  // optional string file_name = 3;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->file_name(), target);
  }

  // optional string file_md5 = 4;
  if (has_file_md5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_md5().data(), this->file_md5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->file_md5(), target);
  }

  // optional string server_name = 5;
  if (has_server_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_name().data(), this->server_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->server_name(), target);
  }

  // optional int32 err_no = 6;
  if (has_err_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->err_no(), target);
  }

  // optional string err_msg = 7;
  if (has_err_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->err_msg().data(), this->err_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->err_msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PostTransLogFileAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 file_length_zip = 1;
    if (has_file_length_zip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->file_length_zip());
    }

    // optional uint32 file_length_uzip = 2;
    if (has_file_length_uzip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->file_length_uzip());
    }

    // optional string file_name = 3;
    if (has_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_name());
    }

    // optional string file_md5 = 4;
    if (has_file_md5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_md5());
    }

    // optional string server_name = 5;
    if (has_server_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_name());
    }

    // optional int32 err_no = 6;
    if (has_err_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err_no());
    }

    // optional string err_msg = 7;
    if (has_err_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->err_msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PostTransLogFileAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PostTransLogFileAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PostTransLogFileAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PostTransLogFileAck::MergeFrom(const PostTransLogFileAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_file_length_zip()) {
      set_file_length_zip(from.file_length_zip());
    }
    if (from.has_file_length_uzip()) {
      set_file_length_uzip(from.file_length_uzip());
    }
    if (from.has_file_name()) {
      set_file_name(from.file_name());
    }
    if (from.has_file_md5()) {
      set_file_md5(from.file_md5());
    }
    if (from.has_server_name()) {
      set_server_name(from.server_name());
    }
    if (from.has_err_no()) {
      set_err_no(from.err_no());
    }
    if (from.has_err_msg()) {
      set_err_msg(from.err_msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PostTransLogFileAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostTransLogFileAck::CopyFrom(const PostTransLogFileAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostTransLogFileAck::IsInitialized() const {

  return true;
}

void PostTransLogFileAck::Swap(PostTransLogFileAck* other) {
  if (other != this) {
    std::swap(file_length_zip_, other->file_length_zip_);
    std::swap(file_length_uzip_, other->file_length_uzip_);
    std::swap(file_name_, other->file_name_);
    std::swap(file_md5_, other->file_md5_);
    std::swap(server_name_, other->server_name_);
    std::swap(err_no_, other->err_no_);
    std::swap(err_msg_, other->err_msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PostTransLogFileAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PostTransLogFileAck_descriptor_;
  metadata.reflection = PostTransLogFileAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplyCanTransLogFile::kErrNoFieldNumber;
const int ReplyCanTransLogFile::kErrMsgFieldNumber;
#endif  // !_MSC_VER

ReplyCanTransLogFile::ReplyCanTransLogFile()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReplyCanTransLogFile::InitAsDefaultInstance() {
}

ReplyCanTransLogFile::ReplyCanTransLogFile(const ReplyCanTransLogFile& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReplyCanTransLogFile::SharedCtor() {
  _cached_size_ = 0;
  err_no_ = 0;
  err_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplyCanTransLogFile::~ReplyCanTransLogFile() {
  SharedDtor();
}

void ReplyCanTransLogFile::SharedDtor() {
  if (err_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete err_msg_;
  }
  if (this != default_instance_) {
  }
}

void ReplyCanTransLogFile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplyCanTransLogFile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplyCanTransLogFile_descriptor_;
}

const ReplyCanTransLogFile& ReplyCanTransLogFile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trs_5fclient_2eproto();
  return *default_instance_;
}

ReplyCanTransLogFile* ReplyCanTransLogFile::default_instance_ = NULL;

ReplyCanTransLogFile* ReplyCanTransLogFile::New() const {
  return new ReplyCanTransLogFile;
}

void ReplyCanTransLogFile::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    err_no_ = 0;
    if (has_err_msg()) {
      if (err_msg_ != &::google::protobuf::internal::kEmptyString) {
        err_msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplyCanTransLogFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 err_no = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_no_)));
          set_has_err_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_err_msg;
        break;
      }

      // optional string err_msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_err_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_err_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->err_msg().data(), this->err_msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReplyCanTransLogFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 err_no = 1;
  if (has_err_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->err_no(), output);
  }

  // optional string err_msg = 2;
  if (has_err_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->err_msg().data(), this->err_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->err_msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReplyCanTransLogFile::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 err_no = 1;
  if (has_err_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->err_no(), target);
  }

  // optional string err_msg = 2;
  if (has_err_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->err_msg().data(), this->err_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->err_msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReplyCanTransLogFile::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 err_no = 1;
    if (has_err_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err_no());
    }

    // optional string err_msg = 2;
    if (has_err_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->err_msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplyCanTransLogFile::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplyCanTransLogFile* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplyCanTransLogFile*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplyCanTransLogFile::MergeFrom(const ReplyCanTransLogFile& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_err_no()) {
      set_err_no(from.err_no());
    }
    if (from.has_err_msg()) {
      set_err_msg(from.err_msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplyCanTransLogFile::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyCanTransLogFile::CopyFrom(const ReplyCanTransLogFile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyCanTransLogFile::IsInitialized() const {

  return true;
}

void ReplyCanTransLogFile::Swap(ReplyCanTransLogFile* other) {
  if (other != this) {
    std::swap(err_no_, other->err_no_);
    std::swap(err_msg_, other->err_msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplyCanTransLogFile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplyCanTransLogFile_descriptor_;
  metadata.reflection = ReplyCanTransLogFile_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TransLogFileRpt::kFileDataFieldNumber;
const int TransLogFileRpt::kPercentFieldNumber;
#endif  // !_MSC_VER

TransLogFileRpt::TransLogFileRpt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TransLogFileRpt::InitAsDefaultInstance() {
}

TransLogFileRpt::TransLogFileRpt(const TransLogFileRpt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TransLogFileRpt::SharedCtor() {
  _cached_size_ = 0;
  file_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  percent_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransLogFileRpt::~TransLogFileRpt() {
  SharedDtor();
}

void TransLogFileRpt::SharedDtor() {
  if (file_data_ != &::google::protobuf::internal::kEmptyString) {
    delete file_data_;
  }
  if (this != default_instance_) {
  }
}

void TransLogFileRpt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransLogFileRpt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransLogFileRpt_descriptor_;
}

const TransLogFileRpt& TransLogFileRpt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trs_5fclient_2eproto();
  return *default_instance_;
}

TransLogFileRpt* TransLogFileRpt::default_instance_ = NULL;

TransLogFileRpt* TransLogFileRpt::New() const {
  return new TransLogFileRpt;
}

void TransLogFileRpt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_file_data()) {
      if (file_data_ != &::google::protobuf::internal::kEmptyString) {
        file_data_->clear();
      }
    }
    percent_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransLogFileRpt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes file_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_file_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_percent;
        break;
      }

      // optional int32 percent = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_percent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &percent_)));
          set_has_percent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TransLogFileRpt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes file_data = 1;
  if (has_file_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->file_data(), output);
  }

  // optional int32 percent = 2;
  if (has_percent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->percent(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TransLogFileRpt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes file_data = 1;
  if (has_file_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->file_data(), target);
  }

  // optional int32 percent = 2;
  if (has_percent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->percent(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TransLogFileRpt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes file_data = 1;
    if (has_file_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->file_data());
    }

    // optional int32 percent = 2;
    if (has_percent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->percent());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransLogFileRpt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransLogFileRpt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransLogFileRpt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransLogFileRpt::MergeFrom(const TransLogFileRpt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_file_data()) {
      set_file_data(from.file_data());
    }
    if (from.has_percent()) {
      set_percent(from.percent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransLogFileRpt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransLogFileRpt::CopyFrom(const TransLogFileRpt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransLogFileRpt::IsInitialized() const {

  return true;
}

void TransLogFileRpt::Swap(TransLogFileRpt* other) {
  if (other != this) {
    std::swap(file_data_, other->file_data_);
    std::swap(percent_, other->percent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransLogFileRpt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransLogFileRpt_descriptor_;
  metadata.reflection = TransLogFileRpt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TransLogCompleteRpt::kLengthFieldNumber;
const int TransLogCompleteRpt::kErrNoFieldNumber;
const int TransLogCompleteRpt::kErrMsgFieldNumber;
#endif  // !_MSC_VER

TransLogCompleteRpt::TransLogCompleteRpt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TransLogCompleteRpt::InitAsDefaultInstance() {
}

TransLogCompleteRpt::TransLogCompleteRpt(const TransLogCompleteRpt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TransLogCompleteRpt::SharedCtor() {
  _cached_size_ = 0;
  length_ = 0;
  err_no_ = 0;
  err_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransLogCompleteRpt::~TransLogCompleteRpt() {
  SharedDtor();
}

void TransLogCompleteRpt::SharedDtor() {
  if (err_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete err_msg_;
  }
  if (this != default_instance_) {
  }
}

void TransLogCompleteRpt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransLogCompleteRpt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransLogCompleteRpt_descriptor_;
}

const TransLogCompleteRpt& TransLogCompleteRpt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trs_5fclient_2eproto();
  return *default_instance_;
}

TransLogCompleteRpt* TransLogCompleteRpt::default_instance_ = NULL;

TransLogCompleteRpt* TransLogCompleteRpt::New() const {
  return new TransLogCompleteRpt;
}

void TransLogCompleteRpt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    length_ = 0;
    err_no_ = 0;
    if (has_err_msg()) {
      if (err_msg_ != &::google::protobuf::internal::kEmptyString) {
        err_msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransLogCompleteRpt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 length = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_err_no;
        break;
      }

      // optional int32 err_no = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_err_no:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_no_)));
          set_has_err_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_err_msg;
        break;
      }

      // optional string err_msg = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_err_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_err_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->err_msg().data(), this->err_msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TransLogCompleteRpt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 length = 1;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->length(), output);
  }

  // optional int32 err_no = 2;
  if (has_err_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->err_no(), output);
  }

  // optional string err_msg = 3;
  if (has_err_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->err_msg().data(), this->err_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->err_msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TransLogCompleteRpt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 length = 1;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->length(), target);
  }

  // optional int32 err_no = 2;
  if (has_err_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->err_no(), target);
  }

  // optional string err_msg = 3;
  if (has_err_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->err_msg().data(), this->err_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->err_msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TransLogCompleteRpt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 length = 1;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->length());
    }

    // optional int32 err_no = 2;
    if (has_err_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err_no());
    }

    // optional string err_msg = 3;
    if (has_err_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->err_msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransLogCompleteRpt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransLogCompleteRpt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransLogCompleteRpt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransLogCompleteRpt::MergeFrom(const TransLogCompleteRpt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_length()) {
      set_length(from.length());
    }
    if (from.has_err_no()) {
      set_err_no(from.err_no());
    }
    if (from.has_err_msg()) {
      set_err_msg(from.err_msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransLogCompleteRpt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransLogCompleteRpt::CopyFrom(const TransLogCompleteRpt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransLogCompleteRpt::IsInitialized() const {

  return true;
}

void TransLogCompleteRpt::Swap(TransLogCompleteRpt* other) {
  if (other != this) {
    std::swap(length_, other->length_);
    std::swap(err_no_, other->err_no_);
    std::swap(err_msg_, other->err_msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransLogCompleteRpt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransLogCompleteRpt_descriptor_;
  metadata.reflection = TransLogCompleteRpt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CheckServerStateReq::kServerFieldNumber;
#endif  // !_MSC_VER

CheckServerStateReq::CheckServerStateReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CheckServerStateReq::InitAsDefaultInstance() {
}

CheckServerStateReq::CheckServerStateReq(const CheckServerStateReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CheckServerStateReq::SharedCtor() {
  _cached_size_ = 0;
  server_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CheckServerStateReq::~CheckServerStateReq() {
  SharedDtor();
}

void CheckServerStateReq::SharedDtor() {
  if (server_ != &::google::protobuf::internal::kEmptyString) {
    delete server_;
  }
  if (this != default_instance_) {
  }
}

void CheckServerStateReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckServerStateReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CheckServerStateReq_descriptor_;
}

const CheckServerStateReq& CheckServerStateReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trs_5fclient_2eproto();
  return *default_instance_;
}

CheckServerStateReq* CheckServerStateReq::default_instance_ = NULL;

CheckServerStateReq* CheckServerStateReq::New() const {
  return new CheckServerStateReq;
}

void CheckServerStateReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_server()) {
      if (server_ != &::google::protobuf::internal::kEmptyString) {
        server_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CheckServerStateReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string server = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server().data(), this->server().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CheckServerStateReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string server = 1;
  if (has_server()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server().data(), this->server().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->server(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CheckServerStateReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string server = 1;
  if (has_server()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server().data(), this->server().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->server(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CheckServerStateReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string server = 1;
    if (has_server()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckServerStateReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CheckServerStateReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CheckServerStateReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CheckServerStateReq::MergeFrom(const CheckServerStateReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server()) {
      set_server(from.server());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CheckServerStateReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckServerStateReq::CopyFrom(const CheckServerStateReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckServerStateReq::IsInitialized() const {

  return true;
}

void CheckServerStateReq::Swap(CheckServerStateReq* other) {
  if (other != this) {
    std::swap(server_, other->server_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CheckServerStateReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CheckServerStateReq_descriptor_;
  metadata.reflection = CheckServerStateReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerState::kAreaNoFieldNumber;
const int ServerState::kAreaNameFieldNumber;
const int ServerState::kServerNameFieldNumber;
const int ServerState::kServerFieldNumber;
#endif  // !_MSC_VER

ServerState::ServerState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerState::InitAsDefaultInstance() {
}

ServerState::ServerState(const ServerState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerState::SharedCtor() {
  _cached_size_ = 0;
  area_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  area_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  server_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerState::~ServerState() {
  SharedDtor();
}

void ServerState::SharedDtor() {
  if (area_no_ != &::google::protobuf::internal::kEmptyString) {
    delete area_no_;
  }
  if (area_name_ != &::google::protobuf::internal::kEmptyString) {
    delete area_name_;
  }
  if (server_ != &::google::protobuf::internal::kEmptyString) {
    delete server_;
  }
  if (this != default_instance_) {
  }
}

void ServerState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerState_descriptor_;
}

const ServerState& ServerState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trs_5fclient_2eproto();
  return *default_instance_;
}

ServerState* ServerState::default_instance_ = NULL;

ServerState* ServerState::New() const {
  return new ServerState;
}

void ServerState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_area_no()) {
      if (area_no_ != &::google::protobuf::internal::kEmptyString) {
        area_no_->clear();
      }
    }
    if (has_area_name()) {
      if (area_name_ != &::google::protobuf::internal::kEmptyString) {
        area_name_->clear();
      }
    }
    if (has_server()) {
      if (server_ != &::google::protobuf::internal::kEmptyString) {
        server_->clear();
      }
    }
  }
  server_name_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string area_no = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_area_no()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->area_no().data(), this->area_no().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_area_name;
        break;
      }

      // optional string area_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_area_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_area_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->area_name().data(), this->area_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_server_name;
        break;
      }

      // repeated string server_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_server_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_name(this->server_name_size() - 1).data(),
            this->server_name(this->server_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_server_name;
        if (input->ExpectTag(34)) goto parse_server;
        break;
      }

      // optional string server = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server().data(), this->server().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string area_no = 1;
  if (has_area_no()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->area_no().data(), this->area_no().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->area_no(), output);
  }

  // optional string area_name = 2;
  if (has_area_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->area_name().data(), this->area_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->area_name(), output);
  }

  // repeated string server_name = 3;
  for (int i = 0; i < this->server_name_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->server_name(i).data(), this->server_name(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->server_name(i), output);
  }

  // optional string server = 4;
  if (has_server()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server().data(), this->server().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->server(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string area_no = 1;
  if (has_area_no()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->area_no().data(), this->area_no().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->area_no(), target);
  }

  // optional string area_name = 2;
  if (has_area_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->area_name().data(), this->area_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->area_name(), target);
  }

  // repeated string server_name = 3;
  for (int i = 0; i < this->server_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_name(i).data(), this->server_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->server_name(i), target);
  }

  // optional string server = 4;
  if (has_server()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server().data(), this->server().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->server(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string area_no = 1;
    if (has_area_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->area_no());
    }

    // optional string area_name = 2;
    if (has_area_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->area_name());
    }

    // optional string server = 4;
    if (has_server()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server());
    }

  }
  // repeated string server_name = 3;
  total_size += 1 * this->server_name_size();
  for (int i = 0; i < this->server_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->server_name(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerState::MergeFrom(const ServerState& from) {
  GOOGLE_CHECK_NE(&from, this);
  server_name_.MergeFrom(from.server_name_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_area_no()) {
      set_area_no(from.area_no());
    }
    if (from.has_area_name()) {
      set_area_name(from.area_name());
    }
    if (from.has_server()) {
      set_server(from.server());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerState::CopyFrom(const ServerState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerState::IsInitialized() const {

  return true;
}

void ServerState::Swap(ServerState* other) {
  if (other != this) {
    std::swap(area_no_, other->area_no_);
    std::swap(area_name_, other->area_name_);
    server_name_.Swap(&other->server_name_);
    std::swap(server_, other->server_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerState_descriptor_;
  metadata.reflection = ServerState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CheckServerStateAck::kSsFieldNumber;
#endif  // !_MSC_VER

CheckServerStateAck::CheckServerStateAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CheckServerStateAck::InitAsDefaultInstance() {
}

CheckServerStateAck::CheckServerStateAck(const CheckServerStateAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CheckServerStateAck::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CheckServerStateAck::~CheckServerStateAck() {
  SharedDtor();
}

void CheckServerStateAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CheckServerStateAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckServerStateAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CheckServerStateAck_descriptor_;
}

const CheckServerStateAck& CheckServerStateAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trs_5fclient_2eproto();
  return *default_instance_;
}

CheckServerStateAck* CheckServerStateAck::default_instance_ = NULL;

CheckServerStateAck* CheckServerStateAck::New() const {
  return new CheckServerStateAck;
}

void CheckServerStateAck::Clear() {
  ss_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CheckServerStateAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protoc.trs.ServerState ss = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ss:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ss()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_ss;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CheckServerStateAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protoc.trs.ServerState ss = 1;
  for (int i = 0; i < this->ss_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ss(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CheckServerStateAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protoc.trs.ServerState ss = 1;
  for (int i = 0; i < this->ss_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ss(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CheckServerStateAck::ByteSize() const {
  int total_size = 0;

  // repeated .protoc.trs.ServerState ss = 1;
  total_size += 1 * this->ss_size();
  for (int i = 0; i < this->ss_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ss(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckServerStateAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CheckServerStateAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CheckServerStateAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CheckServerStateAck::MergeFrom(const CheckServerStateAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  ss_.MergeFrom(from.ss_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CheckServerStateAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckServerStateAck::CopyFrom(const CheckServerStateAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckServerStateAck::IsInitialized() const {

  return true;
}

void CheckServerStateAck::Swap(CheckServerStateAck* other) {
  if (other != this) {
    ss_.Swap(&other->ss_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CheckServerStateAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CheckServerStateAck_descriptor_;
  metadata.reflection = CheckServerStateAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OpenServersReq::kOptFieldNumber;
#endif  // !_MSC_VER

OpenServersReq::OpenServersReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OpenServersReq::InitAsDefaultInstance() {
}

OpenServersReq::OpenServersReq(const OpenServersReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OpenServersReq::SharedCtor() {
  _cached_size_ = 0;
  opt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpenServersReq::~OpenServersReq() {
  SharedDtor();
}

void OpenServersReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OpenServersReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenServersReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenServersReq_descriptor_;
}

const OpenServersReq& OpenServersReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trs_5fclient_2eproto();
  return *default_instance_;
}

OpenServersReq* OpenServersReq::default_instance_ = NULL;

OpenServersReq* OpenServersReq::New() const {
  return new OpenServersReq;
}

void OpenServersReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opt_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OpenServersReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 opt = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opt_)));
          set_has_opt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OpenServersReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 opt = 1;
  if (has_opt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OpenServersReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 opt = 1;
  if (has_opt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->opt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OpenServersReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 opt = 1;
    if (has_opt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenServersReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OpenServersReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpenServersReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpenServersReq::MergeFrom(const OpenServersReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opt()) {
      set_opt(from.opt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OpenServersReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenServersReq::CopyFrom(const OpenServersReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenServersReq::IsInitialized() const {

  return true;
}

void OpenServersReq::Swap(OpenServersReq* other) {
  if (other != this) {
    std::swap(opt_, other->opt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OpenServersReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenServersReq_descriptor_;
  metadata.reflection = OpenServersReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExecuteSql::kStrInfoFieldNumber;
#endif  // !_MSC_VER

ExecuteSql::ExecuteSql()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExecuteSql::InitAsDefaultInstance() {
}

ExecuteSql::ExecuteSql(const ExecuteSql& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExecuteSql::SharedCtor() {
  _cached_size_ = 0;
  str_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExecuteSql::~ExecuteSql() {
  SharedDtor();
}

void ExecuteSql::SharedDtor() {
  if (str_info_ != &::google::protobuf::internal::kEmptyString) {
    delete str_info_;
  }
  if (this != default_instance_) {
  }
}

void ExecuteSql::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExecuteSql::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExecuteSql_descriptor_;
}

const ExecuteSql& ExecuteSql::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trs_5fclient_2eproto();
  return *default_instance_;
}

ExecuteSql* ExecuteSql::default_instance_ = NULL;

ExecuteSql* ExecuteSql::New() const {
  return new ExecuteSql;
}

void ExecuteSql::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_str_info()) {
      if (str_info_ != &::google::protobuf::internal::kEmptyString) {
        str_info_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExecuteSql::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string str_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str_info().data(), this->str_info().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExecuteSql::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string str_info = 1;
  if (has_str_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str_info().data(), this->str_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->str_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExecuteSql::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string str_info = 1;
  if (has_str_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str_info().data(), this->str_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->str_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExecuteSql::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string str_info = 1;
    if (has_str_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExecuteSql::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExecuteSql* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExecuteSql*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExecuteSql::MergeFrom(const ExecuteSql& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_str_info()) {
      set_str_info(from.str_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExecuteSql::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecuteSql::CopyFrom(const ExecuteSql& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecuteSql::IsInitialized() const {

  return true;
}

void ExecuteSql::Swap(ExecuteSql* other) {
  if (other != this) {
    std::swap(str_info_, other->str_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExecuteSql::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExecuteSql_descriptor_;
  metadata.reflection = ExecuteSql_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OtherServerReportRpt::kServerNameFieldNumber;
const int OtherServerReportRpt::kServerIdFieldNumber;
#endif  // !_MSC_VER

OtherServerReportRpt::OtherServerReportRpt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OtherServerReportRpt::InitAsDefaultInstance() {
}

OtherServerReportRpt::OtherServerReportRpt(const OtherServerReportRpt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OtherServerReportRpt::SharedCtor() {
  _cached_size_ = 0;
  server_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  server_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OtherServerReportRpt::~OtherServerReportRpt() {
  SharedDtor();
}

void OtherServerReportRpt::SharedDtor() {
  if (server_name_ != &::google::protobuf::internal::kEmptyString) {
    delete server_name_;
  }
  if (server_id_ != &::google::protobuf::internal::kEmptyString) {
    delete server_id_;
  }
  if (this != default_instance_) {
  }
}

void OtherServerReportRpt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OtherServerReportRpt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OtherServerReportRpt_descriptor_;
}

const OtherServerReportRpt& OtherServerReportRpt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trs_5fclient_2eproto();
  return *default_instance_;
}

OtherServerReportRpt* OtherServerReportRpt::default_instance_ = NULL;

OtherServerReportRpt* OtherServerReportRpt::New() const {
  return new OtherServerReportRpt;
}

void OtherServerReportRpt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_server_name()) {
      if (server_name_ != &::google::protobuf::internal::kEmptyString) {
        server_name_->clear();
      }
    }
    if (has_server_id()) {
      if (server_id_ != &::google::protobuf::internal::kEmptyString) {
        server_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OtherServerReportRpt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string server_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_name().data(), this->server_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_server_id;
        break;
      }

      // optional string server_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_id().data(), this->server_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OtherServerReportRpt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string server_name = 1;
  if (has_server_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_name().data(), this->server_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->server_name(), output);
  }

  // optional string server_id = 2;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_id().data(), this->server_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->server_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OtherServerReportRpt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string server_name = 1;
  if (has_server_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_name().data(), this->server_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->server_name(), target);
  }

  // optional string server_id = 2;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_id().data(), this->server_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->server_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OtherServerReportRpt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string server_name = 1;
    if (has_server_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_name());
    }

    // optional string server_id = 2;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OtherServerReportRpt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OtherServerReportRpt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OtherServerReportRpt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OtherServerReportRpt::MergeFrom(const OtherServerReportRpt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_name()) {
      set_server_name(from.server_name());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OtherServerReportRpt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OtherServerReportRpt::CopyFrom(const OtherServerReportRpt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OtherServerReportRpt::IsInitialized() const {

  return true;
}

void OtherServerReportRpt::Swap(OtherServerReportRpt* other) {
  if (other != this) {
    std::swap(server_name_, other->server_name_);
    std::swap(server_id_, other->server_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OtherServerReportRpt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OtherServerReportRpt_descriptor_;
  metadata.reflection = OtherServerReportRpt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CheckPasswordRpt::kPswFieldNumber;
#endif  // !_MSC_VER

CheckPasswordRpt::CheckPasswordRpt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CheckPasswordRpt::InitAsDefaultInstance() {
}

CheckPasswordRpt::CheckPasswordRpt(const CheckPasswordRpt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CheckPasswordRpt::SharedCtor() {
  _cached_size_ = 0;
  psw_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CheckPasswordRpt::~CheckPasswordRpt() {
  SharedDtor();
}

void CheckPasswordRpt::SharedDtor() {
  if (psw_ != &::google::protobuf::internal::kEmptyString) {
    delete psw_;
  }
  if (this != default_instance_) {
  }
}

void CheckPasswordRpt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckPasswordRpt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CheckPasswordRpt_descriptor_;
}

const CheckPasswordRpt& CheckPasswordRpt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trs_5fclient_2eproto();
  return *default_instance_;
}

CheckPasswordRpt* CheckPasswordRpt::default_instance_ = NULL;

CheckPasswordRpt* CheckPasswordRpt::New() const {
  return new CheckPasswordRpt;
}

void CheckPasswordRpt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_psw()) {
      if (psw_ != &::google::protobuf::internal::kEmptyString) {
        psw_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CheckPasswordRpt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string psw = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_psw()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->psw().data(), this->psw().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CheckPasswordRpt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string psw = 1;
  if (has_psw()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->psw().data(), this->psw().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->psw(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CheckPasswordRpt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string psw = 1;
  if (has_psw()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->psw().data(), this->psw().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->psw(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CheckPasswordRpt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string psw = 1;
    if (has_psw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->psw());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckPasswordRpt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CheckPasswordRpt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CheckPasswordRpt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CheckPasswordRpt::MergeFrom(const CheckPasswordRpt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_psw()) {
      set_psw(from.psw());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CheckPasswordRpt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckPasswordRpt::CopyFrom(const CheckPasswordRpt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckPasswordRpt::IsInitialized() const {

  return true;
}

void CheckPasswordRpt::Swap(CheckPasswordRpt* other) {
  if (other != this) {
    std::swap(psw_, other->psw_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CheckPasswordRpt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CheckPasswordRpt_descriptor_;
  metadata.reflection = CheckPasswordRpt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerErrorMsgRpt::kErrMsgFieldNumber;
#endif  // !_MSC_VER

ServerErrorMsgRpt::ServerErrorMsgRpt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerErrorMsgRpt::InitAsDefaultInstance() {
}

ServerErrorMsgRpt::ServerErrorMsgRpt(const ServerErrorMsgRpt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerErrorMsgRpt::SharedCtor() {
  _cached_size_ = 0;
  err_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerErrorMsgRpt::~ServerErrorMsgRpt() {
  SharedDtor();
}

void ServerErrorMsgRpt::SharedDtor() {
  if (err_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete err_msg_;
  }
  if (this != default_instance_) {
  }
}

void ServerErrorMsgRpt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerErrorMsgRpt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerErrorMsgRpt_descriptor_;
}

const ServerErrorMsgRpt& ServerErrorMsgRpt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trs_5fclient_2eproto();
  return *default_instance_;
}

ServerErrorMsgRpt* ServerErrorMsgRpt::default_instance_ = NULL;

ServerErrorMsgRpt* ServerErrorMsgRpt::New() const {
  return new ServerErrorMsgRpt;
}

void ServerErrorMsgRpt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_err_msg()) {
      if (err_msg_ != &::google::protobuf::internal::kEmptyString) {
        err_msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerErrorMsgRpt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string err_msg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_err_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->err_msg().data(), this->err_msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerErrorMsgRpt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string err_msg = 1;
  if (has_err_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->err_msg().data(), this->err_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->err_msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerErrorMsgRpt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string err_msg = 1;
  if (has_err_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->err_msg().data(), this->err_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->err_msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerErrorMsgRpt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string err_msg = 1;
    if (has_err_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->err_msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerErrorMsgRpt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerErrorMsgRpt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerErrorMsgRpt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerErrorMsgRpt::MergeFrom(const ServerErrorMsgRpt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_err_msg()) {
      set_err_msg(from.err_msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerErrorMsgRpt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerErrorMsgRpt::CopyFrom(const ServerErrorMsgRpt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerErrorMsgRpt::IsInitialized() const {

  return true;
}

void ServerErrorMsgRpt::Swap(ServerErrorMsgRpt* other) {
  if (other != this) {
    std::swap(err_msg_, other->err_msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerErrorMsgRpt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerErrorMsgRpt_descriptor_;
  metadata.reflection = ServerErrorMsgRpt_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace trs
}  // namespace protoc

// @@protoc_insertion_point(global_scope)
