// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: table_config.proto

#ifndef PROTOBUF_table_5fconfig_2eproto__INCLUDED
#define PROTOBUF_table_5fconfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "options.pb.h"
// @@protoc_insertion_point(includes)

namespace tableconfig {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_table_5fconfig_2eproto();
void protobuf_AssignDesc_table_5fconfig_2eproto();
void protobuf_ShutdownFile_table_5fconfig_2eproto();

class PlayerLevelRecord;
class SPlayerLevelList;
class WillLearnSkill;
class PetRecordCfg;
class PetListCfg;
class PlayerPetNumber;
class SPlayerPetNumberList;
class ZhiYeIDNameRecord;
class ZhiYeIDNameList;
class PetClassIDName;
class PetClassIDNameList;
class PetSkill;
class PetSkillList;
class HurtEffect;
class NormalGoodsRecord;
class NormalGoodsList;
class PetSkillPro;
class PetSkillProList;
class PetZhaoHuan;
class PetZhaoHuanList;

enum LEARN_KIND {
  e_no_pro = 0,
  e_level = 1
};
bool LEARN_KIND_IsValid(int value);
const LEARN_KIND LEARN_KIND_MIN = e_no_pro;
const LEARN_KIND LEARN_KIND_MAX = e_level;
const int LEARN_KIND_ARRAYSIZE = LEARN_KIND_MAX + 1;

const ::google::protobuf::EnumDescriptor* LEARN_KIND_descriptor();
inline const ::std::string& LEARN_KIND_Name(LEARN_KIND value) {
  return ::google::protobuf::internal::NameOfEnum(
    LEARN_KIND_descriptor(), value);
}
inline bool LEARN_KIND_Parse(
    const ::std::string& name, LEARN_KIND* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LEARN_KIND>(
    LEARN_KIND_descriptor(), name, value);
}
// ===================================================================

class PlayerLevelRecord : public ::google::protobuf::Message {
 public:
  PlayerLevelRecord();
  virtual ~PlayerLevelRecord();

  PlayerLevelRecord(const PlayerLevelRecord& from);

  inline PlayerLevelRecord& operator=(const PlayerLevelRecord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerLevelRecord& default_instance();

  void Swap(PlayerLevelRecord* other);

  // implements Message ----------------------------------------------

  PlayerLevelRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerLevelRecord& from);
  void MergeFrom(const PlayerLevelRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 level = 1;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 1;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional uint32 exp = 2;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 2;
  inline ::google::protobuf::uint32 exp() const;
  inline void set_exp(::google::protobuf::uint32 value);

  // optional uint32 mp = 3;
  inline bool has_mp() const;
  inline void clear_mp();
  static const int kMpFieldNumber = 3;
  inline ::google::protobuf::uint32 mp() const;
  inline void set_mp(::google::protobuf::uint32 value);

  // optional uint32 hp = 4;
  inline bool has_hp() const;
  inline void clear_hp();
  static const int kHpFieldNumber = 4;
  inline ::google::protobuf::uint32 hp() const;
  inline void set_hp(::google::protobuf::uint32 value);

  // optional uint32 spirit = 5;
  inline bool has_spirit() const;
  inline void clear_spirit();
  static const int kSpiritFieldNumber = 5;
  inline ::google::protobuf::uint32 spirit() const;
  inline void set_spirit(::google::protobuf::uint32 value);

  // optional uint32 action_count = 6;
  inline bool has_action_count() const;
  inline void clear_action_count();
  static const int kActionCountFieldNumber = 6;
  inline ::google::protobuf::uint32 action_count() const;
  inline void set_action_count(::google::protobuf::uint32 value);

  // optional uint32 friend_count = 7;
  inline bool has_friend_count() const;
  inline void clear_friend_count();
  static const int kFriendCountFieldNumber = 7;
  inline ::google::protobuf::uint32 friend_count() const;
  inline void set_friend_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tableconfig.PlayerLevelRecord)
 private:
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_mp();
  inline void clear_has_mp();
  inline void set_has_hp();
  inline void clear_has_hp();
  inline void set_has_spirit();
  inline void clear_has_spirit();
  inline void set_has_action_count();
  inline void clear_has_action_count();
  inline void set_has_friend_count();
  inline void clear_has_friend_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 level_;
  ::google::protobuf::uint32 exp_;
  ::google::protobuf::uint32 mp_;
  ::google::protobuf::uint32 hp_;
  ::google::protobuf::uint32 spirit_;
  ::google::protobuf::uint32 action_count_;
  ::google::protobuf::uint32 friend_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_table_5fconfig_2eproto();
  friend void protobuf_AssignDesc_table_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_table_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static PlayerLevelRecord* default_instance_;
};
// -------------------------------------------------------------------

class SPlayerLevelList : public ::google::protobuf::Message {
 public:
  SPlayerLevelList();
  virtual ~SPlayerLevelList();

  SPlayerLevelList(const SPlayerLevelList& from);

  inline SPlayerLevelList& operator=(const SPlayerLevelList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SPlayerLevelList& default_instance();

  void Swap(SPlayerLevelList* other);

  // implements Message ----------------------------------------------

  SPlayerLevelList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SPlayerLevelList& from);
  void MergeFrom(const SPlayerLevelList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tableconfig.PlayerLevelRecord record = 1;
  inline int record_size() const;
  inline void clear_record();
  static const int kRecordFieldNumber = 1;
  inline const ::tableconfig::PlayerLevelRecord& record(int index) const;
  inline ::tableconfig::PlayerLevelRecord* mutable_record(int index);
  inline ::tableconfig::PlayerLevelRecord* add_record();
  inline const ::google::protobuf::RepeatedPtrField< ::tableconfig::PlayerLevelRecord >&
      record() const;
  inline ::google::protobuf::RepeatedPtrField< ::tableconfig::PlayerLevelRecord >*
      mutable_record();

  // @@protoc_insertion_point(class_scope:tableconfig.SPlayerLevelList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::tableconfig::PlayerLevelRecord > record_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_table_5fconfig_2eproto();
  friend void protobuf_AssignDesc_table_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_table_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static SPlayerLevelList* default_instance_;
};
// -------------------------------------------------------------------

class WillLearnSkill : public ::google::protobuf::Message {
 public:
  WillLearnSkill();
  virtual ~WillLearnSkill();

  WillLearnSkill(const WillLearnSkill& from);

  inline WillLearnSkill& operator=(const WillLearnSkill& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WillLearnSkill& default_instance();

  void Swap(WillLearnSkill* other);

  // implements Message ----------------------------------------------

  WillLearnSkill* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WillLearnSkill& from);
  void MergeFrom(const WillLearnSkill& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 skill_id = 1;
  inline bool has_skill_id() const;
  inline void clear_skill_id();
  static const int kSkillIdFieldNumber = 1;
  inline ::google::protobuf::uint32 skill_id() const;
  inline void set_skill_id(::google::protobuf::uint32 value);

  // optional .tableconfig.LEARN_KIND prt_id = 2;
  inline bool has_prt_id() const;
  inline void clear_prt_id();
  static const int kPrtIdFieldNumber = 2;
  inline ::tableconfig::LEARN_KIND prt_id() const;
  inline void set_prt_id(::tableconfig::LEARN_KIND value);

  // optional uint32 value = 3;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 3;
  inline ::google::protobuf::uint32 value() const;
  inline void set_value(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tableconfig.WillLearnSkill)
 private:
  inline void set_has_skill_id();
  inline void clear_has_skill_id();
  inline void set_has_prt_id();
  inline void clear_has_prt_id();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 skill_id_;
  int prt_id_;
  ::google::protobuf::uint32 value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_table_5fconfig_2eproto();
  friend void protobuf_AssignDesc_table_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_table_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static WillLearnSkill* default_instance_;
};
// -------------------------------------------------------------------

class PetRecordCfg : public ::google::protobuf::Message {
 public:
  PetRecordCfg();
  virtual ~PetRecordCfg();

  PetRecordCfg(const PetRecordCfg& from);

  inline PetRecordCfg& operator=(const PetRecordCfg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PetRecordCfg& default_instance();

  void Swap(PetRecordCfg* other);

  // implements Message ----------------------------------------------

  PetRecordCfg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PetRecordCfg& from);
  void MergeFrom(const PetRecordCfg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 kind = 1;
  inline bool has_kind() const;
  inline void clear_kind();
  static const int kKindFieldNumber = 1;
  inline ::google::protobuf::int32 kind() const;
  inline void set_kind(::google::protobuf::int32 value);

  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 limit_number = 4;
  inline bool has_limit_number() const;
  inline void clear_limit_number();
  static const int kLimitNumberFieldNumber = 4;
  inline ::google::protobuf::int32 limit_number() const;
  inline void set_limit_number(::google::protobuf::int32 value);

  // optional string desc = 5;
  inline bool has_desc() const;
  inline void clear_desc();
  static const int kDescFieldNumber = 5;
  inline const ::std::string& desc() const;
  inline void set_desc(const ::std::string& value);
  inline void set_desc(const char* value);
  inline void set_desc(const char* value, size_t size);
  inline ::std::string* mutable_desc();
  inline ::std::string* release_desc();
  inline void set_allocated_desc(::std::string* desc);

  // optional int32 pet_kind = 6;
  inline bool has_pet_kind() const;
  inline void clear_pet_kind();
  static const int kPetKindFieldNumber = 6;
  inline ::google::protobuf::int32 pet_kind() const;
  inline void set_pet_kind(::google::protobuf::int32 value);

  // optional int32 rare = 7;
  inline bool has_rare() const;
  inline void clear_rare();
  static const int kRareFieldNumber = 7;
  inline ::google::protobuf::int32 rare() const;
  inline void set_rare(::google::protobuf::int32 value);

  // optional uint32 recover = 8;
  inline bool has_recover() const;
  inline void clear_recover();
  static const int kRecoverFieldNumber = 8;
  inline ::google::protobuf::uint32 recover() const;
  inline void set_recover(::google::protobuf::uint32 value);

  // optional uint32 head_pic_id = 9;
  inline bool has_head_pic_id() const;
  inline void clear_head_pic_id();
  static const int kHeadPicIdFieldNumber = 9;
  inline ::google::protobuf::uint32 head_pic_id() const;
  inline void set_head_pic_id(::google::protobuf::uint32 value);

  // optional float dps = 10;
  inline bool has_dps() const;
  inline void clear_dps();
  static const int kDpsFieldNumber = 10;
  inline float dps() const;
  inline void set_dps(float value);

  // optional uint32 hp = 11;
  inline bool has_hp() const;
  inline void clear_hp();
  static const int kHpFieldNumber = 11;
  inline ::google::protobuf::uint32 hp() const;
  inline void set_hp(::google::protobuf::uint32 value);

  // optional uint32 level = 12;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 12;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 tongshi_exp = 13;
  inline bool has_tongshi_exp() const;
  inline void clear_tongshi_exp();
  static const int kTongshiExpFieldNumber = 13;
  inline ::google::protobuf::uint32 tongshi_exp() const;
  inline void set_tongshi_exp(::google::protobuf::uint32 value);

  // optional uint32 action_skill = 14;
  inline bool has_action_skill() const;
  inline void clear_action_skill();
  static const int kActionSkillFieldNumber = 14;
  inline ::google::protobuf::uint32 action_skill() const;
  inline void set_action_skill(::google::protobuf::uint32 value);

  // optional uint32 leader_skill = 15;
  inline bool has_leader_skill() const;
  inline void clear_leader_skill();
  static const int kLeaderSkillFieldNumber = 15;
  inline ::google::protobuf::uint32 leader_skill() const;
  inline void set_leader_skill(::google::protobuf::uint32 value);

  // repeated .tableconfig.WillLearnSkill skills = 16;
  inline int skills_size() const;
  inline void clear_skills();
  static const int kSkillsFieldNumber = 16;
  inline const ::tableconfig::WillLearnSkill& skills(int index) const;
  inline ::tableconfig::WillLearnSkill* mutable_skills(int index);
  inline ::tableconfig::WillLearnSkill* add_skills();
  inline const ::google::protobuf::RepeatedPtrField< ::tableconfig::WillLearnSkill >&
      skills() const;
  inline ::google::protobuf::RepeatedPtrField< ::tableconfig::WillLearnSkill >*
      mutable_skills();

  // optional int32 bind = 17;
  inline bool has_bind() const;
  inline void clear_bind();
  static const int kBindFieldNumber = 17;
  inline ::google::protobuf::int32 bind() const;
  inline void set_bind(::google::protobuf::int32 value);

  // optional uint32 speed = 18;
  inline bool has_speed() const;
  inline void clear_speed();
  static const int kSpeedFieldNumber = 18;
  inline ::google::protobuf::uint32 speed() const;
  inline void set_speed(::google::protobuf::uint32 value);

  // optional uint32 spirit = 19;
  inline bool has_spirit() const;
  inline void clear_spirit();
  static const int kSpiritFieldNumber = 19;
  inline ::google::protobuf::uint32 spirit() const;
  inline void set_spirit(::google::protobuf::uint32 value);

  // optional uint32 mp = 20;
  inline bool has_mp() const;
  inline void clear_mp();
  static const int kMpFieldNumber = 20;
  inline ::google::protobuf::uint32 mp() const;
  inline void set_mp(::google::protobuf::uint32 value);

  // optional uint32 max_level = 21;
  inline bool has_max_level() const;
  inline void clear_max_level();
  static const int kMaxLevelFieldNumber = 21;
  inline ::google::protobuf::uint32 max_level() const;
  inline void set_max_level(::google::protobuf::uint32 value);

  // optional uint32 zhiye = 22;
  inline bool has_zhiye() const;
  inline void clear_zhiye();
  static const int kZhiyeFieldNumber = 22;
  inline ::google::protobuf::uint32 zhiye() const;
  inline void set_zhiye(::google::protobuf::uint32 value);

  // optional uint32 evolve_id = 23;
  inline bool has_evolve_id() const;
  inline void clear_evolve_id();
  static const int kEvolveIdFieldNumber = 23;
  inline ::google::protobuf::uint32 evolve_id() const;
  inline void set_evolve_id(::google::protobuf::uint32 value);

  // repeated uint32 evolve_conditions = 24;
  inline int evolve_conditions_size() const;
  inline void clear_evolve_conditions();
  static const int kEvolveConditionsFieldNumber = 24;
  inline ::google::protobuf::uint32 evolve_conditions(int index) const;
  inline void set_evolve_conditions(int index, ::google::protobuf::uint32 value);
  inline void add_evolve_conditions(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      evolve_conditions() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_evolve_conditions();

  // @@protoc_insertion_point(class_scope:tableconfig.PetRecordCfg)
 private:
  inline void set_has_kind();
  inline void clear_has_kind();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_limit_number();
  inline void clear_has_limit_number();
  inline void set_has_desc();
  inline void clear_has_desc();
  inline void set_has_pet_kind();
  inline void clear_has_pet_kind();
  inline void set_has_rare();
  inline void clear_has_rare();
  inline void set_has_recover();
  inline void clear_has_recover();
  inline void set_has_head_pic_id();
  inline void clear_has_head_pic_id();
  inline void set_has_dps();
  inline void clear_has_dps();
  inline void set_has_hp();
  inline void clear_has_hp();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_tongshi_exp();
  inline void clear_has_tongshi_exp();
  inline void set_has_action_skill();
  inline void clear_has_action_skill();
  inline void set_has_leader_skill();
  inline void clear_has_leader_skill();
  inline void set_has_bind();
  inline void clear_has_bind();
  inline void set_has_speed();
  inline void clear_has_speed();
  inline void set_has_spirit();
  inline void clear_has_spirit();
  inline void set_has_mp();
  inline void clear_has_mp();
  inline void set_has_max_level();
  inline void clear_has_max_level();
  inline void set_has_zhiye();
  inline void clear_has_zhiye();
  inline void set_has_evolve_id();
  inline void clear_has_evolve_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 kind_;
  ::google::protobuf::int32 id_;
  ::std::string* name_;
  ::std::string* desc_;
  ::google::protobuf::int32 limit_number_;
  ::google::protobuf::int32 pet_kind_;
  ::google::protobuf::int32 rare_;
  ::google::protobuf::uint32 recover_;
  ::google::protobuf::uint32 head_pic_id_;
  float dps_;
  ::google::protobuf::uint32 hp_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 tongshi_exp_;
  ::google::protobuf::uint32 action_skill_;
  ::google::protobuf::RepeatedPtrField< ::tableconfig::WillLearnSkill > skills_;
  ::google::protobuf::uint32 leader_skill_;
  ::google::protobuf::int32 bind_;
  ::google::protobuf::uint32 speed_;
  ::google::protobuf::uint32 spirit_;
  ::google::protobuf::uint32 mp_;
  ::google::protobuf::uint32 max_level_;
  ::google::protobuf::uint32 zhiye_;
  ::google::protobuf::uint32 evolve_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > evolve_conditions_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(24 + 31) / 32];

  friend void  protobuf_AddDesc_table_5fconfig_2eproto();
  friend void protobuf_AssignDesc_table_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_table_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static PetRecordCfg* default_instance_;
};
// -------------------------------------------------------------------

class PetListCfg : public ::google::protobuf::Message {
 public:
  PetListCfg();
  virtual ~PetListCfg();

  PetListCfg(const PetListCfg& from);

  inline PetListCfg& operator=(const PetListCfg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PetListCfg& default_instance();

  void Swap(PetListCfg* other);

  // implements Message ----------------------------------------------

  PetListCfg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PetListCfg& from);
  void MergeFrom(const PetListCfg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tableconfig.PetRecordCfg record = 1;
  inline int record_size() const;
  inline void clear_record();
  static const int kRecordFieldNumber = 1;
  inline const ::tableconfig::PetRecordCfg& record(int index) const;
  inline ::tableconfig::PetRecordCfg* mutable_record(int index);
  inline ::tableconfig::PetRecordCfg* add_record();
  inline const ::google::protobuf::RepeatedPtrField< ::tableconfig::PetRecordCfg >&
      record() const;
  inline ::google::protobuf::RepeatedPtrField< ::tableconfig::PetRecordCfg >*
      mutable_record();

  // @@protoc_insertion_point(class_scope:tableconfig.PetListCfg)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::tableconfig::PetRecordCfg > record_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_table_5fconfig_2eproto();
  friend void protobuf_AssignDesc_table_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_table_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static PetListCfg* default_instance_;
};
// -------------------------------------------------------------------

class PlayerPetNumber : public ::google::protobuf::Message {
 public:
  PlayerPetNumber();
  virtual ~PlayerPetNumber();

  PlayerPetNumber(const PlayerPetNumber& from);

  inline PlayerPetNumber& operator=(const PlayerPetNumber& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerPetNumber& default_instance();

  void Swap(PlayerPetNumber* other);

  // implements Message ----------------------------------------------

  PlayerPetNumber* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerPetNumber& from);
  void MergeFrom(const PlayerPetNumber& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 level = 1;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 1;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional uint32 number = 2;
  inline bool has_number() const;
  inline void clear_number();
  static const int kNumberFieldNumber = 2;
  inline ::google::protobuf::uint32 number() const;
  inline void set_number(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tableconfig.PlayerPetNumber)
 private:
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_number();
  inline void clear_has_number();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 level_;
  ::google::protobuf::uint32 number_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_table_5fconfig_2eproto();
  friend void protobuf_AssignDesc_table_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_table_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static PlayerPetNumber* default_instance_;
};
// -------------------------------------------------------------------

class SPlayerPetNumberList : public ::google::protobuf::Message {
 public:
  SPlayerPetNumberList();
  virtual ~SPlayerPetNumberList();

  SPlayerPetNumberList(const SPlayerPetNumberList& from);

  inline SPlayerPetNumberList& operator=(const SPlayerPetNumberList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SPlayerPetNumberList& default_instance();

  void Swap(SPlayerPetNumberList* other);

  // implements Message ----------------------------------------------

  SPlayerPetNumberList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SPlayerPetNumberList& from);
  void MergeFrom(const SPlayerPetNumberList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tableconfig.PlayerPetNumber record = 1;
  inline int record_size() const;
  inline void clear_record();
  static const int kRecordFieldNumber = 1;
  inline const ::tableconfig::PlayerPetNumber& record(int index) const;
  inline ::tableconfig::PlayerPetNumber* mutable_record(int index);
  inline ::tableconfig::PlayerPetNumber* add_record();
  inline const ::google::protobuf::RepeatedPtrField< ::tableconfig::PlayerPetNumber >&
      record() const;
  inline ::google::protobuf::RepeatedPtrField< ::tableconfig::PlayerPetNumber >*
      mutable_record();

  // @@protoc_insertion_point(class_scope:tableconfig.SPlayerPetNumberList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::tableconfig::PlayerPetNumber > record_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_table_5fconfig_2eproto();
  friend void protobuf_AssignDesc_table_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_table_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static SPlayerPetNumberList* default_instance_;
};
// -------------------------------------------------------------------

class ZhiYeIDNameRecord : public ::google::protobuf::Message {
 public:
  ZhiYeIDNameRecord();
  virtual ~ZhiYeIDNameRecord();

  ZhiYeIDNameRecord(const ZhiYeIDNameRecord& from);

  inline ZhiYeIDNameRecord& operator=(const ZhiYeIDNameRecord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ZhiYeIDNameRecord& default_instance();

  void Swap(ZhiYeIDNameRecord* other);

  // implements Message ----------------------------------------------

  ZhiYeIDNameRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ZhiYeIDNameRecord& from);
  void MergeFrom(const ZhiYeIDNameRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:tableconfig.ZhiYeIDNameRecord)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_table_5fconfig_2eproto();
  friend void protobuf_AssignDesc_table_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_table_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static ZhiYeIDNameRecord* default_instance_;
};
// -------------------------------------------------------------------

class ZhiYeIDNameList : public ::google::protobuf::Message {
 public:
  ZhiYeIDNameList();
  virtual ~ZhiYeIDNameList();

  ZhiYeIDNameList(const ZhiYeIDNameList& from);

  inline ZhiYeIDNameList& operator=(const ZhiYeIDNameList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ZhiYeIDNameList& default_instance();

  void Swap(ZhiYeIDNameList* other);

  // implements Message ----------------------------------------------

  ZhiYeIDNameList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ZhiYeIDNameList& from);
  void MergeFrom(const ZhiYeIDNameList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tableconfig.ZhiYeIDNameRecord record = 1;
  inline int record_size() const;
  inline void clear_record();
  static const int kRecordFieldNumber = 1;
  inline const ::tableconfig::ZhiYeIDNameRecord& record(int index) const;
  inline ::tableconfig::ZhiYeIDNameRecord* mutable_record(int index);
  inline ::tableconfig::ZhiYeIDNameRecord* add_record();
  inline const ::google::protobuf::RepeatedPtrField< ::tableconfig::ZhiYeIDNameRecord >&
      record() const;
  inline ::google::protobuf::RepeatedPtrField< ::tableconfig::ZhiYeIDNameRecord >*
      mutable_record();

  // @@protoc_insertion_point(class_scope:tableconfig.ZhiYeIDNameList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::tableconfig::ZhiYeIDNameRecord > record_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_table_5fconfig_2eproto();
  friend void protobuf_AssignDesc_table_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_table_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static ZhiYeIDNameList* default_instance_;
};
// -------------------------------------------------------------------

class PetClassIDName : public ::google::protobuf::Message {
 public:
  PetClassIDName();
  virtual ~PetClassIDName();

  PetClassIDName(const PetClassIDName& from);

  inline PetClassIDName& operator=(const PetClassIDName& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PetClassIDName& default_instance();

  void Swap(PetClassIDName* other);

  // implements Message ----------------------------------------------

  PetClassIDName* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PetClassIDName& from);
  void MergeFrom(const PetClassIDName& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:tableconfig.PetClassIDName)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_table_5fconfig_2eproto();
  friend void protobuf_AssignDesc_table_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_table_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static PetClassIDName* default_instance_;
};
// -------------------------------------------------------------------

class PetClassIDNameList : public ::google::protobuf::Message {
 public:
  PetClassIDNameList();
  virtual ~PetClassIDNameList();

  PetClassIDNameList(const PetClassIDNameList& from);

  inline PetClassIDNameList& operator=(const PetClassIDNameList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PetClassIDNameList& default_instance();

  void Swap(PetClassIDNameList* other);

  // implements Message ----------------------------------------------

  PetClassIDNameList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PetClassIDNameList& from);
  void MergeFrom(const PetClassIDNameList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tableconfig.PetClassIDName record = 1;
  inline int record_size() const;
  inline void clear_record();
  static const int kRecordFieldNumber = 1;
  inline const ::tableconfig::PetClassIDName& record(int index) const;
  inline ::tableconfig::PetClassIDName* mutable_record(int index);
  inline ::tableconfig::PetClassIDName* add_record();
  inline const ::google::protobuf::RepeatedPtrField< ::tableconfig::PetClassIDName >&
      record() const;
  inline ::google::protobuf::RepeatedPtrField< ::tableconfig::PetClassIDName >*
      mutable_record();

  // @@protoc_insertion_point(class_scope:tableconfig.PetClassIDNameList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::tableconfig::PetClassIDName > record_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_table_5fconfig_2eproto();
  friend void protobuf_AssignDesc_table_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_table_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static PetClassIDNameList* default_instance_;
};
// -------------------------------------------------------------------

class PetSkill : public ::google::protobuf::Message {
 public:
  PetSkill();
  virtual ~PetSkill();

  PetSkill(const PetSkill& from);

  inline PetSkill& operator=(const PetSkill& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PetSkill& default_instance();

  void Swap(PetSkill* other);

  // implements Message ----------------------------------------------

  PetSkill* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PetSkill& from);
  void MergeFrom(const PetSkill& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 skillid = 1;
  inline bool has_skillid() const;
  inline void clear_skillid();
  static const int kSkillidFieldNumber = 1;
  inline ::google::protobuf::int32 skillid() const;
  inline void set_skillid(::google::protobuf::int32 value);

  // optional int32 skill_range = 2;
  inline bool has_skill_range() const;
  inline void clear_skill_range();
  static const int kSkillRangeFieldNumber = 2;
  inline ::google::protobuf::int32 skill_range() const;
  inline void set_skill_range(::google::protobuf::int32 value);

  // optional int32 skill_type = 3;
  inline bool has_skill_type() const;
  inline void clear_skill_type();
  static const int kSkillTypeFieldNumber = 3;
  inline ::google::protobuf::int32 skill_type() const;
  inline void set_skill_type(::google::protobuf::int32 value);

  // optional string skill_name = 4;
  inline bool has_skill_name() const;
  inline void clear_skill_name();
  static const int kSkillNameFieldNumber = 4;
  inline const ::std::string& skill_name() const;
  inline void set_skill_name(const ::std::string& value);
  inline void set_skill_name(const char* value);
  inline void set_skill_name(const char* value, size_t size);
  inline ::std::string* mutable_skill_name();
  inline ::std::string* release_skill_name();
  inline void set_allocated_skill_name(::std::string* skill_name);

  // optional string skill_desc = 5;
  inline bool has_skill_desc() const;
  inline void clear_skill_desc();
  static const int kSkillDescFieldNumber = 5;
  inline const ::std::string& skill_desc() const;
  inline void set_skill_desc(const ::std::string& value);
  inline void set_skill_desc(const char* value);
  inline void set_skill_desc(const char* value, size_t size);
  inline ::std::string* mutable_skill_desc();
  inline ::std::string* release_skill_desc();
  inline void set_allocated_skill_desc(::std::string* skill_desc);

  // optional float x1 = 6;
  inline bool has_x1() const;
  inline void clear_x1();
  static const int kX1FieldNumber = 6;
  inline float x1() const;
  inline void set_x1(float value);

  // optional float x2 = 7;
  inline bool has_x2() const;
  inline void clear_x2();
  static const int kX2FieldNumber = 7;
  inline float x2() const;
  inline void set_x2(float value);

  // optional float x3 = 8;
  inline bool has_x3() const;
  inline void clear_x3();
  static const int kX3FieldNumber = 8;
  inline float x3() const;
  inline void set_x3(float value);

  // optional float x4 = 9;
  inline bool has_x4() const;
  inline void clear_x4();
  static const int kX4FieldNumber = 9;
  inline float x4() const;
  inline void set_x4(float value);

  // optional float x5 = 10;
  inline bool has_x5() const;
  inline void clear_x5();
  static const int kX5FieldNumber = 10;
  inline float x5() const;
  inline void set_x5(float value);

  // optional float x6 = 11;
  inline bool has_x6() const;
  inline void clear_x6();
  static const int kX6FieldNumber = 11;
  inline float x6() const;
  inline void set_x6(float value);

  // optional float x7 = 12;
  inline bool has_x7() const;
  inline void clear_x7();
  static const int kX7FieldNumber = 12;
  inline float x7() const;
  inline void set_x7(float value);

  // optional float x8 = 13;
  inline bool has_x8() const;
  inline void clear_x8();
  static const int kX8FieldNumber = 13;
  inline float x8() const;
  inline void set_x8(float value);

  // optional float x9 = 14;
  inline bool has_x9() const;
  inline void clear_x9();
  static const int kX9FieldNumber = 14;
  inline float x9() const;
  inline void set_x9(float value);

  // optional float x10 = 15;
  inline bool has_x10() const;
  inline void clear_x10();
  static const int kX10FieldNumber = 15;
  inline float x10() const;
  inline void set_x10(float value);

  // optional int32 maxlevel = 16;
  inline bool has_maxlevel() const;
  inline void clear_maxlevel();
  static const int kMaxlevelFieldNumber = 16;
  inline ::google::protobuf::int32 maxlevel() const;
  inline void set_maxlevel(::google::protobuf::int32 value);

  // optional int32 cooltime = 17;
  inline bool has_cooltime() const;
  inline void clear_cooltime();
  static const int kCooltimeFieldNumber = 17;
  inline ::google::protobuf::int32 cooltime() const;
  inline void set_cooltime(::google::protobuf::int32 value);

  // optional int32 leader_type = 18;
  inline bool has_leader_type() const;
  inline void clear_leader_type();
  static const int kLeaderTypeFieldNumber = 18;
  inline ::google::protobuf::int32 leader_type() const;
  inline void set_leader_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:tableconfig.PetSkill)
 private:
  inline void set_has_skillid();
  inline void clear_has_skillid();
  inline void set_has_skill_range();
  inline void clear_has_skill_range();
  inline void set_has_skill_type();
  inline void clear_has_skill_type();
  inline void set_has_skill_name();
  inline void clear_has_skill_name();
  inline void set_has_skill_desc();
  inline void clear_has_skill_desc();
  inline void set_has_x1();
  inline void clear_has_x1();
  inline void set_has_x2();
  inline void clear_has_x2();
  inline void set_has_x3();
  inline void clear_has_x3();
  inline void set_has_x4();
  inline void clear_has_x4();
  inline void set_has_x5();
  inline void clear_has_x5();
  inline void set_has_x6();
  inline void clear_has_x6();
  inline void set_has_x7();
  inline void clear_has_x7();
  inline void set_has_x8();
  inline void clear_has_x8();
  inline void set_has_x9();
  inline void clear_has_x9();
  inline void set_has_x10();
  inline void clear_has_x10();
  inline void set_has_maxlevel();
  inline void clear_has_maxlevel();
  inline void set_has_cooltime();
  inline void clear_has_cooltime();
  inline void set_has_leader_type();
  inline void clear_has_leader_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 skillid_;
  ::google::protobuf::int32 skill_range_;
  ::std::string* skill_name_;
  ::google::protobuf::int32 skill_type_;
  float x1_;
  ::std::string* skill_desc_;
  float x2_;
  float x3_;
  float x4_;
  float x5_;
  float x6_;
  float x7_;
  float x8_;
  float x9_;
  float x10_;
  ::google::protobuf::int32 maxlevel_;
  ::google::protobuf::int32 cooltime_;
  ::google::protobuf::int32 leader_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(18 + 31) / 32];

  friend void  protobuf_AddDesc_table_5fconfig_2eproto();
  friend void protobuf_AssignDesc_table_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_table_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static PetSkill* default_instance_;
};
// -------------------------------------------------------------------

class PetSkillList : public ::google::protobuf::Message {
 public:
  PetSkillList();
  virtual ~PetSkillList();

  PetSkillList(const PetSkillList& from);

  inline PetSkillList& operator=(const PetSkillList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PetSkillList& default_instance();

  void Swap(PetSkillList* other);

  // implements Message ----------------------------------------------

  PetSkillList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PetSkillList& from);
  void MergeFrom(const PetSkillList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tableconfig.PetSkill record = 1;
  inline int record_size() const;
  inline void clear_record();
  static const int kRecordFieldNumber = 1;
  inline const ::tableconfig::PetSkill& record(int index) const;
  inline ::tableconfig::PetSkill* mutable_record(int index);
  inline ::tableconfig::PetSkill* add_record();
  inline const ::google::protobuf::RepeatedPtrField< ::tableconfig::PetSkill >&
      record() const;
  inline ::google::protobuf::RepeatedPtrField< ::tableconfig::PetSkill >*
      mutable_record();

  // @@protoc_insertion_point(class_scope:tableconfig.PetSkillList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::tableconfig::PetSkill > record_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_table_5fconfig_2eproto();
  friend void protobuf_AssignDesc_table_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_table_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static PetSkillList* default_instance_;
};
// -------------------------------------------------------------------

class HurtEffect : public ::google::protobuf::Message {
 public:
  HurtEffect();
  virtual ~HurtEffect();

  HurtEffect(const HurtEffect& from);

  inline HurtEffect& operator=(const HurtEffect& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HurtEffect& default_instance();

  void Swap(HurtEffect* other);

  // implements Message ----------------------------------------------

  HurtEffect* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HurtEffect& from);
  void MergeFrom(const HurtEffect& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 pos = 1;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 1;
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // optional uint32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional float value = 3;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 3;
  inline float value() const;
  inline void set_value(float value);

  // @@protoc_insertion_point(class_scope:tableconfig.HurtEffect)
 private:
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 pos_;
  ::google::protobuf::uint32 type_;
  float value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_table_5fconfig_2eproto();
  friend void protobuf_AssignDesc_table_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_table_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static HurtEffect* default_instance_;
};
// -------------------------------------------------------------------

class NormalGoodsRecord : public ::google::protobuf::Message {
 public:
  NormalGoodsRecord();
  virtual ~NormalGoodsRecord();

  NormalGoodsRecord(const NormalGoodsRecord& from);

  inline NormalGoodsRecord& operator=(const NormalGoodsRecord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NormalGoodsRecord& default_instance();

  void Swap(NormalGoodsRecord* other);

  // implements Message ----------------------------------------------

  NormalGoodsRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NormalGoodsRecord& from);
  void MergeFrom(const NormalGoodsRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 kind = 2;
  inline bool has_kind() const;
  inline void clear_kind();
  static const int kKindFieldNumber = 2;
  inline ::google::protobuf::uint32 kind() const;
  inline void set_kind(::google::protobuf::uint32 value);

  // optional uint32 kind_type = 3;
  inline bool has_kind_type() const;
  inline void clear_kind_type();
  static const int kKindTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 kind_type() const;
  inline void set_kind_type(::google::protobuf::uint32 value);

  // optional uint32 limit_number = 4;
  inline bool has_limit_number() const;
  inline void clear_limit_number();
  static const int kLimitNumberFieldNumber = 4;
  inline ::google::protobuf::uint32 limit_number() const;
  inline void set_limit_number(::google::protobuf::uint32 value);

  // optional string name = 5;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 5;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string desc = 6;
  inline bool has_desc() const;
  inline void clear_desc();
  static const int kDescFieldNumber = 6;
  inline const ::std::string& desc() const;
  inline void set_desc(const ::std::string& value);
  inline void set_desc(const char* value);
  inline void set_desc(const char* value, size_t size);
  inline ::std::string* mutable_desc();
  inline ::std::string* release_desc();
  inline void set_allocated_desc(::std::string* desc);

  // optional uint32 pet_level = 7;
  inline bool has_pet_level() const;
  inline void clear_pet_level();
  static const int kPetLevelFieldNumber = 7;
  inline ::google::protobuf::uint32 pet_level() const;
  inline void set_pet_level(::google::protobuf::uint32 value);

  // optional uint32 ping_zhi = 8;
  inline bool has_ping_zhi() const;
  inline void clear_ping_zhi();
  static const int kPingZhiFieldNumber = 8;
  inline ::google::protobuf::uint32 ping_zhi() const;
  inline void set_ping_zhi(::google::protobuf::uint32 value);

  // optional uint32 hole = 9;
  inline bool has_hole() const;
  inline void clear_hole();
  static const int kHoleFieldNumber = 9;
  inline ::google::protobuf::uint32 hole() const;
  inline void set_hole(::google::protobuf::uint32 value);

  // optional uint32 chip_number = 10;
  inline bool has_chip_number() const;
  inline void clear_chip_number();
  static const int kChipNumberFieldNumber = 10;
  inline ::google::protobuf::uint32 chip_number() const;
  inline void set_chip_number(::google::protobuf::uint32 value);

  // optional uint32 chip_id = 11;
  inline bool has_chip_id() const;
  inline void clear_chip_id();
  static const int kChipIdFieldNumber = 11;
  inline ::google::protobuf::uint32 chip_id() const;
  inline void set_chip_id(::google::protobuf::uint32 value);

  // optional uint32 gem_level = 12;
  inline bool has_gem_level() const;
  inline void clear_gem_level();
  static const int kGemLevelFieldNumber = 12;
  inline ::google::protobuf::uint32 gem_level() const;
  inline void set_gem_level(::google::protobuf::uint32 value);

  // optional uint32 gem_number = 13;
  inline bool has_gem_number() const;
  inline void clear_gem_number();
  static const int kGemNumberFieldNumber = 13;
  inline ::google::protobuf::uint32 gem_number() const;
  inline void set_gem_number(::google::protobuf::uint32 value);

  // optional uint32 gem_id = 14;
  inline bool has_gem_id() const;
  inline void clear_gem_id();
  static const int kGemIdFieldNumber = 14;
  inline ::google::protobuf::uint32 gem_id() const;
  inline void set_gem_id(::google::protobuf::uint32 value);

  // optional uint32 jinjie_number = 15;
  inline bool has_jinjie_number() const;
  inline void clear_jinjie_number();
  static const int kJinjieNumberFieldNumber = 15;
  inline ::google::protobuf::uint32 jinjie_number() const;
  inline void set_jinjie_number(::google::protobuf::uint32 value);

  // optional uint32 jinjie_mohe_id = 16;
  inline bool has_jinjie_mohe_id() const;
  inline void clear_jinjie_mohe_id();
  static const int kJinjieMoheIdFieldNumber = 16;
  inline ::google::protobuf::uint32 jinjie_mohe_id() const;
  inline void set_jinjie_mohe_id(::google::protobuf::uint32 value);

  // optional uint32 jinjie_id = 17;
  inline bool has_jinjie_id() const;
  inline void clear_jinjie_id();
  static const int kJinjieIdFieldNumber = 17;
  inline ::google::protobuf::uint32 jinjie_id() const;
  inline void set_jinjie_id(::google::protobuf::uint32 value);

  // repeated .tableconfig.HurtEffect effects = 18;
  inline int effects_size() const;
  inline void clear_effects();
  static const int kEffectsFieldNumber = 18;
  inline const ::tableconfig::HurtEffect& effects(int index) const;
  inline ::tableconfig::HurtEffect* mutable_effects(int index);
  inline ::tableconfig::HurtEffect* add_effects();
  inline const ::google::protobuf::RepeatedPtrField< ::tableconfig::HurtEffect >&
      effects() const;
  inline ::google::protobuf::RepeatedPtrField< ::tableconfig::HurtEffect >*
      mutable_effects();

  // optional bool can_put_on = 19;
  inline bool has_can_put_on() const;
  inline void clear_can_put_on();
  static const int kCanPutOnFieldNumber = 19;
  inline bool can_put_on() const;
  inline void set_can_put_on(bool value);

  // optional string produce_place = 20;
  inline bool has_produce_place() const;
  inline void clear_produce_place();
  static const int kProducePlaceFieldNumber = 20;
  inline const ::std::string& produce_place() const;
  inline void set_produce_place(const ::std::string& value);
  inline void set_produce_place(const char* value);
  inline void set_produce_place(const char* value, size_t size);
  inline ::std::string* mutable_produce_place();
  inline ::std::string* release_produce_place();
  inline void set_allocated_produce_place(::std::string* produce_place);

  // optional bool can_streng_material = 21;
  inline bool has_can_streng_material() const;
  inline void clear_can_streng_material();
  static const int kCanStrengMaterialFieldNumber = 21;
  inline bool can_streng_material() const;
  inline void set_can_streng_material(bool value);

  // @@protoc_insertion_point(class_scope:tableconfig.NormalGoodsRecord)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_kind();
  inline void clear_has_kind();
  inline void set_has_kind_type();
  inline void clear_has_kind_type();
  inline void set_has_limit_number();
  inline void clear_has_limit_number();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_desc();
  inline void clear_has_desc();
  inline void set_has_pet_level();
  inline void clear_has_pet_level();
  inline void set_has_ping_zhi();
  inline void clear_has_ping_zhi();
  inline void set_has_hole();
  inline void clear_has_hole();
  inline void set_has_chip_number();
  inline void clear_has_chip_number();
  inline void set_has_chip_id();
  inline void clear_has_chip_id();
  inline void set_has_gem_level();
  inline void clear_has_gem_level();
  inline void set_has_gem_number();
  inline void clear_has_gem_number();
  inline void set_has_gem_id();
  inline void clear_has_gem_id();
  inline void set_has_jinjie_number();
  inline void clear_has_jinjie_number();
  inline void set_has_jinjie_mohe_id();
  inline void clear_has_jinjie_mohe_id();
  inline void set_has_jinjie_id();
  inline void clear_has_jinjie_id();
  inline void set_has_can_put_on();
  inline void clear_has_can_put_on();
  inline void set_has_produce_place();
  inline void clear_has_produce_place();
  inline void set_has_can_streng_material();
  inline void clear_has_can_streng_material();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 kind_;
  ::google::protobuf::uint32 kind_type_;
  ::google::protobuf::uint32 limit_number_;
  ::std::string* name_;
  ::std::string* desc_;
  ::google::protobuf::uint32 pet_level_;
  ::google::protobuf::uint32 ping_zhi_;
  ::google::protobuf::uint32 hole_;
  ::google::protobuf::uint32 chip_number_;
  ::google::protobuf::uint32 chip_id_;
  ::google::protobuf::uint32 gem_level_;
  ::google::protobuf::uint32 gem_number_;
  ::google::protobuf::uint32 gem_id_;
  ::google::protobuf::uint32 jinjie_number_;
  ::google::protobuf::uint32 jinjie_mohe_id_;
  ::google::protobuf::RepeatedPtrField< ::tableconfig::HurtEffect > effects_;
  ::google::protobuf::uint32 jinjie_id_;
  bool can_put_on_;
  bool can_streng_material_;
  ::std::string* produce_place_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(21 + 31) / 32];

  friend void  protobuf_AddDesc_table_5fconfig_2eproto();
  friend void protobuf_AssignDesc_table_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_table_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static NormalGoodsRecord* default_instance_;
};
// -------------------------------------------------------------------

class NormalGoodsList : public ::google::protobuf::Message {
 public:
  NormalGoodsList();
  virtual ~NormalGoodsList();

  NormalGoodsList(const NormalGoodsList& from);

  inline NormalGoodsList& operator=(const NormalGoodsList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NormalGoodsList& default_instance();

  void Swap(NormalGoodsList* other);

  // implements Message ----------------------------------------------

  NormalGoodsList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NormalGoodsList& from);
  void MergeFrom(const NormalGoodsList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tableconfig.NormalGoodsRecord record = 1;
  inline int record_size() const;
  inline void clear_record();
  static const int kRecordFieldNumber = 1;
  inline const ::tableconfig::NormalGoodsRecord& record(int index) const;
  inline ::tableconfig::NormalGoodsRecord* mutable_record(int index);
  inline ::tableconfig::NormalGoodsRecord* add_record();
  inline const ::google::protobuf::RepeatedPtrField< ::tableconfig::NormalGoodsRecord >&
      record() const;
  inline ::google::protobuf::RepeatedPtrField< ::tableconfig::NormalGoodsRecord >*
      mutable_record();

  // @@protoc_insertion_point(class_scope:tableconfig.NormalGoodsList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::tableconfig::NormalGoodsRecord > record_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_table_5fconfig_2eproto();
  friend void protobuf_AssignDesc_table_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_table_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static NormalGoodsList* default_instance_;
};
// -------------------------------------------------------------------

class PetSkillPro : public ::google::protobuf::Message {
 public:
  PetSkillPro();
  virtual ~PetSkillPro();

  PetSkillPro(const PetSkillPro& from);

  inline PetSkillPro& operator=(const PetSkillPro& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PetSkillPro& default_instance();

  void Swap(PetSkillPro* other);

  // implements Message ----------------------------------------------

  PetSkillPro* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PetSkillPro& from);
  void MergeFrom(const PetSkillPro& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 skill_id = 1;
  inline bool has_skill_id() const;
  inline void clear_skill_id();
  static const int kSkillIdFieldNumber = 1;
  inline ::google::protobuf::int32 skill_id() const;
  inline void set_skill_id(::google::protobuf::int32 value);

  // optional int32 skill_level = 2;
  inline bool has_skill_level() const;
  inline void clear_skill_level();
  static const int kSkillLevelFieldNumber = 2;
  inline ::google::protobuf::int32 skill_level() const;
  inline void set_skill_level(::google::protobuf::int32 value);

  // optional float inc_hurt = 3;
  inline bool has_inc_hurt() const;
  inline void clear_inc_hurt();
  static const int kIncHurtFieldNumber = 3;
  inline float inc_hurt() const;
  inline void set_inc_hurt(float value);

  // optional float inc_hp = 4;
  inline bool has_inc_hp() const;
  inline void clear_inc_hp();
  static const int kIncHpFieldNumber = 4;
  inline float inc_hp() const;
  inline void set_inc_hp(float value);

  // optional float dec_hurt = 5;
  inline bool has_dec_hurt() const;
  inline void clear_dec_hurt();
  static const int kDecHurtFieldNumber = 5;
  inline float dec_hurt() const;
  inline void set_dec_hurt(float value);

  // optional float huifu = 6;
  inline bool has_huifu() const;
  inline void clear_huifu();
  static const int kHuifuFieldNumber = 6;
  inline float huifu() const;
  inline void set_huifu(float value);

  // optional float baoji_lv = 7;
  inline bool has_baoji_lv() const;
  inline void clear_baoji_lv();
  static const int kBaojiLvFieldNumber = 7;
  inline float baoji_lv() const;
  inline void set_baoji_lv(float value);

  // optional float baoji_hurt = 8;
  inline bool has_baoji_hurt() const;
  inline void clear_baoji_hurt();
  static const int kBaojiHurtFieldNumber = 8;
  inline float baoji_hurt() const;
  inline void set_baoji_hurt(float value);

  // optional float speed = 9;
  inline bool has_speed() const;
  inline void clear_speed();
  static const int kSpeedFieldNumber = 9;
  inline float speed() const;
  inline void set_speed(float value);

  // optional int32 zhan_dou_li = 10;
  inline bool has_zhan_dou_li() const;
  inline void clear_zhan_dou_li();
  static const int kZhanDouLiFieldNumber = 10;
  inline ::google::protobuf::int32 zhan_dou_li() const;
  inline void set_zhan_dou_li(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:tableconfig.PetSkillPro)
 private:
  inline void set_has_skill_id();
  inline void clear_has_skill_id();
  inline void set_has_skill_level();
  inline void clear_has_skill_level();
  inline void set_has_inc_hurt();
  inline void clear_has_inc_hurt();
  inline void set_has_inc_hp();
  inline void clear_has_inc_hp();
  inline void set_has_dec_hurt();
  inline void clear_has_dec_hurt();
  inline void set_has_huifu();
  inline void clear_has_huifu();
  inline void set_has_baoji_lv();
  inline void clear_has_baoji_lv();
  inline void set_has_baoji_hurt();
  inline void clear_has_baoji_hurt();
  inline void set_has_speed();
  inline void clear_has_speed();
  inline void set_has_zhan_dou_li();
  inline void clear_has_zhan_dou_li();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 skill_id_;
  ::google::protobuf::int32 skill_level_;
  float inc_hurt_;
  float inc_hp_;
  float dec_hurt_;
  float huifu_;
  float baoji_lv_;
  float baoji_hurt_;
  float speed_;
  ::google::protobuf::int32 zhan_dou_li_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_table_5fconfig_2eproto();
  friend void protobuf_AssignDesc_table_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_table_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static PetSkillPro* default_instance_;
};
// -------------------------------------------------------------------

class PetSkillProList : public ::google::protobuf::Message {
 public:
  PetSkillProList();
  virtual ~PetSkillProList();

  PetSkillProList(const PetSkillProList& from);

  inline PetSkillProList& operator=(const PetSkillProList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PetSkillProList& default_instance();

  void Swap(PetSkillProList* other);

  // implements Message ----------------------------------------------

  PetSkillProList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PetSkillProList& from);
  void MergeFrom(const PetSkillProList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tableconfig.PetSkillPro record = 1;
  inline int record_size() const;
  inline void clear_record();
  static const int kRecordFieldNumber = 1;
  inline const ::tableconfig::PetSkillPro& record(int index) const;
  inline ::tableconfig::PetSkillPro* mutable_record(int index);
  inline ::tableconfig::PetSkillPro* add_record();
  inline const ::google::protobuf::RepeatedPtrField< ::tableconfig::PetSkillPro >&
      record() const;
  inline ::google::protobuf::RepeatedPtrField< ::tableconfig::PetSkillPro >*
      mutable_record();

  // @@protoc_insertion_point(class_scope:tableconfig.PetSkillProList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::tableconfig::PetSkillPro > record_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_table_5fconfig_2eproto();
  friend void protobuf_AssignDesc_table_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_table_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static PetSkillProList* default_instance_;
};
// -------------------------------------------------------------------

class PetZhaoHuan : public ::google::protobuf::Message {
 public:
  PetZhaoHuan();
  virtual ~PetZhaoHuan();

  PetZhaoHuan(const PetZhaoHuan& from);

  inline PetZhaoHuan& operator=(const PetZhaoHuan& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PetZhaoHuan& default_instance();

  void Swap(PetZhaoHuan* other);

  // implements Message ----------------------------------------------

  PetZhaoHuan* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PetZhaoHuan& from);
  void MergeFrom(const PetZhaoHuan& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 level = 1;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 1;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // repeated int32 rare_val = 2;
  inline int rare_val_size() const;
  inline void clear_rare_val();
  static const int kRareValFieldNumber = 2;
  inline ::google::protobuf::int32 rare_val(int index) const;
  inline void set_rare_val(int index, ::google::protobuf::int32 value);
  inline void add_rare_val(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      rare_val() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_rare_val();

  // @@protoc_insertion_point(class_scope:tableconfig.PetZhaoHuan)
 private:
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > rare_val_;
  ::google::protobuf::int32 level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_table_5fconfig_2eproto();
  friend void protobuf_AssignDesc_table_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_table_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static PetZhaoHuan* default_instance_;
};
// -------------------------------------------------------------------

class PetZhaoHuanList : public ::google::protobuf::Message {
 public:
  PetZhaoHuanList();
  virtual ~PetZhaoHuanList();

  PetZhaoHuanList(const PetZhaoHuanList& from);

  inline PetZhaoHuanList& operator=(const PetZhaoHuanList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PetZhaoHuanList& default_instance();

  void Swap(PetZhaoHuanList* other);

  // implements Message ----------------------------------------------

  PetZhaoHuanList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PetZhaoHuanList& from);
  void MergeFrom(const PetZhaoHuanList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tableconfig.PetZhaoHuan record = 1;
  inline int record_size() const;
  inline void clear_record();
  static const int kRecordFieldNumber = 1;
  inline const ::tableconfig::PetZhaoHuan& record(int index) const;
  inline ::tableconfig::PetZhaoHuan* mutable_record(int index);
  inline ::tableconfig::PetZhaoHuan* add_record();
  inline const ::google::protobuf::RepeatedPtrField< ::tableconfig::PetZhaoHuan >&
      record() const;
  inline ::google::protobuf::RepeatedPtrField< ::tableconfig::PetZhaoHuan >*
      mutable_record();

  // @@protoc_insertion_point(class_scope:tableconfig.PetZhaoHuanList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::tableconfig::PetZhaoHuan > record_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_table_5fconfig_2eproto();
  friend void protobuf_AssignDesc_table_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_table_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static PetZhaoHuanList* default_instance_;
};
// ===================================================================


// ===================================================================

// PlayerLevelRecord

// optional int32 level = 1;
inline bool PlayerLevelRecord::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerLevelRecord::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerLevelRecord::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerLevelRecord::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 PlayerLevelRecord::level() const {
  return level_;
}
inline void PlayerLevelRecord::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 exp = 2;
inline bool PlayerLevelRecord::has_exp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerLevelRecord::set_has_exp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerLevelRecord::clear_has_exp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerLevelRecord::clear_exp() {
  exp_ = 0u;
  clear_has_exp();
}
inline ::google::protobuf::uint32 PlayerLevelRecord::exp() const {
  return exp_;
}
inline void PlayerLevelRecord::set_exp(::google::protobuf::uint32 value) {
  set_has_exp();
  exp_ = value;
}

// optional uint32 mp = 3;
inline bool PlayerLevelRecord::has_mp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerLevelRecord::set_has_mp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerLevelRecord::clear_has_mp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerLevelRecord::clear_mp() {
  mp_ = 0u;
  clear_has_mp();
}
inline ::google::protobuf::uint32 PlayerLevelRecord::mp() const {
  return mp_;
}
inline void PlayerLevelRecord::set_mp(::google::protobuf::uint32 value) {
  set_has_mp();
  mp_ = value;
}

// optional uint32 hp = 4;
inline bool PlayerLevelRecord::has_hp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlayerLevelRecord::set_has_hp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlayerLevelRecord::clear_has_hp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlayerLevelRecord::clear_hp() {
  hp_ = 0u;
  clear_has_hp();
}
inline ::google::protobuf::uint32 PlayerLevelRecord::hp() const {
  return hp_;
}
inline void PlayerLevelRecord::set_hp(::google::protobuf::uint32 value) {
  set_has_hp();
  hp_ = value;
}

// optional uint32 spirit = 5;
inline bool PlayerLevelRecord::has_spirit() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlayerLevelRecord::set_has_spirit() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PlayerLevelRecord::clear_has_spirit() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PlayerLevelRecord::clear_spirit() {
  spirit_ = 0u;
  clear_has_spirit();
}
inline ::google::protobuf::uint32 PlayerLevelRecord::spirit() const {
  return spirit_;
}
inline void PlayerLevelRecord::set_spirit(::google::protobuf::uint32 value) {
  set_has_spirit();
  spirit_ = value;
}

// optional uint32 action_count = 6;
inline bool PlayerLevelRecord::has_action_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PlayerLevelRecord::set_has_action_count() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PlayerLevelRecord::clear_has_action_count() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PlayerLevelRecord::clear_action_count() {
  action_count_ = 0u;
  clear_has_action_count();
}
inline ::google::protobuf::uint32 PlayerLevelRecord::action_count() const {
  return action_count_;
}
inline void PlayerLevelRecord::set_action_count(::google::protobuf::uint32 value) {
  set_has_action_count();
  action_count_ = value;
}

// optional uint32 friend_count = 7;
inline bool PlayerLevelRecord::has_friend_count() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PlayerLevelRecord::set_has_friend_count() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PlayerLevelRecord::clear_has_friend_count() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PlayerLevelRecord::clear_friend_count() {
  friend_count_ = 0u;
  clear_has_friend_count();
}
inline ::google::protobuf::uint32 PlayerLevelRecord::friend_count() const {
  return friend_count_;
}
inline void PlayerLevelRecord::set_friend_count(::google::protobuf::uint32 value) {
  set_has_friend_count();
  friend_count_ = value;
}

// -------------------------------------------------------------------

// SPlayerLevelList

// repeated .tableconfig.PlayerLevelRecord record = 1;
inline int SPlayerLevelList::record_size() const {
  return record_.size();
}
inline void SPlayerLevelList::clear_record() {
  record_.Clear();
}
inline const ::tableconfig::PlayerLevelRecord& SPlayerLevelList::record(int index) const {
  return record_.Get(index);
}
inline ::tableconfig::PlayerLevelRecord* SPlayerLevelList::mutable_record(int index) {
  return record_.Mutable(index);
}
inline ::tableconfig::PlayerLevelRecord* SPlayerLevelList::add_record() {
  return record_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tableconfig::PlayerLevelRecord >&
SPlayerLevelList::record() const {
  return record_;
}
inline ::google::protobuf::RepeatedPtrField< ::tableconfig::PlayerLevelRecord >*
SPlayerLevelList::mutable_record() {
  return &record_;
}

// -------------------------------------------------------------------

// WillLearnSkill

// optional uint32 skill_id = 1;
inline bool WillLearnSkill::has_skill_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WillLearnSkill::set_has_skill_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WillLearnSkill::clear_has_skill_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WillLearnSkill::clear_skill_id() {
  skill_id_ = 0u;
  clear_has_skill_id();
}
inline ::google::protobuf::uint32 WillLearnSkill::skill_id() const {
  return skill_id_;
}
inline void WillLearnSkill::set_skill_id(::google::protobuf::uint32 value) {
  set_has_skill_id();
  skill_id_ = value;
}

// optional .tableconfig.LEARN_KIND prt_id = 2;
inline bool WillLearnSkill::has_prt_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WillLearnSkill::set_has_prt_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WillLearnSkill::clear_has_prt_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WillLearnSkill::clear_prt_id() {
  prt_id_ = 0;
  clear_has_prt_id();
}
inline ::tableconfig::LEARN_KIND WillLearnSkill::prt_id() const {
  return static_cast< ::tableconfig::LEARN_KIND >(prt_id_);
}
inline void WillLearnSkill::set_prt_id(::tableconfig::LEARN_KIND value) {
  assert(::tableconfig::LEARN_KIND_IsValid(value));
  set_has_prt_id();
  prt_id_ = value;
}

// optional uint32 value = 3;
inline bool WillLearnSkill::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WillLearnSkill::set_has_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WillLearnSkill::clear_has_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WillLearnSkill::clear_value() {
  value_ = 0u;
  clear_has_value();
}
inline ::google::protobuf::uint32 WillLearnSkill::value() const {
  return value_;
}
inline void WillLearnSkill::set_value(::google::protobuf::uint32 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// PetRecordCfg

// optional int32 kind = 1;
inline bool PetRecordCfg::has_kind() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PetRecordCfg::set_has_kind() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PetRecordCfg::clear_has_kind() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PetRecordCfg::clear_kind() {
  kind_ = 0;
  clear_has_kind();
}
inline ::google::protobuf::int32 PetRecordCfg::kind() const {
  return kind_;
}
inline void PetRecordCfg::set_kind(::google::protobuf::int32 value) {
  set_has_kind();
  kind_ = value;
}

// optional int32 id = 2;
inline bool PetRecordCfg::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PetRecordCfg::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PetRecordCfg::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PetRecordCfg::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 PetRecordCfg::id() const {
  return id_;
}
inline void PetRecordCfg::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional string name = 3;
inline bool PetRecordCfg::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PetRecordCfg::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PetRecordCfg::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PetRecordCfg::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PetRecordCfg::name() const {
  return *name_;
}
inline void PetRecordCfg::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PetRecordCfg::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PetRecordCfg::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PetRecordCfg::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* PetRecordCfg::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PetRecordCfg::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 limit_number = 4;
inline bool PetRecordCfg::has_limit_number() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PetRecordCfg::set_has_limit_number() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PetRecordCfg::clear_has_limit_number() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PetRecordCfg::clear_limit_number() {
  limit_number_ = 0;
  clear_has_limit_number();
}
inline ::google::protobuf::int32 PetRecordCfg::limit_number() const {
  return limit_number_;
}
inline void PetRecordCfg::set_limit_number(::google::protobuf::int32 value) {
  set_has_limit_number();
  limit_number_ = value;
}

// optional string desc = 5;
inline bool PetRecordCfg::has_desc() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PetRecordCfg::set_has_desc() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PetRecordCfg::clear_has_desc() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PetRecordCfg::clear_desc() {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    desc_->clear();
  }
  clear_has_desc();
}
inline const ::std::string& PetRecordCfg::desc() const {
  return *desc_;
}
inline void PetRecordCfg::set_desc(const ::std::string& value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void PetRecordCfg::set_desc(const char* value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void PetRecordCfg::set_desc(const char* value, size_t size) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PetRecordCfg::mutable_desc() {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  return desc_;
}
inline ::std::string* PetRecordCfg::release_desc() {
  clear_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = desc_;
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PetRecordCfg::set_allocated_desc(::std::string* desc) {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (desc) {
    set_has_desc();
    desc_ = desc;
  } else {
    clear_has_desc();
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 pet_kind = 6;
inline bool PetRecordCfg::has_pet_kind() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PetRecordCfg::set_has_pet_kind() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PetRecordCfg::clear_has_pet_kind() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PetRecordCfg::clear_pet_kind() {
  pet_kind_ = 0;
  clear_has_pet_kind();
}
inline ::google::protobuf::int32 PetRecordCfg::pet_kind() const {
  return pet_kind_;
}
inline void PetRecordCfg::set_pet_kind(::google::protobuf::int32 value) {
  set_has_pet_kind();
  pet_kind_ = value;
}

// optional int32 rare = 7;
inline bool PetRecordCfg::has_rare() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PetRecordCfg::set_has_rare() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PetRecordCfg::clear_has_rare() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PetRecordCfg::clear_rare() {
  rare_ = 0;
  clear_has_rare();
}
inline ::google::protobuf::int32 PetRecordCfg::rare() const {
  return rare_;
}
inline void PetRecordCfg::set_rare(::google::protobuf::int32 value) {
  set_has_rare();
  rare_ = value;
}

// optional uint32 recover = 8;
inline bool PetRecordCfg::has_recover() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PetRecordCfg::set_has_recover() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PetRecordCfg::clear_has_recover() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PetRecordCfg::clear_recover() {
  recover_ = 0u;
  clear_has_recover();
}
inline ::google::protobuf::uint32 PetRecordCfg::recover() const {
  return recover_;
}
inline void PetRecordCfg::set_recover(::google::protobuf::uint32 value) {
  set_has_recover();
  recover_ = value;
}

// optional uint32 head_pic_id = 9;
inline bool PetRecordCfg::has_head_pic_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PetRecordCfg::set_has_head_pic_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PetRecordCfg::clear_has_head_pic_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PetRecordCfg::clear_head_pic_id() {
  head_pic_id_ = 0u;
  clear_has_head_pic_id();
}
inline ::google::protobuf::uint32 PetRecordCfg::head_pic_id() const {
  return head_pic_id_;
}
inline void PetRecordCfg::set_head_pic_id(::google::protobuf::uint32 value) {
  set_has_head_pic_id();
  head_pic_id_ = value;
}

// optional float dps = 10;
inline bool PetRecordCfg::has_dps() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PetRecordCfg::set_has_dps() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PetRecordCfg::clear_has_dps() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PetRecordCfg::clear_dps() {
  dps_ = 0;
  clear_has_dps();
}
inline float PetRecordCfg::dps() const {
  return dps_;
}
inline void PetRecordCfg::set_dps(float value) {
  set_has_dps();
  dps_ = value;
}

// optional uint32 hp = 11;
inline bool PetRecordCfg::has_hp() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PetRecordCfg::set_has_hp() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PetRecordCfg::clear_has_hp() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PetRecordCfg::clear_hp() {
  hp_ = 0u;
  clear_has_hp();
}
inline ::google::protobuf::uint32 PetRecordCfg::hp() const {
  return hp_;
}
inline void PetRecordCfg::set_hp(::google::protobuf::uint32 value) {
  set_has_hp();
  hp_ = value;
}

// optional uint32 level = 12;
inline bool PetRecordCfg::has_level() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PetRecordCfg::set_has_level() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PetRecordCfg::clear_has_level() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PetRecordCfg::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 PetRecordCfg::level() const {
  return level_;
}
inline void PetRecordCfg::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 tongshi_exp = 13;
inline bool PetRecordCfg::has_tongshi_exp() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PetRecordCfg::set_has_tongshi_exp() {
  _has_bits_[0] |= 0x00001000u;
}
inline void PetRecordCfg::clear_has_tongshi_exp() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void PetRecordCfg::clear_tongshi_exp() {
  tongshi_exp_ = 0u;
  clear_has_tongshi_exp();
}
inline ::google::protobuf::uint32 PetRecordCfg::tongshi_exp() const {
  return tongshi_exp_;
}
inline void PetRecordCfg::set_tongshi_exp(::google::protobuf::uint32 value) {
  set_has_tongshi_exp();
  tongshi_exp_ = value;
}

// optional uint32 action_skill = 14;
inline bool PetRecordCfg::has_action_skill() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void PetRecordCfg::set_has_action_skill() {
  _has_bits_[0] |= 0x00002000u;
}
inline void PetRecordCfg::clear_has_action_skill() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void PetRecordCfg::clear_action_skill() {
  action_skill_ = 0u;
  clear_has_action_skill();
}
inline ::google::protobuf::uint32 PetRecordCfg::action_skill() const {
  return action_skill_;
}
inline void PetRecordCfg::set_action_skill(::google::protobuf::uint32 value) {
  set_has_action_skill();
  action_skill_ = value;
}

// optional uint32 leader_skill = 15;
inline bool PetRecordCfg::has_leader_skill() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void PetRecordCfg::set_has_leader_skill() {
  _has_bits_[0] |= 0x00004000u;
}
inline void PetRecordCfg::clear_has_leader_skill() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void PetRecordCfg::clear_leader_skill() {
  leader_skill_ = 0u;
  clear_has_leader_skill();
}
inline ::google::protobuf::uint32 PetRecordCfg::leader_skill() const {
  return leader_skill_;
}
inline void PetRecordCfg::set_leader_skill(::google::protobuf::uint32 value) {
  set_has_leader_skill();
  leader_skill_ = value;
}

// repeated .tableconfig.WillLearnSkill skills = 16;
inline int PetRecordCfg::skills_size() const {
  return skills_.size();
}
inline void PetRecordCfg::clear_skills() {
  skills_.Clear();
}
inline const ::tableconfig::WillLearnSkill& PetRecordCfg::skills(int index) const {
  return skills_.Get(index);
}
inline ::tableconfig::WillLearnSkill* PetRecordCfg::mutable_skills(int index) {
  return skills_.Mutable(index);
}
inline ::tableconfig::WillLearnSkill* PetRecordCfg::add_skills() {
  return skills_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tableconfig::WillLearnSkill >&
PetRecordCfg::skills() const {
  return skills_;
}
inline ::google::protobuf::RepeatedPtrField< ::tableconfig::WillLearnSkill >*
PetRecordCfg::mutable_skills() {
  return &skills_;
}

// optional int32 bind = 17;
inline bool PetRecordCfg::has_bind() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void PetRecordCfg::set_has_bind() {
  _has_bits_[0] |= 0x00010000u;
}
inline void PetRecordCfg::clear_has_bind() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void PetRecordCfg::clear_bind() {
  bind_ = 0;
  clear_has_bind();
}
inline ::google::protobuf::int32 PetRecordCfg::bind() const {
  return bind_;
}
inline void PetRecordCfg::set_bind(::google::protobuf::int32 value) {
  set_has_bind();
  bind_ = value;
}

// optional uint32 speed = 18;
inline bool PetRecordCfg::has_speed() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void PetRecordCfg::set_has_speed() {
  _has_bits_[0] |= 0x00020000u;
}
inline void PetRecordCfg::clear_has_speed() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void PetRecordCfg::clear_speed() {
  speed_ = 0u;
  clear_has_speed();
}
inline ::google::protobuf::uint32 PetRecordCfg::speed() const {
  return speed_;
}
inline void PetRecordCfg::set_speed(::google::protobuf::uint32 value) {
  set_has_speed();
  speed_ = value;
}

// optional uint32 spirit = 19;
inline bool PetRecordCfg::has_spirit() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void PetRecordCfg::set_has_spirit() {
  _has_bits_[0] |= 0x00040000u;
}
inline void PetRecordCfg::clear_has_spirit() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void PetRecordCfg::clear_spirit() {
  spirit_ = 0u;
  clear_has_spirit();
}
inline ::google::protobuf::uint32 PetRecordCfg::spirit() const {
  return spirit_;
}
inline void PetRecordCfg::set_spirit(::google::protobuf::uint32 value) {
  set_has_spirit();
  spirit_ = value;
}

// optional uint32 mp = 20;
inline bool PetRecordCfg::has_mp() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void PetRecordCfg::set_has_mp() {
  _has_bits_[0] |= 0x00080000u;
}
inline void PetRecordCfg::clear_has_mp() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void PetRecordCfg::clear_mp() {
  mp_ = 0u;
  clear_has_mp();
}
inline ::google::protobuf::uint32 PetRecordCfg::mp() const {
  return mp_;
}
inline void PetRecordCfg::set_mp(::google::protobuf::uint32 value) {
  set_has_mp();
  mp_ = value;
}

// optional uint32 max_level = 21;
inline bool PetRecordCfg::has_max_level() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void PetRecordCfg::set_has_max_level() {
  _has_bits_[0] |= 0x00100000u;
}
inline void PetRecordCfg::clear_has_max_level() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void PetRecordCfg::clear_max_level() {
  max_level_ = 0u;
  clear_has_max_level();
}
inline ::google::protobuf::uint32 PetRecordCfg::max_level() const {
  return max_level_;
}
inline void PetRecordCfg::set_max_level(::google::protobuf::uint32 value) {
  set_has_max_level();
  max_level_ = value;
}

// optional uint32 zhiye = 22;
inline bool PetRecordCfg::has_zhiye() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void PetRecordCfg::set_has_zhiye() {
  _has_bits_[0] |= 0x00200000u;
}
inline void PetRecordCfg::clear_has_zhiye() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void PetRecordCfg::clear_zhiye() {
  zhiye_ = 0u;
  clear_has_zhiye();
}
inline ::google::protobuf::uint32 PetRecordCfg::zhiye() const {
  return zhiye_;
}
inline void PetRecordCfg::set_zhiye(::google::protobuf::uint32 value) {
  set_has_zhiye();
  zhiye_ = value;
}

// optional uint32 evolve_id = 23;
inline bool PetRecordCfg::has_evolve_id() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void PetRecordCfg::set_has_evolve_id() {
  _has_bits_[0] |= 0x00400000u;
}
inline void PetRecordCfg::clear_has_evolve_id() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void PetRecordCfg::clear_evolve_id() {
  evolve_id_ = 0u;
  clear_has_evolve_id();
}
inline ::google::protobuf::uint32 PetRecordCfg::evolve_id() const {
  return evolve_id_;
}
inline void PetRecordCfg::set_evolve_id(::google::protobuf::uint32 value) {
  set_has_evolve_id();
  evolve_id_ = value;
}

// repeated uint32 evolve_conditions = 24;
inline int PetRecordCfg::evolve_conditions_size() const {
  return evolve_conditions_.size();
}
inline void PetRecordCfg::clear_evolve_conditions() {
  evolve_conditions_.Clear();
}
inline ::google::protobuf::uint32 PetRecordCfg::evolve_conditions(int index) const {
  return evolve_conditions_.Get(index);
}
inline void PetRecordCfg::set_evolve_conditions(int index, ::google::protobuf::uint32 value) {
  evolve_conditions_.Set(index, value);
}
inline void PetRecordCfg::add_evolve_conditions(::google::protobuf::uint32 value) {
  evolve_conditions_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
PetRecordCfg::evolve_conditions() const {
  return evolve_conditions_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
PetRecordCfg::mutable_evolve_conditions() {
  return &evolve_conditions_;
}

// -------------------------------------------------------------------

// PetListCfg

// repeated .tableconfig.PetRecordCfg record = 1;
inline int PetListCfg::record_size() const {
  return record_.size();
}
inline void PetListCfg::clear_record() {
  record_.Clear();
}
inline const ::tableconfig::PetRecordCfg& PetListCfg::record(int index) const {
  return record_.Get(index);
}
inline ::tableconfig::PetRecordCfg* PetListCfg::mutable_record(int index) {
  return record_.Mutable(index);
}
inline ::tableconfig::PetRecordCfg* PetListCfg::add_record() {
  return record_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tableconfig::PetRecordCfg >&
PetListCfg::record() const {
  return record_;
}
inline ::google::protobuf::RepeatedPtrField< ::tableconfig::PetRecordCfg >*
PetListCfg::mutable_record() {
  return &record_;
}

// -------------------------------------------------------------------

// PlayerPetNumber

// optional int32 level = 1;
inline bool PlayerPetNumber::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerPetNumber::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerPetNumber::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerPetNumber::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 PlayerPetNumber::level() const {
  return level_;
}
inline void PlayerPetNumber::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 number = 2;
inline bool PlayerPetNumber::has_number() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerPetNumber::set_has_number() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerPetNumber::clear_has_number() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerPetNumber::clear_number() {
  number_ = 0u;
  clear_has_number();
}
inline ::google::protobuf::uint32 PlayerPetNumber::number() const {
  return number_;
}
inline void PlayerPetNumber::set_number(::google::protobuf::uint32 value) {
  set_has_number();
  number_ = value;
}

// -------------------------------------------------------------------

// SPlayerPetNumberList

// repeated .tableconfig.PlayerPetNumber record = 1;
inline int SPlayerPetNumberList::record_size() const {
  return record_.size();
}
inline void SPlayerPetNumberList::clear_record() {
  record_.Clear();
}
inline const ::tableconfig::PlayerPetNumber& SPlayerPetNumberList::record(int index) const {
  return record_.Get(index);
}
inline ::tableconfig::PlayerPetNumber* SPlayerPetNumberList::mutable_record(int index) {
  return record_.Mutable(index);
}
inline ::tableconfig::PlayerPetNumber* SPlayerPetNumberList::add_record() {
  return record_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tableconfig::PlayerPetNumber >&
SPlayerPetNumberList::record() const {
  return record_;
}
inline ::google::protobuf::RepeatedPtrField< ::tableconfig::PlayerPetNumber >*
SPlayerPetNumberList::mutable_record() {
  return &record_;
}

// -------------------------------------------------------------------

// ZhiYeIDNameRecord

// optional int32 id = 1;
inline bool ZhiYeIDNameRecord::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ZhiYeIDNameRecord::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ZhiYeIDNameRecord::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ZhiYeIDNameRecord::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ZhiYeIDNameRecord::id() const {
  return id_;
}
inline void ZhiYeIDNameRecord::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional string name = 2;
inline bool ZhiYeIDNameRecord::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ZhiYeIDNameRecord::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ZhiYeIDNameRecord::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ZhiYeIDNameRecord::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ZhiYeIDNameRecord::name() const {
  return *name_;
}
inline void ZhiYeIDNameRecord::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ZhiYeIDNameRecord::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ZhiYeIDNameRecord::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ZhiYeIDNameRecord::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ZhiYeIDNameRecord::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ZhiYeIDNameRecord::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ZhiYeIDNameList

// repeated .tableconfig.ZhiYeIDNameRecord record = 1;
inline int ZhiYeIDNameList::record_size() const {
  return record_.size();
}
inline void ZhiYeIDNameList::clear_record() {
  record_.Clear();
}
inline const ::tableconfig::ZhiYeIDNameRecord& ZhiYeIDNameList::record(int index) const {
  return record_.Get(index);
}
inline ::tableconfig::ZhiYeIDNameRecord* ZhiYeIDNameList::mutable_record(int index) {
  return record_.Mutable(index);
}
inline ::tableconfig::ZhiYeIDNameRecord* ZhiYeIDNameList::add_record() {
  return record_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tableconfig::ZhiYeIDNameRecord >&
ZhiYeIDNameList::record() const {
  return record_;
}
inline ::google::protobuf::RepeatedPtrField< ::tableconfig::ZhiYeIDNameRecord >*
ZhiYeIDNameList::mutable_record() {
  return &record_;
}

// -------------------------------------------------------------------

// PetClassIDName

// optional int32 id = 1;
inline bool PetClassIDName::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PetClassIDName::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PetClassIDName::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PetClassIDName::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 PetClassIDName::id() const {
  return id_;
}
inline void PetClassIDName::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional string name = 2;
inline bool PetClassIDName::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PetClassIDName::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PetClassIDName::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PetClassIDName::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PetClassIDName::name() const {
  return *name_;
}
inline void PetClassIDName::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PetClassIDName::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PetClassIDName::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PetClassIDName::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* PetClassIDName::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PetClassIDName::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// PetClassIDNameList

// repeated .tableconfig.PetClassIDName record = 1;
inline int PetClassIDNameList::record_size() const {
  return record_.size();
}
inline void PetClassIDNameList::clear_record() {
  record_.Clear();
}
inline const ::tableconfig::PetClassIDName& PetClassIDNameList::record(int index) const {
  return record_.Get(index);
}
inline ::tableconfig::PetClassIDName* PetClassIDNameList::mutable_record(int index) {
  return record_.Mutable(index);
}
inline ::tableconfig::PetClassIDName* PetClassIDNameList::add_record() {
  return record_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tableconfig::PetClassIDName >&
PetClassIDNameList::record() const {
  return record_;
}
inline ::google::protobuf::RepeatedPtrField< ::tableconfig::PetClassIDName >*
PetClassIDNameList::mutable_record() {
  return &record_;
}

// -------------------------------------------------------------------

// PetSkill

// optional int32 skillid = 1;
inline bool PetSkill::has_skillid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PetSkill::set_has_skillid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PetSkill::clear_has_skillid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PetSkill::clear_skillid() {
  skillid_ = 0;
  clear_has_skillid();
}
inline ::google::protobuf::int32 PetSkill::skillid() const {
  return skillid_;
}
inline void PetSkill::set_skillid(::google::protobuf::int32 value) {
  set_has_skillid();
  skillid_ = value;
}

// optional int32 skill_range = 2;
inline bool PetSkill::has_skill_range() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PetSkill::set_has_skill_range() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PetSkill::clear_has_skill_range() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PetSkill::clear_skill_range() {
  skill_range_ = 0;
  clear_has_skill_range();
}
inline ::google::protobuf::int32 PetSkill::skill_range() const {
  return skill_range_;
}
inline void PetSkill::set_skill_range(::google::protobuf::int32 value) {
  set_has_skill_range();
  skill_range_ = value;
}

// optional int32 skill_type = 3;
inline bool PetSkill::has_skill_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PetSkill::set_has_skill_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PetSkill::clear_has_skill_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PetSkill::clear_skill_type() {
  skill_type_ = 0;
  clear_has_skill_type();
}
inline ::google::protobuf::int32 PetSkill::skill_type() const {
  return skill_type_;
}
inline void PetSkill::set_skill_type(::google::protobuf::int32 value) {
  set_has_skill_type();
  skill_type_ = value;
}

// optional string skill_name = 4;
inline bool PetSkill::has_skill_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PetSkill::set_has_skill_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PetSkill::clear_has_skill_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PetSkill::clear_skill_name() {
  if (skill_name_ != &::google::protobuf::internal::kEmptyString) {
    skill_name_->clear();
  }
  clear_has_skill_name();
}
inline const ::std::string& PetSkill::skill_name() const {
  return *skill_name_;
}
inline void PetSkill::set_skill_name(const ::std::string& value) {
  set_has_skill_name();
  if (skill_name_ == &::google::protobuf::internal::kEmptyString) {
    skill_name_ = new ::std::string;
  }
  skill_name_->assign(value);
}
inline void PetSkill::set_skill_name(const char* value) {
  set_has_skill_name();
  if (skill_name_ == &::google::protobuf::internal::kEmptyString) {
    skill_name_ = new ::std::string;
  }
  skill_name_->assign(value);
}
inline void PetSkill::set_skill_name(const char* value, size_t size) {
  set_has_skill_name();
  if (skill_name_ == &::google::protobuf::internal::kEmptyString) {
    skill_name_ = new ::std::string;
  }
  skill_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PetSkill::mutable_skill_name() {
  set_has_skill_name();
  if (skill_name_ == &::google::protobuf::internal::kEmptyString) {
    skill_name_ = new ::std::string;
  }
  return skill_name_;
}
inline ::std::string* PetSkill::release_skill_name() {
  clear_has_skill_name();
  if (skill_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = skill_name_;
    skill_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PetSkill::set_allocated_skill_name(::std::string* skill_name) {
  if (skill_name_ != &::google::protobuf::internal::kEmptyString) {
    delete skill_name_;
  }
  if (skill_name) {
    set_has_skill_name();
    skill_name_ = skill_name;
  } else {
    clear_has_skill_name();
    skill_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string skill_desc = 5;
inline bool PetSkill::has_skill_desc() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PetSkill::set_has_skill_desc() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PetSkill::clear_has_skill_desc() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PetSkill::clear_skill_desc() {
  if (skill_desc_ != &::google::protobuf::internal::kEmptyString) {
    skill_desc_->clear();
  }
  clear_has_skill_desc();
}
inline const ::std::string& PetSkill::skill_desc() const {
  return *skill_desc_;
}
inline void PetSkill::set_skill_desc(const ::std::string& value) {
  set_has_skill_desc();
  if (skill_desc_ == &::google::protobuf::internal::kEmptyString) {
    skill_desc_ = new ::std::string;
  }
  skill_desc_->assign(value);
}
inline void PetSkill::set_skill_desc(const char* value) {
  set_has_skill_desc();
  if (skill_desc_ == &::google::protobuf::internal::kEmptyString) {
    skill_desc_ = new ::std::string;
  }
  skill_desc_->assign(value);
}
inline void PetSkill::set_skill_desc(const char* value, size_t size) {
  set_has_skill_desc();
  if (skill_desc_ == &::google::protobuf::internal::kEmptyString) {
    skill_desc_ = new ::std::string;
  }
  skill_desc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PetSkill::mutable_skill_desc() {
  set_has_skill_desc();
  if (skill_desc_ == &::google::protobuf::internal::kEmptyString) {
    skill_desc_ = new ::std::string;
  }
  return skill_desc_;
}
inline ::std::string* PetSkill::release_skill_desc() {
  clear_has_skill_desc();
  if (skill_desc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = skill_desc_;
    skill_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PetSkill::set_allocated_skill_desc(::std::string* skill_desc) {
  if (skill_desc_ != &::google::protobuf::internal::kEmptyString) {
    delete skill_desc_;
  }
  if (skill_desc) {
    set_has_skill_desc();
    skill_desc_ = skill_desc;
  } else {
    clear_has_skill_desc();
    skill_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional float x1 = 6;
inline bool PetSkill::has_x1() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PetSkill::set_has_x1() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PetSkill::clear_has_x1() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PetSkill::clear_x1() {
  x1_ = 0;
  clear_has_x1();
}
inline float PetSkill::x1() const {
  return x1_;
}
inline void PetSkill::set_x1(float value) {
  set_has_x1();
  x1_ = value;
}

// optional float x2 = 7;
inline bool PetSkill::has_x2() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PetSkill::set_has_x2() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PetSkill::clear_has_x2() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PetSkill::clear_x2() {
  x2_ = 0;
  clear_has_x2();
}
inline float PetSkill::x2() const {
  return x2_;
}
inline void PetSkill::set_x2(float value) {
  set_has_x2();
  x2_ = value;
}

// optional float x3 = 8;
inline bool PetSkill::has_x3() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PetSkill::set_has_x3() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PetSkill::clear_has_x3() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PetSkill::clear_x3() {
  x3_ = 0;
  clear_has_x3();
}
inline float PetSkill::x3() const {
  return x3_;
}
inline void PetSkill::set_x3(float value) {
  set_has_x3();
  x3_ = value;
}

// optional float x4 = 9;
inline bool PetSkill::has_x4() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PetSkill::set_has_x4() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PetSkill::clear_has_x4() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PetSkill::clear_x4() {
  x4_ = 0;
  clear_has_x4();
}
inline float PetSkill::x4() const {
  return x4_;
}
inline void PetSkill::set_x4(float value) {
  set_has_x4();
  x4_ = value;
}

// optional float x5 = 10;
inline bool PetSkill::has_x5() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PetSkill::set_has_x5() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PetSkill::clear_has_x5() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PetSkill::clear_x5() {
  x5_ = 0;
  clear_has_x5();
}
inline float PetSkill::x5() const {
  return x5_;
}
inline void PetSkill::set_x5(float value) {
  set_has_x5();
  x5_ = value;
}

// optional float x6 = 11;
inline bool PetSkill::has_x6() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PetSkill::set_has_x6() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PetSkill::clear_has_x6() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PetSkill::clear_x6() {
  x6_ = 0;
  clear_has_x6();
}
inline float PetSkill::x6() const {
  return x6_;
}
inline void PetSkill::set_x6(float value) {
  set_has_x6();
  x6_ = value;
}

// optional float x7 = 12;
inline bool PetSkill::has_x7() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PetSkill::set_has_x7() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PetSkill::clear_has_x7() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PetSkill::clear_x7() {
  x7_ = 0;
  clear_has_x7();
}
inline float PetSkill::x7() const {
  return x7_;
}
inline void PetSkill::set_x7(float value) {
  set_has_x7();
  x7_ = value;
}

// optional float x8 = 13;
inline bool PetSkill::has_x8() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PetSkill::set_has_x8() {
  _has_bits_[0] |= 0x00001000u;
}
inline void PetSkill::clear_has_x8() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void PetSkill::clear_x8() {
  x8_ = 0;
  clear_has_x8();
}
inline float PetSkill::x8() const {
  return x8_;
}
inline void PetSkill::set_x8(float value) {
  set_has_x8();
  x8_ = value;
}

// optional float x9 = 14;
inline bool PetSkill::has_x9() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void PetSkill::set_has_x9() {
  _has_bits_[0] |= 0x00002000u;
}
inline void PetSkill::clear_has_x9() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void PetSkill::clear_x9() {
  x9_ = 0;
  clear_has_x9();
}
inline float PetSkill::x9() const {
  return x9_;
}
inline void PetSkill::set_x9(float value) {
  set_has_x9();
  x9_ = value;
}

// optional float x10 = 15;
inline bool PetSkill::has_x10() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void PetSkill::set_has_x10() {
  _has_bits_[0] |= 0x00004000u;
}
inline void PetSkill::clear_has_x10() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void PetSkill::clear_x10() {
  x10_ = 0;
  clear_has_x10();
}
inline float PetSkill::x10() const {
  return x10_;
}
inline void PetSkill::set_x10(float value) {
  set_has_x10();
  x10_ = value;
}

// optional int32 maxlevel = 16;
inline bool PetSkill::has_maxlevel() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void PetSkill::set_has_maxlevel() {
  _has_bits_[0] |= 0x00008000u;
}
inline void PetSkill::clear_has_maxlevel() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void PetSkill::clear_maxlevel() {
  maxlevel_ = 0;
  clear_has_maxlevel();
}
inline ::google::protobuf::int32 PetSkill::maxlevel() const {
  return maxlevel_;
}
inline void PetSkill::set_maxlevel(::google::protobuf::int32 value) {
  set_has_maxlevel();
  maxlevel_ = value;
}

// optional int32 cooltime = 17;
inline bool PetSkill::has_cooltime() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void PetSkill::set_has_cooltime() {
  _has_bits_[0] |= 0x00010000u;
}
inline void PetSkill::clear_has_cooltime() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void PetSkill::clear_cooltime() {
  cooltime_ = 0;
  clear_has_cooltime();
}
inline ::google::protobuf::int32 PetSkill::cooltime() const {
  return cooltime_;
}
inline void PetSkill::set_cooltime(::google::protobuf::int32 value) {
  set_has_cooltime();
  cooltime_ = value;
}

// optional int32 leader_type = 18;
inline bool PetSkill::has_leader_type() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void PetSkill::set_has_leader_type() {
  _has_bits_[0] |= 0x00020000u;
}
inline void PetSkill::clear_has_leader_type() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void PetSkill::clear_leader_type() {
  leader_type_ = 0;
  clear_has_leader_type();
}
inline ::google::protobuf::int32 PetSkill::leader_type() const {
  return leader_type_;
}
inline void PetSkill::set_leader_type(::google::protobuf::int32 value) {
  set_has_leader_type();
  leader_type_ = value;
}

// -------------------------------------------------------------------

// PetSkillList

// repeated .tableconfig.PetSkill record = 1;
inline int PetSkillList::record_size() const {
  return record_.size();
}
inline void PetSkillList::clear_record() {
  record_.Clear();
}
inline const ::tableconfig::PetSkill& PetSkillList::record(int index) const {
  return record_.Get(index);
}
inline ::tableconfig::PetSkill* PetSkillList::mutable_record(int index) {
  return record_.Mutable(index);
}
inline ::tableconfig::PetSkill* PetSkillList::add_record() {
  return record_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tableconfig::PetSkill >&
PetSkillList::record() const {
  return record_;
}
inline ::google::protobuf::RepeatedPtrField< ::tableconfig::PetSkill >*
PetSkillList::mutable_record() {
  return &record_;
}

// -------------------------------------------------------------------

// HurtEffect

// optional uint32 pos = 1;
inline bool HurtEffect::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HurtEffect::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HurtEffect::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HurtEffect::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 HurtEffect::pos() const {
  return pos_;
}
inline void HurtEffect::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
}

// optional uint32 type = 2;
inline bool HurtEffect::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HurtEffect::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HurtEffect::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HurtEffect::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 HurtEffect::type() const {
  return type_;
}
inline void HurtEffect::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional float value = 3;
inline bool HurtEffect::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HurtEffect::set_has_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HurtEffect::clear_has_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HurtEffect::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline float HurtEffect::value() const {
  return value_;
}
inline void HurtEffect::set_value(float value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// NormalGoodsRecord

// optional uint32 id = 1;
inline bool NormalGoodsRecord::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NormalGoodsRecord::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NormalGoodsRecord::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NormalGoodsRecord::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 NormalGoodsRecord::id() const {
  return id_;
}
inline void NormalGoodsRecord::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional uint32 kind = 2;
inline bool NormalGoodsRecord::has_kind() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NormalGoodsRecord::set_has_kind() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NormalGoodsRecord::clear_has_kind() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NormalGoodsRecord::clear_kind() {
  kind_ = 0u;
  clear_has_kind();
}
inline ::google::protobuf::uint32 NormalGoodsRecord::kind() const {
  return kind_;
}
inline void NormalGoodsRecord::set_kind(::google::protobuf::uint32 value) {
  set_has_kind();
  kind_ = value;
}

// optional uint32 kind_type = 3;
inline bool NormalGoodsRecord::has_kind_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NormalGoodsRecord::set_has_kind_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NormalGoodsRecord::clear_has_kind_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NormalGoodsRecord::clear_kind_type() {
  kind_type_ = 0u;
  clear_has_kind_type();
}
inline ::google::protobuf::uint32 NormalGoodsRecord::kind_type() const {
  return kind_type_;
}
inline void NormalGoodsRecord::set_kind_type(::google::protobuf::uint32 value) {
  set_has_kind_type();
  kind_type_ = value;
}

// optional uint32 limit_number = 4;
inline bool NormalGoodsRecord::has_limit_number() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NormalGoodsRecord::set_has_limit_number() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NormalGoodsRecord::clear_has_limit_number() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NormalGoodsRecord::clear_limit_number() {
  limit_number_ = 0u;
  clear_has_limit_number();
}
inline ::google::protobuf::uint32 NormalGoodsRecord::limit_number() const {
  return limit_number_;
}
inline void NormalGoodsRecord::set_limit_number(::google::protobuf::uint32 value) {
  set_has_limit_number();
  limit_number_ = value;
}

// optional string name = 5;
inline bool NormalGoodsRecord::has_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NormalGoodsRecord::set_has_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NormalGoodsRecord::clear_has_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NormalGoodsRecord::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& NormalGoodsRecord::name() const {
  return *name_;
}
inline void NormalGoodsRecord::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void NormalGoodsRecord::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void NormalGoodsRecord::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NormalGoodsRecord::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* NormalGoodsRecord::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void NormalGoodsRecord::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string desc = 6;
inline bool NormalGoodsRecord::has_desc() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NormalGoodsRecord::set_has_desc() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NormalGoodsRecord::clear_has_desc() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NormalGoodsRecord::clear_desc() {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    desc_->clear();
  }
  clear_has_desc();
}
inline const ::std::string& NormalGoodsRecord::desc() const {
  return *desc_;
}
inline void NormalGoodsRecord::set_desc(const ::std::string& value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void NormalGoodsRecord::set_desc(const char* value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void NormalGoodsRecord::set_desc(const char* value, size_t size) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NormalGoodsRecord::mutable_desc() {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  return desc_;
}
inline ::std::string* NormalGoodsRecord::release_desc() {
  clear_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = desc_;
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void NormalGoodsRecord::set_allocated_desc(::std::string* desc) {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (desc) {
    set_has_desc();
    desc_ = desc;
  } else {
    clear_has_desc();
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 pet_level = 7;
inline bool NormalGoodsRecord::has_pet_level() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void NormalGoodsRecord::set_has_pet_level() {
  _has_bits_[0] |= 0x00000040u;
}
inline void NormalGoodsRecord::clear_has_pet_level() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void NormalGoodsRecord::clear_pet_level() {
  pet_level_ = 0u;
  clear_has_pet_level();
}
inline ::google::protobuf::uint32 NormalGoodsRecord::pet_level() const {
  return pet_level_;
}
inline void NormalGoodsRecord::set_pet_level(::google::protobuf::uint32 value) {
  set_has_pet_level();
  pet_level_ = value;
}

// optional uint32 ping_zhi = 8;
inline bool NormalGoodsRecord::has_ping_zhi() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void NormalGoodsRecord::set_has_ping_zhi() {
  _has_bits_[0] |= 0x00000080u;
}
inline void NormalGoodsRecord::clear_has_ping_zhi() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void NormalGoodsRecord::clear_ping_zhi() {
  ping_zhi_ = 0u;
  clear_has_ping_zhi();
}
inline ::google::protobuf::uint32 NormalGoodsRecord::ping_zhi() const {
  return ping_zhi_;
}
inline void NormalGoodsRecord::set_ping_zhi(::google::protobuf::uint32 value) {
  set_has_ping_zhi();
  ping_zhi_ = value;
}

// optional uint32 hole = 9;
inline bool NormalGoodsRecord::has_hole() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void NormalGoodsRecord::set_has_hole() {
  _has_bits_[0] |= 0x00000100u;
}
inline void NormalGoodsRecord::clear_has_hole() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void NormalGoodsRecord::clear_hole() {
  hole_ = 0u;
  clear_has_hole();
}
inline ::google::protobuf::uint32 NormalGoodsRecord::hole() const {
  return hole_;
}
inline void NormalGoodsRecord::set_hole(::google::protobuf::uint32 value) {
  set_has_hole();
  hole_ = value;
}

// optional uint32 chip_number = 10;
inline bool NormalGoodsRecord::has_chip_number() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void NormalGoodsRecord::set_has_chip_number() {
  _has_bits_[0] |= 0x00000200u;
}
inline void NormalGoodsRecord::clear_has_chip_number() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void NormalGoodsRecord::clear_chip_number() {
  chip_number_ = 0u;
  clear_has_chip_number();
}
inline ::google::protobuf::uint32 NormalGoodsRecord::chip_number() const {
  return chip_number_;
}
inline void NormalGoodsRecord::set_chip_number(::google::protobuf::uint32 value) {
  set_has_chip_number();
  chip_number_ = value;
}

// optional uint32 chip_id = 11;
inline bool NormalGoodsRecord::has_chip_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void NormalGoodsRecord::set_has_chip_id() {
  _has_bits_[0] |= 0x00000400u;
}
inline void NormalGoodsRecord::clear_has_chip_id() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void NormalGoodsRecord::clear_chip_id() {
  chip_id_ = 0u;
  clear_has_chip_id();
}
inline ::google::protobuf::uint32 NormalGoodsRecord::chip_id() const {
  return chip_id_;
}
inline void NormalGoodsRecord::set_chip_id(::google::protobuf::uint32 value) {
  set_has_chip_id();
  chip_id_ = value;
}

// optional uint32 gem_level = 12;
inline bool NormalGoodsRecord::has_gem_level() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void NormalGoodsRecord::set_has_gem_level() {
  _has_bits_[0] |= 0x00000800u;
}
inline void NormalGoodsRecord::clear_has_gem_level() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void NormalGoodsRecord::clear_gem_level() {
  gem_level_ = 0u;
  clear_has_gem_level();
}
inline ::google::protobuf::uint32 NormalGoodsRecord::gem_level() const {
  return gem_level_;
}
inline void NormalGoodsRecord::set_gem_level(::google::protobuf::uint32 value) {
  set_has_gem_level();
  gem_level_ = value;
}

// optional uint32 gem_number = 13;
inline bool NormalGoodsRecord::has_gem_number() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void NormalGoodsRecord::set_has_gem_number() {
  _has_bits_[0] |= 0x00001000u;
}
inline void NormalGoodsRecord::clear_has_gem_number() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void NormalGoodsRecord::clear_gem_number() {
  gem_number_ = 0u;
  clear_has_gem_number();
}
inline ::google::protobuf::uint32 NormalGoodsRecord::gem_number() const {
  return gem_number_;
}
inline void NormalGoodsRecord::set_gem_number(::google::protobuf::uint32 value) {
  set_has_gem_number();
  gem_number_ = value;
}

// optional uint32 gem_id = 14;
inline bool NormalGoodsRecord::has_gem_id() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void NormalGoodsRecord::set_has_gem_id() {
  _has_bits_[0] |= 0x00002000u;
}
inline void NormalGoodsRecord::clear_has_gem_id() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void NormalGoodsRecord::clear_gem_id() {
  gem_id_ = 0u;
  clear_has_gem_id();
}
inline ::google::protobuf::uint32 NormalGoodsRecord::gem_id() const {
  return gem_id_;
}
inline void NormalGoodsRecord::set_gem_id(::google::protobuf::uint32 value) {
  set_has_gem_id();
  gem_id_ = value;
}

// optional uint32 jinjie_number = 15;
inline bool NormalGoodsRecord::has_jinjie_number() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void NormalGoodsRecord::set_has_jinjie_number() {
  _has_bits_[0] |= 0x00004000u;
}
inline void NormalGoodsRecord::clear_has_jinjie_number() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void NormalGoodsRecord::clear_jinjie_number() {
  jinjie_number_ = 0u;
  clear_has_jinjie_number();
}
inline ::google::protobuf::uint32 NormalGoodsRecord::jinjie_number() const {
  return jinjie_number_;
}
inline void NormalGoodsRecord::set_jinjie_number(::google::protobuf::uint32 value) {
  set_has_jinjie_number();
  jinjie_number_ = value;
}

// optional uint32 jinjie_mohe_id = 16;
inline bool NormalGoodsRecord::has_jinjie_mohe_id() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void NormalGoodsRecord::set_has_jinjie_mohe_id() {
  _has_bits_[0] |= 0x00008000u;
}
inline void NormalGoodsRecord::clear_has_jinjie_mohe_id() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void NormalGoodsRecord::clear_jinjie_mohe_id() {
  jinjie_mohe_id_ = 0u;
  clear_has_jinjie_mohe_id();
}
inline ::google::protobuf::uint32 NormalGoodsRecord::jinjie_mohe_id() const {
  return jinjie_mohe_id_;
}
inline void NormalGoodsRecord::set_jinjie_mohe_id(::google::protobuf::uint32 value) {
  set_has_jinjie_mohe_id();
  jinjie_mohe_id_ = value;
}

// optional uint32 jinjie_id = 17;
inline bool NormalGoodsRecord::has_jinjie_id() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void NormalGoodsRecord::set_has_jinjie_id() {
  _has_bits_[0] |= 0x00010000u;
}
inline void NormalGoodsRecord::clear_has_jinjie_id() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void NormalGoodsRecord::clear_jinjie_id() {
  jinjie_id_ = 0u;
  clear_has_jinjie_id();
}
inline ::google::protobuf::uint32 NormalGoodsRecord::jinjie_id() const {
  return jinjie_id_;
}
inline void NormalGoodsRecord::set_jinjie_id(::google::protobuf::uint32 value) {
  set_has_jinjie_id();
  jinjie_id_ = value;
}

// repeated .tableconfig.HurtEffect effects = 18;
inline int NormalGoodsRecord::effects_size() const {
  return effects_.size();
}
inline void NormalGoodsRecord::clear_effects() {
  effects_.Clear();
}
inline const ::tableconfig::HurtEffect& NormalGoodsRecord::effects(int index) const {
  return effects_.Get(index);
}
inline ::tableconfig::HurtEffect* NormalGoodsRecord::mutable_effects(int index) {
  return effects_.Mutable(index);
}
inline ::tableconfig::HurtEffect* NormalGoodsRecord::add_effects() {
  return effects_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tableconfig::HurtEffect >&
NormalGoodsRecord::effects() const {
  return effects_;
}
inline ::google::protobuf::RepeatedPtrField< ::tableconfig::HurtEffect >*
NormalGoodsRecord::mutable_effects() {
  return &effects_;
}

// optional bool can_put_on = 19;
inline bool NormalGoodsRecord::has_can_put_on() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void NormalGoodsRecord::set_has_can_put_on() {
  _has_bits_[0] |= 0x00040000u;
}
inline void NormalGoodsRecord::clear_has_can_put_on() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void NormalGoodsRecord::clear_can_put_on() {
  can_put_on_ = false;
  clear_has_can_put_on();
}
inline bool NormalGoodsRecord::can_put_on() const {
  return can_put_on_;
}
inline void NormalGoodsRecord::set_can_put_on(bool value) {
  set_has_can_put_on();
  can_put_on_ = value;
}

// optional string produce_place = 20;
inline bool NormalGoodsRecord::has_produce_place() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void NormalGoodsRecord::set_has_produce_place() {
  _has_bits_[0] |= 0x00080000u;
}
inline void NormalGoodsRecord::clear_has_produce_place() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void NormalGoodsRecord::clear_produce_place() {
  if (produce_place_ != &::google::protobuf::internal::kEmptyString) {
    produce_place_->clear();
  }
  clear_has_produce_place();
}
inline const ::std::string& NormalGoodsRecord::produce_place() const {
  return *produce_place_;
}
inline void NormalGoodsRecord::set_produce_place(const ::std::string& value) {
  set_has_produce_place();
  if (produce_place_ == &::google::protobuf::internal::kEmptyString) {
    produce_place_ = new ::std::string;
  }
  produce_place_->assign(value);
}
inline void NormalGoodsRecord::set_produce_place(const char* value) {
  set_has_produce_place();
  if (produce_place_ == &::google::protobuf::internal::kEmptyString) {
    produce_place_ = new ::std::string;
  }
  produce_place_->assign(value);
}
inline void NormalGoodsRecord::set_produce_place(const char* value, size_t size) {
  set_has_produce_place();
  if (produce_place_ == &::google::protobuf::internal::kEmptyString) {
    produce_place_ = new ::std::string;
  }
  produce_place_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NormalGoodsRecord::mutable_produce_place() {
  set_has_produce_place();
  if (produce_place_ == &::google::protobuf::internal::kEmptyString) {
    produce_place_ = new ::std::string;
  }
  return produce_place_;
}
inline ::std::string* NormalGoodsRecord::release_produce_place() {
  clear_has_produce_place();
  if (produce_place_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = produce_place_;
    produce_place_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void NormalGoodsRecord::set_allocated_produce_place(::std::string* produce_place) {
  if (produce_place_ != &::google::protobuf::internal::kEmptyString) {
    delete produce_place_;
  }
  if (produce_place) {
    set_has_produce_place();
    produce_place_ = produce_place;
  } else {
    clear_has_produce_place();
    produce_place_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool can_streng_material = 21;
inline bool NormalGoodsRecord::has_can_streng_material() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void NormalGoodsRecord::set_has_can_streng_material() {
  _has_bits_[0] |= 0x00100000u;
}
inline void NormalGoodsRecord::clear_has_can_streng_material() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void NormalGoodsRecord::clear_can_streng_material() {
  can_streng_material_ = false;
  clear_has_can_streng_material();
}
inline bool NormalGoodsRecord::can_streng_material() const {
  return can_streng_material_;
}
inline void NormalGoodsRecord::set_can_streng_material(bool value) {
  set_has_can_streng_material();
  can_streng_material_ = value;
}

// -------------------------------------------------------------------

// NormalGoodsList

// repeated .tableconfig.NormalGoodsRecord record = 1;
inline int NormalGoodsList::record_size() const {
  return record_.size();
}
inline void NormalGoodsList::clear_record() {
  record_.Clear();
}
inline const ::tableconfig::NormalGoodsRecord& NormalGoodsList::record(int index) const {
  return record_.Get(index);
}
inline ::tableconfig::NormalGoodsRecord* NormalGoodsList::mutable_record(int index) {
  return record_.Mutable(index);
}
inline ::tableconfig::NormalGoodsRecord* NormalGoodsList::add_record() {
  return record_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tableconfig::NormalGoodsRecord >&
NormalGoodsList::record() const {
  return record_;
}
inline ::google::protobuf::RepeatedPtrField< ::tableconfig::NormalGoodsRecord >*
NormalGoodsList::mutable_record() {
  return &record_;
}

// -------------------------------------------------------------------

// PetSkillPro

// optional int32 skill_id = 1;
inline bool PetSkillPro::has_skill_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PetSkillPro::set_has_skill_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PetSkillPro::clear_has_skill_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PetSkillPro::clear_skill_id() {
  skill_id_ = 0;
  clear_has_skill_id();
}
inline ::google::protobuf::int32 PetSkillPro::skill_id() const {
  return skill_id_;
}
inline void PetSkillPro::set_skill_id(::google::protobuf::int32 value) {
  set_has_skill_id();
  skill_id_ = value;
}

// optional int32 skill_level = 2;
inline bool PetSkillPro::has_skill_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PetSkillPro::set_has_skill_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PetSkillPro::clear_has_skill_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PetSkillPro::clear_skill_level() {
  skill_level_ = 0;
  clear_has_skill_level();
}
inline ::google::protobuf::int32 PetSkillPro::skill_level() const {
  return skill_level_;
}
inline void PetSkillPro::set_skill_level(::google::protobuf::int32 value) {
  set_has_skill_level();
  skill_level_ = value;
}

// optional float inc_hurt = 3;
inline bool PetSkillPro::has_inc_hurt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PetSkillPro::set_has_inc_hurt() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PetSkillPro::clear_has_inc_hurt() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PetSkillPro::clear_inc_hurt() {
  inc_hurt_ = 0;
  clear_has_inc_hurt();
}
inline float PetSkillPro::inc_hurt() const {
  return inc_hurt_;
}
inline void PetSkillPro::set_inc_hurt(float value) {
  set_has_inc_hurt();
  inc_hurt_ = value;
}

// optional float inc_hp = 4;
inline bool PetSkillPro::has_inc_hp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PetSkillPro::set_has_inc_hp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PetSkillPro::clear_has_inc_hp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PetSkillPro::clear_inc_hp() {
  inc_hp_ = 0;
  clear_has_inc_hp();
}
inline float PetSkillPro::inc_hp() const {
  return inc_hp_;
}
inline void PetSkillPro::set_inc_hp(float value) {
  set_has_inc_hp();
  inc_hp_ = value;
}

// optional float dec_hurt = 5;
inline bool PetSkillPro::has_dec_hurt() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PetSkillPro::set_has_dec_hurt() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PetSkillPro::clear_has_dec_hurt() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PetSkillPro::clear_dec_hurt() {
  dec_hurt_ = 0;
  clear_has_dec_hurt();
}
inline float PetSkillPro::dec_hurt() const {
  return dec_hurt_;
}
inline void PetSkillPro::set_dec_hurt(float value) {
  set_has_dec_hurt();
  dec_hurt_ = value;
}

// optional float huifu = 6;
inline bool PetSkillPro::has_huifu() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PetSkillPro::set_has_huifu() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PetSkillPro::clear_has_huifu() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PetSkillPro::clear_huifu() {
  huifu_ = 0;
  clear_has_huifu();
}
inline float PetSkillPro::huifu() const {
  return huifu_;
}
inline void PetSkillPro::set_huifu(float value) {
  set_has_huifu();
  huifu_ = value;
}

// optional float baoji_lv = 7;
inline bool PetSkillPro::has_baoji_lv() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PetSkillPro::set_has_baoji_lv() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PetSkillPro::clear_has_baoji_lv() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PetSkillPro::clear_baoji_lv() {
  baoji_lv_ = 0;
  clear_has_baoji_lv();
}
inline float PetSkillPro::baoji_lv() const {
  return baoji_lv_;
}
inline void PetSkillPro::set_baoji_lv(float value) {
  set_has_baoji_lv();
  baoji_lv_ = value;
}

// optional float baoji_hurt = 8;
inline bool PetSkillPro::has_baoji_hurt() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PetSkillPro::set_has_baoji_hurt() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PetSkillPro::clear_has_baoji_hurt() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PetSkillPro::clear_baoji_hurt() {
  baoji_hurt_ = 0;
  clear_has_baoji_hurt();
}
inline float PetSkillPro::baoji_hurt() const {
  return baoji_hurt_;
}
inline void PetSkillPro::set_baoji_hurt(float value) {
  set_has_baoji_hurt();
  baoji_hurt_ = value;
}

// optional float speed = 9;
inline bool PetSkillPro::has_speed() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PetSkillPro::set_has_speed() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PetSkillPro::clear_has_speed() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PetSkillPro::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
inline float PetSkillPro::speed() const {
  return speed_;
}
inline void PetSkillPro::set_speed(float value) {
  set_has_speed();
  speed_ = value;
}

// optional int32 zhan_dou_li = 10;
inline bool PetSkillPro::has_zhan_dou_li() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PetSkillPro::set_has_zhan_dou_li() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PetSkillPro::clear_has_zhan_dou_li() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PetSkillPro::clear_zhan_dou_li() {
  zhan_dou_li_ = 0;
  clear_has_zhan_dou_li();
}
inline ::google::protobuf::int32 PetSkillPro::zhan_dou_li() const {
  return zhan_dou_li_;
}
inline void PetSkillPro::set_zhan_dou_li(::google::protobuf::int32 value) {
  set_has_zhan_dou_li();
  zhan_dou_li_ = value;
}

// -------------------------------------------------------------------

// PetSkillProList

// repeated .tableconfig.PetSkillPro record = 1;
inline int PetSkillProList::record_size() const {
  return record_.size();
}
inline void PetSkillProList::clear_record() {
  record_.Clear();
}
inline const ::tableconfig::PetSkillPro& PetSkillProList::record(int index) const {
  return record_.Get(index);
}
inline ::tableconfig::PetSkillPro* PetSkillProList::mutable_record(int index) {
  return record_.Mutable(index);
}
inline ::tableconfig::PetSkillPro* PetSkillProList::add_record() {
  return record_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tableconfig::PetSkillPro >&
PetSkillProList::record() const {
  return record_;
}
inline ::google::protobuf::RepeatedPtrField< ::tableconfig::PetSkillPro >*
PetSkillProList::mutable_record() {
  return &record_;
}

// -------------------------------------------------------------------

// PetZhaoHuan

// optional int32 level = 1;
inline bool PetZhaoHuan::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PetZhaoHuan::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PetZhaoHuan::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PetZhaoHuan::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 PetZhaoHuan::level() const {
  return level_;
}
inline void PetZhaoHuan::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// repeated int32 rare_val = 2;
inline int PetZhaoHuan::rare_val_size() const {
  return rare_val_.size();
}
inline void PetZhaoHuan::clear_rare_val() {
  rare_val_.Clear();
}
inline ::google::protobuf::int32 PetZhaoHuan::rare_val(int index) const {
  return rare_val_.Get(index);
}
inline void PetZhaoHuan::set_rare_val(int index, ::google::protobuf::int32 value) {
  rare_val_.Set(index, value);
}
inline void PetZhaoHuan::add_rare_val(::google::protobuf::int32 value) {
  rare_val_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PetZhaoHuan::rare_val() const {
  return rare_val_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PetZhaoHuan::mutable_rare_val() {
  return &rare_val_;
}

// -------------------------------------------------------------------

// PetZhaoHuanList

// repeated .tableconfig.PetZhaoHuan record = 1;
inline int PetZhaoHuanList::record_size() const {
  return record_.size();
}
inline void PetZhaoHuanList::clear_record() {
  record_.Clear();
}
inline const ::tableconfig::PetZhaoHuan& PetZhaoHuanList::record(int index) const {
  return record_.Get(index);
}
inline ::tableconfig::PetZhaoHuan* PetZhaoHuanList::mutable_record(int index) {
  return record_.Mutable(index);
}
inline ::tableconfig::PetZhaoHuan* PetZhaoHuanList::add_record() {
  return record_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tableconfig::PetZhaoHuan >&
PetZhaoHuanList::record() const {
  return record_;
}
inline ::google::protobuf::RepeatedPtrField< ::tableconfig::PetZhaoHuan >*
PetZhaoHuanList::mutable_record() {
  return &record_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace tableconfig

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tableconfig::LEARN_KIND>() {
  return ::tableconfig::LEARN_KIND_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_table_5fconfig_2eproto__INCLUDED
