// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: extend_data.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "extend_data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace extend_data {

namespace {

const ::google::protobuf::Descriptor* extend_data_v1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  extend_data_v1_reflection_ = NULL;
const ::google::protobuf::Descriptor* state_v1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  state_v1_reflection_ = NULL;
const ::google::protobuf::Descriptor* state_list_v1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  state_list_v1_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* extend_data_version_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_extend_5fdata_2eproto() {
  protobuf_AddDesc_extend_5fdata_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "extend_data.proto");
  GOOGLE_CHECK(file != NULL);
  extend_data_v1_descriptor_ = file->message_type(0);
  static const int extend_data_v1_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(extend_data_v1, today_error_input_award_key_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(extend_data_v1, new_day_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(extend_data_v1, today_login_log_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(extend_data_v1, today_send_email_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(extend_data_v1, today_ask_friend_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(extend_data_v1, last_get_action_count_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(extend_data_v1, today_buy_action_count_times_),
  };
  extend_data_v1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      extend_data_v1_descriptor_,
      extend_data_v1::default_instance_,
      extend_data_v1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(extend_data_v1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(extend_data_v1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(extend_data_v1));
  state_v1_descriptor_ = file->message_type(1);
  static const int state_v1_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(state_v1, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(state_v1, end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(state_v1, res1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(state_v1, res2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(state_v1, res3_),
  };
  state_v1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      state_v1_descriptor_,
      state_v1::default_instance_,
      state_v1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(state_v1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(state_v1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(state_v1));
  state_list_v1_descriptor_ = file->message_type(2);
  static const int state_list_v1_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(state_list_v1, state_list_),
  };
  state_list_v1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      state_list_v1_descriptor_,
      state_list_v1::default_instance_,
      state_list_v1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(state_list_v1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(state_list_v1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(state_list_v1));
  extend_data_version_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_extend_5fdata_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    extend_data_v1_descriptor_, &extend_data_v1::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    state_v1_descriptor_, &state_v1::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    state_list_v1_descriptor_, &state_list_v1::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_extend_5fdata_2eproto() {
  delete extend_data_v1::default_instance_;
  delete extend_data_v1_reflection_;
  delete state_v1::default_instance_;
  delete state_v1_reflection_;
  delete state_list_v1::default_instance_;
  delete state_list_v1_reflection_;
}

void protobuf_AddDesc_extend_5fdata_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021extend_data.proto\022\013extend_data\"\356\001\n\016ext"
    "end_data_v1\022\'\n\037today_error_input_award_k"
    "ey_num\030\001 \001(\005\022\024\n\014new_day_time\030\002 \001(\003\022\027\n\017to"
    "day_login_log\030\003 \001(\010\022\034\n\024today_send_email_"
    "num\030\004 \001(\005\022\034\n\024today_ask_friend_num\030\005 \001(\005\022"
    "\"\n\032last_get_action_count_time\030\006 \001(\003\022$\n\034t"
    "oday_buy_action_count_times\030\007 \001(\005\"R\n\010sta"
    "te_v1\022\n\n\002id\030\001 \001(\r\022\020\n\010end_time\030\002 \001(\004\022\014\n\004r"
    "es1\030\003 \001(\004\022\014\n\004res2\030\004 \001(\r\022\014\n\004res3\030\005 \001(\r\":\n"
    "\rstate_list_v1\022)\n\nstate_list\030\001 \003(\0132\025.ext"
    "end_data.state_v1*\035\n\023extend_data_version"
    "\022\006\n\002V1\020\001", 448);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "extend_data.proto", &protobuf_RegisterTypes);
  extend_data_v1::default_instance_ = new extend_data_v1();
  state_v1::default_instance_ = new state_v1();
  state_list_v1::default_instance_ = new state_list_v1();
  extend_data_v1::default_instance_->InitAsDefaultInstance();
  state_v1::default_instance_->InitAsDefaultInstance();
  state_list_v1::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_extend_5fdata_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_extend_5fdata_2eproto {
  StaticDescriptorInitializer_extend_5fdata_2eproto() {
    protobuf_AddDesc_extend_5fdata_2eproto();
  }
} static_descriptor_initializer_extend_5fdata_2eproto_;
const ::google::protobuf::EnumDescriptor* extend_data_version_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return extend_data_version_descriptor_;
}
bool extend_data_version_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int extend_data_v1::kTodayErrorInputAwardKeyNumFieldNumber;
const int extend_data_v1::kNewDayTimeFieldNumber;
const int extend_data_v1::kTodayLoginLogFieldNumber;
const int extend_data_v1::kTodaySendEmailNumFieldNumber;
const int extend_data_v1::kTodayAskFriendNumFieldNumber;
const int extend_data_v1::kLastGetActionCountTimeFieldNumber;
const int extend_data_v1::kTodayBuyActionCountTimesFieldNumber;
#endif  // !_MSC_VER

extend_data_v1::extend_data_v1()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void extend_data_v1::InitAsDefaultInstance() {
}

extend_data_v1::extend_data_v1(const extend_data_v1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void extend_data_v1::SharedCtor() {
  _cached_size_ = 0;
  today_error_input_award_key_num_ = 0;
  new_day_time_ = GOOGLE_LONGLONG(0);
  today_login_log_ = false;
  today_send_email_num_ = 0;
  today_ask_friend_num_ = 0;
  last_get_action_count_time_ = GOOGLE_LONGLONG(0);
  today_buy_action_count_times_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

extend_data_v1::~extend_data_v1() {
  SharedDtor();
}

void extend_data_v1::SharedDtor() {
  if (this != default_instance_) {
  }
}

void extend_data_v1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* extend_data_v1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return extend_data_v1_descriptor_;
}

const extend_data_v1& extend_data_v1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_extend_5fdata_2eproto();
  return *default_instance_;
}

extend_data_v1* extend_data_v1::default_instance_ = NULL;

extend_data_v1* extend_data_v1::New() const {
  return new extend_data_v1;
}

void extend_data_v1::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    today_error_input_award_key_num_ = 0;
    new_day_time_ = GOOGLE_LONGLONG(0);
    today_login_log_ = false;
    today_send_email_num_ = 0;
    today_ask_friend_num_ = 0;
    last_get_action_count_time_ = GOOGLE_LONGLONG(0);
    today_buy_action_count_times_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool extend_data_v1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 today_error_input_award_key_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &today_error_input_award_key_num_)));
          set_has_today_error_input_award_key_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_new_day_time;
        break;
      }

      // optional int64 new_day_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_day_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &new_day_time_)));
          set_has_new_day_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_today_login_log;
        break;
      }

      // optional bool today_login_log = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_today_login_log:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &today_login_log_)));
          set_has_today_login_log();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_today_send_email_num;
        break;
      }

      // optional int32 today_send_email_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_today_send_email_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &today_send_email_num_)));
          set_has_today_send_email_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_today_ask_friend_num;
        break;
      }

      // optional int32 today_ask_friend_num = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_today_ask_friend_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &today_ask_friend_num_)));
          set_has_today_ask_friend_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_last_get_action_count_time;
        break;
      }

      // optional int64 last_get_action_count_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_get_action_count_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_get_action_count_time_)));
          set_has_last_get_action_count_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_today_buy_action_count_times;
        break;
      }

      // optional int32 today_buy_action_count_times = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_today_buy_action_count_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &today_buy_action_count_times_)));
          set_has_today_buy_action_count_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void extend_data_v1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 today_error_input_award_key_num = 1;
  if (has_today_error_input_award_key_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->today_error_input_award_key_num(), output);
  }

  // optional int64 new_day_time = 2;
  if (has_new_day_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->new_day_time(), output);
  }

  // optional bool today_login_log = 3;
  if (has_today_login_log()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->today_login_log(), output);
  }

  // optional int32 today_send_email_num = 4;
  if (has_today_send_email_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->today_send_email_num(), output);
  }

  // optional int32 today_ask_friend_num = 5;
  if (has_today_ask_friend_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->today_ask_friend_num(), output);
  }

  // optional int64 last_get_action_count_time = 6;
  if (has_last_get_action_count_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->last_get_action_count_time(), output);
  }

  // optional int32 today_buy_action_count_times = 7;
  if (has_today_buy_action_count_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->today_buy_action_count_times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* extend_data_v1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 today_error_input_award_key_num = 1;
  if (has_today_error_input_award_key_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->today_error_input_award_key_num(), target);
  }

  // optional int64 new_day_time = 2;
  if (has_new_day_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->new_day_time(), target);
  }

  // optional bool today_login_log = 3;
  if (has_today_login_log()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->today_login_log(), target);
  }

  // optional int32 today_send_email_num = 4;
  if (has_today_send_email_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->today_send_email_num(), target);
  }

  // optional int32 today_ask_friend_num = 5;
  if (has_today_ask_friend_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->today_ask_friend_num(), target);
  }

  // optional int64 last_get_action_count_time = 6;
  if (has_last_get_action_count_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->last_get_action_count_time(), target);
  }

  // optional int32 today_buy_action_count_times = 7;
  if (has_today_buy_action_count_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->today_buy_action_count_times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int extend_data_v1::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 today_error_input_award_key_num = 1;
    if (has_today_error_input_award_key_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->today_error_input_award_key_num());
    }

    // optional int64 new_day_time = 2;
    if (has_new_day_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->new_day_time());
    }

    // optional bool today_login_log = 3;
    if (has_today_login_log()) {
      total_size += 1 + 1;
    }

    // optional int32 today_send_email_num = 4;
    if (has_today_send_email_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->today_send_email_num());
    }

    // optional int32 today_ask_friend_num = 5;
    if (has_today_ask_friend_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->today_ask_friend_num());
    }

    // optional int64 last_get_action_count_time = 6;
    if (has_last_get_action_count_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_get_action_count_time());
    }

    // optional int32 today_buy_action_count_times = 7;
    if (has_today_buy_action_count_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->today_buy_action_count_times());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void extend_data_v1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const extend_data_v1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const extend_data_v1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void extend_data_v1::MergeFrom(const extend_data_v1& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_today_error_input_award_key_num()) {
      set_today_error_input_award_key_num(from.today_error_input_award_key_num());
    }
    if (from.has_new_day_time()) {
      set_new_day_time(from.new_day_time());
    }
    if (from.has_today_login_log()) {
      set_today_login_log(from.today_login_log());
    }
    if (from.has_today_send_email_num()) {
      set_today_send_email_num(from.today_send_email_num());
    }
    if (from.has_today_ask_friend_num()) {
      set_today_ask_friend_num(from.today_ask_friend_num());
    }
    if (from.has_last_get_action_count_time()) {
      set_last_get_action_count_time(from.last_get_action_count_time());
    }
    if (from.has_today_buy_action_count_times()) {
      set_today_buy_action_count_times(from.today_buy_action_count_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void extend_data_v1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void extend_data_v1::CopyFrom(const extend_data_v1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool extend_data_v1::IsInitialized() const {

  return true;
}

void extend_data_v1::Swap(extend_data_v1* other) {
  if (other != this) {
    std::swap(today_error_input_award_key_num_, other->today_error_input_award_key_num_);
    std::swap(new_day_time_, other->new_day_time_);
    std::swap(today_login_log_, other->today_login_log_);
    std::swap(today_send_email_num_, other->today_send_email_num_);
    std::swap(today_ask_friend_num_, other->today_ask_friend_num_);
    std::swap(last_get_action_count_time_, other->last_get_action_count_time_);
    std::swap(today_buy_action_count_times_, other->today_buy_action_count_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata extend_data_v1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = extend_data_v1_descriptor_;
  metadata.reflection = extend_data_v1_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int state_v1::kIdFieldNumber;
const int state_v1::kEndTimeFieldNumber;
const int state_v1::kRes1FieldNumber;
const int state_v1::kRes2FieldNumber;
const int state_v1::kRes3FieldNumber;
#endif  // !_MSC_VER

state_v1::state_v1()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void state_v1::InitAsDefaultInstance() {
}

state_v1::state_v1(const state_v1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void state_v1::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  end_time_ = GOOGLE_ULONGLONG(0);
  res1_ = GOOGLE_ULONGLONG(0);
  res2_ = 0u;
  res3_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

state_v1::~state_v1() {
  SharedDtor();
}

void state_v1::SharedDtor() {
  if (this != default_instance_) {
  }
}

void state_v1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* state_v1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return state_v1_descriptor_;
}

const state_v1& state_v1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_extend_5fdata_2eproto();
  return *default_instance_;
}

state_v1* state_v1::default_instance_ = NULL;

state_v1* state_v1::New() const {
  return new state_v1;
}

void state_v1::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    end_time_ = GOOGLE_ULONGLONG(0);
    res1_ = GOOGLE_ULONGLONG(0);
    res2_ = 0u;
    res3_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool state_v1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_end_time;
        break;
      }

      // optional uint64 end_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_res1;
        break;
      }

      // optional uint64 res1 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_res1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &res1_)));
          set_has_res1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_res2;
        break;
      }

      // optional uint32 res2 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_res2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &res2_)));
          set_has_res2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_res3;
        break;
      }

      // optional uint32 res3 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_res3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &res3_)));
          set_has_res3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void state_v1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint64 end_time = 2;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->end_time(), output);
  }

  // optional uint64 res1 = 3;
  if (has_res1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->res1(), output);
  }

  // optional uint32 res2 = 4;
  if (has_res2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->res2(), output);
  }

  // optional uint32 res3 = 5;
  if (has_res3()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->res3(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* state_v1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint64 end_time = 2;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->end_time(), target);
  }

  // optional uint64 res1 = 3;
  if (has_res1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->res1(), target);
  }

  // optional uint32 res2 = 4;
  if (has_res2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->res2(), target);
  }

  // optional uint32 res3 = 5;
  if (has_res3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->res3(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int state_v1::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint64 end_time = 2;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->end_time());
    }

    // optional uint64 res1 = 3;
    if (has_res1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->res1());
    }

    // optional uint32 res2 = 4;
    if (has_res2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->res2());
    }

    // optional uint32 res3 = 5;
    if (has_res3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->res3());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void state_v1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const state_v1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const state_v1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void state_v1::MergeFrom(const state_v1& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
    if (from.has_res1()) {
      set_res1(from.res1());
    }
    if (from.has_res2()) {
      set_res2(from.res2());
    }
    if (from.has_res3()) {
      set_res3(from.res3());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void state_v1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void state_v1::CopyFrom(const state_v1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool state_v1::IsInitialized() const {

  return true;
}

void state_v1::Swap(state_v1* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(end_time_, other->end_time_);
    std::swap(res1_, other->res1_);
    std::swap(res2_, other->res2_);
    std::swap(res3_, other->res3_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata state_v1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = state_v1_descriptor_;
  metadata.reflection = state_v1_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int state_list_v1::kStateListFieldNumber;
#endif  // !_MSC_VER

state_list_v1::state_list_v1()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void state_list_v1::InitAsDefaultInstance() {
}

state_list_v1::state_list_v1(const state_list_v1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void state_list_v1::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

state_list_v1::~state_list_v1() {
  SharedDtor();
}

void state_list_v1::SharedDtor() {
  if (this != default_instance_) {
  }
}

void state_list_v1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* state_list_v1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return state_list_v1_descriptor_;
}

const state_list_v1& state_list_v1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_extend_5fdata_2eproto();
  return *default_instance_;
}

state_list_v1* state_list_v1::default_instance_ = NULL;

state_list_v1* state_list_v1::New() const {
  return new state_list_v1;
}

void state_list_v1::Clear() {
  state_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool state_list_v1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .extend_data.state_v1 state_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_state_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_state_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_state_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void state_list_v1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .extend_data.state_v1 state_list = 1;
  for (int i = 0; i < this->state_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->state_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* state_list_v1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .extend_data.state_v1 state_list = 1;
  for (int i = 0; i < this->state_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->state_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int state_list_v1::ByteSize() const {
  int total_size = 0;

  // repeated .extend_data.state_v1 state_list = 1;
  total_size += 1 * this->state_list_size();
  for (int i = 0; i < this->state_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->state_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void state_list_v1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const state_list_v1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const state_list_v1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void state_list_v1::MergeFrom(const state_list_v1& from) {
  GOOGLE_CHECK_NE(&from, this);
  state_list_.MergeFrom(from.state_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void state_list_v1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void state_list_v1::CopyFrom(const state_list_v1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool state_list_v1::IsInitialized() const {

  return true;
}

void state_list_v1::Swap(state_list_v1* other) {
  if (other != this) {
    state_list_.Swap(&other->state_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata state_list_v1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = state_list_v1_descriptor_;
  metadata.reflection = state_list_v1_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace extend_data

// @@protoc_insertion_point(global_scope)
