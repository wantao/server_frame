// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ns.db.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ns.db.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protoc {
namespace nsdb {

namespace {

const ::google::protobuf::Descriptor* CDBServerInfoRpt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDBServerInfoRpt_reflection_ = NULL;
const ::google::protobuf::Descriptor* CNameServerInfoRpt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CNameServerInfoRpt_reflection_ = NULL;
const ::google::protobuf::Descriptor* CRandCheckReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CRandCheckReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CRandCheckAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CRandCheckAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* CHeartPing_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CHeartPing_reflection_ = NULL;
const ::google::protobuf::Descriptor* CHeartPingAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CHeartPingAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* CheckNewNameReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CheckNewNameReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CheckNewNameAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CheckNewNameAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetUniqueIDReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetUniqueIDReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetUniqueIDAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetUniqueIDAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChongZhiPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChongZhiPlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChongZhiNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChongZhiNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* report_online_number_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  report_online_number_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameImportLogRpt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameImportLogRpt_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameServerMessageTransNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameServerMessageTransNtf_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* E_GS_TRANS_TYPE_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ns_2edb_2eproto() {
  protobuf_AddDesc_ns_2edb_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ns.db.proto");
  GOOGLE_CHECK(file != NULL);
  CDBServerInfoRpt_descriptor_ = file->message_type(0);
  static const int CDBServerInfoRpt_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDBServerInfoRpt, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDBServerInfoRpt, name_),
  };
  CDBServerInfoRpt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDBServerInfoRpt_descriptor_,
      CDBServerInfoRpt::default_instance_,
      CDBServerInfoRpt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDBServerInfoRpt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDBServerInfoRpt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDBServerInfoRpt));
  CNameServerInfoRpt_descriptor_ = file->message_type(1);
  static const int CNameServerInfoRpt_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNameServerInfoRpt, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNameServerInfoRpt, name_),
  };
  CNameServerInfoRpt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CNameServerInfoRpt_descriptor_,
      CNameServerInfoRpt::default_instance_,
      CNameServerInfoRpt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNameServerInfoRpt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNameServerInfoRpt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CNameServerInfoRpt));
  CRandCheckReq_descriptor_ = file->message_type(2);
  static const int CRandCheckReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRandCheckReq, randkeys_),
  };
  CRandCheckReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CRandCheckReq_descriptor_,
      CRandCheckReq::default_instance_,
      CRandCheckReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRandCheckReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRandCheckReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CRandCheckReq));
  CRandCheckAck_descriptor_ = file->message_type(3);
  static const int CRandCheckAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRandCheckAck, keys_),
  };
  CRandCheckAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CRandCheckAck_descriptor_,
      CRandCheckAck::default_instance_,
      CRandCheckAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRandCheckAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRandCheckAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CRandCheckAck));
  CHeartPing_descriptor_ = file->message_type(4);
  static const int CHeartPing_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHeartPing, opt_),
  };
  CHeartPing_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CHeartPing_descriptor_,
      CHeartPing::default_instance_,
      CHeartPing_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHeartPing, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHeartPing, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CHeartPing));
  CHeartPingAck_descriptor_ = file->message_type(5);
  static const int CHeartPingAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHeartPingAck, opt_),
  };
  CHeartPingAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CHeartPingAck_descriptor_,
      CHeartPingAck::default_instance_,
      CHeartPingAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHeartPingAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHeartPingAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CHeartPingAck));
  CheckNewNameReq_descriptor_ = file->message_type(6);
  static const int CheckNewNameReq_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckNewNameReq, digit_account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckNewNameReq, newname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckNewNameReq, head_pic_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckNewNameReq, gameserverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckNewNameReq, sex_),
  };
  CheckNewNameReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CheckNewNameReq_descriptor_,
      CheckNewNameReq::default_instance_,
      CheckNewNameReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckNewNameReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckNewNameReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CheckNewNameReq));
  CheckNewNameAck_descriptor_ = file->message_type(7);
  static const int CheckNewNameAck_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckNewNameAck, digit_account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckNewNameAck, newname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckNewNameAck, head_pic_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckNewNameAck, error_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckNewNameAck, gameserverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckNewNameAck, sex_),
  };
  CheckNewNameAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CheckNewNameAck_descriptor_,
      CheckNewNameAck::default_instance_,
      CheckNewNameAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckNewNameAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckNewNameAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CheckNewNameAck));
  GetUniqueIDReq_descriptor_ = file->message_type(8);
  static const int GetUniqueIDReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUniqueIDReq, dbserverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUniqueIDReq, gameserverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUniqueIDReq, number_),
  };
  GetUniqueIDReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetUniqueIDReq_descriptor_,
      GetUniqueIDReq::default_instance_,
      GetUniqueIDReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUniqueIDReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUniqueIDReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetUniqueIDReq));
  GetUniqueIDAck_descriptor_ = file->message_type(9);
  static const int GetUniqueIDAck_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUniqueIDAck, dbserverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUniqueIDAck, gameserverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUniqueIDAck, begin_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUniqueIDAck, end_id_),
  };
  GetUniqueIDAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetUniqueIDAck_descriptor_,
      GetUniqueIDAck::default_instance_,
      GetUniqueIDAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUniqueIDAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUniqueIDAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetUniqueIDAck));
  ChongZhiPlayer_descriptor_ = file->message_type(10);
  static const int ChongZhiPlayer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChongZhiPlayer, transaction_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChongZhiPlayer, playerid_),
  };
  ChongZhiPlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChongZhiPlayer_descriptor_,
      ChongZhiPlayer::default_instance_,
      ChongZhiPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChongZhiPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChongZhiPlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChongZhiPlayer));
  ChongZhiNtf_descriptor_ = file->message_type(11);
  static const int ChongZhiNtf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChongZhiNtf, area_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChongZhiNtf, chongzhi_user_),
  };
  ChongZhiNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChongZhiNtf_descriptor_,
      ChongZhiNtf::default_instance_,
      ChongZhiNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChongZhiNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChongZhiNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChongZhiNtf));
  report_online_number_descriptor_ = file->message_type(12);
  static const int report_online_number_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(report_online_number, area_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(report_online_number, total_number_),
  };
  report_online_number_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      report_online_number_descriptor_,
      report_online_number::default_instance_,
      report_online_number_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(report_online_number, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(report_online_number, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(report_online_number));
  GameImportLogRpt_descriptor_ = file->message_type(13);
  static const int GameImportLogRpt_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameImportLogRpt, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameImportLogRpt, aread_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameImportLogRpt, server_kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameImportLogRpt, server_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameImportLogRpt, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameImportLogRpt, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameImportLogRpt, playername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameImportLogRpt, msg_),
  };
  GameImportLogRpt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameImportLogRpt_descriptor_,
      GameImportLogRpt::default_instance_,
      GameImportLogRpt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameImportLogRpt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameImportLogRpt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameImportLogRpt));
  GameServerMessageTransNtf_descriptor_ = file->message_type(14);
  static const int GameServerMessageTransNtf_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameServerMessageTransNtf, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameServerMessageTransNtf, trans_kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameServerMessageTransNtf, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameServerMessageTransNtf, target_gs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameServerMessageTransNtf, area_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameServerMessageTransNtf, area_name_),
  };
  GameServerMessageTransNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameServerMessageTransNtf_descriptor_,
      GameServerMessageTransNtf::default_instance_,
      GameServerMessageTransNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameServerMessageTransNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameServerMessageTransNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameServerMessageTransNtf));
  E_GS_TRANS_TYPE_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ns_2edb_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDBServerInfoRpt_descriptor_, &CDBServerInfoRpt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CNameServerInfoRpt_descriptor_, &CNameServerInfoRpt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CRandCheckReq_descriptor_, &CRandCheckReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CRandCheckAck_descriptor_, &CRandCheckAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CHeartPing_descriptor_, &CHeartPing::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CHeartPingAck_descriptor_, &CHeartPingAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CheckNewNameReq_descriptor_, &CheckNewNameReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CheckNewNameAck_descriptor_, &CheckNewNameAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetUniqueIDReq_descriptor_, &GetUniqueIDReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetUniqueIDAck_descriptor_, &GetUniqueIDAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChongZhiPlayer_descriptor_, &ChongZhiPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChongZhiNtf_descriptor_, &ChongZhiNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    report_online_number_descriptor_, &report_online_number::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameImportLogRpt_descriptor_, &GameImportLogRpt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameServerMessageTransNtf_descriptor_, &GameServerMessageTransNtf::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ns_2edb_2eproto() {
  delete CDBServerInfoRpt::default_instance_;
  delete CDBServerInfoRpt_reflection_;
  delete CNameServerInfoRpt::default_instance_;
  delete CNameServerInfoRpt_reflection_;
  delete CRandCheckReq::default_instance_;
  delete CRandCheckReq_reflection_;
  delete CRandCheckAck::default_instance_;
  delete CRandCheckAck_reflection_;
  delete CHeartPing::default_instance_;
  delete CHeartPing_reflection_;
  delete CHeartPingAck::default_instance_;
  delete CHeartPingAck_reflection_;
  delete CheckNewNameReq::default_instance_;
  delete CheckNewNameReq_reflection_;
  delete CheckNewNameAck::default_instance_;
  delete CheckNewNameAck_reflection_;
  delete GetUniqueIDReq::default_instance_;
  delete GetUniqueIDReq_reflection_;
  delete GetUniqueIDAck::default_instance_;
  delete GetUniqueIDAck_reflection_;
  delete ChongZhiPlayer::default_instance_;
  delete ChongZhiPlayer_reflection_;
  delete ChongZhiNtf::default_instance_;
  delete ChongZhiNtf_reflection_;
  delete report_online_number::default_instance_;
  delete report_online_number_reflection_;
  delete GameImportLogRpt::default_instance_;
  delete GameImportLogRpt_reflection_;
  delete GameServerMessageTransNtf::default_instance_;
  delete GameServerMessageTransNtf_reflection_;
}

void protobuf_AddDesc_ns_2edb_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013ns.db.proto\022\013protoc.nsdb\",\n\020CDBServerI"
    "nfoRpt\022\n\n\002id\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\".\n\022CNam"
    "eServerInfoRpt\022\n\n\002id\030\001 \001(\t\022\014\n\004name\030\002 \001(\t"
    "\"!\n\rCRandCheckReq\022\020\n\010randkeys\030\001 \001(\014\"\035\n\rC"
    "RandCheckAck\022\014\n\004keys\030\001 \001(\014\"\031\n\nCHeartPing"
    "\022\013\n\003opt\030\001 \001(\005\"\034\n\rCHeartPingAck\022\013\n\003opt\030\001 "
    "\001(\005\"q\n\017CheckNewNameReq\022\025\n\rdigit_account\030"
    "\001 \001(\004\022\017\n\007newname\030\002 \001(\t\022\023\n\013head_pic_id\030\003 "
    "\001(\r\022\024\n\014gameserverid\030\004 \001(\t\022\013\n\003sex\030\005 \001(\010\"\203"
    "\001\n\017CheckNewNameAck\022\025\n\rdigit_account\030\001 \001("
    "\004\022\017\n\007newname\030\002 \001(\t\022\023\n\013head_pic_id\030\003 \001(\r\022"
    "\020\n\010error_no\030\004 \001(\005\022\024\n\014gameserverid\030\005 \001(\t\022"
    "\013\n\003sex\030\006 \001(\010\"J\n\016GetUniqueIDReq\022\022\n\ndbserv"
    "erid\030\001 \001(\t\022\024\n\014gameserverid\030\002 \001(\t\022\016\n\006numb"
    "er\030\003 \001(\r\"\\\n\016GetUniqueIDAck\022\022\n\ndbserverid"
    "\030\001 \001(\t\022\024\n\014gameserverid\030\002 \001(\t\022\020\n\010begin_id"
    "\030\003 \001(\004\022\016\n\006end_id\030\004 \001(\004\":\n\016ChongZhiPlayer"
    "\022\026\n\016transaction_id\030\001 \001(\004\022\020\n\010playerid\030\002 \001"
    "(\004\"R\n\013ChongZhiNtf\022\017\n\007area_no\030\001 \001(\r\0222\n\rch"
    "ongzhi_user\030\002 \003(\0132\033.protoc.nsdb.ChongZhi"
    "Player\"=\n\024report_online_number\022\017\n\007area_n"
    "o\030\001 \001(\005\022\024\n\014total_number\030\002 \001(\005\"\242\001\n\020GameIm"
    "portLogRpt\022\020\n\010event_id\030\001 \001(\r\022\020\n\010aread_no"
    "\030\002 \001(\r\022\023\n\013server_kind\030\003 \001(\r\022\021\n\tserver_no"
    "\030\004 \001(\r\022\017\n\007account\030\005 \001(\t\022\020\n\010playerid\030\006 \001("
    "\004\022\022\n\nplayername\030\007 \001(\t\022\013\n\003msg\030\010 \001(\t\"\235\001\n\031G"
    "ameServerMessageTransNtf\022\n\n\002id\030\001 \001(\r\0220\n\n"
    "trans_kind\030\002 \001(\0162\034.protoc.nsdb.E_GS_TRAN"
    "S_TYPE\022\013\n\003msg\030\003 \001(\014\022\021\n\ttarget_gs\030\004 \001(\t\022\017"
    "\n\007area_id\030\005 \001(\r\022\021\n\tarea_name\030\006 \001(\t*/\n\017E_"
    "GS_TRANS_TYPE\022\t\n\005e_all\020\001\022\021\n\re_except_sel"
    "l\020\002", 1243);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ns.db.proto", &protobuf_RegisterTypes);
  CDBServerInfoRpt::default_instance_ = new CDBServerInfoRpt();
  CNameServerInfoRpt::default_instance_ = new CNameServerInfoRpt();
  CRandCheckReq::default_instance_ = new CRandCheckReq();
  CRandCheckAck::default_instance_ = new CRandCheckAck();
  CHeartPing::default_instance_ = new CHeartPing();
  CHeartPingAck::default_instance_ = new CHeartPingAck();
  CheckNewNameReq::default_instance_ = new CheckNewNameReq();
  CheckNewNameAck::default_instance_ = new CheckNewNameAck();
  GetUniqueIDReq::default_instance_ = new GetUniqueIDReq();
  GetUniqueIDAck::default_instance_ = new GetUniqueIDAck();
  ChongZhiPlayer::default_instance_ = new ChongZhiPlayer();
  ChongZhiNtf::default_instance_ = new ChongZhiNtf();
  report_online_number::default_instance_ = new report_online_number();
  GameImportLogRpt::default_instance_ = new GameImportLogRpt();
  GameServerMessageTransNtf::default_instance_ = new GameServerMessageTransNtf();
  CDBServerInfoRpt::default_instance_->InitAsDefaultInstance();
  CNameServerInfoRpt::default_instance_->InitAsDefaultInstance();
  CRandCheckReq::default_instance_->InitAsDefaultInstance();
  CRandCheckAck::default_instance_->InitAsDefaultInstance();
  CHeartPing::default_instance_->InitAsDefaultInstance();
  CHeartPingAck::default_instance_->InitAsDefaultInstance();
  CheckNewNameReq::default_instance_->InitAsDefaultInstance();
  CheckNewNameAck::default_instance_->InitAsDefaultInstance();
  GetUniqueIDReq::default_instance_->InitAsDefaultInstance();
  GetUniqueIDAck::default_instance_->InitAsDefaultInstance();
  ChongZhiPlayer::default_instance_->InitAsDefaultInstance();
  ChongZhiNtf::default_instance_->InitAsDefaultInstance();
  report_online_number::default_instance_->InitAsDefaultInstance();
  GameImportLogRpt::default_instance_->InitAsDefaultInstance();
  GameServerMessageTransNtf::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ns_2edb_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ns_2edb_2eproto {
  StaticDescriptorInitializer_ns_2edb_2eproto() {
    protobuf_AddDesc_ns_2edb_2eproto();
  }
} static_descriptor_initializer_ns_2edb_2eproto_;
const ::google::protobuf::EnumDescriptor* E_GS_TRANS_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_GS_TRANS_TYPE_descriptor_;
}
bool E_GS_TRANS_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int CDBServerInfoRpt::kIdFieldNumber;
const int CDBServerInfoRpt::kNameFieldNumber;
#endif  // !_MSC_VER

CDBServerInfoRpt::CDBServerInfoRpt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CDBServerInfoRpt::InitAsDefaultInstance() {
}

CDBServerInfoRpt::CDBServerInfoRpt(const CDBServerInfoRpt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CDBServerInfoRpt::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDBServerInfoRpt::~CDBServerInfoRpt() {
  SharedDtor();
}

void CDBServerInfoRpt::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CDBServerInfoRpt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDBServerInfoRpt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDBServerInfoRpt_descriptor_;
}

const CDBServerInfoRpt& CDBServerInfoRpt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ns_2edb_2eproto();
  return *default_instance_;
}

CDBServerInfoRpt* CDBServerInfoRpt::default_instance_ = NULL;

CDBServerInfoRpt* CDBServerInfoRpt::New() const {
  return new CDBServerInfoRpt;
}

void CDBServerInfoRpt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDBServerInfoRpt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CDBServerInfoRpt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CDBServerInfoRpt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CDBServerInfoRpt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDBServerInfoRpt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDBServerInfoRpt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDBServerInfoRpt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDBServerInfoRpt::MergeFrom(const CDBServerInfoRpt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDBServerInfoRpt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDBServerInfoRpt::CopyFrom(const CDBServerInfoRpt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDBServerInfoRpt::IsInitialized() const {

  return true;
}

void CDBServerInfoRpt::Swap(CDBServerInfoRpt* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDBServerInfoRpt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDBServerInfoRpt_descriptor_;
  metadata.reflection = CDBServerInfoRpt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CNameServerInfoRpt::kIdFieldNumber;
const int CNameServerInfoRpt::kNameFieldNumber;
#endif  // !_MSC_VER

CNameServerInfoRpt::CNameServerInfoRpt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CNameServerInfoRpt::InitAsDefaultInstance() {
}

CNameServerInfoRpt::CNameServerInfoRpt(const CNameServerInfoRpt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CNameServerInfoRpt::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CNameServerInfoRpt::~CNameServerInfoRpt() {
  SharedDtor();
}

void CNameServerInfoRpt::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CNameServerInfoRpt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CNameServerInfoRpt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CNameServerInfoRpt_descriptor_;
}

const CNameServerInfoRpt& CNameServerInfoRpt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ns_2edb_2eproto();
  return *default_instance_;
}

CNameServerInfoRpt* CNameServerInfoRpt::default_instance_ = NULL;

CNameServerInfoRpt* CNameServerInfoRpt::New() const {
  return new CNameServerInfoRpt;
}

void CNameServerInfoRpt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CNameServerInfoRpt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CNameServerInfoRpt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CNameServerInfoRpt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CNameServerInfoRpt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CNameServerInfoRpt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CNameServerInfoRpt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CNameServerInfoRpt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CNameServerInfoRpt::MergeFrom(const CNameServerInfoRpt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CNameServerInfoRpt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CNameServerInfoRpt::CopyFrom(const CNameServerInfoRpt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CNameServerInfoRpt::IsInitialized() const {

  return true;
}

void CNameServerInfoRpt::Swap(CNameServerInfoRpt* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CNameServerInfoRpt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CNameServerInfoRpt_descriptor_;
  metadata.reflection = CNameServerInfoRpt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CRandCheckReq::kRandkeysFieldNumber;
#endif  // !_MSC_VER

CRandCheckReq::CRandCheckReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CRandCheckReq::InitAsDefaultInstance() {
}

CRandCheckReq::CRandCheckReq(const CRandCheckReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CRandCheckReq::SharedCtor() {
  _cached_size_ = 0;
  randkeys_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CRandCheckReq::~CRandCheckReq() {
  SharedDtor();
}

void CRandCheckReq::SharedDtor() {
  if (randkeys_ != &::google::protobuf::internal::kEmptyString) {
    delete randkeys_;
  }
  if (this != default_instance_) {
  }
}

void CRandCheckReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CRandCheckReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CRandCheckReq_descriptor_;
}

const CRandCheckReq& CRandCheckReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ns_2edb_2eproto();
  return *default_instance_;
}

CRandCheckReq* CRandCheckReq::default_instance_ = NULL;

CRandCheckReq* CRandCheckReq::New() const {
  return new CRandCheckReq;
}

void CRandCheckReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_randkeys()) {
      if (randkeys_ != &::google::protobuf::internal::kEmptyString) {
        randkeys_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CRandCheckReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes randkeys = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_randkeys()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CRandCheckReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes randkeys = 1;
  if (has_randkeys()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->randkeys(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CRandCheckReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes randkeys = 1;
  if (has_randkeys()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->randkeys(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CRandCheckReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes randkeys = 1;
    if (has_randkeys()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->randkeys());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CRandCheckReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CRandCheckReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CRandCheckReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CRandCheckReq::MergeFrom(const CRandCheckReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_randkeys()) {
      set_randkeys(from.randkeys());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CRandCheckReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CRandCheckReq::CopyFrom(const CRandCheckReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRandCheckReq::IsInitialized() const {

  return true;
}

void CRandCheckReq::Swap(CRandCheckReq* other) {
  if (other != this) {
    std::swap(randkeys_, other->randkeys_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CRandCheckReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CRandCheckReq_descriptor_;
  metadata.reflection = CRandCheckReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CRandCheckAck::kKeysFieldNumber;
#endif  // !_MSC_VER

CRandCheckAck::CRandCheckAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CRandCheckAck::InitAsDefaultInstance() {
}

CRandCheckAck::CRandCheckAck(const CRandCheckAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CRandCheckAck::SharedCtor() {
  _cached_size_ = 0;
  keys_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CRandCheckAck::~CRandCheckAck() {
  SharedDtor();
}

void CRandCheckAck::SharedDtor() {
  if (keys_ != &::google::protobuf::internal::kEmptyString) {
    delete keys_;
  }
  if (this != default_instance_) {
  }
}

void CRandCheckAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CRandCheckAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CRandCheckAck_descriptor_;
}

const CRandCheckAck& CRandCheckAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ns_2edb_2eproto();
  return *default_instance_;
}

CRandCheckAck* CRandCheckAck::default_instance_ = NULL;

CRandCheckAck* CRandCheckAck::New() const {
  return new CRandCheckAck;
}

void CRandCheckAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_keys()) {
      if (keys_ != &::google::protobuf::internal::kEmptyString) {
        keys_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CRandCheckAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes keys = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_keys()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CRandCheckAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes keys = 1;
  if (has_keys()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->keys(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CRandCheckAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes keys = 1;
  if (has_keys()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->keys(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CRandCheckAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes keys = 1;
    if (has_keys()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->keys());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CRandCheckAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CRandCheckAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CRandCheckAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CRandCheckAck::MergeFrom(const CRandCheckAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_keys()) {
      set_keys(from.keys());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CRandCheckAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CRandCheckAck::CopyFrom(const CRandCheckAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRandCheckAck::IsInitialized() const {

  return true;
}

void CRandCheckAck::Swap(CRandCheckAck* other) {
  if (other != this) {
    std::swap(keys_, other->keys_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CRandCheckAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CRandCheckAck_descriptor_;
  metadata.reflection = CRandCheckAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CHeartPing::kOptFieldNumber;
#endif  // !_MSC_VER

CHeartPing::CHeartPing()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CHeartPing::InitAsDefaultInstance() {
}

CHeartPing::CHeartPing(const CHeartPing& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CHeartPing::SharedCtor() {
  _cached_size_ = 0;
  opt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CHeartPing::~CHeartPing() {
  SharedDtor();
}

void CHeartPing::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CHeartPing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CHeartPing::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CHeartPing_descriptor_;
}

const CHeartPing& CHeartPing::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ns_2edb_2eproto();
  return *default_instance_;
}

CHeartPing* CHeartPing::default_instance_ = NULL;

CHeartPing* CHeartPing::New() const {
  return new CHeartPing;
}

void CHeartPing::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opt_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CHeartPing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 opt = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opt_)));
          set_has_opt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CHeartPing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 opt = 1;
  if (has_opt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CHeartPing::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 opt = 1;
  if (has_opt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->opt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CHeartPing::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 opt = 1;
    if (has_opt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CHeartPing::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CHeartPing* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CHeartPing*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CHeartPing::MergeFrom(const CHeartPing& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opt()) {
      set_opt(from.opt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CHeartPing::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CHeartPing::CopyFrom(const CHeartPing& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHeartPing::IsInitialized() const {

  return true;
}

void CHeartPing::Swap(CHeartPing* other) {
  if (other != this) {
    std::swap(opt_, other->opt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CHeartPing::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CHeartPing_descriptor_;
  metadata.reflection = CHeartPing_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CHeartPingAck::kOptFieldNumber;
#endif  // !_MSC_VER

CHeartPingAck::CHeartPingAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CHeartPingAck::InitAsDefaultInstance() {
}

CHeartPingAck::CHeartPingAck(const CHeartPingAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CHeartPingAck::SharedCtor() {
  _cached_size_ = 0;
  opt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CHeartPingAck::~CHeartPingAck() {
  SharedDtor();
}

void CHeartPingAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CHeartPingAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CHeartPingAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CHeartPingAck_descriptor_;
}

const CHeartPingAck& CHeartPingAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ns_2edb_2eproto();
  return *default_instance_;
}

CHeartPingAck* CHeartPingAck::default_instance_ = NULL;

CHeartPingAck* CHeartPingAck::New() const {
  return new CHeartPingAck;
}

void CHeartPingAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opt_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CHeartPingAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 opt = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opt_)));
          set_has_opt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CHeartPingAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 opt = 1;
  if (has_opt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CHeartPingAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 opt = 1;
  if (has_opt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->opt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CHeartPingAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 opt = 1;
    if (has_opt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CHeartPingAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CHeartPingAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CHeartPingAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CHeartPingAck::MergeFrom(const CHeartPingAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opt()) {
      set_opt(from.opt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CHeartPingAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CHeartPingAck::CopyFrom(const CHeartPingAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHeartPingAck::IsInitialized() const {

  return true;
}

void CHeartPingAck::Swap(CHeartPingAck* other) {
  if (other != this) {
    std::swap(opt_, other->opt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CHeartPingAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CHeartPingAck_descriptor_;
  metadata.reflection = CHeartPingAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CheckNewNameReq::kDigitAccountFieldNumber;
const int CheckNewNameReq::kNewnameFieldNumber;
const int CheckNewNameReq::kHeadPicIdFieldNumber;
const int CheckNewNameReq::kGameserveridFieldNumber;
const int CheckNewNameReq::kSexFieldNumber;
#endif  // !_MSC_VER

CheckNewNameReq::CheckNewNameReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CheckNewNameReq::InitAsDefaultInstance() {
}

CheckNewNameReq::CheckNewNameReq(const CheckNewNameReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CheckNewNameReq::SharedCtor() {
  _cached_size_ = 0;
  digit_account_ = GOOGLE_ULONGLONG(0);
  newname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  head_pic_id_ = 0u;
  gameserverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sex_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CheckNewNameReq::~CheckNewNameReq() {
  SharedDtor();
}

void CheckNewNameReq::SharedDtor() {
  if (newname_ != &::google::protobuf::internal::kEmptyString) {
    delete newname_;
  }
  if (gameserverid_ != &::google::protobuf::internal::kEmptyString) {
    delete gameserverid_;
  }
  if (this != default_instance_) {
  }
}

void CheckNewNameReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckNewNameReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CheckNewNameReq_descriptor_;
}

const CheckNewNameReq& CheckNewNameReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ns_2edb_2eproto();
  return *default_instance_;
}

CheckNewNameReq* CheckNewNameReq::default_instance_ = NULL;

CheckNewNameReq* CheckNewNameReq::New() const {
  return new CheckNewNameReq;
}

void CheckNewNameReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    digit_account_ = GOOGLE_ULONGLONG(0);
    if (has_newname()) {
      if (newname_ != &::google::protobuf::internal::kEmptyString) {
        newname_->clear();
      }
    }
    head_pic_id_ = 0u;
    if (has_gameserverid()) {
      if (gameserverid_ != &::google::protobuf::internal::kEmptyString) {
        gameserverid_->clear();
      }
    }
    sex_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CheckNewNameReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 digit_account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &digit_account_)));
          set_has_digit_account();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_newname;
        break;
      }

      // optional string newname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_newname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_newname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->newname().data(), this->newname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_head_pic_id;
        break;
      }

      // optional uint32 head_pic_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_head_pic_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &head_pic_id_)));
          set_has_head_pic_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_gameserverid;
        break;
      }

      // optional string gameserverid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameserverid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gameserverid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gameserverid().data(), this->gameserverid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_sex;
        break;
      }

      // optional bool sex = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CheckNewNameReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 digit_account = 1;
  if (has_digit_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->digit_account(), output);
  }

  // optional string newname = 2;
  if (has_newname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->newname().data(), this->newname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->newname(), output);
  }

  // optional uint32 head_pic_id = 3;
  if (has_head_pic_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->head_pic_id(), output);
  }

  // optional string gameserverid = 4;
  if (has_gameserverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gameserverid().data(), this->gameserverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->gameserverid(), output);
  }

  // optional bool sex = 5;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->sex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CheckNewNameReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 digit_account = 1;
  if (has_digit_account()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->digit_account(), target);
  }

  // optional string newname = 2;
  if (has_newname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->newname().data(), this->newname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->newname(), target);
  }

  // optional uint32 head_pic_id = 3;
  if (has_head_pic_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->head_pic_id(), target);
  }

  // optional string gameserverid = 4;
  if (has_gameserverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gameserverid().data(), this->gameserverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->gameserverid(), target);
  }

  // optional bool sex = 5;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->sex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CheckNewNameReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 digit_account = 1;
    if (has_digit_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->digit_account());
    }

    // optional string newname = 2;
    if (has_newname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->newname());
    }

    // optional uint32 head_pic_id = 3;
    if (has_head_pic_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->head_pic_id());
    }

    // optional string gameserverid = 4;
    if (has_gameserverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gameserverid());
    }

    // optional bool sex = 5;
    if (has_sex()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckNewNameReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CheckNewNameReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CheckNewNameReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CheckNewNameReq::MergeFrom(const CheckNewNameReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_digit_account()) {
      set_digit_account(from.digit_account());
    }
    if (from.has_newname()) {
      set_newname(from.newname());
    }
    if (from.has_head_pic_id()) {
      set_head_pic_id(from.head_pic_id());
    }
    if (from.has_gameserverid()) {
      set_gameserverid(from.gameserverid());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CheckNewNameReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckNewNameReq::CopyFrom(const CheckNewNameReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckNewNameReq::IsInitialized() const {

  return true;
}

void CheckNewNameReq::Swap(CheckNewNameReq* other) {
  if (other != this) {
    std::swap(digit_account_, other->digit_account_);
    std::swap(newname_, other->newname_);
    std::swap(head_pic_id_, other->head_pic_id_);
    std::swap(gameserverid_, other->gameserverid_);
    std::swap(sex_, other->sex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CheckNewNameReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CheckNewNameReq_descriptor_;
  metadata.reflection = CheckNewNameReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CheckNewNameAck::kDigitAccountFieldNumber;
const int CheckNewNameAck::kNewnameFieldNumber;
const int CheckNewNameAck::kHeadPicIdFieldNumber;
const int CheckNewNameAck::kErrorNoFieldNumber;
const int CheckNewNameAck::kGameserveridFieldNumber;
const int CheckNewNameAck::kSexFieldNumber;
#endif  // !_MSC_VER

CheckNewNameAck::CheckNewNameAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CheckNewNameAck::InitAsDefaultInstance() {
}

CheckNewNameAck::CheckNewNameAck(const CheckNewNameAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CheckNewNameAck::SharedCtor() {
  _cached_size_ = 0;
  digit_account_ = GOOGLE_ULONGLONG(0);
  newname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  head_pic_id_ = 0u;
  error_no_ = 0;
  gameserverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sex_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CheckNewNameAck::~CheckNewNameAck() {
  SharedDtor();
}

void CheckNewNameAck::SharedDtor() {
  if (newname_ != &::google::protobuf::internal::kEmptyString) {
    delete newname_;
  }
  if (gameserverid_ != &::google::protobuf::internal::kEmptyString) {
    delete gameserverid_;
  }
  if (this != default_instance_) {
  }
}

void CheckNewNameAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckNewNameAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CheckNewNameAck_descriptor_;
}

const CheckNewNameAck& CheckNewNameAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ns_2edb_2eproto();
  return *default_instance_;
}

CheckNewNameAck* CheckNewNameAck::default_instance_ = NULL;

CheckNewNameAck* CheckNewNameAck::New() const {
  return new CheckNewNameAck;
}

void CheckNewNameAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    digit_account_ = GOOGLE_ULONGLONG(0);
    if (has_newname()) {
      if (newname_ != &::google::protobuf::internal::kEmptyString) {
        newname_->clear();
      }
    }
    head_pic_id_ = 0u;
    error_no_ = 0;
    if (has_gameserverid()) {
      if (gameserverid_ != &::google::protobuf::internal::kEmptyString) {
        gameserverid_->clear();
      }
    }
    sex_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CheckNewNameAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 digit_account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &digit_account_)));
          set_has_digit_account();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_newname;
        break;
      }

      // optional string newname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_newname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_newname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->newname().data(), this->newname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_head_pic_id;
        break;
      }

      // optional uint32 head_pic_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_head_pic_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &head_pic_id_)));
          set_has_head_pic_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_error_no;
        break;
      }

      // optional int32 error_no = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error_no:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_no_)));
          set_has_error_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_gameserverid;
        break;
      }

      // optional string gameserverid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameserverid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gameserverid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gameserverid().data(), this->gameserverid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_sex;
        break;
      }

      // optional bool sex = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CheckNewNameAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 digit_account = 1;
  if (has_digit_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->digit_account(), output);
  }

  // optional string newname = 2;
  if (has_newname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->newname().data(), this->newname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->newname(), output);
  }

  // optional uint32 head_pic_id = 3;
  if (has_head_pic_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->head_pic_id(), output);
  }

  // optional int32 error_no = 4;
  if (has_error_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->error_no(), output);
  }

  // optional string gameserverid = 5;
  if (has_gameserverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gameserverid().data(), this->gameserverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->gameserverid(), output);
  }

  // optional bool sex = 6;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->sex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CheckNewNameAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 digit_account = 1;
  if (has_digit_account()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->digit_account(), target);
  }

  // optional string newname = 2;
  if (has_newname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->newname().data(), this->newname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->newname(), target);
  }

  // optional uint32 head_pic_id = 3;
  if (has_head_pic_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->head_pic_id(), target);
  }

  // optional int32 error_no = 4;
  if (has_error_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->error_no(), target);
  }

  // optional string gameserverid = 5;
  if (has_gameserverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gameserverid().data(), this->gameserverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->gameserverid(), target);
  }

  // optional bool sex = 6;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->sex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CheckNewNameAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 digit_account = 1;
    if (has_digit_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->digit_account());
    }

    // optional string newname = 2;
    if (has_newname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->newname());
    }

    // optional uint32 head_pic_id = 3;
    if (has_head_pic_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->head_pic_id());
    }

    // optional int32 error_no = 4;
    if (has_error_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_no());
    }

    // optional string gameserverid = 5;
    if (has_gameserverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gameserverid());
    }

    // optional bool sex = 6;
    if (has_sex()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckNewNameAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CheckNewNameAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CheckNewNameAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CheckNewNameAck::MergeFrom(const CheckNewNameAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_digit_account()) {
      set_digit_account(from.digit_account());
    }
    if (from.has_newname()) {
      set_newname(from.newname());
    }
    if (from.has_head_pic_id()) {
      set_head_pic_id(from.head_pic_id());
    }
    if (from.has_error_no()) {
      set_error_no(from.error_no());
    }
    if (from.has_gameserverid()) {
      set_gameserverid(from.gameserverid());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CheckNewNameAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckNewNameAck::CopyFrom(const CheckNewNameAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckNewNameAck::IsInitialized() const {

  return true;
}

void CheckNewNameAck::Swap(CheckNewNameAck* other) {
  if (other != this) {
    std::swap(digit_account_, other->digit_account_);
    std::swap(newname_, other->newname_);
    std::swap(head_pic_id_, other->head_pic_id_);
    std::swap(error_no_, other->error_no_);
    std::swap(gameserverid_, other->gameserverid_);
    std::swap(sex_, other->sex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CheckNewNameAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CheckNewNameAck_descriptor_;
  metadata.reflection = CheckNewNameAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetUniqueIDReq::kDbserveridFieldNumber;
const int GetUniqueIDReq::kGameserveridFieldNumber;
const int GetUniqueIDReq::kNumberFieldNumber;
#endif  // !_MSC_VER

GetUniqueIDReq::GetUniqueIDReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetUniqueIDReq::InitAsDefaultInstance() {
}

GetUniqueIDReq::GetUniqueIDReq(const GetUniqueIDReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetUniqueIDReq::SharedCtor() {
  _cached_size_ = 0;
  dbserverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gameserverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  number_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetUniqueIDReq::~GetUniqueIDReq() {
  SharedDtor();
}

void GetUniqueIDReq::SharedDtor() {
  if (dbserverid_ != &::google::protobuf::internal::kEmptyString) {
    delete dbserverid_;
  }
  if (gameserverid_ != &::google::protobuf::internal::kEmptyString) {
    delete gameserverid_;
  }
  if (this != default_instance_) {
  }
}

void GetUniqueIDReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetUniqueIDReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetUniqueIDReq_descriptor_;
}

const GetUniqueIDReq& GetUniqueIDReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ns_2edb_2eproto();
  return *default_instance_;
}

GetUniqueIDReq* GetUniqueIDReq::default_instance_ = NULL;

GetUniqueIDReq* GetUniqueIDReq::New() const {
  return new GetUniqueIDReq;
}

void GetUniqueIDReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_dbserverid()) {
      if (dbserverid_ != &::google::protobuf::internal::kEmptyString) {
        dbserverid_->clear();
      }
    }
    if (has_gameserverid()) {
      if (gameserverid_ != &::google::protobuf::internal::kEmptyString) {
        gameserverid_->clear();
      }
    }
    number_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetUniqueIDReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string dbserverid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dbserverid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dbserverid().data(), this->dbserverid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_gameserverid;
        break;
      }

      // optional string gameserverid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameserverid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gameserverid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gameserverid().data(), this->gameserverid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_number;
        break;
      }

      // optional uint32 number = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetUniqueIDReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string dbserverid = 1;
  if (has_dbserverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dbserverid().data(), this->dbserverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->dbserverid(), output);
  }

  // optional string gameserverid = 2;
  if (has_gameserverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gameserverid().data(), this->gameserverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->gameserverid(), output);
  }

  // optional uint32 number = 3;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->number(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetUniqueIDReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string dbserverid = 1;
  if (has_dbserverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dbserverid().data(), this->dbserverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->dbserverid(), target);
  }

  // optional string gameserverid = 2;
  if (has_gameserverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gameserverid().data(), this->gameserverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->gameserverid(), target);
  }

  // optional uint32 number = 3;
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->number(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetUniqueIDReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string dbserverid = 1;
    if (has_dbserverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dbserverid());
    }

    // optional string gameserverid = 2;
    if (has_gameserverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gameserverid());
    }

    // optional uint32 number = 3;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->number());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetUniqueIDReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetUniqueIDReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetUniqueIDReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetUniqueIDReq::MergeFrom(const GetUniqueIDReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dbserverid()) {
      set_dbserverid(from.dbserverid());
    }
    if (from.has_gameserverid()) {
      set_gameserverid(from.gameserverid());
    }
    if (from.has_number()) {
      set_number(from.number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetUniqueIDReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetUniqueIDReq::CopyFrom(const GetUniqueIDReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUniqueIDReq::IsInitialized() const {

  return true;
}

void GetUniqueIDReq::Swap(GetUniqueIDReq* other) {
  if (other != this) {
    std::swap(dbserverid_, other->dbserverid_);
    std::swap(gameserverid_, other->gameserverid_);
    std::swap(number_, other->number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetUniqueIDReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetUniqueIDReq_descriptor_;
  metadata.reflection = GetUniqueIDReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetUniqueIDAck::kDbserveridFieldNumber;
const int GetUniqueIDAck::kGameserveridFieldNumber;
const int GetUniqueIDAck::kBeginIdFieldNumber;
const int GetUniqueIDAck::kEndIdFieldNumber;
#endif  // !_MSC_VER

GetUniqueIDAck::GetUniqueIDAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetUniqueIDAck::InitAsDefaultInstance() {
}

GetUniqueIDAck::GetUniqueIDAck(const GetUniqueIDAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetUniqueIDAck::SharedCtor() {
  _cached_size_ = 0;
  dbserverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gameserverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  begin_id_ = GOOGLE_ULONGLONG(0);
  end_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetUniqueIDAck::~GetUniqueIDAck() {
  SharedDtor();
}

void GetUniqueIDAck::SharedDtor() {
  if (dbserverid_ != &::google::protobuf::internal::kEmptyString) {
    delete dbserverid_;
  }
  if (gameserverid_ != &::google::protobuf::internal::kEmptyString) {
    delete gameserverid_;
  }
  if (this != default_instance_) {
  }
}

void GetUniqueIDAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetUniqueIDAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetUniqueIDAck_descriptor_;
}

const GetUniqueIDAck& GetUniqueIDAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ns_2edb_2eproto();
  return *default_instance_;
}

GetUniqueIDAck* GetUniqueIDAck::default_instance_ = NULL;

GetUniqueIDAck* GetUniqueIDAck::New() const {
  return new GetUniqueIDAck;
}

void GetUniqueIDAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_dbserverid()) {
      if (dbserverid_ != &::google::protobuf::internal::kEmptyString) {
        dbserverid_->clear();
      }
    }
    if (has_gameserverid()) {
      if (gameserverid_ != &::google::protobuf::internal::kEmptyString) {
        gameserverid_->clear();
      }
    }
    begin_id_ = GOOGLE_ULONGLONG(0);
    end_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetUniqueIDAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string dbserverid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dbserverid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dbserverid().data(), this->dbserverid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_gameserverid;
        break;
      }

      // optional string gameserverid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameserverid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gameserverid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gameserverid().data(), this->gameserverid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_begin_id;
        break;
      }

      // optional uint64 begin_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_begin_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &begin_id_)));
          set_has_begin_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_end_id;
        break;
      }

      // optional uint64 end_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &end_id_)));
          set_has_end_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetUniqueIDAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string dbserverid = 1;
  if (has_dbserverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dbserverid().data(), this->dbserverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->dbserverid(), output);
  }

  // optional string gameserverid = 2;
  if (has_gameserverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gameserverid().data(), this->gameserverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->gameserverid(), output);
  }

  // optional uint64 begin_id = 3;
  if (has_begin_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->begin_id(), output);
  }

  // optional uint64 end_id = 4;
  if (has_end_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->end_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetUniqueIDAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string dbserverid = 1;
  if (has_dbserverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dbserverid().data(), this->dbserverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->dbserverid(), target);
  }

  // optional string gameserverid = 2;
  if (has_gameserverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gameserverid().data(), this->gameserverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->gameserverid(), target);
  }

  // optional uint64 begin_id = 3;
  if (has_begin_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->begin_id(), target);
  }

  // optional uint64 end_id = 4;
  if (has_end_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->end_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetUniqueIDAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string dbserverid = 1;
    if (has_dbserverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dbserverid());
    }

    // optional string gameserverid = 2;
    if (has_gameserverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gameserverid());
    }

    // optional uint64 begin_id = 3;
    if (has_begin_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->begin_id());
    }

    // optional uint64 end_id = 4;
    if (has_end_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->end_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetUniqueIDAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetUniqueIDAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetUniqueIDAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetUniqueIDAck::MergeFrom(const GetUniqueIDAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dbserverid()) {
      set_dbserverid(from.dbserverid());
    }
    if (from.has_gameserverid()) {
      set_gameserverid(from.gameserverid());
    }
    if (from.has_begin_id()) {
      set_begin_id(from.begin_id());
    }
    if (from.has_end_id()) {
      set_end_id(from.end_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetUniqueIDAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetUniqueIDAck::CopyFrom(const GetUniqueIDAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUniqueIDAck::IsInitialized() const {

  return true;
}

void GetUniqueIDAck::Swap(GetUniqueIDAck* other) {
  if (other != this) {
    std::swap(dbserverid_, other->dbserverid_);
    std::swap(gameserverid_, other->gameserverid_);
    std::swap(begin_id_, other->begin_id_);
    std::swap(end_id_, other->end_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetUniqueIDAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetUniqueIDAck_descriptor_;
  metadata.reflection = GetUniqueIDAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChongZhiPlayer::kTransactionIdFieldNumber;
const int ChongZhiPlayer::kPlayeridFieldNumber;
#endif  // !_MSC_VER

ChongZhiPlayer::ChongZhiPlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChongZhiPlayer::InitAsDefaultInstance() {
}

ChongZhiPlayer::ChongZhiPlayer(const ChongZhiPlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChongZhiPlayer::SharedCtor() {
  _cached_size_ = 0;
  transaction_id_ = GOOGLE_ULONGLONG(0);
  playerid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChongZhiPlayer::~ChongZhiPlayer() {
  SharedDtor();
}

void ChongZhiPlayer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChongZhiPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChongZhiPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChongZhiPlayer_descriptor_;
}

const ChongZhiPlayer& ChongZhiPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ns_2edb_2eproto();
  return *default_instance_;
}

ChongZhiPlayer* ChongZhiPlayer::default_instance_ = NULL;

ChongZhiPlayer* ChongZhiPlayer::New() const {
  return new ChongZhiPlayer;
}

void ChongZhiPlayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    transaction_id_ = GOOGLE_ULONGLONG(0);
    playerid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChongZhiPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 transaction_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &transaction_id_)));
          set_has_transaction_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerid;
        break;
      }

      // optional uint64 playerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChongZhiPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 transaction_id = 1;
  if (has_transaction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->transaction_id(), output);
  }

  // optional uint64 playerid = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChongZhiPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 transaction_id = 1;
  if (has_transaction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->transaction_id(), target);
  }

  // optional uint64 playerid = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChongZhiPlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 transaction_id = 1;
    if (has_transaction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->transaction_id());
    }

    // optional uint64 playerid = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChongZhiPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChongZhiPlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChongZhiPlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChongZhiPlayer::MergeFrom(const ChongZhiPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_transaction_id()) {
      set_transaction_id(from.transaction_id());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChongZhiPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChongZhiPlayer::CopyFrom(const ChongZhiPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChongZhiPlayer::IsInitialized() const {

  return true;
}

void ChongZhiPlayer::Swap(ChongZhiPlayer* other) {
  if (other != this) {
    std::swap(transaction_id_, other->transaction_id_);
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChongZhiPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChongZhiPlayer_descriptor_;
  metadata.reflection = ChongZhiPlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChongZhiNtf::kAreaNoFieldNumber;
const int ChongZhiNtf::kChongzhiUserFieldNumber;
#endif  // !_MSC_VER

ChongZhiNtf::ChongZhiNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChongZhiNtf::InitAsDefaultInstance() {
}

ChongZhiNtf::ChongZhiNtf(const ChongZhiNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChongZhiNtf::SharedCtor() {
  _cached_size_ = 0;
  area_no_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChongZhiNtf::~ChongZhiNtf() {
  SharedDtor();
}

void ChongZhiNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChongZhiNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChongZhiNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChongZhiNtf_descriptor_;
}

const ChongZhiNtf& ChongZhiNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ns_2edb_2eproto();
  return *default_instance_;
}

ChongZhiNtf* ChongZhiNtf::default_instance_ = NULL;

ChongZhiNtf* ChongZhiNtf::New() const {
  return new ChongZhiNtf;
}

void ChongZhiNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    area_no_ = 0u;
  }
  chongzhi_user_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChongZhiNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 area_no = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &area_no_)));
          set_has_area_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_chongzhi_user;
        break;
      }

      // repeated .protoc.nsdb.ChongZhiPlayer chongzhi_user = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chongzhi_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chongzhi_user()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_chongzhi_user;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChongZhiNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 area_no = 1;
  if (has_area_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->area_no(), output);
  }

  // repeated .protoc.nsdb.ChongZhiPlayer chongzhi_user = 2;
  for (int i = 0; i < this->chongzhi_user_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->chongzhi_user(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChongZhiNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 area_no = 1;
  if (has_area_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->area_no(), target);
  }

  // repeated .protoc.nsdb.ChongZhiPlayer chongzhi_user = 2;
  for (int i = 0; i < this->chongzhi_user_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->chongzhi_user(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChongZhiNtf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 area_no = 1;
    if (has_area_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->area_no());
    }

  }
  // repeated .protoc.nsdb.ChongZhiPlayer chongzhi_user = 2;
  total_size += 1 * this->chongzhi_user_size();
  for (int i = 0; i < this->chongzhi_user_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chongzhi_user(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChongZhiNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChongZhiNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChongZhiNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChongZhiNtf::MergeFrom(const ChongZhiNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  chongzhi_user_.MergeFrom(from.chongzhi_user_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_area_no()) {
      set_area_no(from.area_no());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChongZhiNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChongZhiNtf::CopyFrom(const ChongZhiNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChongZhiNtf::IsInitialized() const {

  return true;
}

void ChongZhiNtf::Swap(ChongZhiNtf* other) {
  if (other != this) {
    std::swap(area_no_, other->area_no_);
    chongzhi_user_.Swap(&other->chongzhi_user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChongZhiNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChongZhiNtf_descriptor_;
  metadata.reflection = ChongZhiNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int report_online_number::kAreaNoFieldNumber;
const int report_online_number::kTotalNumberFieldNumber;
#endif  // !_MSC_VER

report_online_number::report_online_number()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void report_online_number::InitAsDefaultInstance() {
}

report_online_number::report_online_number(const report_online_number& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void report_online_number::SharedCtor() {
  _cached_size_ = 0;
  area_no_ = 0;
  total_number_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

report_online_number::~report_online_number() {
  SharedDtor();
}

void report_online_number::SharedDtor() {
  if (this != default_instance_) {
  }
}

void report_online_number::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* report_online_number::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return report_online_number_descriptor_;
}

const report_online_number& report_online_number::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ns_2edb_2eproto();
  return *default_instance_;
}

report_online_number* report_online_number::default_instance_ = NULL;

report_online_number* report_online_number::New() const {
  return new report_online_number;
}

void report_online_number::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    area_no_ = 0;
    total_number_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool report_online_number::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 area_no = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &area_no_)));
          set_has_area_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_total_number;
        break;
      }

      // optional int32 total_number = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_number_)));
          set_has_total_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void report_online_number::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 area_no = 1;
  if (has_area_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->area_no(), output);
  }

  // optional int32 total_number = 2;
  if (has_total_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->total_number(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* report_online_number::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 area_no = 1;
  if (has_area_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->area_no(), target);
  }

  // optional int32 total_number = 2;
  if (has_total_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->total_number(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int report_online_number::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 area_no = 1;
    if (has_area_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->area_no());
    }

    // optional int32 total_number = 2;
    if (has_total_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_number());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void report_online_number::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const report_online_number* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const report_online_number*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void report_online_number::MergeFrom(const report_online_number& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_area_no()) {
      set_area_no(from.area_no());
    }
    if (from.has_total_number()) {
      set_total_number(from.total_number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void report_online_number::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void report_online_number::CopyFrom(const report_online_number& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool report_online_number::IsInitialized() const {

  return true;
}

void report_online_number::Swap(report_online_number* other) {
  if (other != this) {
    std::swap(area_no_, other->area_no_);
    std::swap(total_number_, other->total_number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata report_online_number::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = report_online_number_descriptor_;
  metadata.reflection = report_online_number_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameImportLogRpt::kEventIdFieldNumber;
const int GameImportLogRpt::kAreadNoFieldNumber;
const int GameImportLogRpt::kServerKindFieldNumber;
const int GameImportLogRpt::kServerNoFieldNumber;
const int GameImportLogRpt::kAccountFieldNumber;
const int GameImportLogRpt::kPlayeridFieldNumber;
const int GameImportLogRpt::kPlayernameFieldNumber;
const int GameImportLogRpt::kMsgFieldNumber;
#endif  // !_MSC_VER

GameImportLogRpt::GameImportLogRpt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameImportLogRpt::InitAsDefaultInstance() {
}

GameImportLogRpt::GameImportLogRpt(const GameImportLogRpt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameImportLogRpt::SharedCtor() {
  _cached_size_ = 0;
  event_id_ = 0u;
  aread_no_ = 0u;
  server_kind_ = 0u;
  server_no_ = 0u;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  playerid_ = GOOGLE_ULONGLONG(0);
  playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameImportLogRpt::~GameImportLogRpt() {
  SharedDtor();
}

void GameImportLogRpt::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    delete playername_;
  }
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void GameImportLogRpt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameImportLogRpt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameImportLogRpt_descriptor_;
}

const GameImportLogRpt& GameImportLogRpt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ns_2edb_2eproto();
  return *default_instance_;
}

GameImportLogRpt* GameImportLogRpt::default_instance_ = NULL;

GameImportLogRpt* GameImportLogRpt::New() const {
  return new GameImportLogRpt;
}

void GameImportLogRpt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    event_id_ = 0u;
    aread_no_ = 0u;
    server_kind_ = 0u;
    server_no_ = 0u;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    playerid_ = GOOGLE_ULONGLONG(0);
    if (has_playername()) {
      if (playername_ != &::google::protobuf::internal::kEmptyString) {
        playername_->clear();
      }
    }
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameImportLogRpt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 event_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_aread_no;
        break;
      }

      // optional uint32 aread_no = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_aread_no:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aread_no_)));
          set_has_aread_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_server_kind;
        break;
      }

      // optional uint32 server_kind = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_kind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_kind_)));
          set_has_server_kind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_server_no;
        break;
      }

      // optional uint32 server_no = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_no:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_no_)));
          set_has_server_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_account;
        break;
      }

      // optional string account = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_playerid;
        break;
      }

      // optional uint64 playerid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_playername;
        break;
      }

      // optional string playername = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playername().data(), this->playername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_msg;
        break;
      }

      // optional string msg = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameImportLogRpt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 event_id = 1;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->event_id(), output);
  }

  // optional uint32 aread_no = 2;
  if (has_aread_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->aread_no(), output);
  }

  // optional uint32 server_kind = 3;
  if (has_server_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->server_kind(), output);
  }

  // optional uint32 server_no = 4;
  if (has_server_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->server_no(), output);
  }

  // optional string account = 5;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->account(), output);
  }

  // optional uint64 playerid = 6;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->playerid(), output);
  }

  // optional string playername = 7;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->playername(), output);
  }

  // optional string msg = 8;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameImportLogRpt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 event_id = 1;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->event_id(), target);
  }

  // optional uint32 aread_no = 2;
  if (has_aread_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->aread_no(), target);
  }

  // optional uint32 server_kind = 3;
  if (has_server_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->server_kind(), target);
  }

  // optional uint32 server_no = 4;
  if (has_server_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->server_no(), target);
  }

  // optional string account = 5;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->account(), target);
  }

  // optional uint64 playerid = 6;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->playerid(), target);
  }

  // optional string playername = 7;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->playername(), target);
  }

  // optional string msg = 8;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameImportLogRpt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 event_id = 1;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_id());
    }

    // optional uint32 aread_no = 2;
    if (has_aread_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->aread_no());
    }

    // optional uint32 server_kind = 3;
    if (has_server_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_kind());
    }

    // optional uint32 server_no = 4;
    if (has_server_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_no());
    }

    // optional string account = 5;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional uint64 playerid = 6;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

    // optional string playername = 7;
    if (has_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playername());
    }

    // optional string msg = 8;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameImportLogRpt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameImportLogRpt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameImportLogRpt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameImportLogRpt::MergeFrom(const GameImportLogRpt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
    if (from.has_aread_no()) {
      set_aread_no(from.aread_no());
    }
    if (from.has_server_kind()) {
      set_server_kind(from.server_kind());
    }
    if (from.has_server_no()) {
      set_server_no(from.server_no());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_playername()) {
      set_playername(from.playername());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameImportLogRpt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameImportLogRpt::CopyFrom(const GameImportLogRpt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameImportLogRpt::IsInitialized() const {

  return true;
}

void GameImportLogRpt::Swap(GameImportLogRpt* other) {
  if (other != this) {
    std::swap(event_id_, other->event_id_);
    std::swap(aread_no_, other->aread_no_);
    std::swap(server_kind_, other->server_kind_);
    std::swap(server_no_, other->server_no_);
    std::swap(account_, other->account_);
    std::swap(playerid_, other->playerid_);
    std::swap(playername_, other->playername_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameImportLogRpt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameImportLogRpt_descriptor_;
  metadata.reflection = GameImportLogRpt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameServerMessageTransNtf::kIdFieldNumber;
const int GameServerMessageTransNtf::kTransKindFieldNumber;
const int GameServerMessageTransNtf::kMsgFieldNumber;
const int GameServerMessageTransNtf::kTargetGsFieldNumber;
const int GameServerMessageTransNtf::kAreaIdFieldNumber;
const int GameServerMessageTransNtf::kAreaNameFieldNumber;
#endif  // !_MSC_VER

GameServerMessageTransNtf::GameServerMessageTransNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameServerMessageTransNtf::InitAsDefaultInstance() {
}

GameServerMessageTransNtf::GameServerMessageTransNtf(const GameServerMessageTransNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameServerMessageTransNtf::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  trans_kind_ = 1;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  target_gs_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  area_id_ = 0u;
  area_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameServerMessageTransNtf::~GameServerMessageTransNtf() {
  SharedDtor();
}

void GameServerMessageTransNtf::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (target_gs_ != &::google::protobuf::internal::kEmptyString) {
    delete target_gs_;
  }
  if (area_name_ != &::google::protobuf::internal::kEmptyString) {
    delete area_name_;
  }
  if (this != default_instance_) {
  }
}

void GameServerMessageTransNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameServerMessageTransNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameServerMessageTransNtf_descriptor_;
}

const GameServerMessageTransNtf& GameServerMessageTransNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ns_2edb_2eproto();
  return *default_instance_;
}

GameServerMessageTransNtf* GameServerMessageTransNtf::default_instance_ = NULL;

GameServerMessageTransNtf* GameServerMessageTransNtf::New() const {
  return new GameServerMessageTransNtf;
}

void GameServerMessageTransNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    trans_kind_ = 1;
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
    if (has_target_gs()) {
      if (target_gs_ != &::google::protobuf::internal::kEmptyString) {
        target_gs_->clear();
      }
    }
    area_id_ = 0u;
    if (has_area_name()) {
      if (area_name_ != &::google::protobuf::internal::kEmptyString) {
        area_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameServerMessageTransNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_trans_kind;
        break;
      }

      // optional .protoc.nsdb.E_GS_TRANS_TYPE trans_kind = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trans_kind:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protoc::nsdb::E_GS_TRANS_TYPE_IsValid(value)) {
            set_trans_kind(static_cast< ::protoc::nsdb::E_GS_TRANS_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_msg;
        break;
      }

      // optional bytes msg = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_target_gs;
        break;
      }

      // optional string target_gs = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_target_gs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_target_gs()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->target_gs().data(), this->target_gs().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_area_id;
        break;
      }

      // optional uint32 area_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_area_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &area_id_)));
          set_has_area_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_area_name;
        break;
      }

      // optional string area_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_area_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_area_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->area_name().data(), this->area_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameServerMessageTransNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional .protoc.nsdb.E_GS_TRANS_TYPE trans_kind = 2;
  if (has_trans_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->trans_kind(), output);
  }

  // optional bytes msg = 3;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->msg(), output);
  }

  // optional string target_gs = 4;
  if (has_target_gs()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->target_gs().data(), this->target_gs().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->target_gs(), output);
  }

  // optional uint32 area_id = 5;
  if (has_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->area_id(), output);
  }

  // optional string area_name = 6;
  if (has_area_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->area_name().data(), this->area_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->area_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameServerMessageTransNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional .protoc.nsdb.E_GS_TRANS_TYPE trans_kind = 2;
  if (has_trans_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->trans_kind(), target);
  }

  // optional bytes msg = 3;
  if (has_msg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->msg(), target);
  }

  // optional string target_gs = 4;
  if (has_target_gs()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->target_gs().data(), this->target_gs().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->target_gs(), target);
  }

  // optional uint32 area_id = 5;
  if (has_area_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->area_id(), target);
  }

  // optional string area_name = 6;
  if (has_area_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->area_name().data(), this->area_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->area_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameServerMessageTransNtf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional .protoc.nsdb.E_GS_TRANS_TYPE trans_kind = 2;
    if (has_trans_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->trans_kind());
    }

    // optional bytes msg = 3;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->msg());
    }

    // optional string target_gs = 4;
    if (has_target_gs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->target_gs());
    }

    // optional uint32 area_id = 5;
    if (has_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->area_id());
    }

    // optional string area_name = 6;
    if (has_area_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->area_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameServerMessageTransNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameServerMessageTransNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameServerMessageTransNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameServerMessageTransNtf::MergeFrom(const GameServerMessageTransNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_trans_kind()) {
      set_trans_kind(from.trans_kind());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
    if (from.has_target_gs()) {
      set_target_gs(from.target_gs());
    }
    if (from.has_area_id()) {
      set_area_id(from.area_id());
    }
    if (from.has_area_name()) {
      set_area_name(from.area_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameServerMessageTransNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameServerMessageTransNtf::CopyFrom(const GameServerMessageTransNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameServerMessageTransNtf::IsInitialized() const {

  return true;
}

void GameServerMessageTransNtf::Swap(GameServerMessageTransNtf* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(trans_kind_, other->trans_kind_);
    std::swap(msg_, other->msg_);
    std::swap(target_gs_, other->target_gs_);
    std::swap(area_id_, other->area_id_);
    std::swap(area_name_, other->area_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameServerMessageTransNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameServerMessageTransNtf_descriptor_;
  metadata.reflection = GameServerMessageTransNtf_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace nsdb
}  // namespace protoc

// @@protoc_insertion_point(global_scope)
