// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol_id.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "protocol_id.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protoc {
namespace protocol_id {

namespace {

const ::google::protobuf::EnumDescriptor* PROTOC_ID_LIMIT_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PROTOCOL_ID_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_protocol_5fid_2eproto() {
  protobuf_AddDesc_protocol_5fid_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "protocol_id.proto");
  GOOGLE_CHECK(file != NULL);
  PROTOC_ID_LIMIT_descriptor_ = file->enum_type(0);
  PROTOCOL_ID_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_protocol_5fid_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
}

}  // namespace

void protobuf_ShutdownFile_protocol_5fid_2eproto() {
}

void protobuf_AddDesc_protocol_5fid_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021protocol_id.proto\022\022protoc.protocol_id*"
    "\243\007\n\017PROTOC_ID_LIMIT\022\031\n\023CONST_MAX_PROTOC_"
    "ID\020\377\377\003\022.\n*CONST_LOGINSERVER_2_CLIENT_BEG"
    "IN_PROTOC_ID\020\001\022-\n(CONST_LOGINSERVER_2_CL"
    "IENT_END_PROTOC_ID\020\364\003\0223\n.CONST_LOGINSERV"
    "ER_2_GATESERVER_BEGIN_PROTOC_ID\020\365\003\0221\n,CO"
    "NST_LOGINSERVER_2_GATESERVER_END_PROTOC_"
    "ID\020\350\007\022.\n)CONST_GATESERVER_2_CLIENT_BEGIN"
    "_PROTOC_ID\020\351\007\022,\n\'CONST_GATESERVER_2_CLIE"
    "NT_END_PROTOC_ID\020\320\017\0222\n-CONST_GAMESERVER_"
    "2_GATESERVER_BEGIN_PROTOC_ID\020\321\017\0220\n+CONST"
    "_GAMESERVER_2_GATESERVER_END_PROTOC_ID\020\304"
    "\023\0221\n,CONST_LOGINSERVER_2_DBSERVER_BEGIN_"
    "PROTOC_ID\020\305\023\022/\n*CONST_LOGINSERVER_2_DBSE"
    "RVER_END_PROTOC_ID\020\270\027\0222\n-CONST_GAMESERVE"
    "R_2_GAMESERVER_BEGIN_PROTOC_ID\020\271\027\0220\n+CON"
    "ST_GAMESERVER_2_GAMESERVER_END_PROTOC_ID"
    "\020\254\033\0220\n+CONST_NAMESERVER_2_DBSERVER_BEGIN"
    "_PROTOC_ID\020\255\033\022.\n)CONST_NAMESERVER_2_DBSE"
    "RVER_END_PROTOC_ID\020\240\037\0220\n+CONST_GAMESERVE"
    "R_2_DBSERVER_BEGIN_PROTOC_ID\020\241\037\022.\n)CONST"
    "_GAMESERVER_2_DBSERVER_END_PROTOC_ID\020\210\'\022"
    ".\n)CONST_CLIENT_2_GAMESERVER_BEGIN_PROTO"
    "C_ID\020\211\'\022,\n\'CONST_CLIENT_2_GAMESERVER_END"
    "_PROTOC_ID\020\300>*\207\022\n\013PROTOCOL_ID\022\024\n\020LGC_ID_"
    "LOGIN_REQ\020\001\022\024\n\020LGC_ID_LOGIN_ACK\020\002\022\035\n\031LGC"
    "_ID_CREATE_ACCOUNT_REQ\020\003\022\035\n\031LGC_ID_CREAT"
    "E_ACCOUNT_ACK\020\004\022\031\n\024LGT_ID_GATE_INFO_RPT\020"
    "\365\003\022\033\n\026LGT_ID_USER_NUMBER_RPT\020\366\003\022 \n\033LGT_I"
    "D_USER_ONLINE_GATE_REQ\020\367\003\022 \n\033LGT_ID_USER"
    "_ONLINE_GATE_ACK\020\370\003\022\026\n\021LGT_ID_HEART_PING"
    "\020\371\003\022\025\n\020LGT_ID_HEART_ACK\020\372\003\022\032\n\025LGT_ID_RAN"
    "D_CHECK_REQ\020\373\003\022\032\n\025LGT_ID_RAND_CHECK_ACK\020"
    "\374\003\022(\n#LGT_ID_UpdateFastAttackBlackAccoun"
    "t\020\375\003\022\036\n\031GST_ID_GAME_SERVER_REPORT\020\321\017\022\036\n\031"
    "GST_ID_GATE_SERVER_REPORT\020\322\017\022!\n\034GST_ID_G"
    "ATE_TRANS_CLIENT_MSG\020\323\017\022&\n!GST_ID_GATE_T"
    "RANS_GAME_SERVER_MSG\020\324\017\022%\n GST_ID_NEW_PL"
    "AYER_ENTER_GAME_REQ\020\325\017\022%\n GST_ID_NEW_PLA"
    "YER_ENTER_GAME_ACK\020\326\017\022!\n\034GST_ID_PLAYER_L"
    "EAVE_GAME_RPT\020\327\017\022\037\n\032GST_ID_KICK_OUT_PLAY"
    "ER_RPT\020\330\017\022\026\n\021GST_ID_HEART_PING\020\331\017\022\025\n\020GST"
    "_ID_HEART_ACK\020\332\017\022\032\n\025GST_ID_RAND_CHECK_RE"
    "Q\020\333\017\022\032\n\025GST_ID_RAND_CHECK_ACK\020\334\017\022\031\n\024GST_"
    "ID_SWITCH_GS_REQ\020\335\017\022\031\n\024GST_ID_SWITCH_GS_"
    "ACK\020\336\017\022\035\n\030GST_ID_GATE_RE_LOGIN_REQ\020\340\017\022\035\n"
    "\030GST_ID_GATE_RE_LOGIN_ACK\020\341\017\022\030\n\023GST_ID_G"
    "ateCloseNtf\020\342\017\022\030\n\023GST_ID_login_gt_req\020\343\017"
    "\022\030\n\023GST_ID_login_gt_ack\020\344\017\022\035\n\030GST_ID_cli"
    "ent_number_rpt\020\345\017\022*\n%GST_ID_client_login"
    "_gate_time_out_rpt\020\346\017\022\036\n\031LDB_ID_LOGINSER"
    "VER_REPORT\020\305\023\022&\n!LDB_ID_USER_CHECK_IN_DB"
    "SERVER_REQ\020\306\023\022&\n!LDB_ID_USER_CHECK_IN_DB"
    "SERVER_ACK\020\307\023\022\026\n\021LDB_ID_HEART_PING\020\310\023\022\025\n"
    "\020LDB_ID_HEART_ACK\020\311\023\022\032\n\025LDB_ID_RAND_CHEC"
    "K_REQ\020\312\023\022\032\n\025LDB_ID_RAND_CHECK_ACK\020\313\023\022\027\n\022"
    "LDB_ID_GM_LIST_RPT\020\314\023\022!\n\034LDB_ID_MAX_ONLI"
    "NE_NUMBER_RPT\020\315\023\022\026\n\021LDB_ID_DBS_REPORT\020\316\023"
    "\022\032\n\025LDB_ID_GetGM_LIST_REQ\020\317\023\022\032\n\025LDB_ID_G"
    "etGM_LIST_ACK\020\320\023\022\037\n\032LDB_ID_LoginServerCl"
    "oseNtf\020\321\023\022%\n LDB_ID_PlayerGetBaseDataCom"
    "plete\020\322\023\022(\n#LDB_ID_ClientCloseWhenWaitCh"
    "eckInDB\020\323\023\022\035\n\030LDB_ID_get_login_key_req\020\324"
    "\023\022\035\n\030LDB_ID_get_login_key_ack\020\325\023\022\033\n\026NDS_"
    "ID_DBSERVER_REPORT\020\255\033\022\026\n\021NDS_ID_HEART_PI"
    "NG\020\256\033\022\025\n\020NDS_ID_HEART_ACK\020\257\033\022\032\n\025NDS_ID_R"
    "AND_CHECK_REQ\020\260\033\022\032\n\025NDS_ID_RAND_CHECK_AC"
    "K\020\261\033\022\036\n\031NDS_ID_CHECK_NEW_NAME_REQ\020\262\033\022\036\n\031"
    "NDS_ID_CHECK_NEW_NAME_AKC\020\263\033\022\035\n\030NDS_ID_N"
    "AMESERVER_REPORT\020\264\033\022\034\n\027NDS_ID_GameImport"
    "LogRpt\020\265\033\022\032\n\025NDS_ID_GetUniqueIDReq\020\266\033\022\032\n"
    "\025NDS_ID_GetUniqueIDAck\020\300\033\022\037\n\032NDS_ID_2_NS"
    "_RAND_CHECK_REQ\020\301\033\022\037\n\032NDS_ID_2_NS_RAND_C"
    "HECK_ACK\020\302\033\022\027\n\022NDS_ID_ChongZhiNtf\020\303\033\022\027\n\022"
    "NDS_ID_TXRecordNtf\020\304\033\022\027\n\022NDS_ID_TXAwards"
    "Ntf\020\305\033\022,\n\'NDS_ID_tx_jiao_yi_suo_yu_kou_c"
    "heng_gong\020\306\033\022)\n$NDS_ID_tx_fa_huo_suo_din"
    "g_cheng_gong\020\307\033\022%\n NDS_ID_tx_ping_tai_ko"
    "u_fei_error\020\310\033\022 \n\033NDS_ID_report_online_n"
    "umber\020\311\033\022%\n NDS_ID_GameServerMessageTran"
    "sNtf\020\312\033\022\033\n\026GDS_ID_GAME_SERVER_RPT\020\241\037\022\031\n\024"
    "GDS_ID_DB_SERVER_RPT\020\242\037\022\026\n\021ALL_MAX_PROTO"
    "C_ID\020\300>", 3287);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "protocol_id.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_protocol_5fid_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_protocol_5fid_2eproto {
  StaticDescriptorInitializer_protocol_5fid_2eproto() {
    protobuf_AddDesc_protocol_5fid_2eproto();
  }
} static_descriptor_initializer_protocol_5fid_2eproto_;
const ::google::protobuf::EnumDescriptor* PROTOC_ID_LIMIT_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PROTOC_ID_LIMIT_descriptor_;
}
bool PROTOC_ID_LIMIT_IsValid(int value) {
  switch(value) {
    case 1:
    case 500:
    case 501:
    case 1000:
    case 1001:
    case 2000:
    case 2001:
    case 2500:
    case 2501:
    case 3000:
    case 3001:
    case 3500:
    case 3501:
    case 4000:
    case 4001:
    case 5000:
    case 5001:
    case 8000:
    case 65535:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PROTOCOL_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PROTOCOL_ID_descriptor_;
}
bool PROTOCOL_ID_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 501:
    case 502:
    case 503:
    case 504:
    case 505:
    case 506:
    case 507:
    case 508:
    case 509:
    case 2001:
    case 2002:
    case 2003:
    case 2004:
    case 2005:
    case 2006:
    case 2007:
    case 2008:
    case 2009:
    case 2010:
    case 2011:
    case 2012:
    case 2013:
    case 2014:
    case 2016:
    case 2017:
    case 2018:
    case 2019:
    case 2020:
    case 2021:
    case 2022:
    case 2501:
    case 2502:
    case 2503:
    case 2504:
    case 2505:
    case 2506:
    case 2507:
    case 2508:
    case 2509:
    case 2510:
    case 2511:
    case 2512:
    case 2513:
    case 2514:
    case 2515:
    case 2516:
    case 2517:
    case 3501:
    case 3502:
    case 3503:
    case 3504:
    case 3505:
    case 3506:
    case 3507:
    case 3508:
    case 3509:
    case 3510:
    case 3520:
    case 3521:
    case 3522:
    case 3523:
    case 3524:
    case 3525:
    case 3526:
    case 3527:
    case 3528:
    case 3529:
    case 3530:
    case 4001:
    case 4002:
    case 8000:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol_id
}  // namespace protoc

// @@protoc_insertion_point(global_scope)
