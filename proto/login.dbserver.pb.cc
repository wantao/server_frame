// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: login.dbserver.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "login.dbserver.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protoc {
namespace logindbs {

namespace {

const ::google::protobuf::Descriptor* CLoginServerRpt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CLoginServerRpt_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUserCheckInDBServerReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUserCheckInDBServerReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUserCheckInDBServerAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUserCheckInDBServerAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* CRandCheckReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CRandCheckReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CRandCheckAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CRandCheckAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* CHeartPing_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CHeartPing_reflection_ = NULL;
const ::google::protobuf::Descriptor* CHeartPingAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CHeartPingAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMListRpt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMListRpt_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMListRpt_gm_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMListRpt_gm_reflection_ = NULL;
const ::google::protobuf::Descriptor* AreaMaxOnlineNumberRpt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AreaMaxOnlineNumberRpt_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDBServerRpt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDBServerRpt_reflection_ = NULL;
const ::google::protobuf::Descriptor* LDGetGM_ListReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LDGetGM_ListReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LDGetGM_ListAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LDGetGM_ListAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginServerCloseNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginServerCloseNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerGetBaseDataComplete_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerGetBaseDataComplete_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientCloseWhenWaitCheckInDB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientCloseWhenWaitCheckInDB_reflection_ = NULL;
const ::google::protobuf::Descriptor* get_login_key_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  get_login_key_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* get_login_key_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  get_login_key_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateFastAttackBlackAccountRpt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateFastAttackBlackAccountRpt_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_login_2edbserver_2eproto() {
  protobuf_AddDesc_login_2edbserver_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "login.dbserver.proto");
  GOOGLE_CHECK(file != NULL);
  CLoginServerRpt_descriptor_ = file->message_type(0);
  static const int CLoginServerRpt_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLoginServerRpt, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLoginServerRpt, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLoginServerRpt, key_),
  };
  CLoginServerRpt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CLoginServerRpt_descriptor_,
      CLoginServerRpt::default_instance_,
      CLoginServerRpt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLoginServerRpt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLoginServerRpt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CLoginServerRpt));
  CUserCheckInDBServerReq_descriptor_ = file->message_type(1);
  static const int CUserCheckInDBServerReq_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserCheckInDBServerReq, transid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserCheckInDBServerReq, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserCheckInDBServerReq, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserCheckInDBServerReq, area_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserCheckInDBServerReq, platform_id_),
  };
  CUserCheckInDBServerReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUserCheckInDBServerReq_descriptor_,
      CUserCheckInDBServerReq::default_instance_,
      CUserCheckInDBServerReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserCheckInDBServerReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserCheckInDBServerReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUserCheckInDBServerReq));
  CUserCheckInDBServerAck_descriptor_ = file->message_type(2);
  static const int CUserCheckInDBServerAck_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserCheckInDBServerAck, transid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserCheckInDBServerAck, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserCheckInDBServerAck, err_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserCheckInDBServerAck, gate_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserCheckInDBServerAck, gate_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserCheckInDBServerAck, gate_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserCheckInDBServerAck, sessionid_),
  };
  CUserCheckInDBServerAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUserCheckInDBServerAck_descriptor_,
      CUserCheckInDBServerAck::default_instance_,
      CUserCheckInDBServerAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserCheckInDBServerAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserCheckInDBServerAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUserCheckInDBServerAck));
  CRandCheckReq_descriptor_ = file->message_type(3);
  static const int CRandCheckReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRandCheckReq, randkeys_),
  };
  CRandCheckReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CRandCheckReq_descriptor_,
      CRandCheckReq::default_instance_,
      CRandCheckReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRandCheckReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRandCheckReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CRandCheckReq));
  CRandCheckAck_descriptor_ = file->message_type(4);
  static const int CRandCheckAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRandCheckAck, keys_),
  };
  CRandCheckAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CRandCheckAck_descriptor_,
      CRandCheckAck::default_instance_,
      CRandCheckAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRandCheckAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRandCheckAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CRandCheckAck));
  CHeartPing_descriptor_ = file->message_type(5);
  static const int CHeartPing_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHeartPing, opt_),
  };
  CHeartPing_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CHeartPing_descriptor_,
      CHeartPing::default_instance_,
      CHeartPing_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHeartPing, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHeartPing, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CHeartPing));
  CHeartPingAck_descriptor_ = file->message_type(6);
  static const int CHeartPingAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHeartPingAck, opt_),
  };
  CHeartPingAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CHeartPingAck_descriptor_,
      CHeartPingAck::default_instance_,
      CHeartPingAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHeartPingAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHeartPingAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CHeartPingAck));
  GMListRpt_descriptor_ = file->message_type(7);
  static const int GMListRpt_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMListRpt, table_),
  };
  GMListRpt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMListRpt_descriptor_,
      GMListRpt::default_instance_,
      GMListRpt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMListRpt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMListRpt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMListRpt));
  GMListRpt_gm_descriptor_ = GMListRpt_descriptor_->nested_type(0);
  static const int GMListRpt_gm_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMListRpt_gm, gm_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMListRpt_gm, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMListRpt_gm, password_),
  };
  GMListRpt_gm_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMListRpt_gm_descriptor_,
      GMListRpt_gm::default_instance_,
      GMListRpt_gm_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMListRpt_gm, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMListRpt_gm, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMListRpt_gm));
  AreaMaxOnlineNumberRpt_descriptor_ = file->message_type(8);
  static const int AreaMaxOnlineNumberRpt_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AreaMaxOnlineNumberRpt, number_),
  };
  AreaMaxOnlineNumberRpt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AreaMaxOnlineNumberRpt_descriptor_,
      AreaMaxOnlineNumberRpt::default_instance_,
      AreaMaxOnlineNumberRpt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AreaMaxOnlineNumberRpt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AreaMaxOnlineNumberRpt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AreaMaxOnlineNumberRpt));
  CDBServerRpt_descriptor_ = file->message_type(9);
  static const int CDBServerRpt_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDBServerRpt, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDBServerRpt, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDBServerRpt, number_),
  };
  CDBServerRpt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDBServerRpt_descriptor_,
      CDBServerRpt::default_instance_,
      CDBServerRpt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDBServerRpt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDBServerRpt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDBServerRpt));
  LDGetGM_ListReq_descriptor_ = file->message_type(10);
  static const int LDGetGM_ListReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LDGetGM_ListReq, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LDGetGM_ListReq, strdbid_),
  };
  LDGetGM_ListReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LDGetGM_ListReq_descriptor_,
      LDGetGM_ListReq::default_instance_,
      LDGetGM_ListReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LDGetGM_ListReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LDGetGM_ListReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LDGetGM_ListReq));
  LDGetGM_ListAck_descriptor_ = file->message_type(11);
  static const int LDGetGM_ListAck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LDGetGM_ListAck, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LDGetGM_ListAck, strdbid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LDGetGM_ListAck, err_no_),
  };
  LDGetGM_ListAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LDGetGM_ListAck_descriptor_,
      LDGetGM_ListAck::default_instance_,
      LDGetGM_ListAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LDGetGM_ListAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LDGetGM_ListAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LDGetGM_ListAck));
  LoginServerCloseNtf_descriptor_ = file->message_type(12);
  static const int LoginServerCloseNtf_offsets_[1] = {
  };
  LoginServerCloseNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginServerCloseNtf_descriptor_,
      LoginServerCloseNtf::default_instance_,
      LoginServerCloseNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginServerCloseNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginServerCloseNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginServerCloseNtf));
  PlayerGetBaseDataComplete_descriptor_ = file->message_type(13);
  static const int PlayerGetBaseDataComplete_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerGetBaseDataComplete, account_),
  };
  PlayerGetBaseDataComplete_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerGetBaseDataComplete_descriptor_,
      PlayerGetBaseDataComplete::default_instance_,
      PlayerGetBaseDataComplete_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerGetBaseDataComplete, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerGetBaseDataComplete, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerGetBaseDataComplete));
  ClientCloseWhenWaitCheckInDB_descriptor_ = file->message_type(14);
  static const int ClientCloseWhenWaitCheckInDB_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientCloseWhenWaitCheckInDB, playerid_),
  };
  ClientCloseWhenWaitCheckInDB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientCloseWhenWaitCheckInDB_descriptor_,
      ClientCloseWhenWaitCheckInDB::default_instance_,
      ClientCloseWhenWaitCheckInDB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientCloseWhenWaitCheckInDB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientCloseWhenWaitCheckInDB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientCloseWhenWaitCheckInDB));
  get_login_key_req_descriptor_ = file->message_type(15);
  static const int get_login_key_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_login_key_req, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_login_key_req, gsid_),
  };
  get_login_key_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      get_login_key_req_descriptor_,
      get_login_key_req::default_instance_,
      get_login_key_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_login_key_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_login_key_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(get_login_key_req));
  get_login_key_ack_descriptor_ = file->message_type(16);
  static const int get_login_key_ack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_login_key_ack, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_login_key_ack, gsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_login_key_ack, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_login_key_ack, leave_time_),
  };
  get_login_key_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      get_login_key_ack_descriptor_,
      get_login_key_ack::default_instance_,
      get_login_key_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_login_key_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_login_key_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(get_login_key_ack));
  UpdateFastAttackBlackAccountRpt_descriptor_ = file->message_type(17);
  static const int UpdateFastAttackBlackAccountRpt_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFastAttackBlackAccountRpt, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFastAttackBlackAccountRpt, attack_value_),
  };
  UpdateFastAttackBlackAccountRpt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateFastAttackBlackAccountRpt_descriptor_,
      UpdateFastAttackBlackAccountRpt::default_instance_,
      UpdateFastAttackBlackAccountRpt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFastAttackBlackAccountRpt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFastAttackBlackAccountRpt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateFastAttackBlackAccountRpt));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_login_2edbserver_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CLoginServerRpt_descriptor_, &CLoginServerRpt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUserCheckInDBServerReq_descriptor_, &CUserCheckInDBServerReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUserCheckInDBServerAck_descriptor_, &CUserCheckInDBServerAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CRandCheckReq_descriptor_, &CRandCheckReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CRandCheckAck_descriptor_, &CRandCheckAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CHeartPing_descriptor_, &CHeartPing::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CHeartPingAck_descriptor_, &CHeartPingAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMListRpt_descriptor_, &GMListRpt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMListRpt_gm_descriptor_, &GMListRpt_gm::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AreaMaxOnlineNumberRpt_descriptor_, &AreaMaxOnlineNumberRpt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDBServerRpt_descriptor_, &CDBServerRpt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LDGetGM_ListReq_descriptor_, &LDGetGM_ListReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LDGetGM_ListAck_descriptor_, &LDGetGM_ListAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginServerCloseNtf_descriptor_, &LoginServerCloseNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerGetBaseDataComplete_descriptor_, &PlayerGetBaseDataComplete::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientCloseWhenWaitCheckInDB_descriptor_, &ClientCloseWhenWaitCheckInDB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    get_login_key_req_descriptor_, &get_login_key_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    get_login_key_ack_descriptor_, &get_login_key_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateFastAttackBlackAccountRpt_descriptor_, &UpdateFastAttackBlackAccountRpt::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_login_2edbserver_2eproto() {
  delete CLoginServerRpt::default_instance_;
  delete CLoginServerRpt_reflection_;
  delete CUserCheckInDBServerReq::default_instance_;
  delete CUserCheckInDBServerReq_reflection_;
  delete CUserCheckInDBServerAck::default_instance_;
  delete CUserCheckInDBServerAck_reflection_;
  delete CRandCheckReq::default_instance_;
  delete CRandCheckReq_reflection_;
  delete CRandCheckAck::default_instance_;
  delete CRandCheckAck_reflection_;
  delete CHeartPing::default_instance_;
  delete CHeartPing_reflection_;
  delete CHeartPingAck::default_instance_;
  delete CHeartPingAck_reflection_;
  delete GMListRpt::default_instance_;
  delete GMListRpt_reflection_;
  delete GMListRpt_gm::default_instance_;
  delete GMListRpt_gm_reflection_;
  delete AreaMaxOnlineNumberRpt::default_instance_;
  delete AreaMaxOnlineNumberRpt_reflection_;
  delete CDBServerRpt::default_instance_;
  delete CDBServerRpt_reflection_;
  delete LDGetGM_ListReq::default_instance_;
  delete LDGetGM_ListReq_reflection_;
  delete LDGetGM_ListAck::default_instance_;
  delete LDGetGM_ListAck_reflection_;
  delete LoginServerCloseNtf::default_instance_;
  delete LoginServerCloseNtf_reflection_;
  delete PlayerGetBaseDataComplete::default_instance_;
  delete PlayerGetBaseDataComplete_reflection_;
  delete ClientCloseWhenWaitCheckInDB::default_instance_;
  delete ClientCloseWhenWaitCheckInDB_reflection_;
  delete get_login_key_req::default_instance_;
  delete get_login_key_req_reflection_;
  delete get_login_key_ack::default_instance_;
  delete get_login_key_ack_reflection_;
  delete UpdateFastAttackBlackAccountRpt::default_instance_;
  delete UpdateFastAttackBlackAccountRpt_reflection_;
}

void protobuf_AddDesc_login_2edbserver_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024login.dbserver.proto\022\017protoc.logindbs\""
    "8\n\017CLoginServerRpt\022\n\n\002id\030\001 \001(\t\022\014\n\004name\030\002"
    " \001(\t\022\013\n\003key\030\003 \001(\t\"s\n\027CUserCheckInDBServe"
    "rReq\022\017\n\007transID\030\001 \001(\r\022\020\n\010playerid\030\002 \001(\004\022"
    "\017\n\007account\030\003 \001(\t\022\017\n\007area_id\030\004 \001(\005\022\023\n\013pla"
    "tform_id\030\005 \001(\005\"\225\001\n\027CUserCheckInDBServerA"
    "ck\022\017\n\007transID\030\001 \001(\r\022\020\n\010playerid\030\002 \001(\004\022\016\n"
    "\006err_no\030\003 \001(\005\022\017\n\007gate_ip\030\004 \001(\t\022\021\n\tgate_p"
    "ort\030\005 \001(\r\022\020\n\010gate_key\030\006 \001(\005\022\021\n\tsessionid"
    "\030\007 \001(\r\"!\n\rCRandCheckReq\022\020\n\010randkeys\030\001 \001("
    "\014\"\035\n\rCRandCheckAck\022\014\n\004keys\030\001 \001(\014\"\031\n\nCHea"
    "rtPing\022\013\n\003opt\030\001 \001(\005\"\034\n\rCHeartPingAck\022\013\n\003"
    "opt\030\001 \001(\005\"t\n\tGMListRpt\022,\n\005table\030\001 \003(\0132\035."
    "protoc.logindbs.GMListRpt.gm\0329\n\002gm\022\020\n\010gm"
    "_level\030\002 \001(\005\022\017\n\007account\030\003 \001(\t\022\020\n\010passwor"
    "d\030\004 \001(\t\"(\n\026AreaMaxOnlineNumberRpt\022\016\n\006num"
    "ber\030\001 \001(\005\"8\n\014CDBServerRpt\022\n\n\002id\030\001 \001(\t\022\014\n"
    "\004name\030\002 \001(\t\022\016\n\006number\030\003 \001(\005\"4\n\017LDGetGM_L"
    "istReq\022\020\n\010playerid\030\001 \001(\004\022\017\n\007strDBID\030\002 \001("
    "\t\"D\n\017LDGetGM_ListAck\022\020\n\010playerid\030\001 \001(\004\022\017"
    "\n\007strDBID\030\002 \001(\t\022\016\n\006err_no\030\003 \001(\005\"\025\n\023Login"
    "ServerCloseNtf\",\n\031PlayerGetBaseDataCompl"
    "ete\022\017\n\007account\030\001 \001(\t\"0\n\034ClientCloseWhenW"
    "aitCheckInDB\022\020\n\010playerid\030\001 \001(\004\"3\n\021get_lo"
    "gin_key_req\022\020\n\010playerid\030\001 \001(\004\022\014\n\004gsid\030\002 "
    "\001(\t\"T\n\021get_login_key_ack\022\020\n\010playerid\030\001 \001"
    "(\004\022\014\n\004gsid\030\002 \001(\t\022\013\n\003key\030\003 \001(\t\022\022\n\nleave_t"
    "ime\030\004 \001(\005\"H\n\037UpdateFastAttackBlackAccoun"
    "tRpt\022\017\n\007account\030\001 \001(\t\022\024\n\014attack_value\030\002 "
    "\001(\r", 1163);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "login.dbserver.proto", &protobuf_RegisterTypes);
  CLoginServerRpt::default_instance_ = new CLoginServerRpt();
  CUserCheckInDBServerReq::default_instance_ = new CUserCheckInDBServerReq();
  CUserCheckInDBServerAck::default_instance_ = new CUserCheckInDBServerAck();
  CRandCheckReq::default_instance_ = new CRandCheckReq();
  CRandCheckAck::default_instance_ = new CRandCheckAck();
  CHeartPing::default_instance_ = new CHeartPing();
  CHeartPingAck::default_instance_ = new CHeartPingAck();
  GMListRpt::default_instance_ = new GMListRpt();
  GMListRpt_gm::default_instance_ = new GMListRpt_gm();
  AreaMaxOnlineNumberRpt::default_instance_ = new AreaMaxOnlineNumberRpt();
  CDBServerRpt::default_instance_ = new CDBServerRpt();
  LDGetGM_ListReq::default_instance_ = new LDGetGM_ListReq();
  LDGetGM_ListAck::default_instance_ = new LDGetGM_ListAck();
  LoginServerCloseNtf::default_instance_ = new LoginServerCloseNtf();
  PlayerGetBaseDataComplete::default_instance_ = new PlayerGetBaseDataComplete();
  ClientCloseWhenWaitCheckInDB::default_instance_ = new ClientCloseWhenWaitCheckInDB();
  get_login_key_req::default_instance_ = new get_login_key_req();
  get_login_key_ack::default_instance_ = new get_login_key_ack();
  UpdateFastAttackBlackAccountRpt::default_instance_ = new UpdateFastAttackBlackAccountRpt();
  CLoginServerRpt::default_instance_->InitAsDefaultInstance();
  CUserCheckInDBServerReq::default_instance_->InitAsDefaultInstance();
  CUserCheckInDBServerAck::default_instance_->InitAsDefaultInstance();
  CRandCheckReq::default_instance_->InitAsDefaultInstance();
  CRandCheckAck::default_instance_->InitAsDefaultInstance();
  CHeartPing::default_instance_->InitAsDefaultInstance();
  CHeartPingAck::default_instance_->InitAsDefaultInstance();
  GMListRpt::default_instance_->InitAsDefaultInstance();
  GMListRpt_gm::default_instance_->InitAsDefaultInstance();
  AreaMaxOnlineNumberRpt::default_instance_->InitAsDefaultInstance();
  CDBServerRpt::default_instance_->InitAsDefaultInstance();
  LDGetGM_ListReq::default_instance_->InitAsDefaultInstance();
  LDGetGM_ListAck::default_instance_->InitAsDefaultInstance();
  LoginServerCloseNtf::default_instance_->InitAsDefaultInstance();
  PlayerGetBaseDataComplete::default_instance_->InitAsDefaultInstance();
  ClientCloseWhenWaitCheckInDB::default_instance_->InitAsDefaultInstance();
  get_login_key_req::default_instance_->InitAsDefaultInstance();
  get_login_key_ack::default_instance_->InitAsDefaultInstance();
  UpdateFastAttackBlackAccountRpt::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_login_2edbserver_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_login_2edbserver_2eproto {
  StaticDescriptorInitializer_login_2edbserver_2eproto() {
    protobuf_AddDesc_login_2edbserver_2eproto();
  }
} static_descriptor_initializer_login_2edbserver_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CLoginServerRpt::kIdFieldNumber;
const int CLoginServerRpt::kNameFieldNumber;
const int CLoginServerRpt::kKeyFieldNumber;
#endif  // !_MSC_VER

CLoginServerRpt::CLoginServerRpt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CLoginServerRpt::InitAsDefaultInstance() {
}

CLoginServerRpt::CLoginServerRpt(const CLoginServerRpt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CLoginServerRpt::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CLoginServerRpt::~CLoginServerRpt() {
  SharedDtor();
}

void CLoginServerRpt::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void CLoginServerRpt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CLoginServerRpt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CLoginServerRpt_descriptor_;
}

const CLoginServerRpt& CLoginServerRpt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2edbserver_2eproto();
  return *default_instance_;
}

CLoginServerRpt* CLoginServerRpt::default_instance_ = NULL;

CLoginServerRpt* CLoginServerRpt::New() const {
  return new CLoginServerRpt;
}

void CLoginServerRpt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CLoginServerRpt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_key;
        break;
      }

      // optional string key = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CLoginServerRpt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional string key = 3;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CLoginServerRpt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string key = 3;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CLoginServerRpt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string key = 3;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CLoginServerRpt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CLoginServerRpt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CLoginServerRpt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CLoginServerRpt::MergeFrom(const CLoginServerRpt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CLoginServerRpt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLoginServerRpt::CopyFrom(const CLoginServerRpt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLoginServerRpt::IsInitialized() const {

  return true;
}

void CLoginServerRpt::Swap(CLoginServerRpt* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(key_, other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CLoginServerRpt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CLoginServerRpt_descriptor_;
  metadata.reflection = CLoginServerRpt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CUserCheckInDBServerReq::kTransIDFieldNumber;
const int CUserCheckInDBServerReq::kPlayeridFieldNumber;
const int CUserCheckInDBServerReq::kAccountFieldNumber;
const int CUserCheckInDBServerReq::kAreaIdFieldNumber;
const int CUserCheckInDBServerReq::kPlatformIdFieldNumber;
#endif  // !_MSC_VER

CUserCheckInDBServerReq::CUserCheckInDBServerReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CUserCheckInDBServerReq::InitAsDefaultInstance() {
}

CUserCheckInDBServerReq::CUserCheckInDBServerReq(const CUserCheckInDBServerReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CUserCheckInDBServerReq::SharedCtor() {
  _cached_size_ = 0;
  transid_ = 0u;
  playerid_ = GOOGLE_ULONGLONG(0);
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  area_id_ = 0;
  platform_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUserCheckInDBServerReq::~CUserCheckInDBServerReq() {
  SharedDtor();
}

void CUserCheckInDBServerReq::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (this != default_instance_) {
  }
}

void CUserCheckInDBServerReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserCheckInDBServerReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUserCheckInDBServerReq_descriptor_;
}

const CUserCheckInDBServerReq& CUserCheckInDBServerReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2edbserver_2eproto();
  return *default_instance_;
}

CUserCheckInDBServerReq* CUserCheckInDBServerReq::default_instance_ = NULL;

CUserCheckInDBServerReq* CUserCheckInDBServerReq::New() const {
  return new CUserCheckInDBServerReq;
}

void CUserCheckInDBServerReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    transid_ = 0u;
    playerid_ = GOOGLE_ULONGLONG(0);
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    area_id_ = 0;
    platform_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUserCheckInDBServerReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 transID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &transid_)));
          set_has_transid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerid;
        break;
      }

      // optional uint64 playerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_account;
        break;
      }

      // optional string account = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_area_id;
        break;
      }

      // optional int32 area_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_area_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &area_id_)));
          set_has_area_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_platform_id;
        break;
      }

      // optional int32 platform_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_platform_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &platform_id_)));
          set_has_platform_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CUserCheckInDBServerReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 transID = 1;
  if (has_transid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->transid(), output);
  }

  // optional uint64 playerid = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->playerid(), output);
  }

  // optional string account = 3;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->account(), output);
  }

  // optional int32 area_id = 4;
  if (has_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->area_id(), output);
  }

  // optional int32 platform_id = 5;
  if (has_platform_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->platform_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CUserCheckInDBServerReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 transID = 1;
  if (has_transid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->transid(), target);
  }

  // optional uint64 playerid = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->playerid(), target);
  }

  // optional string account = 3;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->account(), target);
  }

  // optional int32 area_id = 4;
  if (has_area_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->area_id(), target);
  }

  // optional int32 platform_id = 5;
  if (has_platform_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->platform_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CUserCheckInDBServerReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 transID = 1;
    if (has_transid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->transid());
    }

    // optional uint64 playerid = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

    // optional string account = 3;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional int32 area_id = 4;
    if (has_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->area_id());
    }

    // optional int32 platform_id = 5;
    if (has_platform_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->platform_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserCheckInDBServerReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUserCheckInDBServerReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUserCheckInDBServerReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUserCheckInDBServerReq::MergeFrom(const CUserCheckInDBServerReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_transid()) {
      set_transid(from.transid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_area_id()) {
      set_area_id(from.area_id());
    }
    if (from.has_platform_id()) {
      set_platform_id(from.platform_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUserCheckInDBServerReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserCheckInDBServerReq::CopyFrom(const CUserCheckInDBServerReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserCheckInDBServerReq::IsInitialized() const {

  return true;
}

void CUserCheckInDBServerReq::Swap(CUserCheckInDBServerReq* other) {
  if (other != this) {
    std::swap(transid_, other->transid_);
    std::swap(playerid_, other->playerid_);
    std::swap(account_, other->account_);
    std::swap(area_id_, other->area_id_);
    std::swap(platform_id_, other->platform_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUserCheckInDBServerReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUserCheckInDBServerReq_descriptor_;
  metadata.reflection = CUserCheckInDBServerReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CUserCheckInDBServerAck::kTransIDFieldNumber;
const int CUserCheckInDBServerAck::kPlayeridFieldNumber;
const int CUserCheckInDBServerAck::kErrNoFieldNumber;
const int CUserCheckInDBServerAck::kGateIpFieldNumber;
const int CUserCheckInDBServerAck::kGatePortFieldNumber;
const int CUserCheckInDBServerAck::kGateKeyFieldNumber;
const int CUserCheckInDBServerAck::kSessionidFieldNumber;
#endif  // !_MSC_VER

CUserCheckInDBServerAck::CUserCheckInDBServerAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CUserCheckInDBServerAck::InitAsDefaultInstance() {
}

CUserCheckInDBServerAck::CUserCheckInDBServerAck(const CUserCheckInDBServerAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CUserCheckInDBServerAck::SharedCtor() {
  _cached_size_ = 0;
  transid_ = 0u;
  playerid_ = GOOGLE_ULONGLONG(0);
  err_no_ = 0;
  gate_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gate_port_ = 0u;
  gate_key_ = 0;
  sessionid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUserCheckInDBServerAck::~CUserCheckInDBServerAck() {
  SharedDtor();
}

void CUserCheckInDBServerAck::SharedDtor() {
  if (gate_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete gate_ip_;
  }
  if (this != default_instance_) {
  }
}

void CUserCheckInDBServerAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserCheckInDBServerAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUserCheckInDBServerAck_descriptor_;
}

const CUserCheckInDBServerAck& CUserCheckInDBServerAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2edbserver_2eproto();
  return *default_instance_;
}

CUserCheckInDBServerAck* CUserCheckInDBServerAck::default_instance_ = NULL;

CUserCheckInDBServerAck* CUserCheckInDBServerAck::New() const {
  return new CUserCheckInDBServerAck;
}

void CUserCheckInDBServerAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    transid_ = 0u;
    playerid_ = GOOGLE_ULONGLONG(0);
    err_no_ = 0;
    if (has_gate_ip()) {
      if (gate_ip_ != &::google::protobuf::internal::kEmptyString) {
        gate_ip_->clear();
      }
    }
    gate_port_ = 0u;
    gate_key_ = 0;
    sessionid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUserCheckInDBServerAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 transID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &transid_)));
          set_has_transid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerid;
        break;
      }

      // optional uint64 playerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_err_no;
        break;
      }

      // optional int32 err_no = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_err_no:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_no_)));
          set_has_err_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_gate_ip;
        break;
      }

      // optional string gate_ip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gate_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gate_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gate_ip().data(), this->gate_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_gate_port;
        break;
      }

      // optional uint32 gate_port = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gate_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gate_port_)));
          set_has_gate_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_gate_key;
        break;
      }

      // optional int32 gate_key = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gate_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gate_key_)));
          set_has_gate_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_sessionid;
        break;
      }

      // optional uint32 sessionid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sessionid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CUserCheckInDBServerAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 transID = 1;
  if (has_transid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->transid(), output);
  }

  // optional uint64 playerid = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->playerid(), output);
  }

  // optional int32 err_no = 3;
  if (has_err_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->err_no(), output);
  }

  // optional string gate_ip = 4;
  if (has_gate_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gate_ip().data(), this->gate_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->gate_ip(), output);
  }

  // optional uint32 gate_port = 5;
  if (has_gate_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->gate_port(), output);
  }

  // optional int32 gate_key = 6;
  if (has_gate_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->gate_key(), output);
  }

  // optional uint32 sessionid = 7;
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->sessionid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CUserCheckInDBServerAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 transID = 1;
  if (has_transid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->transid(), target);
  }

  // optional uint64 playerid = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->playerid(), target);
  }

  // optional int32 err_no = 3;
  if (has_err_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->err_no(), target);
  }

  // optional string gate_ip = 4;
  if (has_gate_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gate_ip().data(), this->gate_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->gate_ip(), target);
  }

  // optional uint32 gate_port = 5;
  if (has_gate_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->gate_port(), target);
  }

  // optional int32 gate_key = 6;
  if (has_gate_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->gate_key(), target);
  }

  // optional uint32 sessionid = 7;
  if (has_sessionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->sessionid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CUserCheckInDBServerAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 transID = 1;
    if (has_transid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->transid());
    }

    // optional uint64 playerid = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

    // optional int32 err_no = 3;
    if (has_err_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err_no());
    }

    // optional string gate_ip = 4;
    if (has_gate_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gate_ip());
    }

    // optional uint32 gate_port = 5;
    if (has_gate_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gate_port());
    }

    // optional int32 gate_key = 6;
    if (has_gate_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gate_key());
    }

    // optional uint32 sessionid = 7;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sessionid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserCheckInDBServerAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUserCheckInDBServerAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUserCheckInDBServerAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUserCheckInDBServerAck::MergeFrom(const CUserCheckInDBServerAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_transid()) {
      set_transid(from.transid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_err_no()) {
      set_err_no(from.err_no());
    }
    if (from.has_gate_ip()) {
      set_gate_ip(from.gate_ip());
    }
    if (from.has_gate_port()) {
      set_gate_port(from.gate_port());
    }
    if (from.has_gate_key()) {
      set_gate_key(from.gate_key());
    }
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUserCheckInDBServerAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserCheckInDBServerAck::CopyFrom(const CUserCheckInDBServerAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserCheckInDBServerAck::IsInitialized() const {

  return true;
}

void CUserCheckInDBServerAck::Swap(CUserCheckInDBServerAck* other) {
  if (other != this) {
    std::swap(transid_, other->transid_);
    std::swap(playerid_, other->playerid_);
    std::swap(err_no_, other->err_no_);
    std::swap(gate_ip_, other->gate_ip_);
    std::swap(gate_port_, other->gate_port_);
    std::swap(gate_key_, other->gate_key_);
    std::swap(sessionid_, other->sessionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUserCheckInDBServerAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUserCheckInDBServerAck_descriptor_;
  metadata.reflection = CUserCheckInDBServerAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CRandCheckReq::kRandkeysFieldNumber;
#endif  // !_MSC_VER

CRandCheckReq::CRandCheckReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CRandCheckReq::InitAsDefaultInstance() {
}

CRandCheckReq::CRandCheckReq(const CRandCheckReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CRandCheckReq::SharedCtor() {
  _cached_size_ = 0;
  randkeys_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CRandCheckReq::~CRandCheckReq() {
  SharedDtor();
}

void CRandCheckReq::SharedDtor() {
  if (randkeys_ != &::google::protobuf::internal::kEmptyString) {
    delete randkeys_;
  }
  if (this != default_instance_) {
  }
}

void CRandCheckReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CRandCheckReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CRandCheckReq_descriptor_;
}

const CRandCheckReq& CRandCheckReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2edbserver_2eproto();
  return *default_instance_;
}

CRandCheckReq* CRandCheckReq::default_instance_ = NULL;

CRandCheckReq* CRandCheckReq::New() const {
  return new CRandCheckReq;
}

void CRandCheckReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_randkeys()) {
      if (randkeys_ != &::google::protobuf::internal::kEmptyString) {
        randkeys_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CRandCheckReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes randkeys = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_randkeys()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CRandCheckReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes randkeys = 1;
  if (has_randkeys()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->randkeys(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CRandCheckReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes randkeys = 1;
  if (has_randkeys()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->randkeys(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CRandCheckReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes randkeys = 1;
    if (has_randkeys()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->randkeys());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CRandCheckReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CRandCheckReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CRandCheckReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CRandCheckReq::MergeFrom(const CRandCheckReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_randkeys()) {
      set_randkeys(from.randkeys());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CRandCheckReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CRandCheckReq::CopyFrom(const CRandCheckReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRandCheckReq::IsInitialized() const {

  return true;
}

void CRandCheckReq::Swap(CRandCheckReq* other) {
  if (other != this) {
    std::swap(randkeys_, other->randkeys_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CRandCheckReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CRandCheckReq_descriptor_;
  metadata.reflection = CRandCheckReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CRandCheckAck::kKeysFieldNumber;
#endif  // !_MSC_VER

CRandCheckAck::CRandCheckAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CRandCheckAck::InitAsDefaultInstance() {
}

CRandCheckAck::CRandCheckAck(const CRandCheckAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CRandCheckAck::SharedCtor() {
  _cached_size_ = 0;
  keys_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CRandCheckAck::~CRandCheckAck() {
  SharedDtor();
}

void CRandCheckAck::SharedDtor() {
  if (keys_ != &::google::protobuf::internal::kEmptyString) {
    delete keys_;
  }
  if (this != default_instance_) {
  }
}

void CRandCheckAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CRandCheckAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CRandCheckAck_descriptor_;
}

const CRandCheckAck& CRandCheckAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2edbserver_2eproto();
  return *default_instance_;
}

CRandCheckAck* CRandCheckAck::default_instance_ = NULL;

CRandCheckAck* CRandCheckAck::New() const {
  return new CRandCheckAck;
}

void CRandCheckAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_keys()) {
      if (keys_ != &::google::protobuf::internal::kEmptyString) {
        keys_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CRandCheckAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes keys = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_keys()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CRandCheckAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes keys = 1;
  if (has_keys()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->keys(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CRandCheckAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes keys = 1;
  if (has_keys()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->keys(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CRandCheckAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes keys = 1;
    if (has_keys()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->keys());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CRandCheckAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CRandCheckAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CRandCheckAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CRandCheckAck::MergeFrom(const CRandCheckAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_keys()) {
      set_keys(from.keys());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CRandCheckAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CRandCheckAck::CopyFrom(const CRandCheckAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRandCheckAck::IsInitialized() const {

  return true;
}

void CRandCheckAck::Swap(CRandCheckAck* other) {
  if (other != this) {
    std::swap(keys_, other->keys_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CRandCheckAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CRandCheckAck_descriptor_;
  metadata.reflection = CRandCheckAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CHeartPing::kOptFieldNumber;
#endif  // !_MSC_VER

CHeartPing::CHeartPing()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CHeartPing::InitAsDefaultInstance() {
}

CHeartPing::CHeartPing(const CHeartPing& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CHeartPing::SharedCtor() {
  _cached_size_ = 0;
  opt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CHeartPing::~CHeartPing() {
  SharedDtor();
}

void CHeartPing::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CHeartPing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CHeartPing::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CHeartPing_descriptor_;
}

const CHeartPing& CHeartPing::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2edbserver_2eproto();
  return *default_instance_;
}

CHeartPing* CHeartPing::default_instance_ = NULL;

CHeartPing* CHeartPing::New() const {
  return new CHeartPing;
}

void CHeartPing::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opt_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CHeartPing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 opt = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opt_)));
          set_has_opt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CHeartPing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 opt = 1;
  if (has_opt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CHeartPing::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 opt = 1;
  if (has_opt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->opt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CHeartPing::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 opt = 1;
    if (has_opt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CHeartPing::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CHeartPing* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CHeartPing*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CHeartPing::MergeFrom(const CHeartPing& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opt()) {
      set_opt(from.opt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CHeartPing::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CHeartPing::CopyFrom(const CHeartPing& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHeartPing::IsInitialized() const {

  return true;
}

void CHeartPing::Swap(CHeartPing* other) {
  if (other != this) {
    std::swap(opt_, other->opt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CHeartPing::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CHeartPing_descriptor_;
  metadata.reflection = CHeartPing_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CHeartPingAck::kOptFieldNumber;
#endif  // !_MSC_VER

CHeartPingAck::CHeartPingAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CHeartPingAck::InitAsDefaultInstance() {
}

CHeartPingAck::CHeartPingAck(const CHeartPingAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CHeartPingAck::SharedCtor() {
  _cached_size_ = 0;
  opt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CHeartPingAck::~CHeartPingAck() {
  SharedDtor();
}

void CHeartPingAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CHeartPingAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CHeartPingAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CHeartPingAck_descriptor_;
}

const CHeartPingAck& CHeartPingAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2edbserver_2eproto();
  return *default_instance_;
}

CHeartPingAck* CHeartPingAck::default_instance_ = NULL;

CHeartPingAck* CHeartPingAck::New() const {
  return new CHeartPingAck;
}

void CHeartPingAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opt_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CHeartPingAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 opt = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opt_)));
          set_has_opt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CHeartPingAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 opt = 1;
  if (has_opt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CHeartPingAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 opt = 1;
  if (has_opt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->opt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CHeartPingAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 opt = 1;
    if (has_opt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CHeartPingAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CHeartPingAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CHeartPingAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CHeartPingAck::MergeFrom(const CHeartPingAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opt()) {
      set_opt(from.opt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CHeartPingAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CHeartPingAck::CopyFrom(const CHeartPingAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHeartPingAck::IsInitialized() const {

  return true;
}

void CHeartPingAck::Swap(CHeartPingAck* other) {
  if (other != this) {
    std::swap(opt_, other->opt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CHeartPingAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CHeartPingAck_descriptor_;
  metadata.reflection = CHeartPingAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMListRpt_gm::kGmLevelFieldNumber;
const int GMListRpt_gm::kAccountFieldNumber;
const int GMListRpt_gm::kPasswordFieldNumber;
#endif  // !_MSC_VER

GMListRpt_gm::GMListRpt_gm()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMListRpt_gm::InitAsDefaultInstance() {
}

GMListRpt_gm::GMListRpt_gm(const GMListRpt_gm& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMListRpt_gm::SharedCtor() {
  _cached_size_ = 0;
  gm_level_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMListRpt_gm::~GMListRpt_gm() {
  SharedDtor();
}

void GMListRpt_gm::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void GMListRpt_gm::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMListRpt_gm::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMListRpt_gm_descriptor_;
}

const GMListRpt_gm& GMListRpt_gm::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2edbserver_2eproto();
  return *default_instance_;
}

GMListRpt_gm* GMListRpt_gm::default_instance_ = NULL;

GMListRpt_gm* GMListRpt_gm::New() const {
  return new GMListRpt_gm;
}

void GMListRpt_gm::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gm_level_ = 0;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMListRpt_gm::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gm_level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gm_level_)));
          set_has_gm_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_account;
        break;
      }

      // optional string account = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_password;
        break;
      }

      // optional string password = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMListRpt_gm::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 gm_level = 2;
  if (has_gm_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gm_level(), output);
  }

  // optional string account = 3;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->account(), output);
  }

  // optional string password = 4;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->password(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMListRpt_gm::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 gm_level = 2;
  if (has_gm_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gm_level(), target);
  }

  // optional string account = 3;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->account(), target);
  }

  // optional string password = 4;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->password(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMListRpt_gm::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gm_level = 2;
    if (has_gm_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gm_level());
    }

    // optional string account = 3;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional string password = 4;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMListRpt_gm::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMListRpt_gm* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMListRpt_gm*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMListRpt_gm::MergeFrom(const GMListRpt_gm& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gm_level()) {
      set_gm_level(from.gm_level());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMListRpt_gm::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMListRpt_gm::CopyFrom(const GMListRpt_gm& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMListRpt_gm::IsInitialized() const {

  return true;
}

void GMListRpt_gm::Swap(GMListRpt_gm* other) {
  if (other != this) {
    std::swap(gm_level_, other->gm_level_);
    std::swap(account_, other->account_);
    std::swap(password_, other->password_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMListRpt_gm::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMListRpt_gm_descriptor_;
  metadata.reflection = GMListRpt_gm_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int GMListRpt::kTableFieldNumber;
#endif  // !_MSC_VER

GMListRpt::GMListRpt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMListRpt::InitAsDefaultInstance() {
}

GMListRpt::GMListRpt(const GMListRpt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMListRpt::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMListRpt::~GMListRpt() {
  SharedDtor();
}

void GMListRpt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMListRpt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMListRpt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMListRpt_descriptor_;
}

const GMListRpt& GMListRpt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2edbserver_2eproto();
  return *default_instance_;
}

GMListRpt* GMListRpt::default_instance_ = NULL;

GMListRpt* GMListRpt::New() const {
  return new GMListRpt;
}

void GMListRpt::Clear() {
  table_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMListRpt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protoc.logindbs.GMListRpt.gm table = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_table;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMListRpt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protoc.logindbs.GMListRpt.gm table = 1;
  for (int i = 0; i < this->table_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->table(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMListRpt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protoc.logindbs.GMListRpt.gm table = 1;
  for (int i = 0; i < this->table_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->table(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMListRpt::ByteSize() const {
  int total_size = 0;

  // repeated .protoc.logindbs.GMListRpt.gm table = 1;
  total_size += 1 * this->table_size();
  for (int i = 0; i < this->table_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->table(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMListRpt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMListRpt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMListRpt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMListRpt::MergeFrom(const GMListRpt& from) {
  GOOGLE_CHECK_NE(&from, this);
  table_.MergeFrom(from.table_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMListRpt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMListRpt::CopyFrom(const GMListRpt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMListRpt::IsInitialized() const {

  return true;
}

void GMListRpt::Swap(GMListRpt* other) {
  if (other != this) {
    table_.Swap(&other->table_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMListRpt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMListRpt_descriptor_;
  metadata.reflection = GMListRpt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AreaMaxOnlineNumberRpt::kNumberFieldNumber;
#endif  // !_MSC_VER

AreaMaxOnlineNumberRpt::AreaMaxOnlineNumberRpt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AreaMaxOnlineNumberRpt::InitAsDefaultInstance() {
}

AreaMaxOnlineNumberRpt::AreaMaxOnlineNumberRpt(const AreaMaxOnlineNumberRpt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AreaMaxOnlineNumberRpt::SharedCtor() {
  _cached_size_ = 0;
  number_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AreaMaxOnlineNumberRpt::~AreaMaxOnlineNumberRpt() {
  SharedDtor();
}

void AreaMaxOnlineNumberRpt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AreaMaxOnlineNumberRpt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AreaMaxOnlineNumberRpt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AreaMaxOnlineNumberRpt_descriptor_;
}

const AreaMaxOnlineNumberRpt& AreaMaxOnlineNumberRpt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2edbserver_2eproto();
  return *default_instance_;
}

AreaMaxOnlineNumberRpt* AreaMaxOnlineNumberRpt::default_instance_ = NULL;

AreaMaxOnlineNumberRpt* AreaMaxOnlineNumberRpt::New() const {
  return new AreaMaxOnlineNumberRpt;
}

void AreaMaxOnlineNumberRpt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    number_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AreaMaxOnlineNumberRpt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 number = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AreaMaxOnlineNumberRpt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 number = 1;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->number(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AreaMaxOnlineNumberRpt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 number = 1;
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->number(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AreaMaxOnlineNumberRpt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 number = 1;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->number());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AreaMaxOnlineNumberRpt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AreaMaxOnlineNumberRpt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AreaMaxOnlineNumberRpt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AreaMaxOnlineNumberRpt::MergeFrom(const AreaMaxOnlineNumberRpt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_number()) {
      set_number(from.number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AreaMaxOnlineNumberRpt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AreaMaxOnlineNumberRpt::CopyFrom(const AreaMaxOnlineNumberRpt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AreaMaxOnlineNumberRpt::IsInitialized() const {

  return true;
}

void AreaMaxOnlineNumberRpt::Swap(AreaMaxOnlineNumberRpt* other) {
  if (other != this) {
    std::swap(number_, other->number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AreaMaxOnlineNumberRpt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AreaMaxOnlineNumberRpt_descriptor_;
  metadata.reflection = AreaMaxOnlineNumberRpt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDBServerRpt::kIdFieldNumber;
const int CDBServerRpt::kNameFieldNumber;
const int CDBServerRpt::kNumberFieldNumber;
#endif  // !_MSC_VER

CDBServerRpt::CDBServerRpt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CDBServerRpt::InitAsDefaultInstance() {
}

CDBServerRpt::CDBServerRpt(const CDBServerRpt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CDBServerRpt::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  number_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDBServerRpt::~CDBServerRpt() {
  SharedDtor();
}

void CDBServerRpt::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CDBServerRpt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDBServerRpt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDBServerRpt_descriptor_;
}

const CDBServerRpt& CDBServerRpt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2edbserver_2eproto();
  return *default_instance_;
}

CDBServerRpt* CDBServerRpt::default_instance_ = NULL;

CDBServerRpt* CDBServerRpt::New() const {
  return new CDBServerRpt;
}

void CDBServerRpt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    number_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDBServerRpt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_number;
        break;
      }

      // optional int32 number = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CDBServerRpt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional int32 number = 3;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->number(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CDBServerRpt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int32 number = 3;
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->number(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CDBServerRpt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 number = 3;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->number());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDBServerRpt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDBServerRpt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDBServerRpt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDBServerRpt::MergeFrom(const CDBServerRpt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_number()) {
      set_number(from.number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDBServerRpt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDBServerRpt::CopyFrom(const CDBServerRpt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDBServerRpt::IsInitialized() const {

  return true;
}

void CDBServerRpt::Swap(CDBServerRpt* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(number_, other->number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDBServerRpt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDBServerRpt_descriptor_;
  metadata.reflection = CDBServerRpt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LDGetGM_ListReq::kPlayeridFieldNumber;
const int LDGetGM_ListReq::kStrDBIDFieldNumber;
#endif  // !_MSC_VER

LDGetGM_ListReq::LDGetGM_ListReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LDGetGM_ListReq::InitAsDefaultInstance() {
}

LDGetGM_ListReq::LDGetGM_ListReq(const LDGetGM_ListReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LDGetGM_ListReq::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_ULONGLONG(0);
  strdbid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LDGetGM_ListReq::~LDGetGM_ListReq() {
  SharedDtor();
}

void LDGetGM_ListReq::SharedDtor() {
  if (strdbid_ != &::google::protobuf::internal::kEmptyString) {
    delete strdbid_;
  }
  if (this != default_instance_) {
  }
}

void LDGetGM_ListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LDGetGM_ListReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LDGetGM_ListReq_descriptor_;
}

const LDGetGM_ListReq& LDGetGM_ListReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2edbserver_2eproto();
  return *default_instance_;
}

LDGetGM_ListReq* LDGetGM_ListReq::default_instance_ = NULL;

LDGetGM_ListReq* LDGetGM_ListReq::New() const {
  return new LDGetGM_ListReq;
}

void LDGetGM_ListReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_ULONGLONG(0);
    if (has_strdbid()) {
      if (strdbid_ != &::google::protobuf::internal::kEmptyString) {
        strdbid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LDGetGM_ListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_strDBID;
        break;
      }

      // optional string strDBID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strDBID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strdbid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strdbid().data(), this->strdbid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LDGetGM_ListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->playerid(), output);
  }

  // optional string strDBID = 2;
  if (has_strdbid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strdbid().data(), this->strdbid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->strdbid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LDGetGM_ListReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->playerid(), target);
  }

  // optional string strDBID = 2;
  if (has_strdbid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strdbid().data(), this->strdbid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->strdbid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LDGetGM_ListReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

    // optional string strDBID = 2;
    if (has_strdbid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strdbid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LDGetGM_ListReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LDGetGM_ListReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LDGetGM_ListReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LDGetGM_ListReq::MergeFrom(const LDGetGM_ListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_strdbid()) {
      set_strdbid(from.strdbid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LDGetGM_ListReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LDGetGM_ListReq::CopyFrom(const LDGetGM_ListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LDGetGM_ListReq::IsInitialized() const {

  return true;
}

void LDGetGM_ListReq::Swap(LDGetGM_ListReq* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(strdbid_, other->strdbid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LDGetGM_ListReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LDGetGM_ListReq_descriptor_;
  metadata.reflection = LDGetGM_ListReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LDGetGM_ListAck::kPlayeridFieldNumber;
const int LDGetGM_ListAck::kStrDBIDFieldNumber;
const int LDGetGM_ListAck::kErrNoFieldNumber;
#endif  // !_MSC_VER

LDGetGM_ListAck::LDGetGM_ListAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LDGetGM_ListAck::InitAsDefaultInstance() {
}

LDGetGM_ListAck::LDGetGM_ListAck(const LDGetGM_ListAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LDGetGM_ListAck::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_ULONGLONG(0);
  strdbid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  err_no_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LDGetGM_ListAck::~LDGetGM_ListAck() {
  SharedDtor();
}

void LDGetGM_ListAck::SharedDtor() {
  if (strdbid_ != &::google::protobuf::internal::kEmptyString) {
    delete strdbid_;
  }
  if (this != default_instance_) {
  }
}

void LDGetGM_ListAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LDGetGM_ListAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LDGetGM_ListAck_descriptor_;
}

const LDGetGM_ListAck& LDGetGM_ListAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2edbserver_2eproto();
  return *default_instance_;
}

LDGetGM_ListAck* LDGetGM_ListAck::default_instance_ = NULL;

LDGetGM_ListAck* LDGetGM_ListAck::New() const {
  return new LDGetGM_ListAck;
}

void LDGetGM_ListAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_ULONGLONG(0);
    if (has_strdbid()) {
      if (strdbid_ != &::google::protobuf::internal::kEmptyString) {
        strdbid_->clear();
      }
    }
    err_no_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LDGetGM_ListAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_strDBID;
        break;
      }

      // optional string strDBID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strDBID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strdbid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strdbid().data(), this->strdbid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_err_no;
        break;
      }

      // optional int32 err_no = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_err_no:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_no_)));
          set_has_err_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LDGetGM_ListAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->playerid(), output);
  }

  // optional string strDBID = 2;
  if (has_strdbid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strdbid().data(), this->strdbid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->strdbid(), output);
  }

  // optional int32 err_no = 3;
  if (has_err_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->err_no(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LDGetGM_ListAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->playerid(), target);
  }

  // optional string strDBID = 2;
  if (has_strdbid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strdbid().data(), this->strdbid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->strdbid(), target);
  }

  // optional int32 err_no = 3;
  if (has_err_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->err_no(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LDGetGM_ListAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

    // optional string strDBID = 2;
    if (has_strdbid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strdbid());
    }

    // optional int32 err_no = 3;
    if (has_err_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err_no());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LDGetGM_ListAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LDGetGM_ListAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LDGetGM_ListAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LDGetGM_ListAck::MergeFrom(const LDGetGM_ListAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_strdbid()) {
      set_strdbid(from.strdbid());
    }
    if (from.has_err_no()) {
      set_err_no(from.err_no());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LDGetGM_ListAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LDGetGM_ListAck::CopyFrom(const LDGetGM_ListAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LDGetGM_ListAck::IsInitialized() const {

  return true;
}

void LDGetGM_ListAck::Swap(LDGetGM_ListAck* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(strdbid_, other->strdbid_);
    std::swap(err_no_, other->err_no_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LDGetGM_ListAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LDGetGM_ListAck_descriptor_;
  metadata.reflection = LDGetGM_ListAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

LoginServerCloseNtf::LoginServerCloseNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginServerCloseNtf::InitAsDefaultInstance() {
}

LoginServerCloseNtf::LoginServerCloseNtf(const LoginServerCloseNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginServerCloseNtf::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginServerCloseNtf::~LoginServerCloseNtf() {
  SharedDtor();
}

void LoginServerCloseNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LoginServerCloseNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginServerCloseNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginServerCloseNtf_descriptor_;
}

const LoginServerCloseNtf& LoginServerCloseNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2edbserver_2eproto();
  return *default_instance_;
}

LoginServerCloseNtf* LoginServerCloseNtf::default_instance_ = NULL;

LoginServerCloseNtf* LoginServerCloseNtf::New() const {
  return new LoginServerCloseNtf;
}

void LoginServerCloseNtf::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginServerCloseNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void LoginServerCloseNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginServerCloseNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginServerCloseNtf::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginServerCloseNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginServerCloseNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginServerCloseNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginServerCloseNtf::MergeFrom(const LoginServerCloseNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginServerCloseNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginServerCloseNtf::CopyFrom(const LoginServerCloseNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginServerCloseNtf::IsInitialized() const {

  return true;
}

void LoginServerCloseNtf::Swap(LoginServerCloseNtf* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginServerCloseNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginServerCloseNtf_descriptor_;
  metadata.reflection = LoginServerCloseNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerGetBaseDataComplete::kAccountFieldNumber;
#endif  // !_MSC_VER

PlayerGetBaseDataComplete::PlayerGetBaseDataComplete()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerGetBaseDataComplete::InitAsDefaultInstance() {
}

PlayerGetBaseDataComplete::PlayerGetBaseDataComplete(const PlayerGetBaseDataComplete& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerGetBaseDataComplete::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerGetBaseDataComplete::~PlayerGetBaseDataComplete() {
  SharedDtor();
}

void PlayerGetBaseDataComplete::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (this != default_instance_) {
  }
}

void PlayerGetBaseDataComplete::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerGetBaseDataComplete::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerGetBaseDataComplete_descriptor_;
}

const PlayerGetBaseDataComplete& PlayerGetBaseDataComplete::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2edbserver_2eproto();
  return *default_instance_;
}

PlayerGetBaseDataComplete* PlayerGetBaseDataComplete::default_instance_ = NULL;

PlayerGetBaseDataComplete* PlayerGetBaseDataComplete::New() const {
  return new PlayerGetBaseDataComplete;
}

void PlayerGetBaseDataComplete::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerGetBaseDataComplete::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerGetBaseDataComplete::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->account(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerGetBaseDataComplete::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerGetBaseDataComplete::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerGetBaseDataComplete::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerGetBaseDataComplete* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerGetBaseDataComplete*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerGetBaseDataComplete::MergeFrom(const PlayerGetBaseDataComplete& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerGetBaseDataComplete::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerGetBaseDataComplete::CopyFrom(const PlayerGetBaseDataComplete& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerGetBaseDataComplete::IsInitialized() const {

  return true;
}

void PlayerGetBaseDataComplete::Swap(PlayerGetBaseDataComplete* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerGetBaseDataComplete::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerGetBaseDataComplete_descriptor_;
  metadata.reflection = PlayerGetBaseDataComplete_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientCloseWhenWaitCheckInDB::kPlayeridFieldNumber;
#endif  // !_MSC_VER

ClientCloseWhenWaitCheckInDB::ClientCloseWhenWaitCheckInDB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientCloseWhenWaitCheckInDB::InitAsDefaultInstance() {
}

ClientCloseWhenWaitCheckInDB::ClientCloseWhenWaitCheckInDB(const ClientCloseWhenWaitCheckInDB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientCloseWhenWaitCheckInDB::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientCloseWhenWaitCheckInDB::~ClientCloseWhenWaitCheckInDB() {
  SharedDtor();
}

void ClientCloseWhenWaitCheckInDB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientCloseWhenWaitCheckInDB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientCloseWhenWaitCheckInDB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientCloseWhenWaitCheckInDB_descriptor_;
}

const ClientCloseWhenWaitCheckInDB& ClientCloseWhenWaitCheckInDB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2edbserver_2eproto();
  return *default_instance_;
}

ClientCloseWhenWaitCheckInDB* ClientCloseWhenWaitCheckInDB::default_instance_ = NULL;

ClientCloseWhenWaitCheckInDB* ClientCloseWhenWaitCheckInDB::New() const {
  return new ClientCloseWhenWaitCheckInDB;
}

void ClientCloseWhenWaitCheckInDB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientCloseWhenWaitCheckInDB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientCloseWhenWaitCheckInDB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientCloseWhenWaitCheckInDB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientCloseWhenWaitCheckInDB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientCloseWhenWaitCheckInDB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientCloseWhenWaitCheckInDB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientCloseWhenWaitCheckInDB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientCloseWhenWaitCheckInDB::MergeFrom(const ClientCloseWhenWaitCheckInDB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientCloseWhenWaitCheckInDB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientCloseWhenWaitCheckInDB::CopyFrom(const ClientCloseWhenWaitCheckInDB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientCloseWhenWaitCheckInDB::IsInitialized() const {

  return true;
}

void ClientCloseWhenWaitCheckInDB::Swap(ClientCloseWhenWaitCheckInDB* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientCloseWhenWaitCheckInDB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientCloseWhenWaitCheckInDB_descriptor_;
  metadata.reflection = ClientCloseWhenWaitCheckInDB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int get_login_key_req::kPlayeridFieldNumber;
const int get_login_key_req::kGsidFieldNumber;
#endif  // !_MSC_VER

get_login_key_req::get_login_key_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void get_login_key_req::InitAsDefaultInstance() {
}

get_login_key_req::get_login_key_req(const get_login_key_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void get_login_key_req::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_ULONGLONG(0);
  gsid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

get_login_key_req::~get_login_key_req() {
  SharedDtor();
}

void get_login_key_req::SharedDtor() {
  if (gsid_ != &::google::protobuf::internal::kEmptyString) {
    delete gsid_;
  }
  if (this != default_instance_) {
  }
}

void get_login_key_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_login_key_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return get_login_key_req_descriptor_;
}

const get_login_key_req& get_login_key_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2edbserver_2eproto();
  return *default_instance_;
}

get_login_key_req* get_login_key_req::default_instance_ = NULL;

get_login_key_req* get_login_key_req::New() const {
  return new get_login_key_req;
}

void get_login_key_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_ULONGLONG(0);
    if (has_gsid()) {
      if (gsid_ != &::google::protobuf::internal::kEmptyString) {
        gsid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool get_login_key_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_gsid;
        break;
      }

      // optional string gsid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gsid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gsid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gsid().data(), this->gsid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void get_login_key_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->playerid(), output);
  }

  // optional string gsid = 2;
  if (has_gsid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gsid().data(), this->gsid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->gsid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* get_login_key_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->playerid(), target);
  }

  // optional string gsid = 2;
  if (has_gsid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gsid().data(), this->gsid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->gsid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int get_login_key_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

    // optional string gsid = 2;
    if (has_gsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gsid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_login_key_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const get_login_key_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const get_login_key_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void get_login_key_req::MergeFrom(const get_login_key_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_gsid()) {
      set_gsid(from.gsid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void get_login_key_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_login_key_req::CopyFrom(const get_login_key_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_login_key_req::IsInitialized() const {

  return true;
}

void get_login_key_req::Swap(get_login_key_req* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(gsid_, other->gsid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata get_login_key_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = get_login_key_req_descriptor_;
  metadata.reflection = get_login_key_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int get_login_key_ack::kPlayeridFieldNumber;
const int get_login_key_ack::kGsidFieldNumber;
const int get_login_key_ack::kKeyFieldNumber;
const int get_login_key_ack::kLeaveTimeFieldNumber;
#endif  // !_MSC_VER

get_login_key_ack::get_login_key_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void get_login_key_ack::InitAsDefaultInstance() {
}

get_login_key_ack::get_login_key_ack(const get_login_key_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void get_login_key_ack::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_ULONGLONG(0);
  gsid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  leave_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

get_login_key_ack::~get_login_key_ack() {
  SharedDtor();
}

void get_login_key_ack::SharedDtor() {
  if (gsid_ != &::google::protobuf::internal::kEmptyString) {
    delete gsid_;
  }
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void get_login_key_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_login_key_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return get_login_key_ack_descriptor_;
}

const get_login_key_ack& get_login_key_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2edbserver_2eproto();
  return *default_instance_;
}

get_login_key_ack* get_login_key_ack::default_instance_ = NULL;

get_login_key_ack* get_login_key_ack::New() const {
  return new get_login_key_ack;
}

void get_login_key_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_ULONGLONG(0);
    if (has_gsid()) {
      if (gsid_ != &::google::protobuf::internal::kEmptyString) {
        gsid_->clear();
      }
    }
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    leave_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool get_login_key_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_gsid;
        break;
      }

      // optional string gsid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gsid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gsid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gsid().data(), this->gsid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_key;
        break;
      }

      // optional string key = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_leave_time;
        break;
      }

      // optional int32 leave_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leave_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leave_time_)));
          set_has_leave_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void get_login_key_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->playerid(), output);
  }

  // optional string gsid = 2;
  if (has_gsid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gsid().data(), this->gsid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->gsid(), output);
  }

  // optional string key = 3;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->key(), output);
  }

  // optional int32 leave_time = 4;
  if (has_leave_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->leave_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* get_login_key_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->playerid(), target);
  }

  // optional string gsid = 2;
  if (has_gsid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gsid().data(), this->gsid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->gsid(), target);
  }

  // optional string key = 3;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->key(), target);
  }

  // optional int32 leave_time = 4;
  if (has_leave_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->leave_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int get_login_key_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

    // optional string gsid = 2;
    if (has_gsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gsid());
    }

    // optional string key = 3;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional int32 leave_time = 4;
    if (has_leave_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leave_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_login_key_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const get_login_key_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const get_login_key_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void get_login_key_ack::MergeFrom(const get_login_key_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_gsid()) {
      set_gsid(from.gsid());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_leave_time()) {
      set_leave_time(from.leave_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void get_login_key_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_login_key_ack::CopyFrom(const get_login_key_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_login_key_ack::IsInitialized() const {

  return true;
}

void get_login_key_ack::Swap(get_login_key_ack* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(gsid_, other->gsid_);
    std::swap(key_, other->key_);
    std::swap(leave_time_, other->leave_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata get_login_key_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = get_login_key_ack_descriptor_;
  metadata.reflection = get_login_key_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateFastAttackBlackAccountRpt::kAccountFieldNumber;
const int UpdateFastAttackBlackAccountRpt::kAttackValueFieldNumber;
#endif  // !_MSC_VER

UpdateFastAttackBlackAccountRpt::UpdateFastAttackBlackAccountRpt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateFastAttackBlackAccountRpt::InitAsDefaultInstance() {
}

UpdateFastAttackBlackAccountRpt::UpdateFastAttackBlackAccountRpt(const UpdateFastAttackBlackAccountRpt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateFastAttackBlackAccountRpt::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  attack_value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateFastAttackBlackAccountRpt::~UpdateFastAttackBlackAccountRpt() {
  SharedDtor();
}

void UpdateFastAttackBlackAccountRpt::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (this != default_instance_) {
  }
}

void UpdateFastAttackBlackAccountRpt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateFastAttackBlackAccountRpt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateFastAttackBlackAccountRpt_descriptor_;
}

const UpdateFastAttackBlackAccountRpt& UpdateFastAttackBlackAccountRpt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2edbserver_2eproto();
  return *default_instance_;
}

UpdateFastAttackBlackAccountRpt* UpdateFastAttackBlackAccountRpt::default_instance_ = NULL;

UpdateFastAttackBlackAccountRpt* UpdateFastAttackBlackAccountRpt::New() const {
  return new UpdateFastAttackBlackAccountRpt;
}

void UpdateFastAttackBlackAccountRpt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    attack_value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateFastAttackBlackAccountRpt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_attack_value;
        break;
      }

      // optional uint32 attack_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attack_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attack_value_)));
          set_has_attack_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateFastAttackBlackAccountRpt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->account(), output);
  }

  // optional uint32 attack_value = 2;
  if (has_attack_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->attack_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateFastAttackBlackAccountRpt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }

  // optional uint32 attack_value = 2;
  if (has_attack_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->attack_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateFastAttackBlackAccountRpt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional uint32 attack_value = 2;
    if (has_attack_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attack_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateFastAttackBlackAccountRpt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateFastAttackBlackAccountRpt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateFastAttackBlackAccountRpt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateFastAttackBlackAccountRpt::MergeFrom(const UpdateFastAttackBlackAccountRpt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_attack_value()) {
      set_attack_value(from.attack_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateFastAttackBlackAccountRpt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateFastAttackBlackAccountRpt::CopyFrom(const UpdateFastAttackBlackAccountRpt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateFastAttackBlackAccountRpt::IsInitialized() const {

  return true;
}

void UpdateFastAttackBlackAccountRpt::Swap(UpdateFastAttackBlackAccountRpt* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(attack_value_, other->attack_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateFastAttackBlackAccountRpt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateFastAttackBlackAccountRpt_descriptor_;
  metadata.reflection = UpdateFastAttackBlackAccountRpt_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace logindbs
}  // namespace protoc

// @@protoc_insertion_point(global_scope)
