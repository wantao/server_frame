// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gameserver_gate_client.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "gameserver_gate_client.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protoc {
namespace gameproto {

namespace {

const ::google::protobuf::Descriptor* ClientLoginGateReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientLoginGateReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientLoginGateAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientLoginGateAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientLoginAgainGateReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientLoginAgainGateReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientLoginAgainGateAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientLoginAgainGateAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientLeaveGameReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientLeaveGameReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientLeaveGameAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientLeaveGameAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* SysErrorNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SysErrorNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* KeepClientAlive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeepClientAlive_reflection_ = NULL;
const ::google::protobuf::Descriptor* KeepClientAliveAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeepClientAliveAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerBaseData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerBaseData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgNodeText_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgNodeText_reflection_ = NULL;
const ::google::protobuf::Descriptor* UniqueID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UniqueID_reflection_ = NULL;
const ::google::protobuf::Descriptor* Priority_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Priority_reflection_ = NULL;
const ::google::protobuf::Descriptor* RepeatCount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RepeatCount_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgNodePlayerIDName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgNodePlayerIDName_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessageRepeateNode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageRepeateNode_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessageNode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageNode_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChatRpt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatRpt_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChatNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* GSChatNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GSChatNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* GSSystemMessageNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GSSystemMessageNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* SystemMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SystemMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMExecuteResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMExecuteResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeXiaoItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeXiaoItem_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TeXiaoItem_ITEM_TYPE_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TeXiao_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeXiao_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeXiaoTypeNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeXiaoTypeNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetKeyAwardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetKeyAwardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetKeyAwardAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetKeyAwardAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* NeedCreatePlayerName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NeedCreatePlayerName_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreatePlayerNameReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreatePlayerNameReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreatePlayerNameAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreatePlayerNameAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShangChengGoods_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShangChengGoods_reflection_ = NULL;
const ::google::protobuf::Descriptor* LabelShangChengGoods_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LabelShangChengGoods_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetShangChengGoodsListAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetShangChengGoodsListAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetShangChengGoodsListReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetShangChengGoodsListReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommonDialog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommonDialog_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetGMAward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetGMAward_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetGMAwardAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetGMAwardAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateExp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateExp_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateGold_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateGold_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateLevel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateLevel_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateYuanBao_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateYuanBao_reflection_ = NULL;
const ::google::protobuf::Descriptor* PetRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* PetRecordSIGN_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetRecordSIGN_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddPet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddPet_reflection_ = NULL;
const ::google::protobuf::Descriptor* DelPet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DelPet_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdatePet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdatePet_reflection_ = NULL;
const ::google::protobuf::Descriptor* PetList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetList_reflection_ = NULL;
const ::google::protobuf::Descriptor* SystemData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SystemData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAllSysMsgReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAllSysMsgReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAllSysMsgAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAllSysMsgAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteSysMsgReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteSysMsgReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteSysMsgAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteSysMsgAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendSysMsgReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendSysMsgReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendSysMsgAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendSysMsgAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReadSysMsgReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReadSysMsgReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReadSysMsgAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReadSysMsgAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetEmailAwardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetEmailAwardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetEmailAwardAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetEmailAwardAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* OneKeyGetEmailAwardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OneKeyGetEmailAwardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* EmailMessageNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EmailMessageNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtectPetReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtectPetReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtectPetAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtectPetAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* SellPetToSysReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SellPetToSysReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SellPetToSysAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SellPetToSysAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PetInBianDui_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetInBianDui_reflection_ = NULL;
const ::google::protobuf::Descriptor* BianDuiData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BianDuiData_reflection_ = NULL;
const ::google::protobuf::Descriptor* BianDuiList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BianDuiList_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubBianDuiReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubBianDuiReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubBianDuiAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubBianDuiAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModifyBianDuiNameReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModifyBianDuiNameReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModifyBianDuiNameAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModifyBianDuiNameAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModifyBIanDuiDataReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModifyBIanDuiDataReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModifyBIanDuiDataAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModifyBIanDuiDataAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* BianDuiNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BianDuiNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddBianDui_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddBianDui_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetCurBianDuiReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetCurBianDuiReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetCurBianDuiAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetCurBianDuiAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetCurBianDuiReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetCurBianDuiReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetCurBianDuiAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetCurBianDuiAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddPetToBianDuiReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddPetToBianDuiReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddPetToBianDuiAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddPetToBianDuiAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* DelPetToBianDuiReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DelPetToBianDuiReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* DelPetToBianDuiAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DelPetToBianDuiAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddPetMaxNumberReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddPetMaxNumberReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddPetMaxNumberAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddPetMaxNumberAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddQueueMaxNumberReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddQueueMaxNumberReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddQueueMaxNumberAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddQueueMaxNumberAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PetMaxNumberNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetMaxNumberNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueueMaxNumberNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueueMaxNumberNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateCurBianDuiIdx_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateCurBianDuiIdx_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecoverActiveCountReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecoverActiveCountReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecoverActiveCountAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecoverActiveCountAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActiveCountNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActiveCountNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* SpiritNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpiritNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateHp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateHp_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateMp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateMp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GoodsOfSell_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GoodsOfSell_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetShopListReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetShopListReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetShopListAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetShopListAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShoppingReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShoppingReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShoppingAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShoppingAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateVIPLevel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateVIPLevel_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateFriendShip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateFriendShip_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChongZhiOrderNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChongZhiOrderNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuffItemListReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuffItemListReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuffItemListAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuffItemListAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuffItemBuyReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuffItemBuyReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuffItemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuffItemInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RandomItemListReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RandomItemListReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RandomItemListAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RandomItemListAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* RandomItemBuyReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RandomItemBuyReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* FriendData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendData_reflection_ = NULL;
const ::google::protobuf::Descriptor* FriendList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendList_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateFriend_reflection_ = NULL;
const ::google::protobuf::Descriptor* DelFriendReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DelFriendReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* DelFriendAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DelFriendAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* DelFriendNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DelFriendNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* VisitFriendReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VisitFriendReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* VisitFriendAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VisitFriendAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* AskFriendData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskFriendData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAskFriendReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAskFriendReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAskFriendAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAskFriendAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* SearchPlayerReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SearchPlayerReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SearchPlayerAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SearchPlayerAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* AskFriendReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskFriendReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* AskFriendAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskFriendAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddAskFriendNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddAskFriendNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplyAskReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplyAskReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplyAskAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplyAskAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* NewAskFriendNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NewAskFriendNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetAskFriendStateReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetAskFriendStateReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetAskFriendStateAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetAskFriendStateAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetChapterReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetChapterReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* OneCheckPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OneCheckPoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* OneChapter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OneChapter_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetChapterAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetChapterAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* OneChapterLoseActivity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OneChapterLoseActivity_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChaptersLoseActivityNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChaptersLoseActivityNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddActiveChapterNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddActiveChapterNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateCheckPointNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateCheckPointNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* SelectCheckPointReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SelectCheckPointReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SelectCheckPointAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SelectCheckPointAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetCheckPointRankReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetCheckPointRankReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* FriendRankItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendRankItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetCheckPointRankAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetCheckPointRankAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetFriendArmsReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetFriendArmsReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* FriendArms_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendArms_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetFriendArmsAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetFriendArmsAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* BeginWarReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BeginWarReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MonsterBurstItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MonsterBurstItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* TreasureBurstItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TreasureBurstItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* BufferItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BufferItem_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BufferItem_BufferEffectType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BeginWarAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BeginWarAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* NowStartWarRpt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NowStartWarRpt_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeadMonster_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeadMonster_reflection_ = NULL;
const ::google::protobuf::Descriptor* WarResultReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WarResultReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* WarResultAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WarResultAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeadInWarNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeadInWarNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeadInWarAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeadInWarAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReviveReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReviveReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReviveAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReviveAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PetUpgradeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetUpgradeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PetUpgradeAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetUpgradeAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PetEvolveReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetEvolveReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PetEvolveAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetEvolveAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* OwnedPetIDListReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OwnedPetIDListReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* OwnedPetIDListAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OwnedPetIDListAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* NewPetOpenedNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NewPetOpenedNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChenJiuData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChenJiuData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChenJiuKind_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChenJiuKind_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetChenJiuReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetChenJiuReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetChenJiuAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetChenJiuAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateChenJiu_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateChenJiu_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetChenJiuAwardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetChenJiuAwardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetChenJiuAwardAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetChenJiuAwardAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* OneKeyGetChenJiuAwardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OneKeyGetChenJiuAwardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetQuestListReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetQuestListReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetQuestListAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetQuestListAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestUpdateData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestUpdateData_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateQuestNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateQuestNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetQuestAwardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetQuestAwardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetQuestAwardAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetQuestAwardAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* OneKeyGetQuestAwardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OneKeyGetQuestAwardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RefreshQuestNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RefreshQuestNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetCurPvpDataReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetCurPvpDataReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetCurPvpDataAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetCurPvpDataAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PvpData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PvpData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAllRankReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAllRankReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAllRankAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAllRankAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PvpFriendData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PvpFriendData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetFriendRankReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetFriendRankReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetFriendRankAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetFriendRankAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetSumRankReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetSumRankReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetSumRankAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetSumRankAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClearPvpCDReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClearPvpCDReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClearPvpCDAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClearPvpCDAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetPvpAwardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetPvpAwardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetPvpAwardAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetPvpAwardAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PvpWarBeginReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PvpWarBeginReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PvpWarBeginAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PvpWarBeginAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PvpWarResultReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PvpWarResultReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PvpWarResultAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PvpWarResultAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActionCountTickNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActionCountTickNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* CustomerServiceUrlNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CustomerServiceUrlNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillPage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillPage_reflection_ = NULL;
const ::google::protobuf::Descriptor* Skill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Skill_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetSkillListReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetSkillListReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetSkillListAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetSkillListAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* SaveSkillPageReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SaveSkillPageReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SaveSkillPageAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SaveSkillPageAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* SaveActiveSkillReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SaveActiveSkillReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SaveActiveSkillAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SaveActiveSkillAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* GoodsItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GoodsItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* GoodsList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GoodsList_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddGoodsItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddGoodsItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateGoodsNumber_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateGoodsNumber_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipData_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipList_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddEquip_reflection_ = NULL;
const ::google::protobuf::Descriptor* DelEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DelEquip_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateEquip_reflection_ = NULL;
const ::google::protobuf::Descriptor* PutOnEquipReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PutOnEquipReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PutOnEquipAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PutOnEquipAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* TongShiEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TongShiEquip_reflection_ = NULL;
const ::google::protobuf::Descriptor* StrengEquipReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StrengEquipReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* StrengEquipAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StrengEquipAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* JinJieEquipReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JinJieEquipReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* JinJieEquipAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JinJieEquipAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeChengEquipReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeChengEquipReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeChengEquipAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeChengEquipAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* SellGoodsReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SellGoodsReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SellGoodsAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SellGoodsAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipSetStoreReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipSetStoreReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipSetStoreAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipSetStoreAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShareDataNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShareDataNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* CompleteLoadDataNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CompleteLoadDataNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetPetNewStateReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetPetNewStateReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetPetNewStateAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetPetNewStateAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateBuyActionCounts_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateBuyActionCounts_reflection_ = NULL;
const ::google::protobuf::Descriptor* PythonMsg_example_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PythonMsg_example_reflection_ = NULL;
const ::google::protobuf::Descriptor* PythonMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PythonMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* PyChouKaReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PyChouKaReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PyPetInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PyPetInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PyChouKaAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PyChouKaAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PyGenGaoData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PyGenGaoData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PyGetGenGaoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PyGetGenGaoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PyGetGenGaoAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PyGetGenGaoAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PyGetGoodActivePanelReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PyGetGoodActivePanelReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PyGoodActiveInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PyGoodActiveInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PyGetGoodActivePanelAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PyGetGoodActivePanelAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PyGetActiveAwardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PyGetActiveAwardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PyGetActiveAwardAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PyGetActiveAwardAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PyEveryDataActiveNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PyEveryDataActiveNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* PySaveGuideStepReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PySaveGuideStepReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PySaveGuideStepAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PySaveGuideStepAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PyBuyCheckPointChallengeCountReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PyBuyCheckPointChallengeCountReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PyBuyCheckPointChallengeCountAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PyBuyCheckPointChallengeCountAck_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CHAT_MSG_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CHAT_MSG_NODE_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SYSTEM_MSG_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TEXIAO_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CommonDialogType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PET_POSITION_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BUFF_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SELL_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Period_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_gameserver_5fgate_5fclient_2eproto() {
  protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "gameserver_gate_client.proto");
  GOOGLE_CHECK(file != NULL);
  ClientLoginGateReq_descriptor_ = file->message_type(0);
  static const int ClientLoginGateReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLoginGateReq, digit_account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLoginGateReq, str_account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLoginGateReq, login_gate_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLoginGateReq, opt_),
  };
  ClientLoginGateReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientLoginGateReq_descriptor_,
      ClientLoginGateReq::default_instance_,
      ClientLoginGateReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLoginGateReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLoginGateReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientLoginGateReq));
  ClientLoginGateAck_descriptor_ = file->message_type(1);
  static const int ClientLoginGateAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLoginGateAck, err_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLoginGateAck, coding_id_),
  };
  ClientLoginGateAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientLoginGateAck_descriptor_,
      ClientLoginGateAck::default_instance_,
      ClientLoginGateAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLoginGateAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLoginGateAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientLoginGateAck));
  ClientLoginAgainGateReq_descriptor_ = file->message_type(2);
  static const int ClientLoginAgainGateReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLoginAgainGateReq, digit_account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLoginAgainGateReq, str_account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLoginAgainGateReq, login_gate_key_),
  };
  ClientLoginAgainGateReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientLoginAgainGateReq_descriptor_,
      ClientLoginAgainGateReq::default_instance_,
      ClientLoginAgainGateReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLoginAgainGateReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLoginAgainGateReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientLoginAgainGateReq));
  ClientLoginAgainGateAck_descriptor_ = file->message_type(3);
  static const int ClientLoginAgainGateAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLoginAgainGateAck, err_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLoginAgainGateAck, coding_id_),
  };
  ClientLoginAgainGateAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientLoginAgainGateAck_descriptor_,
      ClientLoginAgainGateAck::default_instance_,
      ClientLoginAgainGateAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLoginAgainGateAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLoginAgainGateAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientLoginAgainGateAck));
  ClientLeaveGameReq_descriptor_ = file->message_type(4);
  static const int ClientLeaveGameReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLeaveGameReq, leave_type_),
  };
  ClientLeaveGameReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientLeaveGameReq_descriptor_,
      ClientLeaveGameReq::default_instance_,
      ClientLeaveGameReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLeaveGameReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLeaveGameReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientLeaveGameReq));
  ClientLeaveGameAck_descriptor_ = file->message_type(5);
  static const int ClientLeaveGameAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLeaveGameAck, err_no_),
  };
  ClientLeaveGameAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientLeaveGameAck_descriptor_,
      ClientLeaveGameAck::default_instance_,
      ClientLeaveGameAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLeaveGameAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLeaveGameAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientLeaveGameAck));
  SysErrorNtf_descriptor_ = file->message_type(6);
  static const int SysErrorNtf_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysErrorNtf, err_no_),
  };
  SysErrorNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SysErrorNtf_descriptor_,
      SysErrorNtf::default_instance_,
      SysErrorNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysErrorNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysErrorNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SysErrorNtf));
  KeepClientAlive_descriptor_ = file->message_type(7);
  static const int KeepClientAlive_offsets_[1] = {
  };
  KeepClientAlive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KeepClientAlive_descriptor_,
      KeepClientAlive::default_instance_,
      KeepClientAlive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepClientAlive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepClientAlive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KeepClientAlive));
  KeepClientAliveAck_descriptor_ = file->message_type(8);
  static const int KeepClientAliveAck_offsets_[1] = {
  };
  KeepClientAliveAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KeepClientAliveAck_descriptor_,
      KeepClientAliveAck::default_instance_,
      KeepClientAliveAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepClientAliveAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepClientAliveAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KeepClientAliveAck));
  TestReq_descriptor_ = file->message_type(9);
  static const int TestReq_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestReq, t_double_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestReq, t_float_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestReq, t_int32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestReq, t_int64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestReq, t_uint32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestReq, t_uint64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestReq, t_sint32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestReq, t_sint64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestReq, t_bool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestReq, t_string_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestReq, t_bytes_),
  };
  TestReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestReq_descriptor_,
      TestReq::default_instance_,
      TestReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestReq));
  TestAck_descriptor_ = file->message_type(10);
  static const int TestAck_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestAck, t_double_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestAck, t_float_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestAck, t_int32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestAck, t_int64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestAck, t_uint32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestAck, t_uint64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestAck, t_sint32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestAck, t_sint64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestAck, t_bool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestAck, t_string_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestAck, t_bytes_),
  };
  TestAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestAck_descriptor_,
      TestAck::default_instance_,
      TestAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestAck));
  PlayerBaseData_descriptor_ = file->message_type(11);
  static const int PlayerBaseData_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBaseData, playername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBaseData, vip_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBaseData, area_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBaseData, head_pic_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBaseData, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBaseData, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBaseData, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBaseData, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBaseData, action_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBaseData, spirit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBaseData, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBaseData, mp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBaseData, yuan_bao_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBaseData, gmlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBaseData, cur_queue_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBaseData, friend_ship_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBaseData, not_ask_friend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBaseData, today_first_login_),
  };
  PlayerBaseData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerBaseData_descriptor_,
      PlayerBaseData::default_instance_,
      PlayerBaseData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBaseData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBaseData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerBaseData));
  MsgNodeText_descriptor_ = file->message_type(12);
  static const int MsgNodeText_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNodeText, text_),
  };
  MsgNodeText_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgNodeText_descriptor_,
      MsgNodeText::default_instance_,
      MsgNodeText_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNodeText, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNodeText, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgNodeText));
  UniqueID_descriptor_ = file->message_type(13);
  static const int UniqueID_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniqueID, id_),
  };
  UniqueID_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UniqueID_descriptor_,
      UniqueID::default_instance_,
      UniqueID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniqueID, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniqueID, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UniqueID));
  Priority_descriptor_ = file->message_type(14);
  static const int Priority_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Priority, pri_),
  };
  Priority_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Priority_descriptor_,
      Priority::default_instance_,
      Priority_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Priority, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Priority, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Priority));
  RepeatCount_descriptor_ = file->message_type(15);
  static const int RepeatCount_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RepeatCount, count_),
  };
  RepeatCount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RepeatCount_descriptor_,
      RepeatCount::default_instance_,
      RepeatCount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RepeatCount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RepeatCount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RepeatCount));
  MsgNodePlayerIDName_descriptor_ = file->message_type(16);
  static const int MsgNodePlayerIDName_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNodePlayerIDName, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNodePlayerIDName, name_),
  };
  MsgNodePlayerIDName_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgNodePlayerIDName_descriptor_,
      MsgNodePlayerIDName::default_instance_,
      MsgNodePlayerIDName_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNodePlayerIDName, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNodePlayerIDName, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgNodePlayerIDName));
  MessageRepeateNode_descriptor_ = file->message_type(17);
  static const int MessageRepeateNode_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageRepeateNode, nodes_),
  };
  MessageRepeateNode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MessageRepeateNode_descriptor_,
      MessageRepeateNode::default_instance_,
      MessageRepeateNode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageRepeateNode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageRepeateNode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MessageRepeateNode));
  MessageNode_descriptor_ = file->message_type(18);
  static const int MessageNode_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageNode, node_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageNode, data_),
  };
  MessageNode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MessageNode_descriptor_,
      MessageNode::default_instance_,
      MessageNode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageNode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageNode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MessageNode));
  ChatRpt_descriptor_ = file->message_type(19);
  static const int ChatRpt_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRpt, msg_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRpt, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRpt, to_playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRpt, to_playername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRpt, nodes_),
  };
  ChatRpt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChatRpt_descriptor_,
      ChatRpt::default_instance_,
      ChatRpt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRpt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRpt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatRpt));
  ChatNtf_descriptor_ = file->message_type(20);
  static const int ChatNtf_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatNtf, msg_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatNtf, nodes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatNtf, err_no_),
  };
  ChatNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChatNtf_descriptor_,
      ChatNtf::default_instance_,
      ChatNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatNtf));
  GSChatNtf_descriptor_ = file->message_type(21);
  static const int GSChatNtf_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GSChatNtf, msg_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GSChatNtf, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GSChatNtf, to_playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GSChatNtf, to_playername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GSChatNtf, nodes_),
  };
  GSChatNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GSChatNtf_descriptor_,
      GSChatNtf::default_instance_,
      GSChatNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GSChatNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GSChatNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GSChatNtf));
  GSSystemMessageNtf_descriptor_ = file->message_type(22);
  static const int GSSystemMessageNtf_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GSSystemMessageNtf, msg_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GSSystemMessageNtf, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GSSystemMessageNtf, nodes_),
  };
  GSSystemMessageNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GSSystemMessageNtf_descriptor_,
      GSSystemMessageNtf::default_instance_,
      GSSystemMessageNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GSSystemMessageNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GSSystemMessageNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GSSystemMessageNtf));
  SystemMessage_descriptor_ = file->message_type(23);
  static const int SystemMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemMessage, msg_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemMessage, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemMessage, nodes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemMessage, is_my_msg_),
  };
  SystemMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SystemMessage_descriptor_,
      SystemMessage::default_instance_,
      SystemMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SystemMessage));
  GMExecuteResult_descriptor_ = file->message_type(24);
  static const int GMExecuteResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMExecuteResult, err_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMExecuteResult, msg_),
  };
  GMExecuteResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMExecuteResult_descriptor_,
      GMExecuteResult::default_instance_,
      GMExecuteResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMExecuteResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMExecuteResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMExecuteResult));
  TeXiaoItem_descriptor_ = file->message_type(25);
  static const int TeXiaoItem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeXiaoItem, itemtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeXiaoItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeXiaoItem, number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeXiaoItem, level_),
  };
  TeXiaoItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeXiaoItem_descriptor_,
      TeXiaoItem::default_instance_,
      TeXiaoItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeXiaoItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeXiaoItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeXiaoItem));
  TeXiaoItem_ITEM_TYPE_descriptor_ = TeXiaoItem_descriptor_->enum_type(0);
  TeXiao_descriptor_ = file->message_type(26);
  static const int TeXiao_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeXiao, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeXiao, item_),
  };
  TeXiao_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeXiao_descriptor_,
      TeXiao::default_instance_,
      TeXiao_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeXiao, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeXiao, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeXiao));
  TeXiaoTypeNtf_descriptor_ = file->message_type(27);
  static const int TeXiaoTypeNtf_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeXiaoTypeNtf, texiao_),
  };
  TeXiaoTypeNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeXiaoTypeNtf_descriptor_,
      TeXiaoTypeNtf::default_instance_,
      TeXiaoTypeNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeXiaoTypeNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeXiaoTypeNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeXiaoTypeNtf));
  GetKeyAwardReq_descriptor_ = file->message_type(28);
  static const int GetKeyAwardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetKeyAwardReq, key_),
  };
  GetKeyAwardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetKeyAwardReq_descriptor_,
      GetKeyAwardReq::default_instance_,
      GetKeyAwardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetKeyAwardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetKeyAwardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetKeyAwardReq));
  GetKeyAwardAck_descriptor_ = file->message_type(29);
  static const int GetKeyAwardAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetKeyAwardAck, err_no_),
  };
  GetKeyAwardAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetKeyAwardAck_descriptor_,
      GetKeyAwardAck::default_instance_,
      GetKeyAwardAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetKeyAwardAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetKeyAwardAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetKeyAwardAck));
  NeedCreatePlayerName_descriptor_ = file->message_type(30);
  static const int NeedCreatePlayerName_offsets_[1] = {
  };
  NeedCreatePlayerName_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NeedCreatePlayerName_descriptor_,
      NeedCreatePlayerName::default_instance_,
      NeedCreatePlayerName_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NeedCreatePlayerName, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NeedCreatePlayerName, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NeedCreatePlayerName));
  CreatePlayerNameReq_descriptor_ = file->message_type(31);
  static const int CreatePlayerNameReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatePlayerNameReq, newname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatePlayerNameReq, head_pic_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatePlayerNameReq, sex_),
  };
  CreatePlayerNameReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreatePlayerNameReq_descriptor_,
      CreatePlayerNameReq::default_instance_,
      CreatePlayerNameReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatePlayerNameReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatePlayerNameReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreatePlayerNameReq));
  CreatePlayerNameAck_descriptor_ = file->message_type(32);
  static const int CreatePlayerNameAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatePlayerNameAck, err_no_),
  };
  CreatePlayerNameAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreatePlayerNameAck_descriptor_,
      CreatePlayerNameAck::default_instance_,
      CreatePlayerNameAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatePlayerNameAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatePlayerNameAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreatePlayerNameAck));
  ShangChengGoods_descriptor_ = file->message_type(33);
  static const int ShangChengGoods_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShangChengGoods, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShangChengGoods, kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShangChengGoods, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShangChengGoods, price_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShangChengGoods, end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShangChengGoods, limit_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShangChengGoods, sell_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShangChengGoods, percent_),
  };
  ShangChengGoods_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShangChengGoods_descriptor_,
      ShangChengGoods::default_instance_,
      ShangChengGoods_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShangChengGoods, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShangChengGoods, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShangChengGoods));
  LabelShangChengGoods_descriptor_ = file->message_type(34);
  static const int LabelShangChengGoods_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelShangChengGoods, label_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelShangChengGoods, sellgoodslist_),
  };
  LabelShangChengGoods_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LabelShangChengGoods_descriptor_,
      LabelShangChengGoods::default_instance_,
      LabelShangChengGoods_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelShangChengGoods, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelShangChengGoods, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LabelShangChengGoods));
  GetShangChengGoodsListAck_descriptor_ = file->message_type(35);
  static const int GetShangChengGoodsListAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetShangChengGoodsListAck, shop_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetShangChengGoodsListAck, labels_),
  };
  GetShangChengGoodsListAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetShangChengGoodsListAck_descriptor_,
      GetShangChengGoodsListAck::default_instance_,
      GetShangChengGoodsListAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetShangChengGoodsListAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetShangChengGoodsListAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetShangChengGoodsListAck));
  GetShangChengGoodsListReq_descriptor_ = file->message_type(36);
  static const int GetShangChengGoodsListReq_offsets_[1] = {
  };
  GetShangChengGoodsListReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetShangChengGoodsListReq_descriptor_,
      GetShangChengGoodsListReq::default_instance_,
      GetShangChengGoodsListReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetShangChengGoodsListReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetShangChengGoodsListReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetShangChengGoodsListReq));
  CommonDialog_descriptor_ = file->message_type(37);
  static const int CommonDialog_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonDialog, dlg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonDialog, dlg_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonDialog, dlg_return_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonDialog, output_text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonDialog, input_text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonDialog, r32_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonDialog, r32_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonDialog, r64_1_),
  };
  CommonDialog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommonDialog_descriptor_,
      CommonDialog::default_instance_,
      CommonDialog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonDialog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonDialog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommonDialog));
  GetGMAward_descriptor_ = file->message_type(38);
  static const int GetGMAward_offsets_[1] = {
  };
  GetGMAward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetGMAward_descriptor_,
      GetGMAward::default_instance_,
      GetGMAward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGMAward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGMAward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetGMAward));
  GetGMAwardAck_descriptor_ = file->message_type(39);
  static const int GetGMAwardAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGMAwardAck, err_no_),
  };
  GetGMAwardAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetGMAwardAck_descriptor_,
      GetGMAwardAck::default_instance_,
      GetGMAwardAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGMAwardAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGMAwardAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetGMAwardAck));
  UpdateExp_descriptor_ = file->message_type(40);
  static const int UpdateExp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateExp, exp_),
  };
  UpdateExp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateExp_descriptor_,
      UpdateExp::default_instance_,
      UpdateExp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateExp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateExp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateExp));
  UpdateGold_descriptor_ = file->message_type(41);
  static const int UpdateGold_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGold, gold_),
  };
  UpdateGold_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateGold_descriptor_,
      UpdateGold::default_instance_,
      UpdateGold_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGold, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGold, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateGold));
  UpdateLevel_descriptor_ = file->message_type(42);
  static const int UpdateLevel_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateLevel, id_),
  };
  UpdateLevel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateLevel_descriptor_,
      UpdateLevel::default_instance_,
      UpdateLevel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateLevel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateLevel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateLevel));
  UpdateYuanBao_descriptor_ = file->message_type(43);
  static const int UpdateYuanBao_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateYuanBao, yuan_bao_),
  };
  UpdateYuanBao_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateYuanBao_descriptor_,
      UpdateYuanBao::default_instance_,
      UpdateYuanBao_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateYuanBao, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateYuanBao, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateYuanBao));
  PetRecord_descriptor_ = file->message_type(44);
  static const int PetRecord_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetRecord, qwid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetRecord, pet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetRecord, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetRecord, bind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetRecord, recover_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetRecord, dps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetRecord, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetRecord, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetRecord, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetRecord, action_skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetRecord, leader_skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetRecord, passive_skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetRecord, create_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetRecord, protect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetRecord, skill_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetRecord, equip_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetRecord, new_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetRecord, pvp_number_),
  };
  PetRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetRecord_descriptor_,
      PetRecord::default_instance_,
      PetRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetRecord));
  PetRecordSIGN_descriptor_ = file->message_type(45);
  static const int PetRecordSIGN_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetRecordSIGN, qwid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetRecordSIGN, sign_pet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetRecordSIGN, sign_recover_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetRecordSIGN, sign_dps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetRecordSIGN, sign_hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetRecordSIGN, sign_action_skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetRecordSIGN, sign_leader_skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetRecordSIGN, sign_skill_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetRecordSIGN, sign_mp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetRecordSIGN, sign_spirit_),
  };
  PetRecordSIGN_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetRecordSIGN_descriptor_,
      PetRecordSIGN::default_instance_,
      PetRecordSIGN_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetRecordSIGN, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetRecordSIGN, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetRecordSIGN));
  AddPet_descriptor_ = file->message_type(46);
  static const int AddPet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddPet, pet_),
  };
  AddPet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddPet_descriptor_,
      AddPet::default_instance_,
      AddPet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddPet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddPet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddPet));
  DelPet_descriptor_ = file->message_type(47);
  static const int DelPet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelPet, id_),
  };
  DelPet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DelPet_descriptor_,
      DelPet::default_instance_,
      DelPet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelPet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelPet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DelPet));
  UpdatePet_descriptor_ = file->message_type(48);
  static const int UpdatePet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatePet, pet_),
  };
  UpdatePet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdatePet_descriptor_,
      UpdatePet::default_instance_,
      UpdatePet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatePet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatePet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdatePet));
  PetList_descriptor_ = file->message_type(49);
  static const int PetList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetList, talbe_),
  };
  PetList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetList_descriptor_,
      PetList::default_instance_,
      PetList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetList));
  SystemData_descriptor_ = file->message_type(50);
  static const int SystemData_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemData, msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemData, msg_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemData, send_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemData, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemData, read_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemData, msg_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemData, award_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemData, last_days_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemData, content_),
  };
  SystemData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SystemData_descriptor_,
      SystemData::default_instance_,
      SystemData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SystemData));
  GetAllSysMsgReq_descriptor_ = file->message_type(51);
  static const int GetAllSysMsgReq_offsets_[1] = {
  };
  GetAllSysMsgReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAllSysMsgReq_descriptor_,
      GetAllSysMsgReq::default_instance_,
      GetAllSysMsgReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAllSysMsgReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAllSysMsgReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAllSysMsgReq));
  GetAllSysMsgAck_descriptor_ = file->message_type(52);
  static const int GetAllSysMsgAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAllSysMsgAck, sysmsg_),
  };
  GetAllSysMsgAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAllSysMsgAck_descriptor_,
      GetAllSysMsgAck::default_instance_,
      GetAllSysMsgAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAllSysMsgAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAllSysMsgAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAllSysMsgAck));
  DeleteSysMsgReq_descriptor_ = file->message_type(53);
  static const int DeleteSysMsgReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteSysMsgReq, msg_ids_),
  };
  DeleteSysMsgReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteSysMsgReq_descriptor_,
      DeleteSysMsgReq::default_instance_,
      DeleteSysMsgReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteSysMsgReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteSysMsgReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteSysMsgReq));
  DeleteSysMsgAck_descriptor_ = file->message_type(54);
  static const int DeleteSysMsgAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteSysMsgAck, err_no_),
  };
  DeleteSysMsgAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteSysMsgAck_descriptor_,
      DeleteSysMsgAck::default_instance_,
      DeleteSysMsgAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteSysMsgAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteSysMsgAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteSysMsgAck));
  SendSysMsgReq_descriptor_ = file->message_type(55);
  static const int SendSysMsgReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendSysMsgReq, player_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendSysMsgReq, theme_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendSysMsgReq, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendSysMsgReq, playerid_),
  };
  SendSysMsgReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SendSysMsgReq_descriptor_,
      SendSysMsgReq::default_instance_,
      SendSysMsgReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendSysMsgReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendSysMsgReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SendSysMsgReq));
  SendSysMsgAck_descriptor_ = file->message_type(56);
  static const int SendSysMsgAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendSysMsgAck, err_no_),
  };
  SendSysMsgAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SendSysMsgAck_descriptor_,
      SendSysMsgAck::default_instance_,
      SendSysMsgAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendSysMsgAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendSysMsgAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SendSysMsgAck));
  ReadSysMsgReq_descriptor_ = file->message_type(57);
  static const int ReadSysMsgReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadSysMsgReq, msg_id_),
  };
  ReadSysMsgReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReadSysMsgReq_descriptor_,
      ReadSysMsgReq::default_instance_,
      ReadSysMsgReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadSysMsgReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadSysMsgReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReadSysMsgReq));
  ReadSysMsgAck_descriptor_ = file->message_type(58);
  static const int ReadSysMsgAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadSysMsgAck, msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadSysMsgAck, content_),
  };
  ReadSysMsgAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReadSysMsgAck_descriptor_,
      ReadSysMsgAck::default_instance_,
      ReadSysMsgAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadSysMsgAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadSysMsgAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReadSysMsgAck));
  GetEmailAwardReq_descriptor_ = file->message_type(59);
  static const int GetEmailAwardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEmailAwardReq, msg_id_),
  };
  GetEmailAwardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetEmailAwardReq_descriptor_,
      GetEmailAwardReq::default_instance_,
      GetEmailAwardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEmailAwardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEmailAwardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetEmailAwardReq));
  GetEmailAwardAck_descriptor_ = file->message_type(60);
  static const int GetEmailAwardAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEmailAwardAck, msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEmailAwardAck, err_no_),
  };
  GetEmailAwardAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetEmailAwardAck_descriptor_,
      GetEmailAwardAck::default_instance_,
      GetEmailAwardAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEmailAwardAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEmailAwardAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetEmailAwardAck));
  OneKeyGetEmailAwardReq_descriptor_ = file->message_type(61);
  static const int OneKeyGetEmailAwardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneKeyGetEmailAwardReq, msg_id_),
  };
  OneKeyGetEmailAwardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OneKeyGetEmailAwardReq_descriptor_,
      OneKeyGetEmailAwardReq::default_instance_,
      OneKeyGetEmailAwardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneKeyGetEmailAwardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneKeyGetEmailAwardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OneKeyGetEmailAwardReq));
  EmailMessageNtf_descriptor_ = file->message_type(62);
  static const int EmailMessageNtf_offsets_[1] = {
  };
  EmailMessageNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EmailMessageNtf_descriptor_,
      EmailMessageNtf::default_instance_,
      EmailMessageNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailMessageNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailMessageNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EmailMessageNtf));
  ProtectPetReq_descriptor_ = file->message_type(63);
  static const int ProtectPetReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtectPetReq, pet_id_),
  };
  ProtectPetReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtectPetReq_descriptor_,
      ProtectPetReq::default_instance_,
      ProtectPetReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtectPetReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtectPetReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtectPetReq));
  ProtectPetAck_descriptor_ = file->message_type(64);
  static const int ProtectPetAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtectPetAck, pet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtectPetAck, err_no_),
  };
  ProtectPetAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtectPetAck_descriptor_,
      ProtectPetAck::default_instance_,
      ProtectPetAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtectPetAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtectPetAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtectPetAck));
  SellPetToSysReq_descriptor_ = file->message_type(65);
  static const int SellPetToSysReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SellPetToSysReq, pet_ids_),
  };
  SellPetToSysReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SellPetToSysReq_descriptor_,
      SellPetToSysReq::default_instance_,
      SellPetToSysReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SellPetToSysReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SellPetToSysReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SellPetToSysReq));
  SellPetToSysAck_descriptor_ = file->message_type(66);
  static const int SellPetToSysAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SellPetToSysAck, pet_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SellPetToSysAck, err_no_),
  };
  SellPetToSysAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SellPetToSysAck_descriptor_,
      SellPetToSysAck::default_instance_,
      SellPetToSysAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SellPetToSysAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SellPetToSysAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SellPetToSysAck));
  PetInBianDui_descriptor_ = file->message_type(67);
  static const int PetInBianDui_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetInBianDui, pet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetInBianDui, idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetInBianDui, number_),
  };
  PetInBianDui_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetInBianDui_descriptor_,
      PetInBianDui::default_instance_,
      PetInBianDui_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetInBianDui, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetInBianDui, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetInBianDui));
  BianDuiData_descriptor_ = file->message_type(68);
  static const int BianDuiData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BianDuiData, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BianDuiData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BianDuiData, admin_pet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BianDuiData, pet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BianDuiData, total_attack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BianDuiData, state_),
  };
  BianDuiData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BianDuiData_descriptor_,
      BianDuiData::default_instance_,
      BianDuiData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BianDuiData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BianDuiData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BianDuiData));
  BianDuiList_descriptor_ = file->message_type(69);
  static const int BianDuiList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BianDuiList, data_),
  };
  BianDuiList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BianDuiList_descriptor_,
      BianDuiList::default_instance_,
      BianDuiList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BianDuiList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BianDuiList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BianDuiList));
  SubBianDuiReq_descriptor_ = file->message_type(70);
  static const int SubBianDuiReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubBianDuiReq, biandui_),
  };
  SubBianDuiReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubBianDuiReq_descriptor_,
      SubBianDuiReq::default_instance_,
      SubBianDuiReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubBianDuiReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubBianDuiReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubBianDuiReq));
  SubBianDuiAck_descriptor_ = file->message_type(71);
  static const int SubBianDuiAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubBianDuiAck, idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubBianDuiAck, err_no_),
  };
  SubBianDuiAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubBianDuiAck_descriptor_,
      SubBianDuiAck::default_instance_,
      SubBianDuiAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubBianDuiAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubBianDuiAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubBianDuiAck));
  ModifyBianDuiNameReq_descriptor_ = file->message_type(72);
  static const int ModifyBianDuiNameReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyBianDuiNameReq, name_),
  };
  ModifyBianDuiNameReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModifyBianDuiNameReq_descriptor_,
      ModifyBianDuiNameReq::default_instance_,
      ModifyBianDuiNameReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyBianDuiNameReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyBianDuiNameReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModifyBianDuiNameReq));
  ModifyBianDuiNameAck_descriptor_ = file->message_type(73);
  static const int ModifyBianDuiNameAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyBianDuiNameAck, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyBianDuiNameAck, err_no_),
  };
  ModifyBianDuiNameAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModifyBianDuiNameAck_descriptor_,
      ModifyBianDuiNameAck::default_instance_,
      ModifyBianDuiNameAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyBianDuiNameAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyBianDuiNameAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModifyBianDuiNameAck));
  ModifyBIanDuiDataReq_descriptor_ = file->message_type(74);
  static const int ModifyBIanDuiDataReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyBIanDuiDataReq, pet_id_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyBIanDuiDataReq, pet_id_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyBIanDuiDataReq, queue_idx_),
  };
  ModifyBIanDuiDataReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModifyBIanDuiDataReq_descriptor_,
      ModifyBIanDuiDataReq::default_instance_,
      ModifyBIanDuiDataReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyBIanDuiDataReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyBIanDuiDataReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModifyBIanDuiDataReq));
  ModifyBIanDuiDataAck_descriptor_ = file->message_type(75);
  static const int ModifyBIanDuiDataAck_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyBIanDuiDataAck, pet_id_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyBIanDuiDataAck, pet_id_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyBIanDuiDataAck, err_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyBIanDuiDataAck, queue_idx_),
  };
  ModifyBIanDuiDataAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModifyBIanDuiDataAck_descriptor_,
      ModifyBIanDuiDataAck::default_instance_,
      ModifyBIanDuiDataAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyBIanDuiDataAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyBIanDuiDataAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModifyBIanDuiDataAck));
  BianDuiNtf_descriptor_ = file->message_type(76);
  static const int BianDuiNtf_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BianDuiNtf, queue_),
  };
  BianDuiNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BianDuiNtf_descriptor_,
      BianDuiNtf::default_instance_,
      BianDuiNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BianDuiNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BianDuiNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BianDuiNtf));
  AddBianDui_descriptor_ = file->message_type(77);
  static const int AddBianDui_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBianDui, queue_),
  };
  AddBianDui_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddBianDui_descriptor_,
      AddBianDui::default_instance_,
      AddBianDui_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBianDui, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBianDui, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddBianDui));
  GetCurBianDuiReq_descriptor_ = file->message_type(78);
  static const int GetCurBianDuiReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCurBianDuiReq, idx_),
  };
  GetCurBianDuiReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetCurBianDuiReq_descriptor_,
      GetCurBianDuiReq::default_instance_,
      GetCurBianDuiReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCurBianDuiReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCurBianDuiReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetCurBianDuiReq));
  GetCurBianDuiAck_descriptor_ = file->message_type(79);
  static const int GetCurBianDuiAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCurBianDuiAck, biandui_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCurBianDuiAck, err_no_),
  };
  GetCurBianDuiAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetCurBianDuiAck_descriptor_,
      GetCurBianDuiAck::default_instance_,
      GetCurBianDuiAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCurBianDuiAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCurBianDuiAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetCurBianDuiAck));
  SetCurBianDuiReq_descriptor_ = file->message_type(80);
  static const int SetCurBianDuiReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetCurBianDuiReq, queue_id_),
  };
  SetCurBianDuiReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetCurBianDuiReq_descriptor_,
      SetCurBianDuiReq::default_instance_,
      SetCurBianDuiReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetCurBianDuiReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetCurBianDuiReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetCurBianDuiReq));
  SetCurBianDuiAck_descriptor_ = file->message_type(81);
  static const int SetCurBianDuiAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetCurBianDuiAck, queue_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetCurBianDuiAck, err_no_),
  };
  SetCurBianDuiAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetCurBianDuiAck_descriptor_,
      SetCurBianDuiAck::default_instance_,
      SetCurBianDuiAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetCurBianDuiAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetCurBianDuiAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetCurBianDuiAck));
  AddPetToBianDuiReq_descriptor_ = file->message_type(82);
  static const int AddPetToBianDuiReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddPetToBianDuiReq, pet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddPetToBianDuiReq, idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddPetToBianDuiReq, queue_idx_),
  };
  AddPetToBianDuiReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddPetToBianDuiReq_descriptor_,
      AddPetToBianDuiReq::default_instance_,
      AddPetToBianDuiReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddPetToBianDuiReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddPetToBianDuiReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddPetToBianDuiReq));
  AddPetToBianDuiAck_descriptor_ = file->message_type(83);
  static const int AddPetToBianDuiAck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddPetToBianDuiAck, pet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddPetToBianDuiAck, err_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddPetToBianDuiAck, queue_idx_),
  };
  AddPetToBianDuiAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddPetToBianDuiAck_descriptor_,
      AddPetToBianDuiAck::default_instance_,
      AddPetToBianDuiAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddPetToBianDuiAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddPetToBianDuiAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddPetToBianDuiAck));
  DelPetToBianDuiReq_descriptor_ = file->message_type(84);
  static const int DelPetToBianDuiReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelPetToBianDuiReq, pet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelPetToBianDuiReq, queue_idx_),
  };
  DelPetToBianDuiReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DelPetToBianDuiReq_descriptor_,
      DelPetToBianDuiReq::default_instance_,
      DelPetToBianDuiReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelPetToBianDuiReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelPetToBianDuiReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DelPetToBianDuiReq));
  DelPetToBianDuiAck_descriptor_ = file->message_type(85);
  static const int DelPetToBianDuiAck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelPetToBianDuiAck, pet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelPetToBianDuiAck, err_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelPetToBianDuiAck, queue_idx_),
  };
  DelPetToBianDuiAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DelPetToBianDuiAck_descriptor_,
      DelPetToBianDuiAck::default_instance_,
      DelPetToBianDuiAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelPetToBianDuiAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelPetToBianDuiAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DelPetToBianDuiAck));
  AddPetMaxNumberReq_descriptor_ = file->message_type(86);
  static const int AddPetMaxNumberReq_offsets_[1] = {
  };
  AddPetMaxNumberReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddPetMaxNumberReq_descriptor_,
      AddPetMaxNumberReq::default_instance_,
      AddPetMaxNumberReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddPetMaxNumberReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddPetMaxNumberReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddPetMaxNumberReq));
  AddPetMaxNumberAck_descriptor_ = file->message_type(87);
  static const int AddPetMaxNumberAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddPetMaxNumberAck, err_no_),
  };
  AddPetMaxNumberAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddPetMaxNumberAck_descriptor_,
      AddPetMaxNumberAck::default_instance_,
      AddPetMaxNumberAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddPetMaxNumberAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddPetMaxNumberAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddPetMaxNumberAck));
  AddQueueMaxNumberReq_descriptor_ = file->message_type(88);
  static const int AddQueueMaxNumberReq_offsets_[1] = {
  };
  AddQueueMaxNumberReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddQueueMaxNumberReq_descriptor_,
      AddQueueMaxNumberReq::default_instance_,
      AddQueueMaxNumberReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddQueueMaxNumberReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddQueueMaxNumberReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddQueueMaxNumberReq));
  AddQueueMaxNumberAck_descriptor_ = file->message_type(89);
  static const int AddQueueMaxNumberAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddQueueMaxNumberAck, err_no_),
  };
  AddQueueMaxNumberAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddQueueMaxNumberAck_descriptor_,
      AddQueueMaxNumberAck::default_instance_,
      AddQueueMaxNumberAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddQueueMaxNumberAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddQueueMaxNumberAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddQueueMaxNumberAck));
  PetMaxNumberNtf_descriptor_ = file->message_type(90);
  static const int PetMaxNumberNtf_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetMaxNumberNtf, number_),
  };
  PetMaxNumberNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetMaxNumberNtf_descriptor_,
      PetMaxNumberNtf::default_instance_,
      PetMaxNumberNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetMaxNumberNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetMaxNumberNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetMaxNumberNtf));
  QueueMaxNumberNtf_descriptor_ = file->message_type(91);
  static const int QueueMaxNumberNtf_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueueMaxNumberNtf, number_),
  };
  QueueMaxNumberNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueueMaxNumberNtf_descriptor_,
      QueueMaxNumberNtf::default_instance_,
      QueueMaxNumberNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueueMaxNumberNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueueMaxNumberNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueueMaxNumberNtf));
  UpdateCurBianDuiIdx_descriptor_ = file->message_type(92);
  static const int UpdateCurBianDuiIdx_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateCurBianDuiIdx, idx_),
  };
  UpdateCurBianDuiIdx_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateCurBianDuiIdx_descriptor_,
      UpdateCurBianDuiIdx::default_instance_,
      UpdateCurBianDuiIdx_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateCurBianDuiIdx, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateCurBianDuiIdx, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateCurBianDuiIdx));
  RecoverActiveCountReq_descriptor_ = file->message_type(93);
  static const int RecoverActiveCountReq_offsets_[1] = {
  };
  RecoverActiveCountReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecoverActiveCountReq_descriptor_,
      RecoverActiveCountReq::default_instance_,
      RecoverActiveCountReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoverActiveCountReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoverActiveCountReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecoverActiveCountReq));
  RecoverActiveCountAck_descriptor_ = file->message_type(94);
  static const int RecoverActiveCountAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoverActiveCountAck, err_no_),
  };
  RecoverActiveCountAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecoverActiveCountAck_descriptor_,
      RecoverActiveCountAck::default_instance_,
      RecoverActiveCountAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoverActiveCountAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoverActiveCountAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecoverActiveCountAck));
  ActiveCountNtf_descriptor_ = file->message_type(95);
  static const int ActiveCountNtf_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActiveCountNtf, count_),
  };
  ActiveCountNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActiveCountNtf_descriptor_,
      ActiveCountNtf::default_instance_,
      ActiveCountNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActiveCountNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActiveCountNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActiveCountNtf));
  SpiritNtf_descriptor_ = file->message_type(96);
  static const int SpiritNtf_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpiritNtf, spirit_),
  };
  SpiritNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SpiritNtf_descriptor_,
      SpiritNtf::default_instance_,
      SpiritNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpiritNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpiritNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SpiritNtf));
  UpdateHp_descriptor_ = file->message_type(97);
  static const int UpdateHp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateHp, hp_),
  };
  UpdateHp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateHp_descriptor_,
      UpdateHp::default_instance_,
      UpdateHp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateHp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateHp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateHp));
  UpdateMp_descriptor_ = file->message_type(98);
  static const int UpdateMp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateMp, mp_),
  };
  UpdateMp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateMp_descriptor_,
      UpdateMp::default_instance_,
      UpdateMp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateMp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateMp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateMp));
  GoodsOfSell_descriptor_ = file->message_type(99);
  static const int GoodsOfSell_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsOfSell, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsOfSell, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsOfSell, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsOfSell, cost_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsOfSell, desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsOfSell, price_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsOfSell, fpercent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsOfSell, last_month_days_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsOfSell, zhaohuan_free_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsOfSell, show_id_),
  };
  GoodsOfSell_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GoodsOfSell_descriptor_,
      GoodsOfSell::default_instance_,
      GoodsOfSell_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsOfSell, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsOfSell, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GoodsOfSell));
  GetShopListReq_descriptor_ = file->message_type(100);
  static const int GetShopListReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetShopListReq, shopid_),
  };
  GetShopListReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetShopListReq_descriptor_,
      GetShopListReq::default_instance_,
      GetShopListReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetShopListReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetShopListReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetShopListReq));
  GetShopListAck_descriptor_ = file->message_type(101);
  static const int GetShopListAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetShopListAck, shopid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetShopListAck, goods_),
  };
  GetShopListAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetShopListAck_descriptor_,
      GetShopListAck::default_instance_,
      GetShopListAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetShopListAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetShopListAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetShopListAck));
  ShoppingReq_descriptor_ = file->message_type(102);
  static const int ShoppingReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShoppingReq, shopid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShoppingReq, id_),
  };
  ShoppingReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShoppingReq_descriptor_,
      ShoppingReq::default_instance_,
      ShoppingReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShoppingReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShoppingReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShoppingReq));
  ShoppingAck_descriptor_ = file->message_type(103);
  static const int ShoppingAck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShoppingAck, shopid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShoppingAck, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShoppingAck, err_no_),
  };
  ShoppingAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShoppingAck_descriptor_,
      ShoppingAck::default_instance_,
      ShoppingAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShoppingAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShoppingAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShoppingAck));
  UpdateVIPLevel_descriptor_ = file->message_type(104);
  static const int UpdateVIPLevel_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateVIPLevel, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateVIPLevel, sum_chongzhi_),
  };
  UpdateVIPLevel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateVIPLevel_descriptor_,
      UpdateVIPLevel::default_instance_,
      UpdateVIPLevel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateVIPLevel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateVIPLevel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateVIPLevel));
  UpdateFriendShip_descriptor_ = file->message_type(105);
  static const int UpdateFriendShip_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFriendShip, ship_),
  };
  UpdateFriendShip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateFriendShip_descriptor_,
      UpdateFriendShip::default_instance_,
      UpdateFriendShip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFriendShip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFriendShip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateFriendShip));
  ChongZhiOrderNtf_descriptor_ = file->message_type(106);
  static const int ChongZhiOrderNtf_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChongZhiOrderNtf, order_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChongZhiOrderNtf, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChongZhiOrderNtf, str_url_),
  };
  ChongZhiOrderNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChongZhiOrderNtf_descriptor_,
      ChongZhiOrderNtf::default_instance_,
      ChongZhiOrderNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChongZhiOrderNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChongZhiOrderNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChongZhiOrderNtf));
  BuffItemListReq_descriptor_ = file->message_type(107);
  static const int BuffItemListReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffItemListReq, type_),
  };
  BuffItemListReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuffItemListReq_descriptor_,
      BuffItemListReq::default_instance_,
      BuffItemListReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffItemListReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffItemListReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuffItemListReq));
  BuffItemListAck_descriptor_ = file->message_type(108);
  static const int BuffItemListAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffItemListAck, err_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffItemListAck, items_),
  };
  BuffItemListAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuffItemListAck_descriptor_,
      BuffItemListAck::default_instance_,
      BuffItemListAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffItemListAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffItemListAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuffItemListAck));
  BuffItemBuyReq_descriptor_ = file->message_type(109);
  static const int BuffItemBuyReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffItemBuyReq, ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffItemBuyReq, type_),
  };
  BuffItemBuyReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuffItemBuyReq_descriptor_,
      BuffItemBuyReq::default_instance_,
      BuffItemBuyReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffItemBuyReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffItemBuyReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuffItemBuyReq));
  BuffItemInfo_descriptor_ = file->message_type(110);
  static const int BuffItemInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffItemInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffItemInfo, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffItemInfo, number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffItemInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffItemInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffItemInfo, desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffItemInfo, owned_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffItemInfo, duration_),
  };
  BuffItemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuffItemInfo_descriptor_,
      BuffItemInfo::default_instance_,
      BuffItemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffItemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffItemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuffItemInfo));
  RandomItemListReq_descriptor_ = file->message_type(111);
  static const int RandomItemListReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomItemListReq, type_),
  };
  RandomItemListReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RandomItemListReq_descriptor_,
      RandomItemListReq::default_instance_,
      RandomItemListReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomItemListReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomItemListReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RandomItemListReq));
  RandomItemListAck_descriptor_ = file->message_type(112);
  static const int RandomItemListAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomItemListAck, err_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomItemListAck, info_),
  };
  RandomItemListAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RandomItemListAck_descriptor_,
      RandomItemListAck::default_instance_,
      RandomItemListAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomItemListAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomItemListAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RandomItemListAck));
  RandomItemBuyReq_descriptor_ = file->message_type(113);
  static const int RandomItemBuyReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomItemBuyReq, type_),
  };
  RandomItemBuyReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RandomItemBuyReq_descriptor_,
      RandomItemBuyReq::default_instance_,
      RandomItemBuyReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomItemBuyReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomItemBuyReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RandomItemBuyReq));
  FriendData_descriptor_ = file->message_type(114);
  static const int FriendData_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendData, friend_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendData, head_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendData, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendData, kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendData, last_online_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendData, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendData, total_attack_),
  };
  FriendData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FriendData_descriptor_,
      FriendData::default_instance_,
      FriendData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FriendData));
  FriendList_descriptor_ = file->message_type(115);
  static const int FriendList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendList, data_),
  };
  FriendList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FriendList_descriptor_,
      FriendList::default_instance_,
      FriendList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FriendList));
  UpdateFriend_descriptor_ = file->message_type(116);
  static const int UpdateFriend_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFriend, data_),
  };
  UpdateFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateFriend_descriptor_,
      UpdateFriend::default_instance_,
      UpdateFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateFriend));
  DelFriendReq_descriptor_ = file->message_type(117);
  static const int DelFriendReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelFriendReq, friend_id_),
  };
  DelFriendReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DelFriendReq_descriptor_,
      DelFriendReq::default_instance_,
      DelFriendReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelFriendReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelFriendReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DelFriendReq));
  DelFriendAck_descriptor_ = file->message_type(118);
  static const int DelFriendAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelFriendAck, friend_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelFriendAck, err_no_),
  };
  DelFriendAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DelFriendAck_descriptor_,
      DelFriendAck::default_instance_,
      DelFriendAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelFriendAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelFriendAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DelFriendAck));
  DelFriendNtf_descriptor_ = file->message_type(119);
  static const int DelFriendNtf_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelFriendNtf, friend_id_),
  };
  DelFriendNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DelFriendNtf_descriptor_,
      DelFriendNtf::default_instance_,
      DelFriendNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelFriendNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelFriendNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DelFriendNtf));
  VisitFriendReq_descriptor_ = file->message_type(120);
  static const int VisitFriendReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisitFriendReq, friend_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisitFriendReq, cur_queue_),
  };
  VisitFriendReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VisitFriendReq_descriptor_,
      VisitFriendReq::default_instance_,
      VisitFriendReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisitFriendReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisitFriendReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VisitFriendReq));
  VisitFriendAck_descriptor_ = file->message_type(121);
  static const int VisitFriendAck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisitFriendAck, friend_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisitFriendAck, pet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisitFriendAck, admin_id_),
  };
  VisitFriendAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VisitFriendAck_descriptor_,
      VisitFriendAck::default_instance_,
      VisitFriendAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisitFriendAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisitFriendAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VisitFriendAck));
  AskFriendData_descriptor_ = file->message_type(122);
  static const int AskFriendData_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskFriendData, ask_friend_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskFriendData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskFriendData, head_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskFriendData, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskFriendData, kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskFriendData, ask_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskFriendData, total_attack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskFriendData, sex_),
  };
  AskFriendData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskFriendData_descriptor_,
      AskFriendData::default_instance_,
      AskFriendData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskFriendData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskFriendData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskFriendData));
  GetAskFriendReq_descriptor_ = file->message_type(123);
  static const int GetAskFriendReq_offsets_[1] = {
  };
  GetAskFriendReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAskFriendReq_descriptor_,
      GetAskFriendReq::default_instance_,
      GetAskFriendReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAskFriendReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAskFriendReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAskFriendReq));
  GetAskFriendAck_descriptor_ = file->message_type(124);
  static const int GetAskFriendAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAskFriendAck, data_),
  };
  GetAskFriendAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAskFriendAck_descriptor_,
      GetAskFriendAck::default_instance_,
      GetAskFriendAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAskFriendAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAskFriendAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAskFriendAck));
  SearchPlayerReq_descriptor_ = file->message_type(125);
  static const int SearchPlayerReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchPlayerReq, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchPlayerReq, player_name_),
  };
  SearchPlayerReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SearchPlayerReq_descriptor_,
      SearchPlayerReq::default_instance_,
      SearchPlayerReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchPlayerReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchPlayerReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SearchPlayerReq));
  SearchPlayerAck_descriptor_ = file->message_type(126);
  static const int SearchPlayerAck_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchPlayerAck, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchPlayerAck, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchPlayerAck, head_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchPlayerAck, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchPlayerAck, err_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchPlayerAck, total_attack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchPlayerAck, sex_),
  };
  SearchPlayerAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SearchPlayerAck_descriptor_,
      SearchPlayerAck::default_instance_,
      SearchPlayerAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchPlayerAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchPlayerAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SearchPlayerAck));
  AskFriendReq_descriptor_ = file->message_type(127);
  static const int AskFriendReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskFriendReq, friend_id_),
  };
  AskFriendReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskFriendReq_descriptor_,
      AskFriendReq::default_instance_,
      AskFriendReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskFriendReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskFriendReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskFriendReq));
  AskFriendAck_descriptor_ = file->message_type(128);
  static const int AskFriendAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskFriendAck, friend_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskFriendAck, err_no_),
  };
  AskFriendAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskFriendAck_descriptor_,
      AskFriendAck::default_instance_,
      AskFriendAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskFriendAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskFriendAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskFriendAck));
  AddAskFriendNtf_descriptor_ = file->message_type(129);
  static const int AddAskFriendNtf_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddAskFriendNtf, data_),
  };
  AddAskFriendNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddAskFriendNtf_descriptor_,
      AddAskFriendNtf::default_instance_,
      AddAskFriendNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddAskFriendNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddAskFriendNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddAskFriendNtf));
  ReplyAskReq_descriptor_ = file->message_type(130);
  static const int ReplyAskReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAskReq, friend_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAskReq, reply_),
  };
  ReplyAskReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplyAskReq_descriptor_,
      ReplyAskReq::default_instance_,
      ReplyAskReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAskReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAskReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplyAskReq));
  ReplyAskAck_descriptor_ = file->message_type(131);
  static const int ReplyAskAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAskAck, friend_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAskAck, err_no_),
  };
  ReplyAskAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplyAskAck_descriptor_,
      ReplyAskAck::default_instance_,
      ReplyAskAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAskAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAskAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplyAskAck));
  NewAskFriendNtf_descriptor_ = file->message_type(132);
  static const int NewAskFriendNtf_offsets_[1] = {
  };
  NewAskFriendNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NewAskFriendNtf_descriptor_,
      NewAskFriendNtf::default_instance_,
      NewAskFriendNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAskFriendNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAskFriendNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NewAskFriendNtf));
  SetAskFriendStateReq_descriptor_ = file->message_type(133);
  static const int SetAskFriendStateReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetAskFriendStateReq, bflag_),
  };
  SetAskFriendStateReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetAskFriendStateReq_descriptor_,
      SetAskFriendStateReq::default_instance_,
      SetAskFriendStateReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetAskFriendStateReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetAskFriendStateReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetAskFriendStateReq));
  SetAskFriendStateAck_descriptor_ = file->message_type(134);
  static const int SetAskFriendStateAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetAskFriendStateAck, bflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetAskFriendStateAck, err_no_),
  };
  SetAskFriendStateAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetAskFriendStateAck_descriptor_,
      SetAskFriendStateAck::default_instance_,
      SetAskFriendStateAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetAskFriendStateAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetAskFriendStateAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetAskFriendStateAck));
  GetChapterReq_descriptor_ = file->message_type(135);
  static const int GetChapterReq_offsets_[1] = {
  };
  GetChapterReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetChapterReq_descriptor_,
      GetChapterReq::default_instance_,
      GetChapterReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChapterReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChapterReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetChapterReq));
  OneCheckPoint_descriptor_ = file->message_type(136);
  static const int OneCheckPoint_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneCheckPoint, check_point_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneCheckPoint, seconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneCheckPoint, challenged_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneCheckPoint, buy_challenged_count_),
  };
  OneCheckPoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OneCheckPoint_descriptor_,
      OneCheckPoint::default_instance_,
      OneCheckPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneCheckPoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneCheckPoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OneCheckPoint));
  OneChapter_descriptor_ = file->message_type(137);
  static const int OneChapter_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneChapter, chapter_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneChapter, points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneChapter, chapter_kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneChapter, challenged_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneChapter, is_active_chapter_open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneChapter, max_challenge_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneChapter, lose_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneChapter, times_),
  };
  OneChapter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OneChapter_descriptor_,
      OneChapter::default_instance_,
      OneChapter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneChapter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneChapter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OneChapter));
  GetChapterAck_descriptor_ = file->message_type(138);
  static const int GetChapterAck_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChapterAck, chapters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChapterAck, chapter_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChapterAck, check_point_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChapterAck, next_chapter_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChapterAck, next_check_point_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChapterAck, jingying_chapter_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChapterAck, jingying_check_point_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChapterAck, jingying_next_chapter_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChapterAck, jingying_next_check_point_id_),
  };
  GetChapterAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetChapterAck_descriptor_,
      GetChapterAck::default_instance_,
      GetChapterAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChapterAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChapterAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetChapterAck));
  OneChapterLoseActivity_descriptor_ = file->message_type(139);
  static const int OneChapterLoseActivity_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneChapterLoseActivity, chapter_kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneChapterLoseActivity, chapter_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneChapterLoseActivity, lose_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneChapterLoseActivity, times_),
  };
  OneChapterLoseActivity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OneChapterLoseActivity_descriptor_,
      OneChapterLoseActivity::default_instance_,
      OneChapterLoseActivity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneChapterLoseActivity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneChapterLoseActivity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OneChapterLoseActivity));
  ChaptersLoseActivityNtf_descriptor_ = file->message_type(140);
  static const int ChaptersLoseActivityNtf_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChaptersLoseActivityNtf, begin_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChaptersLoseActivityNtf, end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChaptersLoseActivityNtf, chapter_lose_activities_),
  };
  ChaptersLoseActivityNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChaptersLoseActivityNtf_descriptor_,
      ChaptersLoseActivityNtf::default_instance_,
      ChaptersLoseActivityNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChaptersLoseActivityNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChaptersLoseActivityNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChaptersLoseActivityNtf));
  AddActiveChapterNtf_descriptor_ = file->message_type(141);
  static const int AddActiveChapterNtf_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddActiveChapterNtf, chapters_),
  };
  AddActiveChapterNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddActiveChapterNtf_descriptor_,
      AddActiveChapterNtf::default_instance_,
      AddActiveChapterNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddActiveChapterNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddActiveChapterNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddActiveChapterNtf));
  UpdateCheckPointNtf_descriptor_ = file->message_type(142);
  static const int UpdateCheckPointNtf_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateCheckPointNtf, chapter_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateCheckPointNtf, one_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateCheckPointNtf, next_chapter_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateCheckPointNtf, next_check_point_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateCheckPointNtf, chapter_kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateCheckPointNtf, jingying_chapter_open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateCheckPointNtf, jingying_chapter_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateCheckPointNtf, jingying_check_point_id_),
  };
  UpdateCheckPointNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateCheckPointNtf_descriptor_,
      UpdateCheckPointNtf::default_instance_,
      UpdateCheckPointNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateCheckPointNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateCheckPointNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateCheckPointNtf));
  SelectCheckPointReq_descriptor_ = file->message_type(143);
  static const int SelectCheckPointReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectCheckPointReq, chapter_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectCheckPointReq, check_point_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectCheckPointReq, chapter_kind_),
  };
  SelectCheckPointReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SelectCheckPointReq_descriptor_,
      SelectCheckPointReq::default_instance_,
      SelectCheckPointReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectCheckPointReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectCheckPointReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SelectCheckPointReq));
  SelectCheckPointAck_descriptor_ = file->message_type(144);
  static const int SelectCheckPointAck_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectCheckPointAck, chapter_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectCheckPointAck, check_point_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectCheckPointAck, err_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectCheckPointAck, chapter_kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectCheckPointAck, challenged_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectCheckPointAck, buy_challenged_count_),
  };
  SelectCheckPointAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SelectCheckPointAck_descriptor_,
      SelectCheckPointAck::default_instance_,
      SelectCheckPointAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectCheckPointAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectCheckPointAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SelectCheckPointAck));
  GetCheckPointRankReq_descriptor_ = file->message_type(145);
  static const int GetCheckPointRankReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCheckPointRankReq, chapter_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCheckPointRankReq, check_point_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCheckPointRankReq, chapter_kind_),
  };
  GetCheckPointRankReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetCheckPointRankReq_descriptor_,
      GetCheckPointRankReq::default_instance_,
      GetCheckPointRankReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCheckPointRankReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCheckPointRankReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetCheckPointRankReq));
  FriendRankItem_descriptor_ = file->message_type(146);
  static const int FriendRankItem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRankItem, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRankItem, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRankItem, head_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRankItem, pass_seconds_),
  };
  FriendRankItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FriendRankItem_descriptor_,
      FriendRankItem::default_instance_,
      FriendRankItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRankItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRankItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FriendRankItem));
  GetCheckPointRankAck_descriptor_ = file->message_type(147);
  static const int GetCheckPointRankAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCheckPointRankAck, friend_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCheckPointRankAck, err_no_),
  };
  GetCheckPointRankAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetCheckPointRankAck_descriptor_,
      GetCheckPointRankAck::default_instance_,
      GetCheckPointRankAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCheckPointRankAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCheckPointRankAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetCheckPointRankAck));
  GetFriendArmsReq_descriptor_ = file->message_type(148);
  static const int GetFriendArmsReq_offsets_[1] = {
  };
  GetFriendArmsReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetFriendArmsReq_descriptor_,
      GetFriendArmsReq::default_instance_,
      GetFriendArmsReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendArmsReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendArmsReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetFriendArmsReq));
  FriendArms_descriptor_ = file->message_type(149);
  static const int FriendArms_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendArms, digitid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendArms, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendArms, pet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendArms, friendship_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendArms, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendArms, is_friend_),
  };
  FriendArms_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FriendArms_descriptor_,
      FriendArms::default_instance_,
      FriendArms_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendArms, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendArms, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FriendArms));
  GetFriendArmsAck_descriptor_ = file->message_type(150);
  static const int GetFriendArmsAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendArmsAck, pets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendArmsAck, err_no_),
  };
  GetFriendArmsAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetFriendArmsAck_descriptor_,
      GetFriendArmsAck::default_instance_,
      GetFriendArmsAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendArmsAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendArmsAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetFriendArmsAck));
  BeginWarReq_descriptor_ = file->message_type(151);
  static const int BeginWarReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginWarReq, digitid_),
  };
  BeginWarReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BeginWarReq_descriptor_,
      BeginWarReq::default_instance_,
      BeginWarReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginWarReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginWarReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BeginWarReq));
  MonsterBurstItem_descriptor_ = file->message_type(152);
  static const int MonsterBurstItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterBurstItem, monster_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterBurstItem, item_),
  };
  MonsterBurstItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MonsterBurstItem_descriptor_,
      MonsterBurstItem::default_instance_,
      MonsterBurstItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterBurstItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterBurstItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MonsterBurstItem));
  TreasureBurstItem_descriptor_ = file->message_type(153);
  static const int TreasureBurstItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureBurstItem, treasure_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureBurstItem, item_),
  };
  TreasureBurstItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TreasureBurstItem_descriptor_,
      TreasureBurstItem::default_instance_,
      TreasureBurstItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureBurstItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureBurstItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TreasureBurstItem));
  BufferItem_descriptor_ = file->message_type(154);
  static const int BufferItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BufferItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BufferItem, value_),
  };
  BufferItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BufferItem_descriptor_,
      BufferItem::default_instance_,
      BufferItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BufferItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BufferItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BufferItem));
  BufferItem_BufferEffectType_descriptor_ = BufferItem_descriptor_->enum_type(0);
  BeginWarAck_descriptor_ = file->message_type(155);
  static const int BeginWarAck_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginWarAck, err_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginWarAck, sign_spirit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginWarAck, sign_hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginWarAck, sign_mp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginWarAck, sign_my_pets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginWarAck, sign_help_pet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginWarAck, help_pet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginWarAck, buff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginWarAck, burst_item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginWarAck, treasure_item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginWarAck, rnd_start_war_key_),
  };
  BeginWarAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BeginWarAck_descriptor_,
      BeginWarAck::default_instance_,
      BeginWarAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginWarAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginWarAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BeginWarAck));
  NowStartWarRpt_descriptor_ = file->message_type(156);
  static const int NowStartWarRpt_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NowStartWarRpt, rnd_start_war_key_),
  };
  NowStartWarRpt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NowStartWarRpt_descriptor_,
      NowStartWarRpt::default_instance_,
      NowStartWarRpt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NowStartWarRpt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NowStartWarRpt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NowStartWarRpt));
  DeadMonster_descriptor_ = file->message_type(157);
  static const int DeadMonster_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeadMonster, class_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeadMonster, count_),
  };
  DeadMonster_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeadMonster_descriptor_,
      DeadMonster::default_instance_,
      DeadMonster_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeadMonster, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeadMonster, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeadMonster));
  WarResultReq_descriptor_ = file->message_type(158);
  static const int WarResultReq_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarResultReq, chapter_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarResultReq, check_point_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarResultReq, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarResultReq, pass_second_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarResultReq, sign_ccrp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarResultReq, pick_item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarResultReq, monsters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarResultReq, chapter_kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarResultReq, buff_item_ids_),
  };
  WarResultReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WarResultReq_descriptor_,
      WarResultReq::default_instance_,
      WarResultReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarResultReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarResultReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WarResultReq));
  WarResultAck_descriptor_ = file->message_type(159);
  static const int WarResultAck_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarResultAck, award_item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarResultAck, pass_second_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarResultAck, err_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarResultAck, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarResultAck, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarResultAck, old_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarResultAck, new_level_),
  };
  WarResultAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WarResultAck_descriptor_,
      WarResultAck::default_instance_,
      WarResultAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarResultAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarResultAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WarResultAck));
  DeadInWarNtf_descriptor_ = file->message_type(160);
  static const int DeadInWarNtf_offsets_[1] = {
  };
  DeadInWarNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeadInWarNtf_descriptor_,
      DeadInWarNtf::default_instance_,
      DeadInWarNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeadInWarNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeadInWarNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeadInWarNtf));
  DeadInWarAck_descriptor_ = file->message_type(161);
  static const int DeadInWarAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeadInWarAck, need_gem_),
  };
  DeadInWarAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeadInWarAck_descriptor_,
      DeadInWarAck::default_instance_,
      DeadInWarAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeadInWarAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeadInWarAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeadInWarAck));
  ReviveReq_descriptor_ = file->message_type(162);
  static const int ReviveReq_offsets_[1] = {
  };
  ReviveReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReviveReq_descriptor_,
      ReviveReq::default_instance_,
      ReviveReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReviveReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReviveReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReviveReq));
  ReviveAck_descriptor_ = file->message_type(163);
  static const int ReviveAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReviveAck, err_no_),
  };
  ReviveAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReviveAck_descriptor_,
      ReviveAck::default_instance_,
      ReviveAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReviveAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReviveAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReviveAck));
  PetUpgradeReq_descriptor_ = file->message_type(164);
  static const int PetUpgradeReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetUpgradeReq, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetUpgradeReq, tunshi_pet_),
  };
  PetUpgradeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetUpgradeReq_descriptor_,
      PetUpgradeReq::default_instance_,
      PetUpgradeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetUpgradeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetUpgradeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetUpgradeReq));
  PetUpgradeAck_descriptor_ = file->message_type(165);
  static const int PetUpgradeAck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetUpgradeAck, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetUpgradeAck, tunshi_pet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetUpgradeAck, err_no_),
  };
  PetUpgradeAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetUpgradeAck_descriptor_,
      PetUpgradeAck::default_instance_,
      PetUpgradeAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetUpgradeAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetUpgradeAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetUpgradeAck));
  PetEvolveReq_descriptor_ = file->message_type(166);
  static const int PetEvolveReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetEvolveReq, id_),
  };
  PetEvolveReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetEvolveReq_descriptor_,
      PetEvolveReq::default_instance_,
      PetEvolveReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetEvolveReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetEvolveReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetEvolveReq));
  PetEvolveAck_descriptor_ = file->message_type(167);
  static const int PetEvolveAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetEvolveAck, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetEvolveAck, err_no_),
  };
  PetEvolveAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetEvolveAck_descriptor_,
      PetEvolveAck::default_instance_,
      PetEvolveAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetEvolveAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetEvolveAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetEvolveAck));
  OwnedPetIDListReq_descriptor_ = file->message_type(168);
  static const int OwnedPetIDListReq_offsets_[1] = {
  };
  OwnedPetIDListReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OwnedPetIDListReq_descriptor_,
      OwnedPetIDListReq::default_instance_,
      OwnedPetIDListReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OwnedPetIDListReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OwnedPetIDListReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OwnedPetIDListReq));
  OwnedPetIDListAck_descriptor_ = file->message_type(169);
  static const int OwnedPetIDListAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OwnedPetIDListAck, id_),
  };
  OwnedPetIDListAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OwnedPetIDListAck_descriptor_,
      OwnedPetIDListAck::default_instance_,
      OwnedPetIDListAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OwnedPetIDListAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OwnedPetIDListAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OwnedPetIDListAck));
  NewPetOpenedNtf_descriptor_ = file->message_type(170);
  static const int NewPetOpenedNtf_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewPetOpenedNtf, id_),
  };
  NewPetOpenedNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NewPetOpenedNtf_descriptor_,
      NewPetOpenedNtf::default_instance_,
      NewPetOpenedNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewPetOpenedNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewPetOpenedNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NewPetOpenedNtf));
  ChenJiuData_descriptor_ = file->message_type(171);
  static const int ChenJiuData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChenJiuData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChenJiuData, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChenJiuData, type_),
  };
  ChenJiuData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChenJiuData_descriptor_,
      ChenJiuData::default_instance_,
      ChenJiuData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChenJiuData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChenJiuData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChenJiuData));
  ChenJiuKind_descriptor_ = file->message_type(172);
  static const int ChenJiuKind_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChenJiuKind, kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChenJiuKind, data_),
  };
  ChenJiuKind_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChenJiuKind_descriptor_,
      ChenJiuKind::default_instance_,
      ChenJiuKind_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChenJiuKind, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChenJiuKind, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChenJiuKind));
  GetChenJiuReq_descriptor_ = file->message_type(173);
  static const int GetChenJiuReq_offsets_[1] = {
  };
  GetChenJiuReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetChenJiuReq_descriptor_,
      GetChenJiuReq::default_instance_,
      GetChenJiuReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChenJiuReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChenJiuReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetChenJiuReq));
  GetChenJiuAck_descriptor_ = file->message_type(174);
  static const int GetChenJiuAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChenJiuAck, kind_),
  };
  GetChenJiuAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetChenJiuAck_descriptor_,
      GetChenJiuAck::default_instance_,
      GetChenJiuAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChenJiuAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChenJiuAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetChenJiuAck));
  UpdateChenJiu_descriptor_ = file->message_type(175);
  static const int UpdateChenJiu_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateChenJiu, kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateChenJiu, data_),
  };
  UpdateChenJiu_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateChenJiu_descriptor_,
      UpdateChenJiu::default_instance_,
      UpdateChenJiu_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateChenJiu, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateChenJiu, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateChenJiu));
  GetChenJiuAwardReq_descriptor_ = file->message_type(176);
  static const int GetChenJiuAwardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChenJiuAwardReq, id_),
  };
  GetChenJiuAwardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetChenJiuAwardReq_descriptor_,
      GetChenJiuAwardReq::default_instance_,
      GetChenJiuAwardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChenJiuAwardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChenJiuAwardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetChenJiuAwardReq));
  GetChenJiuAwardAck_descriptor_ = file->message_type(177);
  static const int GetChenJiuAwardAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChenJiuAwardAck, err_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChenJiuAwardAck, id_),
  };
  GetChenJiuAwardAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetChenJiuAwardAck_descriptor_,
      GetChenJiuAwardAck::default_instance_,
      GetChenJiuAwardAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChenJiuAwardAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChenJiuAwardAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetChenJiuAwardAck));
  OneKeyGetChenJiuAwardReq_descriptor_ = file->message_type(178);
  static const int OneKeyGetChenJiuAwardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneKeyGetChenJiuAwardReq, id_),
  };
  OneKeyGetChenJiuAwardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OneKeyGetChenJiuAwardReq_descriptor_,
      OneKeyGetChenJiuAwardReq::default_instance_,
      OneKeyGetChenJiuAwardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneKeyGetChenJiuAwardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneKeyGetChenJiuAwardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OneKeyGetChenJiuAwardReq));
  QuestData_descriptor_ = file->message_type(179);
  static const int QuestData_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestData, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestData, current_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestData, is_finished_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestData, is_awarded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestData, desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestData, award_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestData, category_name_),
  };
  QuestData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestData_descriptor_,
      QuestData::default_instance_,
      QuestData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestData));
  GetQuestListReq_descriptor_ = file->message_type(180);
  static const int GetQuestListReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQuestListReq, period_),
  };
  GetQuestListReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetQuestListReq_descriptor_,
      GetQuestListReq::default_instance_,
      GetQuestListReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQuestListReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQuestListReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetQuestListReq));
  GetQuestListAck_descriptor_ = file->message_type(181);
  static const int GetQuestListAck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQuestListAck, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQuestListAck, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQuestListAck, day_),
  };
  GetQuestListAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetQuestListAck_descriptor_,
      GetQuestListAck::default_instance_,
      GetQuestListAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQuestListAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQuestListAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetQuestListAck));
  QuestUpdateData_descriptor_ = file->message_type(182);
  static const int QuestUpdateData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestUpdateData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestUpdateData, current_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestUpdateData, is_finished_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestUpdateData, is_awarded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestUpdateData, period_),
  };
  QuestUpdateData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestUpdateData_descriptor_,
      QuestUpdateData::default_instance_,
      QuestUpdateData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestUpdateData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestUpdateData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestUpdateData));
  UpdateQuestNtf_descriptor_ = file->message_type(183);
  static const int UpdateQuestNtf_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateQuestNtf, data_),
  };
  UpdateQuestNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateQuestNtf_descriptor_,
      UpdateQuestNtf::default_instance_,
      UpdateQuestNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateQuestNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateQuestNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateQuestNtf));
  GetQuestAwardReq_descriptor_ = file->message_type(184);
  static const int GetQuestAwardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQuestAwardReq, id_),
  };
  GetQuestAwardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetQuestAwardReq_descriptor_,
      GetQuestAwardReq::default_instance_,
      GetQuestAwardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQuestAwardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQuestAwardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetQuestAwardReq));
  GetQuestAwardAck_descriptor_ = file->message_type(185);
  static const int GetQuestAwardAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQuestAwardAck, err_no_),
  };
  GetQuestAwardAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetQuestAwardAck_descriptor_,
      GetQuestAwardAck::default_instance_,
      GetQuestAwardAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQuestAwardAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQuestAwardAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetQuestAwardAck));
  OneKeyGetQuestAwardReq_descriptor_ = file->message_type(186);
  static const int OneKeyGetQuestAwardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneKeyGetQuestAwardReq, id_),
  };
  OneKeyGetQuestAwardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OneKeyGetQuestAwardReq_descriptor_,
      OneKeyGetQuestAwardReq::default_instance_,
      OneKeyGetQuestAwardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneKeyGetQuestAwardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneKeyGetQuestAwardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OneKeyGetQuestAwardReq));
  RefreshQuestNtf_descriptor_ = file->message_type(187);
  static const int RefreshQuestNtf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshQuestNtf, period_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshQuestNtf, data_),
  };
  RefreshQuestNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RefreshQuestNtf_descriptor_,
      RefreshQuestNtf::default_instance_,
      RefreshQuestNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshQuestNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshQuestNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RefreshQuestNtf));
  GetCurPvpDataReq_descriptor_ = file->message_type(188);
  static const int GetCurPvpDataReq_offsets_[1] = {
  };
  GetCurPvpDataReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetCurPvpDataReq_descriptor_,
      GetCurPvpDataReq::default_instance_,
      GetCurPvpDataReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCurPvpDataReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCurPvpDataReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetCurPvpDataReq));
  GetCurPvpDataAck_descriptor_ = file->message_type(189);
  static const int GetCurPvpDataAck_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCurPvpDataAck, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCurPvpDataAck, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCurPvpDataAck, sum_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCurPvpDataAck, win_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCurPvpDataAck, today_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCurPvpDataAck, has_award_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCurPvpDataAck, cd_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCurPvpDataAck, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCurPvpDataAck, today_buy_count_),
  };
  GetCurPvpDataAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetCurPvpDataAck_descriptor_,
      GetCurPvpDataAck::default_instance_,
      GetCurPvpDataAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCurPvpDataAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCurPvpDataAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetCurPvpDataAck));
  PvpData_descriptor_ = file->message_type(190);
  static const int PvpData_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpData, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpData, head_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpData, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpData, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpData, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpData, sex_),
  };
  PvpData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PvpData_descriptor_,
      PvpData::default_instance_,
      PvpData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PvpData));
  GetAllRankReq_descriptor_ = file->message_type(191);
  static const int GetAllRankReq_offsets_[1] = {
  };
  GetAllRankReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAllRankReq_descriptor_,
      GetAllRankReq::default_instance_,
      GetAllRankReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAllRankReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAllRankReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAllRankReq));
  GetAllRankAck_descriptor_ = file->message_type(192);
  static const int GetAllRankAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAllRankAck, data_),
  };
  GetAllRankAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAllRankAck_descriptor_,
      GetAllRankAck::default_instance_,
      GetAllRankAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAllRankAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAllRankAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAllRankAck));
  PvpFriendData_descriptor_ = file->message_type(193);
  static const int PvpFriendData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpFriendData, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpFriendData, score_),
  };
  PvpFriendData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PvpFriendData_descriptor_,
      PvpFriendData::default_instance_,
      PvpFriendData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpFriendData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpFriendData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PvpFriendData));
  GetFriendRankReq_descriptor_ = file->message_type(194);
  static const int GetFriendRankReq_offsets_[1] = {
  };
  GetFriendRankReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetFriendRankReq_descriptor_,
      GetFriendRankReq::default_instance_,
      GetFriendRankReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendRankReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendRankReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetFriendRankReq));
  GetFriendRankAck_descriptor_ = file->message_type(195);
  static const int GetFriendRankAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendRankAck, data_),
  };
  GetFriendRankAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetFriendRankAck_descriptor_,
      GetFriendRankAck::default_instance_,
      GetFriendRankAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendRankAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendRankAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetFriendRankAck));
  GetSumRankReq_descriptor_ = file->message_type(196);
  static const int GetSumRankReq_offsets_[1] = {
  };
  GetSumRankReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetSumRankReq_descriptor_,
      GetSumRankReq::default_instance_,
      GetSumRankReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSumRankReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSumRankReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetSumRankReq));
  GetSumRankAck_descriptor_ = file->message_type(197);
  static const int GetSumRankAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSumRankAck, data_),
  };
  GetSumRankAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetSumRankAck_descriptor_,
      GetSumRankAck::default_instance_,
      GetSumRankAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSumRankAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSumRankAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetSumRankAck));
  ClearPvpCDReq_descriptor_ = file->message_type(198);
  static const int ClearPvpCDReq_offsets_[1] = {
  };
  ClearPvpCDReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClearPvpCDReq_descriptor_,
      ClearPvpCDReq::default_instance_,
      ClearPvpCDReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClearPvpCDReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClearPvpCDReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClearPvpCDReq));
  ClearPvpCDAck_descriptor_ = file->message_type(199);
  static const int ClearPvpCDAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClearPvpCDAck, err_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClearPvpCDAck, today_count_),
  };
  ClearPvpCDAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClearPvpCDAck_descriptor_,
      ClearPvpCDAck::default_instance_,
      ClearPvpCDAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClearPvpCDAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClearPvpCDAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClearPvpCDAck));
  GetPvpAwardReq_descriptor_ = file->message_type(200);
  static const int GetPvpAwardReq_offsets_[1] = {
  };
  GetPvpAwardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetPvpAwardReq_descriptor_,
      GetPvpAwardReq::default_instance_,
      GetPvpAwardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPvpAwardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPvpAwardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetPvpAwardReq));
  GetPvpAwardAck_descriptor_ = file->message_type(201);
  static const int GetPvpAwardAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPvpAwardAck, err_no_),
  };
  GetPvpAwardAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetPvpAwardAck_descriptor_,
      GetPvpAwardAck::default_instance_,
      GetPvpAwardAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPvpAwardAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPvpAwardAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetPvpAwardAck));
  PvpWarBeginReq_descriptor_ = file->message_type(202);
  static const int PvpWarBeginReq_offsets_[1] = {
  };
  PvpWarBeginReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PvpWarBeginReq_descriptor_,
      PvpWarBeginReq::default_instance_,
      PvpWarBeginReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpWarBeginReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpWarBeginReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PvpWarBeginReq));
  PvpWarBeginAck_descriptor_ = file->message_type(203);
  static const int PvpWarBeginAck_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpWarBeginAck, err_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpWarBeginAck, digitid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpWarBeginAck, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpWarBeginAck, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpWarBeginAck, head_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpWarBeginAck, target_pet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpWarBeginAck, sign_my_pets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpWarBeginAck, sign_target_pet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpWarBeginAck, buff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpWarBeginAck, rnd_start_war_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpWarBeginAck, total_attack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpWarBeginAck, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpWarBeginAck, equip_),
  };
  PvpWarBeginAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PvpWarBeginAck_descriptor_,
      PvpWarBeginAck::default_instance_,
      PvpWarBeginAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpWarBeginAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpWarBeginAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PvpWarBeginAck));
  PvpWarResultReq_descriptor_ = file->message_type(204);
  static const int PvpWarResultReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpWarResultReq, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpWarResultReq, match_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpWarResultReq, rnd_start_war_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpWarResultReq, sign_ccrp_),
  };
  PvpWarResultReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PvpWarResultReq_descriptor_,
      PvpWarResultReq::default_instance_,
      PvpWarResultReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpWarResultReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpWarResultReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PvpWarResultReq));
  PvpWarResultAck_descriptor_ = file->message_type(205);
  static const int PvpWarResultAck_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpWarResultAck, err_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpWarResultAck, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpWarResultAck, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpWarResultAck, sum_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpWarResultAck, win_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpWarResultAck, today_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpWarResultAck, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpWarResultAck, cur_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpWarResultAck, cd_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpWarResultAck, group_id_),
  };
  PvpWarResultAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PvpWarResultAck_descriptor_,
      PvpWarResultAck::default_instance_,
      PvpWarResultAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpWarResultAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpWarResultAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PvpWarResultAck));
  ActionCountTickNtf_descriptor_ = file->message_type(206);
  static const int ActionCountTickNtf_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionCountTickNtf, last_time_),
  };
  ActionCountTickNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActionCountTickNtf_descriptor_,
      ActionCountTickNtf::default_instance_,
      ActionCountTickNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionCountTickNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionCountTickNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActionCountTickNtf));
  CustomerServiceUrlNtf_descriptor_ = file->message_type(207);
  static const int CustomerServiceUrlNtf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomerServiceUrlNtf, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomerServiceUrlNtf, key_),
  };
  CustomerServiceUrlNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CustomerServiceUrlNtf_descriptor_,
      CustomerServiceUrlNtf::default_instance_,
      CustomerServiceUrlNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomerServiceUrlNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomerServiceUrlNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CustomerServiceUrlNtf));
  SkillPage_descriptor_ = file->message_type(208);
  static const int SkillPage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillPage, page_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillPage, active_skill_id_first_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillPage, active_skill_id_second_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillPage, skill_),
  };
  SkillPage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillPage_descriptor_,
      SkillPage::default_instance_,
      SkillPage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillPage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillPage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillPage));
  Skill_descriptor_ = file->message_type(209);
  static const int Skill_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill, level_),
  };
  Skill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Skill_descriptor_,
      Skill::default_instance_,
      Skill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Skill));
  GetSkillListReq_descriptor_ = file->message_type(210);
  static const int GetSkillListReq_offsets_[1] = {
  };
  GetSkillListReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetSkillListReq_descriptor_,
      GetSkillListReq::default_instance_,
      GetSkillListReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSkillListReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSkillListReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetSkillListReq));
  GetSkillListAck_descriptor_ = file->message_type(211);
  static const int GetSkillListAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSkillListAck, skill_page_),
  };
  GetSkillListAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetSkillListAck_descriptor_,
      GetSkillListAck::default_instance_,
      GetSkillListAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSkillListAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSkillListAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetSkillListAck));
  SaveSkillPageReq_descriptor_ = file->message_type(212);
  static const int SaveSkillPageReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveSkillPageReq, page_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveSkillPageReq, skill_page_),
  };
  SaveSkillPageReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SaveSkillPageReq_descriptor_,
      SaveSkillPageReq::default_instance_,
      SaveSkillPageReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveSkillPageReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveSkillPageReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SaveSkillPageReq));
  SaveSkillPageAck_descriptor_ = file->message_type(213);
  static const int SaveSkillPageAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveSkillPageAck, err_no_),
  };
  SaveSkillPageAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SaveSkillPageAck_descriptor_,
      SaveSkillPageAck::default_instance_,
      SaveSkillPageAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveSkillPageAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveSkillPageAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SaveSkillPageAck));
  SaveActiveSkillReq_descriptor_ = file->message_type(214);
  static const int SaveActiveSkillReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveActiveSkillReq, page_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveActiveSkillReq, active_skill_id_first_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveActiveSkillReq, active_skill_id_second_),
  };
  SaveActiveSkillReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SaveActiveSkillReq_descriptor_,
      SaveActiveSkillReq::default_instance_,
      SaveActiveSkillReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveActiveSkillReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveActiveSkillReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SaveActiveSkillReq));
  SaveActiveSkillAck_descriptor_ = file->message_type(215);
  static const int SaveActiveSkillAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveActiveSkillAck, err_no_),
  };
  SaveActiveSkillAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SaveActiveSkillAck_descriptor_,
      SaveActiveSkillAck::default_instance_,
      SaveActiveSkillAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveActiveSkillAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveActiveSkillAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SaveActiveSkillAck));
  GoodsItem_descriptor_ = file->message_type(216);
  static const int GoodsItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsItem, qwid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsItem, goods_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsItem, number_),
  };
  GoodsItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GoodsItem_descriptor_,
      GoodsItem::default_instance_,
      GoodsItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GoodsItem));
  GoodsList_descriptor_ = file->message_type(217);
  static const int GoodsList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsList, data_),
  };
  GoodsList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GoodsList_descriptor_,
      GoodsList::default_instance_,
      GoodsList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GoodsList));
  AddGoodsItem_descriptor_ = file->message_type(218);
  static const int AddGoodsItem_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddGoodsItem, item_),
  };
  AddGoodsItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddGoodsItem_descriptor_,
      AddGoodsItem::default_instance_,
      AddGoodsItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddGoodsItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddGoodsItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddGoodsItem));
  UpdateGoodsNumber_descriptor_ = file->message_type(219);
  static const int UpdateGoodsNumber_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGoodsNumber, qwid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGoodsNumber, number_),
  };
  UpdateGoodsNumber_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateGoodsNumber_descriptor_,
      UpdateGoodsNumber::default_instance_,
      UpdateGoodsNumber_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGoodsNumber, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGoodsNumber, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateGoodsNumber));
  EquipData_descriptor_ = file->message_type(220);
  static const int EquipData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipData, qwid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipData, goods_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipData, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipData, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipData, hole_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipData, qwpet_id_),
  };
  EquipData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipData_descriptor_,
      EquipData::default_instance_,
      EquipData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipData));
  EquipList_descriptor_ = file->message_type(221);
  static const int EquipList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipList, data_),
  };
  EquipList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipList_descriptor_,
      EquipList::default_instance_,
      EquipList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipList));
  AddEquip_descriptor_ = file->message_type(222);
  static const int AddEquip_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddEquip, data_),
  };
  AddEquip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddEquip_descriptor_,
      AddEquip::default_instance_,
      AddEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddEquip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddEquip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddEquip));
  DelEquip_descriptor_ = file->message_type(223);
  static const int DelEquip_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelEquip, qwid_),
  };
  DelEquip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DelEquip_descriptor_,
      DelEquip::default_instance_,
      DelEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelEquip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelEquip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DelEquip));
  UpdateEquip_descriptor_ = file->message_type(224);
  static const int UpdateEquip_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateEquip, data_),
  };
  UpdateEquip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateEquip_descriptor_,
      UpdateEquip::default_instance_,
      UpdateEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateEquip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateEquip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateEquip));
  PutOnEquipReq_descriptor_ = file->message_type(225);
  static const int PutOnEquipReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutOnEquipReq, pet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutOnEquipReq, equip_id_),
  };
  PutOnEquipReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PutOnEquipReq_descriptor_,
      PutOnEquipReq::default_instance_,
      PutOnEquipReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutOnEquipReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutOnEquipReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PutOnEquipReq));
  PutOnEquipAck_descriptor_ = file->message_type(226);
  static const int PutOnEquipAck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutOnEquipAck, err_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutOnEquipAck, pet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutOnEquipAck, equip_id_),
  };
  PutOnEquipAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PutOnEquipAck_descriptor_,
      PutOnEquipAck::default_instance_,
      PutOnEquipAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutOnEquipAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutOnEquipAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PutOnEquipAck));
  TongShiEquip_descriptor_ = file->message_type(227);
  static const int TongShiEquip_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TongShiEquip, equip_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TongShiEquip, number_),
  };
  TongShiEquip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TongShiEquip_descriptor_,
      TongShiEquip::default_instance_,
      TongShiEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TongShiEquip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TongShiEquip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TongShiEquip));
  StrengEquipReq_descriptor_ = file->message_type(228);
  static const int StrengEquipReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrengEquipReq, equip_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrengEquipReq, tonshi_),
  };
  StrengEquipReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StrengEquipReq_descriptor_,
      StrengEquipReq::default_instance_,
      StrengEquipReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrengEquipReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrengEquipReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StrengEquipReq));
  StrengEquipAck_descriptor_ = file->message_type(229);
  static const int StrengEquipAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrengEquipAck, err_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrengEquipAck, equip_id_),
  };
  StrengEquipAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StrengEquipAck_descriptor_,
      StrengEquipAck::default_instance_,
      StrengEquipAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrengEquipAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrengEquipAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StrengEquipAck));
  JinJieEquipReq_descriptor_ = file->message_type(230);
  static const int JinJieEquipReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JinJieEquipReq, equip_id_),
  };
  JinJieEquipReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JinJieEquipReq_descriptor_,
      JinJieEquipReq::default_instance_,
      JinJieEquipReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JinJieEquipReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JinJieEquipReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JinJieEquipReq));
  JinJieEquipAck_descriptor_ = file->message_type(231);
  static const int JinJieEquipAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JinJieEquipAck, err_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JinJieEquipAck, equip_id_),
  };
  JinJieEquipAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JinJieEquipAck_descriptor_,
      JinJieEquipAck::default_instance_,
      JinJieEquipAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JinJieEquipAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JinJieEquipAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JinJieEquipAck));
  HeChengEquipReq_descriptor_ = file->message_type(232);
  static const int HeChengEquipReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeChengEquipReq, goods_id_),
  };
  HeChengEquipReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeChengEquipReq_descriptor_,
      HeChengEquipReq::default_instance_,
      HeChengEquipReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeChengEquipReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeChengEquipReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeChengEquipReq));
  HeChengEquipAck_descriptor_ = file->message_type(233);
  static const int HeChengEquipAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeChengEquipAck, err_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeChengEquipAck, goods_id_),
  };
  HeChengEquipAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeChengEquipAck_descriptor_,
      HeChengEquipAck::default_instance_,
      HeChengEquipAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeChengEquipAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeChengEquipAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeChengEquipAck));
  SellGoodsReq_descriptor_ = file->message_type(234);
  static const int SellGoodsReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SellGoodsReq, goods_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SellGoodsReq, number_),
  };
  SellGoodsReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SellGoodsReq_descriptor_,
      SellGoodsReq::default_instance_,
      SellGoodsReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SellGoodsReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SellGoodsReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SellGoodsReq));
  SellGoodsAck_descriptor_ = file->message_type(235);
  static const int SellGoodsAck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SellGoodsAck, err_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SellGoodsAck, goods_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SellGoodsAck, number_),
  };
  SellGoodsAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SellGoodsAck_descriptor_,
      SellGoodsAck::default_instance_,
      SellGoodsAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SellGoodsAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SellGoodsAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SellGoodsAck));
  EquipSetStoreReq_descriptor_ = file->message_type(236);
  static const int EquipSetStoreReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSetStoreReq, equip_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSetStoreReq, store_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSetStoreReq, idx_),
  };
  EquipSetStoreReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipSetStoreReq_descriptor_,
      EquipSetStoreReq::default_instance_,
      EquipSetStoreReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSetStoreReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSetStoreReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipSetStoreReq));
  EquipSetStoreAck_descriptor_ = file->message_type(237);
  static const int EquipSetStoreAck_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSetStoreAck, err_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSetStoreAck, equip_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSetStoreAck, store_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSetStoreAck, idx_),
  };
  EquipSetStoreAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipSetStoreAck_descriptor_,
      EquipSetStoreAck::default_instance_,
      EquipSetStoreAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSetStoreAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSetStoreAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipSetStoreAck));
  ShareDataNtf_descriptor_ = file->message_type(238);
  static const int ShareDataNtf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShareDataNtf, kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShareDataNtf, id_),
  };
  ShareDataNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShareDataNtf_descriptor_,
      ShareDataNtf::default_instance_,
      ShareDataNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShareDataNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShareDataNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShareDataNtf));
  CompleteLoadDataNtf_descriptor_ = file->message_type(239);
  static const int CompleteLoadDataNtf_offsets_[1] = {
  };
  CompleteLoadDataNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CompleteLoadDataNtf_descriptor_,
      CompleteLoadDataNtf::default_instance_,
      CompleteLoadDataNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompleteLoadDataNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompleteLoadDataNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CompleteLoadDataNtf));
  SetPetNewStateReq_descriptor_ = file->message_type(240);
  static const int SetPetNewStateReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetPetNewStateReq, qwid_),
  };
  SetPetNewStateReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetPetNewStateReq_descriptor_,
      SetPetNewStateReq::default_instance_,
      SetPetNewStateReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetPetNewStateReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetPetNewStateReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetPetNewStateReq));
  SetPetNewStateAck_descriptor_ = file->message_type(241);
  static const int SetPetNewStateAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetPetNewStateAck, err_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetPetNewStateAck, qwid_),
  };
  SetPetNewStateAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetPetNewStateAck_descriptor_,
      SetPetNewStateAck::default_instance_,
      SetPetNewStateAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetPetNewStateAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetPetNewStateAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetPetNewStateAck));
  UpdateBuyActionCounts_descriptor_ = file->message_type(242);
  static const int UpdateBuyActionCounts_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateBuyActionCounts, cur_counts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateBuyActionCounts, max_counts_),
  };
  UpdateBuyActionCounts_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateBuyActionCounts_descriptor_,
      UpdateBuyActionCounts::default_instance_,
      UpdateBuyActionCounts_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateBuyActionCounts, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateBuyActionCounts, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateBuyActionCounts));
  PythonMsg_example_descriptor_ = file->message_type(243);
  static const int PythonMsg_example_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PythonMsg_example, t_double_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PythonMsg_example, t_float_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PythonMsg_example, t_int32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PythonMsg_example, t_int64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PythonMsg_example, t_uint32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PythonMsg_example, t_uint64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PythonMsg_example, t_sint32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PythonMsg_example, t_sint64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PythonMsg_example, t_bool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PythonMsg_example, t_string_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PythonMsg_example, t_bytes_),
  };
  PythonMsg_example_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PythonMsg_example_descriptor_,
      PythonMsg_example::default_instance_,
      PythonMsg_example_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PythonMsg_example, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PythonMsg_example, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PythonMsg_example));
  PythonMessage_descriptor_ = file->message_type(244);
  static const int PythonMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PythonMessage, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PythonMessage, msg_),
  };
  PythonMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PythonMessage_descriptor_,
      PythonMessage::default_instance_,
      PythonMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PythonMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PythonMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PythonMessage));
  PyChouKaReq_descriptor_ = file->message_type(245);
  static const int PyChouKaReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyChouKaReq, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyChouKaReq, is_one_),
  };
  PyChouKaReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PyChouKaReq_descriptor_,
      PyChouKaReq::default_instance_,
      PyChouKaReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyChouKaReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyChouKaReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PyChouKaReq));
  PyPetInfo_descriptor_ = file->message_type(246);
  static const int PyPetInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyPetInfo, pet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyPetInfo, level_),
  };
  PyPetInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PyPetInfo_descriptor_,
      PyPetInfo::default_instance_,
      PyPetInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyPetInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyPetInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PyPetInfo));
  PyChouKaAck_descriptor_ = file->message_type(247);
  static const int PyChouKaAck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyChouKaAck, err_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyChouKaAck, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyChouKaAck, item_id_),
  };
  PyChouKaAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PyChouKaAck_descriptor_,
      PyChouKaAck::default_instance_,
      PyChouKaAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyChouKaAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyChouKaAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PyChouKaAck));
  PyGenGaoData_descriptor_ = file->message_type(248);
  static const int PyGenGaoData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyGenGaoData, theme_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyGenGaoData, content_),
  };
  PyGenGaoData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PyGenGaoData_descriptor_,
      PyGenGaoData::default_instance_,
      PyGenGaoData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyGenGaoData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyGenGaoData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PyGenGaoData));
  PyGetGenGaoReq_descriptor_ = file->message_type(249);
  static const int PyGetGenGaoReq_offsets_[1] = {
  };
  PyGetGenGaoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PyGetGenGaoReq_descriptor_,
      PyGetGenGaoReq::default_instance_,
      PyGetGenGaoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyGetGenGaoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyGetGenGaoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PyGetGenGaoReq));
  PyGetGenGaoAck_descriptor_ = file->message_type(250);
  static const int PyGetGenGaoAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyGetGenGaoAck, data_),
  };
  PyGetGenGaoAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PyGetGenGaoAck_descriptor_,
      PyGetGenGaoAck::default_instance_,
      PyGetGenGaoAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyGetGenGaoAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyGetGenGaoAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PyGetGenGaoAck));
  PyGetGoodActivePanelReq_descriptor_ = file->message_type(251);
  static const int PyGetGoodActivePanelReq_offsets_[1] = {
  };
  PyGetGoodActivePanelReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PyGetGoodActivePanelReq_descriptor_,
      PyGetGoodActivePanelReq::default_instance_,
      PyGetGoodActivePanelReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyGetGoodActivePanelReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyGetGoodActivePanelReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PyGetGoodActivePanelReq));
  PyGoodActiveInfo_descriptor_ = file->message_type(252);
  static const int PyGoodActiveInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyGoodActiveInfo, active_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyGoodActiveInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyGoodActiveInfo, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyGoodActiveInfo, desction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyGoodActiveInfo, param1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyGoodActiveInfo, award_),
  };
  PyGoodActiveInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PyGoodActiveInfo_descriptor_,
      PyGoodActiveInfo::default_instance_,
      PyGoodActiveInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyGoodActiveInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyGoodActiveInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PyGoodActiveInfo));
  PyGetGoodActivePanelAck_descriptor_ = file->message_type(253);
  static const int PyGetGoodActivePanelAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyGetGoodActivePanelAck, actives_),
  };
  PyGetGoodActivePanelAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PyGetGoodActivePanelAck_descriptor_,
      PyGetGoodActivePanelAck::default_instance_,
      PyGetGoodActivePanelAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyGetGoodActivePanelAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyGetGoodActivePanelAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PyGetGoodActivePanelAck));
  PyGetActiveAwardReq_descriptor_ = file->message_type(254);
  static const int PyGetActiveAwardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyGetActiveAwardReq, active_id_),
  };
  PyGetActiveAwardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PyGetActiveAwardReq_descriptor_,
      PyGetActiveAwardReq::default_instance_,
      PyGetActiveAwardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyGetActiveAwardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyGetActiveAwardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PyGetActiveAwardReq));
  PyGetActiveAwardAck_descriptor_ = file->message_type(255);
  static const int PyGetActiveAwardAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyGetActiveAwardAck, active_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyGetActiveAwardAck, err_no_),
  };
  PyGetActiveAwardAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PyGetActiveAwardAck_descriptor_,
      PyGetActiveAwardAck::default_instance_,
      PyGetActiveAwardAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyGetActiveAwardAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyGetActiveAwardAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PyGetActiveAwardAck));
  PyEveryDataActiveNtf_descriptor_ = file->message_type(256);
  static const int PyEveryDataActiveNtf_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyEveryDataActiveNtf, str_awards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyEveryDataActiveNtf, days_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyEveryDataActiveNtf, type_),
  };
  PyEveryDataActiveNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PyEveryDataActiveNtf_descriptor_,
      PyEveryDataActiveNtf::default_instance_,
      PyEveryDataActiveNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyEveryDataActiveNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyEveryDataActiveNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PyEveryDataActiveNtf));
  PySaveGuideStepReq_descriptor_ = file->message_type(257);
  static const int PySaveGuideStepReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PySaveGuideStepReq, guide_step_),
  };
  PySaveGuideStepReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PySaveGuideStepReq_descriptor_,
      PySaveGuideStepReq::default_instance_,
      PySaveGuideStepReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PySaveGuideStepReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PySaveGuideStepReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PySaveGuideStepReq));
  PySaveGuideStepAck_descriptor_ = file->message_type(258);
  static const int PySaveGuideStepAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PySaveGuideStepAck, guide_step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PySaveGuideStepAck, err_no_),
  };
  PySaveGuideStepAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PySaveGuideStepAck_descriptor_,
      PySaveGuideStepAck::default_instance_,
      PySaveGuideStepAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PySaveGuideStepAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PySaveGuideStepAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PySaveGuideStepAck));
  PyBuyCheckPointChallengeCountReq_descriptor_ = file->message_type(259);
  static const int PyBuyCheckPointChallengeCountReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyBuyCheckPointChallengeCountReq, chpater_kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyBuyCheckPointChallengeCountReq, chapter_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyBuyCheckPointChallengeCountReq, check_point_id_),
  };
  PyBuyCheckPointChallengeCountReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PyBuyCheckPointChallengeCountReq_descriptor_,
      PyBuyCheckPointChallengeCountReq::default_instance_,
      PyBuyCheckPointChallengeCountReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyBuyCheckPointChallengeCountReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyBuyCheckPointChallengeCountReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PyBuyCheckPointChallengeCountReq));
  PyBuyCheckPointChallengeCountAck_descriptor_ = file->message_type(260);
  static const int PyBuyCheckPointChallengeCountAck_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyBuyCheckPointChallengeCountAck, chpater_kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyBuyCheckPointChallengeCountAck, chapter_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyBuyCheckPointChallengeCountAck, check_point_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyBuyCheckPointChallengeCountAck, challenged_counts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyBuyCheckPointChallengeCountAck, buy_counts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyBuyCheckPointChallengeCountAck, err_no_),
  };
  PyBuyCheckPointChallengeCountAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PyBuyCheckPointChallengeCountAck_descriptor_,
      PyBuyCheckPointChallengeCountAck::default_instance_,
      PyBuyCheckPointChallengeCountAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyBuyCheckPointChallengeCountAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyBuyCheckPointChallengeCountAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PyBuyCheckPointChallengeCountAck));
  CHAT_MSG_TYPE_descriptor_ = file->enum_type(0);
  CHAT_MSG_NODE_TYPE_descriptor_ = file->enum_type(1);
  SYSTEM_MSG_TYPE_descriptor_ = file->enum_type(2);
  TEXIAO_TYPE_descriptor_ = file->enum_type(3);
  CommonDialogType_descriptor_ = file->enum_type(4);
  PET_POSITION_descriptor_ = file->enum_type(5);
  BUFF_TYPE_descriptor_ = file->enum_type(6);
  SELL_TYPE_descriptor_ = file->enum_type(7);
  Period_descriptor_ = file->enum_type(8);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_gameserver_5fgate_5fclient_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientLoginGateReq_descriptor_, &ClientLoginGateReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientLoginGateAck_descriptor_, &ClientLoginGateAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientLoginAgainGateReq_descriptor_, &ClientLoginAgainGateReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientLoginAgainGateAck_descriptor_, &ClientLoginAgainGateAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientLeaveGameReq_descriptor_, &ClientLeaveGameReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientLeaveGameAck_descriptor_, &ClientLeaveGameAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SysErrorNtf_descriptor_, &SysErrorNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KeepClientAlive_descriptor_, &KeepClientAlive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KeepClientAliveAck_descriptor_, &KeepClientAliveAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestReq_descriptor_, &TestReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestAck_descriptor_, &TestAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerBaseData_descriptor_, &PlayerBaseData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgNodeText_descriptor_, &MsgNodeText::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UniqueID_descriptor_, &UniqueID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Priority_descriptor_, &Priority::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RepeatCount_descriptor_, &RepeatCount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgNodePlayerIDName_descriptor_, &MsgNodePlayerIDName::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MessageRepeateNode_descriptor_, &MessageRepeateNode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MessageNode_descriptor_, &MessageNode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatRpt_descriptor_, &ChatRpt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatNtf_descriptor_, &ChatNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GSChatNtf_descriptor_, &GSChatNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GSSystemMessageNtf_descriptor_, &GSSystemMessageNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SystemMessage_descriptor_, &SystemMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMExecuteResult_descriptor_, &GMExecuteResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeXiaoItem_descriptor_, &TeXiaoItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeXiao_descriptor_, &TeXiao::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeXiaoTypeNtf_descriptor_, &TeXiaoTypeNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetKeyAwardReq_descriptor_, &GetKeyAwardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetKeyAwardAck_descriptor_, &GetKeyAwardAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NeedCreatePlayerName_descriptor_, &NeedCreatePlayerName::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreatePlayerNameReq_descriptor_, &CreatePlayerNameReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreatePlayerNameAck_descriptor_, &CreatePlayerNameAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShangChengGoods_descriptor_, &ShangChengGoods::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LabelShangChengGoods_descriptor_, &LabelShangChengGoods::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetShangChengGoodsListAck_descriptor_, &GetShangChengGoodsListAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetShangChengGoodsListReq_descriptor_, &GetShangChengGoodsListReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommonDialog_descriptor_, &CommonDialog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetGMAward_descriptor_, &GetGMAward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetGMAwardAck_descriptor_, &GetGMAwardAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateExp_descriptor_, &UpdateExp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateGold_descriptor_, &UpdateGold::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateLevel_descriptor_, &UpdateLevel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateYuanBao_descriptor_, &UpdateYuanBao::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetRecord_descriptor_, &PetRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetRecordSIGN_descriptor_, &PetRecordSIGN::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddPet_descriptor_, &AddPet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DelPet_descriptor_, &DelPet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdatePet_descriptor_, &UpdatePet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetList_descriptor_, &PetList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SystemData_descriptor_, &SystemData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAllSysMsgReq_descriptor_, &GetAllSysMsgReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAllSysMsgAck_descriptor_, &GetAllSysMsgAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteSysMsgReq_descriptor_, &DeleteSysMsgReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteSysMsgAck_descriptor_, &DeleteSysMsgAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SendSysMsgReq_descriptor_, &SendSysMsgReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SendSysMsgAck_descriptor_, &SendSysMsgAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReadSysMsgReq_descriptor_, &ReadSysMsgReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReadSysMsgAck_descriptor_, &ReadSysMsgAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetEmailAwardReq_descriptor_, &GetEmailAwardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetEmailAwardAck_descriptor_, &GetEmailAwardAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OneKeyGetEmailAwardReq_descriptor_, &OneKeyGetEmailAwardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EmailMessageNtf_descriptor_, &EmailMessageNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtectPetReq_descriptor_, &ProtectPetReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtectPetAck_descriptor_, &ProtectPetAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SellPetToSysReq_descriptor_, &SellPetToSysReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SellPetToSysAck_descriptor_, &SellPetToSysAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetInBianDui_descriptor_, &PetInBianDui::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BianDuiData_descriptor_, &BianDuiData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BianDuiList_descriptor_, &BianDuiList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubBianDuiReq_descriptor_, &SubBianDuiReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubBianDuiAck_descriptor_, &SubBianDuiAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModifyBianDuiNameReq_descriptor_, &ModifyBianDuiNameReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModifyBianDuiNameAck_descriptor_, &ModifyBianDuiNameAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModifyBIanDuiDataReq_descriptor_, &ModifyBIanDuiDataReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModifyBIanDuiDataAck_descriptor_, &ModifyBIanDuiDataAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BianDuiNtf_descriptor_, &BianDuiNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddBianDui_descriptor_, &AddBianDui::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetCurBianDuiReq_descriptor_, &GetCurBianDuiReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetCurBianDuiAck_descriptor_, &GetCurBianDuiAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetCurBianDuiReq_descriptor_, &SetCurBianDuiReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetCurBianDuiAck_descriptor_, &SetCurBianDuiAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddPetToBianDuiReq_descriptor_, &AddPetToBianDuiReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddPetToBianDuiAck_descriptor_, &AddPetToBianDuiAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DelPetToBianDuiReq_descriptor_, &DelPetToBianDuiReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DelPetToBianDuiAck_descriptor_, &DelPetToBianDuiAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddPetMaxNumberReq_descriptor_, &AddPetMaxNumberReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddPetMaxNumberAck_descriptor_, &AddPetMaxNumberAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddQueueMaxNumberReq_descriptor_, &AddQueueMaxNumberReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddQueueMaxNumberAck_descriptor_, &AddQueueMaxNumberAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetMaxNumberNtf_descriptor_, &PetMaxNumberNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueueMaxNumberNtf_descriptor_, &QueueMaxNumberNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateCurBianDuiIdx_descriptor_, &UpdateCurBianDuiIdx::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecoverActiveCountReq_descriptor_, &RecoverActiveCountReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecoverActiveCountAck_descriptor_, &RecoverActiveCountAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActiveCountNtf_descriptor_, &ActiveCountNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SpiritNtf_descriptor_, &SpiritNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateHp_descriptor_, &UpdateHp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateMp_descriptor_, &UpdateMp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GoodsOfSell_descriptor_, &GoodsOfSell::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetShopListReq_descriptor_, &GetShopListReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetShopListAck_descriptor_, &GetShopListAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShoppingReq_descriptor_, &ShoppingReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShoppingAck_descriptor_, &ShoppingAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateVIPLevel_descriptor_, &UpdateVIPLevel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateFriendShip_descriptor_, &UpdateFriendShip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChongZhiOrderNtf_descriptor_, &ChongZhiOrderNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuffItemListReq_descriptor_, &BuffItemListReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuffItemListAck_descriptor_, &BuffItemListAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuffItemBuyReq_descriptor_, &BuffItemBuyReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuffItemInfo_descriptor_, &BuffItemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RandomItemListReq_descriptor_, &RandomItemListReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RandomItemListAck_descriptor_, &RandomItemListAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RandomItemBuyReq_descriptor_, &RandomItemBuyReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FriendData_descriptor_, &FriendData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FriendList_descriptor_, &FriendList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateFriend_descriptor_, &UpdateFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DelFriendReq_descriptor_, &DelFriendReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DelFriendAck_descriptor_, &DelFriendAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DelFriendNtf_descriptor_, &DelFriendNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VisitFriendReq_descriptor_, &VisitFriendReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VisitFriendAck_descriptor_, &VisitFriendAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskFriendData_descriptor_, &AskFriendData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAskFriendReq_descriptor_, &GetAskFriendReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAskFriendAck_descriptor_, &GetAskFriendAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SearchPlayerReq_descriptor_, &SearchPlayerReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SearchPlayerAck_descriptor_, &SearchPlayerAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskFriendReq_descriptor_, &AskFriendReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskFriendAck_descriptor_, &AskFriendAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddAskFriendNtf_descriptor_, &AddAskFriendNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplyAskReq_descriptor_, &ReplyAskReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplyAskAck_descriptor_, &ReplyAskAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NewAskFriendNtf_descriptor_, &NewAskFriendNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetAskFriendStateReq_descriptor_, &SetAskFriendStateReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetAskFriendStateAck_descriptor_, &SetAskFriendStateAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetChapterReq_descriptor_, &GetChapterReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OneCheckPoint_descriptor_, &OneCheckPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OneChapter_descriptor_, &OneChapter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetChapterAck_descriptor_, &GetChapterAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OneChapterLoseActivity_descriptor_, &OneChapterLoseActivity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChaptersLoseActivityNtf_descriptor_, &ChaptersLoseActivityNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddActiveChapterNtf_descriptor_, &AddActiveChapterNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateCheckPointNtf_descriptor_, &UpdateCheckPointNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SelectCheckPointReq_descriptor_, &SelectCheckPointReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SelectCheckPointAck_descriptor_, &SelectCheckPointAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetCheckPointRankReq_descriptor_, &GetCheckPointRankReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FriendRankItem_descriptor_, &FriendRankItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetCheckPointRankAck_descriptor_, &GetCheckPointRankAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetFriendArmsReq_descriptor_, &GetFriendArmsReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FriendArms_descriptor_, &FriendArms::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetFriendArmsAck_descriptor_, &GetFriendArmsAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BeginWarReq_descriptor_, &BeginWarReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MonsterBurstItem_descriptor_, &MonsterBurstItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TreasureBurstItem_descriptor_, &TreasureBurstItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BufferItem_descriptor_, &BufferItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BeginWarAck_descriptor_, &BeginWarAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NowStartWarRpt_descriptor_, &NowStartWarRpt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeadMonster_descriptor_, &DeadMonster::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WarResultReq_descriptor_, &WarResultReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WarResultAck_descriptor_, &WarResultAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeadInWarNtf_descriptor_, &DeadInWarNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeadInWarAck_descriptor_, &DeadInWarAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReviveReq_descriptor_, &ReviveReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReviveAck_descriptor_, &ReviveAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetUpgradeReq_descriptor_, &PetUpgradeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetUpgradeAck_descriptor_, &PetUpgradeAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetEvolveReq_descriptor_, &PetEvolveReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetEvolveAck_descriptor_, &PetEvolveAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OwnedPetIDListReq_descriptor_, &OwnedPetIDListReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OwnedPetIDListAck_descriptor_, &OwnedPetIDListAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NewPetOpenedNtf_descriptor_, &NewPetOpenedNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChenJiuData_descriptor_, &ChenJiuData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChenJiuKind_descriptor_, &ChenJiuKind::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetChenJiuReq_descriptor_, &GetChenJiuReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetChenJiuAck_descriptor_, &GetChenJiuAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateChenJiu_descriptor_, &UpdateChenJiu::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetChenJiuAwardReq_descriptor_, &GetChenJiuAwardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetChenJiuAwardAck_descriptor_, &GetChenJiuAwardAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OneKeyGetChenJiuAwardReq_descriptor_, &OneKeyGetChenJiuAwardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestData_descriptor_, &QuestData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetQuestListReq_descriptor_, &GetQuestListReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetQuestListAck_descriptor_, &GetQuestListAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestUpdateData_descriptor_, &QuestUpdateData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateQuestNtf_descriptor_, &UpdateQuestNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetQuestAwardReq_descriptor_, &GetQuestAwardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetQuestAwardAck_descriptor_, &GetQuestAwardAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OneKeyGetQuestAwardReq_descriptor_, &OneKeyGetQuestAwardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RefreshQuestNtf_descriptor_, &RefreshQuestNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetCurPvpDataReq_descriptor_, &GetCurPvpDataReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetCurPvpDataAck_descriptor_, &GetCurPvpDataAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PvpData_descriptor_, &PvpData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAllRankReq_descriptor_, &GetAllRankReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAllRankAck_descriptor_, &GetAllRankAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PvpFriendData_descriptor_, &PvpFriendData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetFriendRankReq_descriptor_, &GetFriendRankReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetFriendRankAck_descriptor_, &GetFriendRankAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetSumRankReq_descriptor_, &GetSumRankReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetSumRankAck_descriptor_, &GetSumRankAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClearPvpCDReq_descriptor_, &ClearPvpCDReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClearPvpCDAck_descriptor_, &ClearPvpCDAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetPvpAwardReq_descriptor_, &GetPvpAwardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetPvpAwardAck_descriptor_, &GetPvpAwardAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PvpWarBeginReq_descriptor_, &PvpWarBeginReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PvpWarBeginAck_descriptor_, &PvpWarBeginAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PvpWarResultReq_descriptor_, &PvpWarResultReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PvpWarResultAck_descriptor_, &PvpWarResultAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActionCountTickNtf_descriptor_, &ActionCountTickNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CustomerServiceUrlNtf_descriptor_, &CustomerServiceUrlNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillPage_descriptor_, &SkillPage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Skill_descriptor_, &Skill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetSkillListReq_descriptor_, &GetSkillListReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetSkillListAck_descriptor_, &GetSkillListAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SaveSkillPageReq_descriptor_, &SaveSkillPageReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SaveSkillPageAck_descriptor_, &SaveSkillPageAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SaveActiveSkillReq_descriptor_, &SaveActiveSkillReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SaveActiveSkillAck_descriptor_, &SaveActiveSkillAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GoodsItem_descriptor_, &GoodsItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GoodsList_descriptor_, &GoodsList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddGoodsItem_descriptor_, &AddGoodsItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateGoodsNumber_descriptor_, &UpdateGoodsNumber::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipData_descriptor_, &EquipData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipList_descriptor_, &EquipList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddEquip_descriptor_, &AddEquip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DelEquip_descriptor_, &DelEquip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateEquip_descriptor_, &UpdateEquip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PutOnEquipReq_descriptor_, &PutOnEquipReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PutOnEquipAck_descriptor_, &PutOnEquipAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TongShiEquip_descriptor_, &TongShiEquip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StrengEquipReq_descriptor_, &StrengEquipReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StrengEquipAck_descriptor_, &StrengEquipAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JinJieEquipReq_descriptor_, &JinJieEquipReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JinJieEquipAck_descriptor_, &JinJieEquipAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeChengEquipReq_descriptor_, &HeChengEquipReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeChengEquipAck_descriptor_, &HeChengEquipAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SellGoodsReq_descriptor_, &SellGoodsReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SellGoodsAck_descriptor_, &SellGoodsAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipSetStoreReq_descriptor_, &EquipSetStoreReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipSetStoreAck_descriptor_, &EquipSetStoreAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShareDataNtf_descriptor_, &ShareDataNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CompleteLoadDataNtf_descriptor_, &CompleteLoadDataNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetPetNewStateReq_descriptor_, &SetPetNewStateReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetPetNewStateAck_descriptor_, &SetPetNewStateAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateBuyActionCounts_descriptor_, &UpdateBuyActionCounts::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PythonMsg_example_descriptor_, &PythonMsg_example::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PythonMessage_descriptor_, &PythonMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PyChouKaReq_descriptor_, &PyChouKaReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PyPetInfo_descriptor_, &PyPetInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PyChouKaAck_descriptor_, &PyChouKaAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PyGenGaoData_descriptor_, &PyGenGaoData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PyGetGenGaoReq_descriptor_, &PyGetGenGaoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PyGetGenGaoAck_descriptor_, &PyGetGenGaoAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PyGetGoodActivePanelReq_descriptor_, &PyGetGoodActivePanelReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PyGoodActiveInfo_descriptor_, &PyGoodActiveInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PyGetGoodActivePanelAck_descriptor_, &PyGetGoodActivePanelAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PyGetActiveAwardReq_descriptor_, &PyGetActiveAwardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PyGetActiveAwardAck_descriptor_, &PyGetActiveAwardAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PyEveryDataActiveNtf_descriptor_, &PyEveryDataActiveNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PySaveGuideStepReq_descriptor_, &PySaveGuideStepReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PySaveGuideStepAck_descriptor_, &PySaveGuideStepAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PyBuyCheckPointChallengeCountReq_descriptor_, &PyBuyCheckPointChallengeCountReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PyBuyCheckPointChallengeCountAck_descriptor_, &PyBuyCheckPointChallengeCountAck::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_gameserver_5fgate_5fclient_2eproto() {
  delete ClientLoginGateReq::default_instance_;
  delete ClientLoginGateReq_reflection_;
  delete ClientLoginGateAck::default_instance_;
  delete ClientLoginGateAck_reflection_;
  delete ClientLoginAgainGateReq::default_instance_;
  delete ClientLoginAgainGateReq_reflection_;
  delete ClientLoginAgainGateAck::default_instance_;
  delete ClientLoginAgainGateAck_reflection_;
  delete ClientLeaveGameReq::default_instance_;
  delete ClientLeaveGameReq_reflection_;
  delete ClientLeaveGameAck::default_instance_;
  delete ClientLeaveGameAck_reflection_;
  delete SysErrorNtf::default_instance_;
  delete SysErrorNtf_reflection_;
  delete KeepClientAlive::default_instance_;
  delete KeepClientAlive_reflection_;
  delete KeepClientAliveAck::default_instance_;
  delete KeepClientAliveAck_reflection_;
  delete TestReq::default_instance_;
  delete TestReq_reflection_;
  delete TestAck::default_instance_;
  delete TestAck_reflection_;
  delete PlayerBaseData::default_instance_;
  delete PlayerBaseData_reflection_;
  delete MsgNodeText::default_instance_;
  delete MsgNodeText_reflection_;
  delete UniqueID::default_instance_;
  delete UniqueID_reflection_;
  delete Priority::default_instance_;
  delete Priority_reflection_;
  delete RepeatCount::default_instance_;
  delete RepeatCount_reflection_;
  delete MsgNodePlayerIDName::default_instance_;
  delete MsgNodePlayerIDName_reflection_;
  delete MessageRepeateNode::default_instance_;
  delete MessageRepeateNode_reflection_;
  delete MessageNode::default_instance_;
  delete MessageNode_reflection_;
  delete ChatRpt::default_instance_;
  delete ChatRpt_reflection_;
  delete ChatNtf::default_instance_;
  delete ChatNtf_reflection_;
  delete GSChatNtf::default_instance_;
  delete GSChatNtf_reflection_;
  delete GSSystemMessageNtf::default_instance_;
  delete GSSystemMessageNtf_reflection_;
  delete SystemMessage::default_instance_;
  delete SystemMessage_reflection_;
  delete GMExecuteResult::default_instance_;
  delete GMExecuteResult_reflection_;
  delete TeXiaoItem::default_instance_;
  delete TeXiaoItem_reflection_;
  delete TeXiao::default_instance_;
  delete TeXiao_reflection_;
  delete TeXiaoTypeNtf::default_instance_;
  delete TeXiaoTypeNtf_reflection_;
  delete GetKeyAwardReq::default_instance_;
  delete GetKeyAwardReq_reflection_;
  delete GetKeyAwardAck::default_instance_;
  delete GetKeyAwardAck_reflection_;
  delete NeedCreatePlayerName::default_instance_;
  delete NeedCreatePlayerName_reflection_;
  delete CreatePlayerNameReq::default_instance_;
  delete CreatePlayerNameReq_reflection_;
  delete CreatePlayerNameAck::default_instance_;
  delete CreatePlayerNameAck_reflection_;
  delete ShangChengGoods::default_instance_;
  delete ShangChengGoods_reflection_;
  delete LabelShangChengGoods::default_instance_;
  delete LabelShangChengGoods_reflection_;
  delete GetShangChengGoodsListAck::default_instance_;
  delete GetShangChengGoodsListAck_reflection_;
  delete GetShangChengGoodsListReq::default_instance_;
  delete GetShangChengGoodsListReq_reflection_;
  delete CommonDialog::default_instance_;
  delete CommonDialog_reflection_;
  delete GetGMAward::default_instance_;
  delete GetGMAward_reflection_;
  delete GetGMAwardAck::default_instance_;
  delete GetGMAwardAck_reflection_;
  delete UpdateExp::default_instance_;
  delete UpdateExp_reflection_;
  delete UpdateGold::default_instance_;
  delete UpdateGold_reflection_;
  delete UpdateLevel::default_instance_;
  delete UpdateLevel_reflection_;
  delete UpdateYuanBao::default_instance_;
  delete UpdateYuanBao_reflection_;
  delete PetRecord::default_instance_;
  delete PetRecord_reflection_;
  delete PetRecordSIGN::default_instance_;
  delete PetRecordSIGN_reflection_;
  delete AddPet::default_instance_;
  delete AddPet_reflection_;
  delete DelPet::default_instance_;
  delete DelPet_reflection_;
  delete UpdatePet::default_instance_;
  delete UpdatePet_reflection_;
  delete PetList::default_instance_;
  delete PetList_reflection_;
  delete SystemData::default_instance_;
  delete SystemData_reflection_;
  delete GetAllSysMsgReq::default_instance_;
  delete GetAllSysMsgReq_reflection_;
  delete GetAllSysMsgAck::default_instance_;
  delete GetAllSysMsgAck_reflection_;
  delete DeleteSysMsgReq::default_instance_;
  delete DeleteSysMsgReq_reflection_;
  delete DeleteSysMsgAck::default_instance_;
  delete DeleteSysMsgAck_reflection_;
  delete SendSysMsgReq::default_instance_;
  delete SendSysMsgReq_reflection_;
  delete SendSysMsgAck::default_instance_;
  delete SendSysMsgAck_reflection_;
  delete ReadSysMsgReq::default_instance_;
  delete ReadSysMsgReq_reflection_;
  delete ReadSysMsgAck::default_instance_;
  delete ReadSysMsgAck_reflection_;
  delete GetEmailAwardReq::default_instance_;
  delete GetEmailAwardReq_reflection_;
  delete GetEmailAwardAck::default_instance_;
  delete GetEmailAwardAck_reflection_;
  delete OneKeyGetEmailAwardReq::default_instance_;
  delete OneKeyGetEmailAwardReq_reflection_;
  delete EmailMessageNtf::default_instance_;
  delete EmailMessageNtf_reflection_;
  delete ProtectPetReq::default_instance_;
  delete ProtectPetReq_reflection_;
  delete ProtectPetAck::default_instance_;
  delete ProtectPetAck_reflection_;
  delete SellPetToSysReq::default_instance_;
  delete SellPetToSysReq_reflection_;
  delete SellPetToSysAck::default_instance_;
  delete SellPetToSysAck_reflection_;
  delete PetInBianDui::default_instance_;
  delete PetInBianDui_reflection_;
  delete BianDuiData::default_instance_;
  delete BianDuiData_reflection_;
  delete BianDuiList::default_instance_;
  delete BianDuiList_reflection_;
  delete SubBianDuiReq::default_instance_;
  delete SubBianDuiReq_reflection_;
  delete SubBianDuiAck::default_instance_;
  delete SubBianDuiAck_reflection_;
  delete ModifyBianDuiNameReq::default_instance_;
  delete ModifyBianDuiNameReq_reflection_;
  delete ModifyBianDuiNameAck::default_instance_;
  delete ModifyBianDuiNameAck_reflection_;
  delete ModifyBIanDuiDataReq::default_instance_;
  delete ModifyBIanDuiDataReq_reflection_;
  delete ModifyBIanDuiDataAck::default_instance_;
  delete ModifyBIanDuiDataAck_reflection_;
  delete BianDuiNtf::default_instance_;
  delete BianDuiNtf_reflection_;
  delete AddBianDui::default_instance_;
  delete AddBianDui_reflection_;
  delete GetCurBianDuiReq::default_instance_;
  delete GetCurBianDuiReq_reflection_;
  delete GetCurBianDuiAck::default_instance_;
  delete GetCurBianDuiAck_reflection_;
  delete SetCurBianDuiReq::default_instance_;
  delete SetCurBianDuiReq_reflection_;
  delete SetCurBianDuiAck::default_instance_;
  delete SetCurBianDuiAck_reflection_;
  delete AddPetToBianDuiReq::default_instance_;
  delete AddPetToBianDuiReq_reflection_;
  delete AddPetToBianDuiAck::default_instance_;
  delete AddPetToBianDuiAck_reflection_;
  delete DelPetToBianDuiReq::default_instance_;
  delete DelPetToBianDuiReq_reflection_;
  delete DelPetToBianDuiAck::default_instance_;
  delete DelPetToBianDuiAck_reflection_;
  delete AddPetMaxNumberReq::default_instance_;
  delete AddPetMaxNumberReq_reflection_;
  delete AddPetMaxNumberAck::default_instance_;
  delete AddPetMaxNumberAck_reflection_;
  delete AddQueueMaxNumberReq::default_instance_;
  delete AddQueueMaxNumberReq_reflection_;
  delete AddQueueMaxNumberAck::default_instance_;
  delete AddQueueMaxNumberAck_reflection_;
  delete PetMaxNumberNtf::default_instance_;
  delete PetMaxNumberNtf_reflection_;
  delete QueueMaxNumberNtf::default_instance_;
  delete QueueMaxNumberNtf_reflection_;
  delete UpdateCurBianDuiIdx::default_instance_;
  delete UpdateCurBianDuiIdx_reflection_;
  delete RecoverActiveCountReq::default_instance_;
  delete RecoverActiveCountReq_reflection_;
  delete RecoverActiveCountAck::default_instance_;
  delete RecoverActiveCountAck_reflection_;
  delete ActiveCountNtf::default_instance_;
  delete ActiveCountNtf_reflection_;
  delete SpiritNtf::default_instance_;
  delete SpiritNtf_reflection_;
  delete UpdateHp::default_instance_;
  delete UpdateHp_reflection_;
  delete UpdateMp::default_instance_;
  delete UpdateMp_reflection_;
  delete GoodsOfSell::default_instance_;
  delete GoodsOfSell_reflection_;
  delete GetShopListReq::default_instance_;
  delete GetShopListReq_reflection_;
  delete GetShopListAck::default_instance_;
  delete GetShopListAck_reflection_;
  delete ShoppingReq::default_instance_;
  delete ShoppingReq_reflection_;
  delete ShoppingAck::default_instance_;
  delete ShoppingAck_reflection_;
  delete UpdateVIPLevel::default_instance_;
  delete UpdateVIPLevel_reflection_;
  delete UpdateFriendShip::default_instance_;
  delete UpdateFriendShip_reflection_;
  delete ChongZhiOrderNtf::default_instance_;
  delete ChongZhiOrderNtf_reflection_;
  delete BuffItemListReq::default_instance_;
  delete BuffItemListReq_reflection_;
  delete BuffItemListAck::default_instance_;
  delete BuffItemListAck_reflection_;
  delete BuffItemBuyReq::default_instance_;
  delete BuffItemBuyReq_reflection_;
  delete BuffItemInfo::default_instance_;
  delete BuffItemInfo_reflection_;
  delete RandomItemListReq::default_instance_;
  delete RandomItemListReq_reflection_;
  delete RandomItemListAck::default_instance_;
  delete RandomItemListAck_reflection_;
  delete RandomItemBuyReq::default_instance_;
  delete RandomItemBuyReq_reflection_;
  delete FriendData::default_instance_;
  delete FriendData_reflection_;
  delete FriendList::default_instance_;
  delete FriendList_reflection_;
  delete UpdateFriend::default_instance_;
  delete UpdateFriend_reflection_;
  delete DelFriendReq::default_instance_;
  delete DelFriendReq_reflection_;
  delete DelFriendAck::default_instance_;
  delete DelFriendAck_reflection_;
  delete DelFriendNtf::default_instance_;
  delete DelFriendNtf_reflection_;
  delete VisitFriendReq::default_instance_;
  delete VisitFriendReq_reflection_;
  delete VisitFriendAck::default_instance_;
  delete VisitFriendAck_reflection_;
  delete AskFriendData::default_instance_;
  delete AskFriendData_reflection_;
  delete GetAskFriendReq::default_instance_;
  delete GetAskFriendReq_reflection_;
  delete GetAskFriendAck::default_instance_;
  delete GetAskFriendAck_reflection_;
  delete SearchPlayerReq::default_instance_;
  delete SearchPlayerReq_reflection_;
  delete SearchPlayerAck::default_instance_;
  delete SearchPlayerAck_reflection_;
  delete AskFriendReq::default_instance_;
  delete AskFriendReq_reflection_;
  delete AskFriendAck::default_instance_;
  delete AskFriendAck_reflection_;
  delete AddAskFriendNtf::default_instance_;
  delete AddAskFriendNtf_reflection_;
  delete ReplyAskReq::default_instance_;
  delete ReplyAskReq_reflection_;
  delete ReplyAskAck::default_instance_;
  delete ReplyAskAck_reflection_;
  delete NewAskFriendNtf::default_instance_;
  delete NewAskFriendNtf_reflection_;
  delete SetAskFriendStateReq::default_instance_;
  delete SetAskFriendStateReq_reflection_;
  delete SetAskFriendStateAck::default_instance_;
  delete SetAskFriendStateAck_reflection_;
  delete GetChapterReq::default_instance_;
  delete GetChapterReq_reflection_;
  delete OneCheckPoint::default_instance_;
  delete OneCheckPoint_reflection_;
  delete OneChapter::default_instance_;
  delete OneChapter_reflection_;
  delete GetChapterAck::default_instance_;
  delete GetChapterAck_reflection_;
  delete OneChapterLoseActivity::default_instance_;
  delete OneChapterLoseActivity_reflection_;
  delete ChaptersLoseActivityNtf::default_instance_;
  delete ChaptersLoseActivityNtf_reflection_;
  delete AddActiveChapterNtf::default_instance_;
  delete AddActiveChapterNtf_reflection_;
  delete UpdateCheckPointNtf::default_instance_;
  delete UpdateCheckPointNtf_reflection_;
  delete SelectCheckPointReq::default_instance_;
  delete SelectCheckPointReq_reflection_;
  delete SelectCheckPointAck::default_instance_;
  delete SelectCheckPointAck_reflection_;
  delete GetCheckPointRankReq::default_instance_;
  delete GetCheckPointRankReq_reflection_;
  delete FriendRankItem::default_instance_;
  delete FriendRankItem_reflection_;
  delete GetCheckPointRankAck::default_instance_;
  delete GetCheckPointRankAck_reflection_;
  delete GetFriendArmsReq::default_instance_;
  delete GetFriendArmsReq_reflection_;
  delete FriendArms::default_instance_;
  delete FriendArms_reflection_;
  delete GetFriendArmsAck::default_instance_;
  delete GetFriendArmsAck_reflection_;
  delete BeginWarReq::default_instance_;
  delete BeginWarReq_reflection_;
  delete MonsterBurstItem::default_instance_;
  delete MonsterBurstItem_reflection_;
  delete TreasureBurstItem::default_instance_;
  delete TreasureBurstItem_reflection_;
  delete BufferItem::default_instance_;
  delete BufferItem_reflection_;
  delete BeginWarAck::default_instance_;
  delete BeginWarAck_reflection_;
  delete NowStartWarRpt::default_instance_;
  delete NowStartWarRpt_reflection_;
  delete DeadMonster::default_instance_;
  delete DeadMonster_reflection_;
  delete WarResultReq::default_instance_;
  delete WarResultReq_reflection_;
  delete WarResultAck::default_instance_;
  delete WarResultAck_reflection_;
  delete DeadInWarNtf::default_instance_;
  delete DeadInWarNtf_reflection_;
  delete DeadInWarAck::default_instance_;
  delete DeadInWarAck_reflection_;
  delete ReviveReq::default_instance_;
  delete ReviveReq_reflection_;
  delete ReviveAck::default_instance_;
  delete ReviveAck_reflection_;
  delete PetUpgradeReq::default_instance_;
  delete PetUpgradeReq_reflection_;
  delete PetUpgradeAck::default_instance_;
  delete PetUpgradeAck_reflection_;
  delete PetEvolveReq::default_instance_;
  delete PetEvolveReq_reflection_;
  delete PetEvolveAck::default_instance_;
  delete PetEvolveAck_reflection_;
  delete OwnedPetIDListReq::default_instance_;
  delete OwnedPetIDListReq_reflection_;
  delete OwnedPetIDListAck::default_instance_;
  delete OwnedPetIDListAck_reflection_;
  delete NewPetOpenedNtf::default_instance_;
  delete NewPetOpenedNtf_reflection_;
  delete ChenJiuData::default_instance_;
  delete ChenJiuData_reflection_;
  delete ChenJiuKind::default_instance_;
  delete ChenJiuKind_reflection_;
  delete GetChenJiuReq::default_instance_;
  delete GetChenJiuReq_reflection_;
  delete GetChenJiuAck::default_instance_;
  delete GetChenJiuAck_reflection_;
  delete UpdateChenJiu::default_instance_;
  delete UpdateChenJiu_reflection_;
  delete GetChenJiuAwardReq::default_instance_;
  delete GetChenJiuAwardReq_reflection_;
  delete GetChenJiuAwardAck::default_instance_;
  delete GetChenJiuAwardAck_reflection_;
  delete OneKeyGetChenJiuAwardReq::default_instance_;
  delete OneKeyGetChenJiuAwardReq_reflection_;
  delete QuestData::default_instance_;
  delete QuestData_reflection_;
  delete GetQuestListReq::default_instance_;
  delete GetQuestListReq_reflection_;
  delete GetQuestListAck::default_instance_;
  delete GetQuestListAck_reflection_;
  delete QuestUpdateData::default_instance_;
  delete QuestUpdateData_reflection_;
  delete UpdateQuestNtf::default_instance_;
  delete UpdateQuestNtf_reflection_;
  delete GetQuestAwardReq::default_instance_;
  delete GetQuestAwardReq_reflection_;
  delete GetQuestAwardAck::default_instance_;
  delete GetQuestAwardAck_reflection_;
  delete OneKeyGetQuestAwardReq::default_instance_;
  delete OneKeyGetQuestAwardReq_reflection_;
  delete RefreshQuestNtf::default_instance_;
  delete RefreshQuestNtf_reflection_;
  delete GetCurPvpDataReq::default_instance_;
  delete GetCurPvpDataReq_reflection_;
  delete GetCurPvpDataAck::default_instance_;
  delete GetCurPvpDataAck_reflection_;
  delete PvpData::default_instance_;
  delete PvpData_reflection_;
  delete GetAllRankReq::default_instance_;
  delete GetAllRankReq_reflection_;
  delete GetAllRankAck::default_instance_;
  delete GetAllRankAck_reflection_;
  delete PvpFriendData::default_instance_;
  delete PvpFriendData_reflection_;
  delete GetFriendRankReq::default_instance_;
  delete GetFriendRankReq_reflection_;
  delete GetFriendRankAck::default_instance_;
  delete GetFriendRankAck_reflection_;
  delete GetSumRankReq::default_instance_;
  delete GetSumRankReq_reflection_;
  delete GetSumRankAck::default_instance_;
  delete GetSumRankAck_reflection_;
  delete ClearPvpCDReq::default_instance_;
  delete ClearPvpCDReq_reflection_;
  delete ClearPvpCDAck::default_instance_;
  delete ClearPvpCDAck_reflection_;
  delete GetPvpAwardReq::default_instance_;
  delete GetPvpAwardReq_reflection_;
  delete GetPvpAwardAck::default_instance_;
  delete GetPvpAwardAck_reflection_;
  delete PvpWarBeginReq::default_instance_;
  delete PvpWarBeginReq_reflection_;
  delete PvpWarBeginAck::default_instance_;
  delete PvpWarBeginAck_reflection_;
  delete PvpWarResultReq::default_instance_;
  delete PvpWarResultReq_reflection_;
  delete PvpWarResultAck::default_instance_;
  delete PvpWarResultAck_reflection_;
  delete ActionCountTickNtf::default_instance_;
  delete ActionCountTickNtf_reflection_;
  delete CustomerServiceUrlNtf::default_instance_;
  delete CustomerServiceUrlNtf_reflection_;
  delete SkillPage::default_instance_;
  delete SkillPage_reflection_;
  delete Skill::default_instance_;
  delete Skill_reflection_;
  delete GetSkillListReq::default_instance_;
  delete GetSkillListReq_reflection_;
  delete GetSkillListAck::default_instance_;
  delete GetSkillListAck_reflection_;
  delete SaveSkillPageReq::default_instance_;
  delete SaveSkillPageReq_reflection_;
  delete SaveSkillPageAck::default_instance_;
  delete SaveSkillPageAck_reflection_;
  delete SaveActiveSkillReq::default_instance_;
  delete SaveActiveSkillReq_reflection_;
  delete SaveActiveSkillAck::default_instance_;
  delete SaveActiveSkillAck_reflection_;
  delete GoodsItem::default_instance_;
  delete GoodsItem_reflection_;
  delete GoodsList::default_instance_;
  delete GoodsList_reflection_;
  delete AddGoodsItem::default_instance_;
  delete AddGoodsItem_reflection_;
  delete UpdateGoodsNumber::default_instance_;
  delete UpdateGoodsNumber_reflection_;
  delete EquipData::default_instance_;
  delete EquipData_reflection_;
  delete EquipList::default_instance_;
  delete EquipList_reflection_;
  delete AddEquip::default_instance_;
  delete AddEquip_reflection_;
  delete DelEquip::default_instance_;
  delete DelEquip_reflection_;
  delete UpdateEquip::default_instance_;
  delete UpdateEquip_reflection_;
  delete PutOnEquipReq::default_instance_;
  delete PutOnEquipReq_reflection_;
  delete PutOnEquipAck::default_instance_;
  delete PutOnEquipAck_reflection_;
  delete TongShiEquip::default_instance_;
  delete TongShiEquip_reflection_;
  delete StrengEquipReq::default_instance_;
  delete StrengEquipReq_reflection_;
  delete StrengEquipAck::default_instance_;
  delete StrengEquipAck_reflection_;
  delete JinJieEquipReq::default_instance_;
  delete JinJieEquipReq_reflection_;
  delete JinJieEquipAck::default_instance_;
  delete JinJieEquipAck_reflection_;
  delete HeChengEquipReq::default_instance_;
  delete HeChengEquipReq_reflection_;
  delete HeChengEquipAck::default_instance_;
  delete HeChengEquipAck_reflection_;
  delete SellGoodsReq::default_instance_;
  delete SellGoodsReq_reflection_;
  delete SellGoodsAck::default_instance_;
  delete SellGoodsAck_reflection_;
  delete EquipSetStoreReq::default_instance_;
  delete EquipSetStoreReq_reflection_;
  delete EquipSetStoreAck::default_instance_;
  delete EquipSetStoreAck_reflection_;
  delete ShareDataNtf::default_instance_;
  delete ShareDataNtf_reflection_;
  delete CompleteLoadDataNtf::default_instance_;
  delete CompleteLoadDataNtf_reflection_;
  delete SetPetNewStateReq::default_instance_;
  delete SetPetNewStateReq_reflection_;
  delete SetPetNewStateAck::default_instance_;
  delete SetPetNewStateAck_reflection_;
  delete UpdateBuyActionCounts::default_instance_;
  delete UpdateBuyActionCounts_reflection_;
  delete PythonMsg_example::default_instance_;
  delete PythonMsg_example_reflection_;
  delete PythonMessage::default_instance_;
  delete PythonMessage_reflection_;
  delete PyChouKaReq::default_instance_;
  delete PyChouKaReq_reflection_;
  delete PyPetInfo::default_instance_;
  delete PyPetInfo_reflection_;
  delete PyChouKaAck::default_instance_;
  delete PyChouKaAck_reflection_;
  delete PyGenGaoData::default_instance_;
  delete PyGenGaoData_reflection_;
  delete PyGetGenGaoReq::default_instance_;
  delete PyGetGenGaoReq_reflection_;
  delete PyGetGenGaoAck::default_instance_;
  delete PyGetGenGaoAck_reflection_;
  delete PyGetGoodActivePanelReq::default_instance_;
  delete PyGetGoodActivePanelReq_reflection_;
  delete PyGoodActiveInfo::default_instance_;
  delete PyGoodActiveInfo_reflection_;
  delete PyGetGoodActivePanelAck::default_instance_;
  delete PyGetGoodActivePanelAck_reflection_;
  delete PyGetActiveAwardReq::default_instance_;
  delete PyGetActiveAwardReq_reflection_;
  delete PyGetActiveAwardAck::default_instance_;
  delete PyGetActiveAwardAck_reflection_;
  delete PyEveryDataActiveNtf::default_instance_;
  delete PyEveryDataActiveNtf_reflection_;
  delete PySaveGuideStepReq::default_instance_;
  delete PySaveGuideStepReq_reflection_;
  delete PySaveGuideStepAck::default_instance_;
  delete PySaveGuideStepAck_reflection_;
  delete PyBuyCheckPointChallengeCountReq::default_instance_;
  delete PyBuyCheckPointChallengeCountReq_reflection_;
  delete PyBuyCheckPointChallengeCountAck::default_instance_;
  delete PyBuyCheckPointChallengeCountAck_reflection_;
}

void protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_options_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\034gameserver_gate_client.proto\022\020protoc.g"
    "ameproto\032\roptions.proto\"e\n\022ClientLoginGa"
    "teReq\022\025\n\rdigit_account\030\001 \002(\004\022\023\n\013str_acco"
    "unt\030\002 \002(\t\022\026\n\016login_gate_key\030\003 \001(\t\022\013\n\003opt"
    "\030\004 \001(\t\"7\n\022ClientLoginGateAck\022\016\n\006err_no\030\001"
    " \002(\005\022\021\n\tcoding_id\030\002 \001(\005\"]\n\027ClientLoginAg"
    "ainGateReq\022\025\n\rdigit_account\030\001 \002(\004\022\023\n\013str"
    "_account\030\002 \002(\t\022\026\n\016login_gate_key\030\003 \001(\t\"<"
    "\n\027ClientLoginAgainGateAck\022\016\n\006err_no\030\001 \002("
    "\005\022\021\n\tcoding_id\030\002 \001(\005\"(\n\022ClientLeaveGameR"
    "eq\022\022\n\nleave_type\030\003 \002(\005\"$\n\022ClientLeaveGam"
    "eAck\022\016\n\006err_no\030\001 \002(\005\"\035\n\013SysErrorNtf\022\016\n\006e"
    "rr_no\030\001 \002(\005\"\021\n\017KeepClientAlive\"\024\n\022KeepCl"
    "ientAliveAck\"\311\001\n\007TestReq\022\020\n\010t_double\030\001 \001"
    "(\001\022\017\n\007t_float\030\002 \001(\002\022\017\n\007t_int32\030\003 \001(\005\022\017\n\007"
    "t_int64\030\004 \001(\003\022\020\n\010t_uint32\030\005 \001(\r\022\020\n\010t_uin"
    "t64\030\006 \001(\004\022\020\n\010t_sint32\030\007 \001(\021\022\020\n\010t_sint64\030"
    "\010 \001(\022\022\016\n\006t_bool\030\t \001(\010\022\020\n\010t_string\030\n \001(\t\022"
    "\017\n\007t_bytes\030\013 \001(\014\"\311\001\n\007TestAck\022\020\n\010t_double"
    "\030\001 \001(\001\022\017\n\007t_float\030\002 \001(\002\022\017\n\007t_int32\030\003 \001(\005"
    "\022\017\n\007t_int64\030\004 \001(\003\022\020\n\010t_uint32\030\005 \001(\r\022\020\n\010t"
    "_uint64\030\006 \001(\004\022\020\n\010t_sint32\030\007 \001(\021\022\020\n\010t_sin"
    "t64\030\010 \001(\022\022\016\n\006t_bool\030\t \001(\010\022\020\n\010t_string\030\n "
    "\001(\t\022\017\n\007t_bytes\030\013 \001(\014\"\323\002\n\016PlayerBaseData\022"
    "\022\n\nplayername\030\001 \001(\t\022\021\n\tvip_level\030\002 \001(\r\022\017"
    "\n\007area_id\030\003 \001(\005\022\023\n\013head_pic_id\030\004 \001(\r\022\013\n\003"
    "sex\030\005 \001(\010\022\013\n\003exp\030\006 \001(\r\022\014\n\004gold\030\007 \001(\r\022\r\n\005"
    "level\030\010 \001(\r\022\024\n\014action_count\030\t \001(\r\022\016\n\006spi"
    "rit\030\n \001(\r\022\n\n\002hp\030\013 \001(\r\022\n\n\002mp\030\014 \001(\r\022\020\n\010yua"
    "n_bao\030\r \001(\r\022\017\n\007gmlevel\030\016 \001(\005\022\024\n\014cur_queu"
    "e_id\030\017 \001(\r\022\023\n\013friend_ship\030\020 \001(\005\022\026\n\016not_a"
    "sk_friend\030\021 \001(\010\022\031\n\021today_first_login\030\022 \001"
    "(\010\"\033\n\013MsgNodeText\022\014\n\004text\030\001 \001(\t\"\026\n\010Uniqu"
    "eID\022\n\n\002id\030\001 \001(\004\"\027\n\010Priority\022\013\n\003pri\030\001 \001(\r"
    "\"\034\n\013RepeatCount\022\r\n\005count\030\001 \001(\r\"/\n\023MsgNod"
    "ePlayerIDName\022\n\n\002id\030\001 \001(\004\022\014\n\004name\030\002 \001(\t\""
    "B\n\022MessageRepeateNode\022,\n\005nodes\030\001 \003(\0132\035.p"
    "rotoc.gameproto.MessageNode\"T\n\013MessageNo"
    "de\0227\n\tnode_type\030\001 \001(\0162$.protoc.gameproto"
    ".CHAT_MSG_NODE_TYPE\022\014\n\004data\030\002 \001(\014\"\243\001\n\007Ch"
    "atRpt\0221\n\010msg_type\030\001 \001(\0162\037.protoc.gamepro"
    "to.CHAT_MSG_TYPE\022\013\n\003msg\030\002 \001(\t\022\023\n\013to_play"
    "erid\030\003 \001(\004\022\025\n\rto_playername\030\004 \001(\t\022,\n\005nod"
    "es\030\005 \003(\0132\035.protoc.gameproto.MessageNode\""
    "z\n\007ChatNtf\0221\n\010msg_type\030\001 \001(\0162\037.protoc.ga"
    "meproto.CHAT_MSG_TYPE\022,\n\005nodes\030\002 \003(\0132\035.p"
    "rotoc.gameproto.MessageNode\022\016\n\006err_no\030\003 "
    "\001(\005\"\252\001\n\tGSChatNtf\0221\n\010msg_type\030\001 \001(\0162\037.pr"
    "otoc.gameproto.CHAT_MSG_TYPE\022\020\n\010playerid"
    "\030\002 \001(\004\022\023\n\013to_playerid\030\003 \001(\004\022\025\n\rto_player"
    "name\030\004 \001(\t\022,\n\005nodes\030\005 \003(\0132\035.protoc.gamep"
    "roto.MessageNode\"\223\001\n\022GSSystemMessageNtf\022"
    "B\n\010msg_type\030\001 \001(\0162!.protoc.gameproto.SYS"
    "TEM_MSG_TYPE:\rE_NORMALL_MSG\022\013\n\003msg\030\002 \001(\t"
    "\022,\n\005nodes\030\003 \003(\0132\035.protoc.gameproto.Messa"
    "geNode\"\241\001\n\rSystemMessage\022B\n\010msg_type\030\001 \001"
    "(\0162!.protoc.gameproto.SYSTEM_MSG_TYPE:\rE"
    "_NORMALL_MSG\022\013\n\003msg\030\002 \001(\t\022,\n\005nodes\030\003 \003(\013"
    "2\035.protoc.gameproto.MessageNode\022\021\n\tis_my"
    "_msg\030\004 \001(\010\".\n\017GMExecuteResult\022\016\n\006err_no\030"
    "\001 \001(\005\022\013\n\003msg\030\002 \001(\t\"\277\002\n\nTeXiaoItem\0228\n\010ite"
    "mtype\030\001 \001(\0162&.protoc.gameproto.TeXiaoIte"
    "m.ITEM_TYPE\022\n\n\002id\030\002 \001(\005\022\016\n\006number\030\003 \001(\005\022"
    "\r\n\005level\030\004 \001(\005\"\313\001\n\tITEM_TYPE\022\r\n\tAWARD_EX"
    "P\020\001\022\016\n\nAWARD_GOLD\020\002\022\022\n\016AWARD_YUAN_BAO\020\003\022"
    "\r\n\tAWARD_PET\020\004\022\026\n\022AWARD_ACTION_COUNT\020\005\022\024"
    "\n\020AWARD_FRIENDSHIP\020\006\022\017\n\013AWARD_EQUIP\020\007\022\024\n"
    "\020AWARD_RANDOM_PET\020\010\022\026\n\022AWARD_RANDOM_EQUI"
    "P\020\t\022\017\n\013AWARD_GOODS\020\n\"a\n\006TeXiao\022+\n\004type\030\001"
    " \001(\0162\035.protoc.gameproto.TEXIAO_TYPE\022*\n\004i"
    "tem\030\002 \003(\0132\034.protoc.gameproto.TeXiaoItem\""
    "9\n\rTeXiaoTypeNtf\022(\n\006texiao\030\001 \001(\0132\030.proto"
    "c.gameproto.TeXiao\"\035\n\016GetKeyAwardReq\022\013\n\003"
    "key\030\001 \001(\t\" \n\016GetKeyAwardAck\022\016\n\006err_no\030\001 "
    "\001(\005\"\026\n\024NeedCreatePlayerName\"H\n\023CreatePla"
    "yerNameReq\022\017\n\007newname\030\001 \002(\t\022\023\n\013head_pic_"
    "id\030\002 \001(\r\022\013\n\003sex\030\004 \001(\010\"%\n\023CreatePlayerNam"
    "eAck\022\016\n\006err_no\030\001 \002(\005\"\227\001\n\017ShangChengGoods"
    "\022\n\n\002id\030\001 \001(\r\022\014\n\004kind\030\002 \001(\r\022\r\n\005price\030\003 \001("
    "\r\022\017\n\007price_1\030\004 \001(\r\022\020\n\010end_time\030\005 \001(\003\022\024\n\014"
    "limit_number\030\006 \001(\005\022\021\n\tsell_type\030\007 \001(\005\022\017\n"
    "\007percent\030\010 \001(\005\"d\n\024LabelShangChengGoods\022\022"
    "\n\nlabel_name\030\001 \001(\t\0228\n\rsellgoodslist\030\002 \003("
    "\0132!.protoc.gameproto.ShangChengGoods\"d\n\031"
    "GetShangChengGoodsListAck\022\017\n\007shop_id\030\001 \001"
    "(\r\0226\n\006labels\030\002 \003(\0132&.protoc.gameproto.La"
    "belShangChengGoods\"\033\n\031GetShangChengGoods"
    "ListReq\"\345\001\n\014CommonDialog\022\016\n\006dlg_id\030\001 \001(\005"
    "\0224\n\010dlg_type\030\002 \001(\0162\".protoc.gameproto.Co"
    "mmonDialogType\022\022\n\ndlg_return\030\003 \001(\005\022\023\n\013ou"
    "tput_text\030\004 \001(\t\022\022\n\ninput_text\030\005 \001(\t\022\r\n\005r"
    "32_1\030\006 \001(\005\022\r\n\005r32_2\030\007 \001(\005\022\r\n\005r64_1\030\010 \001(\004"
    ":%\222\313\004\035protoc.gameproto.CommonDialog\210\313\004\001\""
    "\014\n\nGetGMAward\"\037\n\rGetGMAwardAck\022\016\n\006err_no"
    "\030\001 \001(\005\"\030\n\tUpdateExp\022\013\n\003exp\030\001 \002(\r\"\032\n\nUpda"
    "teGold\022\014\n\004gold\030\001 \002(\r\"\031\n\013UpdateLevel\022\n\n\002i"
    "d\030\001 \002(\r\"!\n\rUpdateYuanBao\022\020\n\010yuan_bao\030\001 \002"
    "(\r\"\346\002\n\tPetRecord\022\014\n\004qwid\030\001 \001(\004\022\016\n\006pet_id"
    "\030\002 \001(\r\0220\n\010position\030\003 \001(\0162\036.protoc.gamepr"
    "oto.PET_POSITION\022\014\n\004bind\030\004 \001(\r\022\017\n\007recove"
    "r\030\005 \001(\r\022\013\n\003dps\030\006 \001(\002\022\n\n\002hp\030\007 \001(\r\022\r\n\005leve"
    "l\030\010 \001(\r\022\013\n\003exp\030\t \001(\r\022\024\n\014action_skill\030\n \001"
    "(\r\022\024\n\014leader_skill\030\013 \001(\r\022\025\n\rpassive_skil"
    "l\030\014 \003(\r\022\023\n\013create_time\030\r \001(\003\022\017\n\007protect\030"
    "\016 \001(\r\022\023\n\013skill_level\030\017 \001(\r\022\020\n\010equip_id\030\020"
    " \003(\004\022\021\n\tnew_state\030\021 \001(\010\022\022\n\npvp_number\030\022 "
    "\001(\r\"\341\001\n\rPetRecordSIGN\022\014\n\004qwid\030\001 \001(\004\022\023\n\013s"
    "ign_pet_id\030\002 \001(\014\022\024\n\014sign_recover\030\003 \001(\014\022\020"
    "\n\010sign_dps\030\004 \001(\014\022\017\n\007sign_hp\030\005 \001(\014\022\031\n\021sig"
    "n_action_skill\030\006 \001(\014\022\031\n\021sign_leader_skil"
    "l\030\007 \001(\014\022\030\n\020sign_skill_level\030\010 \001(\014\022\017\n\007sig"
    "n_mp\030\t \001(\014\022\023\n\013sign_spirit\030\n \001(\014\"2\n\006AddPe"
    "t\022(\n\003pet\030\001 \001(\0132\033.protoc.gameproto.PetRec"
    "ord\"\024\n\006DelPet\022\n\n\002id\030\001 \001(\004\"5\n\tUpdatePet\022("
    "\n\003pet\030\001 \001(\0132\033.protoc.gameproto.PetRecord"
    "\"5\n\007PetList\022*\n\005talbe\030\001 \003(\0132\033.protoc.game"
    "proto.PetRecord\"\250\001\n\nSystemData\022\016\n\006msg_id"
    "\030\001 \001(\004\022\020\n\010msg_type\030\002 \001(\r\022\021\n\tsend_name\030\003 "
    "\001(\t\022\r\n\005title\030\004 \001(\t\022\021\n\tread_flag\030\005 \001(\010\022\020\n"
    "\010msg_time\030\006 \001(\003\022\r\n\005award\030\007 \001(\t\022\021\n\tlast_d"
    "ays\030\010 \001(\r\022\017\n\007content\030\t \001(\t\"\021\n\017GetAllSysM"
    "sgReq\"\?\n\017GetAllSysMsgAck\022,\n\006sysmsg\030\001 \003(\013"
    "2\034.protoc.gameproto.SystemData\"\"\n\017Delete"
    "SysMsgReq\022\017\n\007msg_ids\030\001 \003(\004\"!\n\017DeleteSysM"
    "sgAck\022\016\n\006err_no\030\001 \001(\005\"V\n\rSendSysMsgReq\022\023"
    "\n\013player_name\030\001 \001(\t\022\r\n\005theme\030\002 \001(\t\022\017\n\007co"
    "ntent\030\003 \001(\t\022\020\n\010playerid\030\004 \001(\004\"\037\n\rSendSys"
    "MsgAck\022\016\n\006err_no\030\001 \001(\005\"\037\n\rReadSysMsgReq\022"
    "\016\n\006msg_id\030\001 \001(\004\"0\n\rReadSysMsgAck\022\016\n\006msg_"
    "id\030\001 \001(\004\022\017\n\007content\030\002 \001(\t\"\"\n\020GetEmailAwa"
    "rdReq\022\016\n\006msg_id\030\001 \001(\004\"2\n\020GetEmailAwardAc"
    "k\022\016\n\006msg_id\030\001 \001(\004\022\016\n\006err_no\030\002 \001(\005\"(\n\026One"
    "KeyGetEmailAwardReq\022\016\n\006msg_id\030\001 \003(\004\"\021\n\017E"
    "mailMessageNtf\"\037\n\rProtectPetReq\022\016\n\006pet_i"
    "d\030\001 \001(\004\"/\n\rProtectPetAck\022\016\n\006pet_id\030\001 \001(\004"
    "\022\016\n\006err_no\030\002 \001(\005\"\"\n\017SellPetToSysReq\022\017\n\007p"
    "et_ids\030\001 \003(\004\"2\n\017SellPetToSysAck\022\017\n\007pet_i"
    "ds\030\001 \003(\004\022\016\n\006err_no\030\002 \001(\005\";\n\014PetInBianDui"
    "\022\016\n\006pet_id\030\001 \001(\004\022\013\n\003idx\030\002 \001(\r\022\016\n\006number\030"
    "\003 \001(\r\"\222\001\n\013BianDuiData\022\r\n\005index\030\001 \001(\r\022\014\n\004"
    "name\030\002 \001(\t\022\024\n\014admin_pet_id\030\003 \001(\004\022+\n\003pet\030"
    "\004 \003(\0132\036.protoc.gameproto.PetInBianDui\022\024\n"
    "\014total_attack\030\005 \001(\005\022\r\n\005state\030\006 \001(\010\":\n\013Bi"
    "anDuiList\022+\n\004data\030\001 \003(\0132\035.protoc.gamepro"
    "to.BianDuiData\"\?\n\rSubBianDuiReq\022.\n\007biand"
    "ui\030\001 \001(\0132\035.protoc.gameproto.BianDuiData\""
    ",\n\rSubBianDuiAck\022\013\n\003idx\030\001 \001(\r\022\016\n\006err_no\030"
    "\002 \001(\005\"$\n\024ModifyBianDuiNameReq\022\014\n\004name\030\001 "
    "\001(\t\"4\n\024ModifyBianDuiNameAck\022\014\n\004name\030\001 \001("
    "\t\022\016\n\006err_no\030\002 \001(\005\"M\n\024ModifyBIanDuiDataRe"
    "q\022\020\n\010pet_id_1\030\001 \001(\004\022\020\n\010pet_id_2\030\002 \001(\004\022\021\n"
    "\tqueue_idx\030\003 \001(\r\"]\n\024ModifyBIanDuiDataAck"
    "\022\020\n\010pet_id_1\030\001 \001(\004\022\020\n\010pet_id_2\030\002 \001(\004\022\016\n\006"
    "err_no\030\003 \001(\005\022\021\n\tqueue_idx\030\004 \001(\r\":\n\nBianD"
    "uiNtf\022,\n\005queue\030\001 \001(\0132\035.protoc.gameproto."
    "BianDuiData\":\n\nAddBianDui\022,\n\005queue\030\001 \001(\013"
    "2\035.protoc.gameproto.BianDuiData\"\037\n\020GetCu"
    "rBianDuiReq\022\013\n\003idx\030\001 \001(\r\"R\n\020GetCurBianDu"
    "iAck\022.\n\007biandui\030\001 \001(\0132\035.protoc.gameproto"
    ".BianDuiData\022\016\n\006err_no\030\002 \001(\005\"$\n\020SetCurBi"
    "anDuiReq\022\020\n\010queue_id\030\001 \001(\r\"4\n\020SetCurBian"
    "DuiAck\022\020\n\010queue_id\030\001 \001(\r\022\016\n\006err_no\030\002 \001(\005"
    "\"D\n\022AddPetToBianDuiReq\022\016\n\006pet_id\030\001 \001(\004\022\013"
    "\n\003idx\030\002 \001(\r\022\021\n\tqueue_idx\030\003 \001(\r\"G\n\022AddPet"
    "ToBianDuiAck\022\016\n\006pet_id\030\001 \001(\004\022\016\n\006err_no\030\002"
    " \001(\005\022\021\n\tqueue_idx\030\003 \001(\r\"7\n\022DelPetToBianD"
    "uiReq\022\016\n\006pet_id\030\001 \001(\004\022\021\n\tqueue_idx\030\003 \001(\r"
    "\"G\n\022DelPetToBianDuiAck\022\016\n\006pet_id\030\001 \001(\004\022\016"
    "\n\006err_no\030\002 \001(\005\022\021\n\tqueue_idx\030\003 \001(\r\"\024\n\022Add"
    "PetMaxNumberReq\"$\n\022AddPetMaxNumberAck\022\016\n"
    "\006err_no\030\001 \001(\005\"\026\n\024AddQueueMaxNumberReq\"&\n"
    "\024AddQueueMaxNumberAck\022\016\n\006err_no\030\001 \001(\005\"!\n"
    "\017PetMaxNumberNtf\022\016\n\006number\030\001 \001(\r\"#\n\021Queu"
    "eMaxNumberNtf\022\016\n\006number\030\001 \001(\r\"\"\n\023UpdateC"
    "urBianDuiIdx\022\013\n\003idx\030\001 \001(\r\"\027\n\025RecoverActi"
    "veCountReq\"\'\n\025RecoverActiveCountAck\022\016\n\006e"
    "rr_no\030\001 \001(\005\"\037\n\016ActiveCountNtf\022\r\n\005count\030\001"
    " \001(\r\"\033\n\tSpiritNtf\022\016\n\006spirit\030\001 \001(\r\"\026\n\010Upd"
    "ateHp\022\n\n\002hp\030\001 \001(\r\"\026\n\010UpdateMp\022\n\n\002mp\030\001 \001("
    "\r\"\300\001\n\013GoodsOfSell\022\n\n\002id\030\001 \001(\r\022\014\n\004name\030\002 "
    "\001(\t\022\r\n\005price\030\003 \001(\r\022\021\n\tcost_type\030\004 \001(\r\022\014\n"
    "\004desc\030\005 \001(\t\022\017\n\007price_1\030\006 \001(\r\022\020\n\010fpercent"
    "\030\007 \001(\002\022\027\n\017last_month_days\030\010 \001(\005\022\032\n\022zhaoh"
    "uan_free_time\030\t \001(\003\022\017\n\007show_id\030\n \001(\r\" \n\016"
    "GetShopListReq\022\016\n\006shopid\030\001 \001(\r\"N\n\016GetSho"
    "pListAck\022\016\n\006shopid\030\001 \001(\r\022,\n\005goods\030\002 \003(\0132"
    "\035.protoc.gameproto.GoodsOfSell\")\n\013Shoppi"
    "ngReq\022\016\n\006shopid\030\001 \001(\r\022\n\n\002id\030\002 \001(\r\"9\n\013Sho"
    "ppingAck\022\016\n\006shopid\030\001 \001(\r\022\n\n\002id\030\002 \001(\r\022\016\n\006"
    "err_no\030\003 \001(\005\"5\n\016UpdateVIPLevel\022\r\n\005level\030"
    "\001 \001(\r\022\024\n\014sum_chongzhi\030\002 \001(\r\" \n\020UpdateFri"
    "endShip\022\014\n\004ship\030\001 \001(\r\"D\n\020ChongZhiOrderNt"
    "f\022\020\n\010order_id\030\001 \001(\004\022\r\n\005money\030\002 \001(\002\022\017\n\007st"
    "r_url\030\003 \001(\t\"<\n\017BuffItemListReq\022)\n\004type\030\001"
    " \001(\0162\033.protoc.gameproto.BUFF_TYPE\"P\n\017Buf"
    "fItemListAck\022\016\n\006err_no\030\001 \001(\005\022-\n\005items\030\002 "
    "\003(\0132\036.protoc.gameproto.BuffItemInfo\"H\n\016B"
    "uffItemBuyReq\022\013\n\003ids\030\001 \003(\r\022)\n\004type\030\002 \001(\016"
    "2\033.protoc.gameproto.BUFF_TYPE\"\241\001\n\014BuffIt"
    "emInfo\022\n\n\002id\030\001 \001(\r\022\r\n\005price\030\002 \001(\r\022\016\n\006num"
    "ber\030\003 \001(\r\022)\n\004type\030\004 \001(\0162\033.protoc.gamepro"
    "to.SELL_TYPE\022\014\n\004name\030\005 \001(\t\022\014\n\004desc\030\006 \001(\t"
    "\022\r\n\005owned\030\007 \001(\010\022\020\n\010duration\030\010 \001(\r\">\n\021Ran"
    "domItemListReq\022)\n\004type\030\001 \001(\0162\033.protoc.ga"
    "meproto.BUFF_TYPE\"Q\n\021RandomItemListAck\022\016"
    "\n\006err_no\030\001 \001(\005\022,\n\004info\030\002 \001(\0132\036.protoc.ga"
    "meproto.BuffItemInfo\"=\n\020RandomItemBuyReq"
    "\022)\n\004type\030\001 \001(\0162\033.protoc.gameproto.BUFF_T"
    "YPE\"\230\001\n\nFriendData\022\021\n\tfriend_id\030\001 \001(\004\022\014\n"
    "\004name\030\002 \001(\t\022\017\n\007head_id\030\003 \001(\r\022\r\n\005level\030\004 "
    "\001(\r\022\014\n\004kind\030\005 \001(\r\022\030\n\020last_online_time\030\006 "
    "\001(\003\022\013\n\003sex\030\007 \001(\010\022\024\n\014total_attack\030\010 \001(\005\"8"
    "\n\nFriendList\022*\n\004data\030\001 \003(\0132\034.protoc.game"
    "proto.FriendData\":\n\014UpdateFriend\022*\n\004data"
    "\030\001 \001(\0132\034.protoc.gameproto.FriendData\"!\n\014"
    "DelFriendReq\022\021\n\tfriend_id\030\001 \001(\004\"1\n\014DelFr"
    "iendAck\022\021\n\tfriend_id\030\001 \001(\004\022\016\n\006err_no\030\002 \001"
    "(\005\"!\n\014DelFriendNtf\022\021\n\tfriend_id\030\001 \001(\004\"6\n"
    "\016VisitFriendReq\022\021\n\tfriend_id\030\001 \001(\004\022\021\n\tcu"
    "r_queue\030\002 \001(\010\"_\n\016VisitFriendAck\022\021\n\tfrien"
    "d_id\030\001 \001(\004\022(\n\003pet\030\002 \003(\0132\033.protoc.gamepro"
    "to.PetRecord\022\020\n\010admin_id\030\003 \001(\004\"\227\001\n\rAskFr"
    "iendData\022\025\n\rask_friend_id\030\001 \001(\004\022\014\n\004name\030"
    "\002 \001(\t\022\017\n\007head_id\030\003 \001(\r\022\r\n\005level\030\004 \001(\r\022\014\n"
    "\004kind\030\005 \001(\r\022\020\n\010ask_time\030\006 \001(\003\022\024\n\014total_a"
    "ttack\030\007 \001(\005\022\013\n\003sex\030\010 \001(\010\"\021\n\017GetAskFriend"
    "Req\"@\n\017GetAskFriendAck\022-\n\004data\030\001 \003(\0132\037.p"
    "rotoc.gameproto.AskFriendData\"9\n\017SearchP"
    "layerReq\022\021\n\tplayer_id\030\001 \001(\004\022\023\n\013player_na"
    "me\030\002 \001(\t\"\205\001\n\017SearchPlayerAck\022\021\n\tplayer_i"
    "d\030\001 \001(\004\022\014\n\004name\030\002 \001(\t\022\017\n\007head_id\030\003 \001(\r\022\r"
    "\n\005level\030\004 \001(\r\022\016\n\006err_no\030\005 \001(\005\022\024\n\014total_a"
    "ttack\030\006 \001(\005\022\013\n\003sex\030\007 \001(\010\"!\n\014AskFriendReq"
    "\022\021\n\tfriend_id\030\001 \001(\004\"1\n\014AskFriendAck\022\021\n\tf"
    "riend_id\030\001 \001(\004\022\016\n\006err_no\030\002 \001(\005\"@\n\017AddAsk"
    "FriendNtf\022-\n\004data\030\001 \001(\0132\037.protoc.gamepro"
    "to.AskFriendData\"/\n\013ReplyAskReq\022\021\n\tfrien"
    "d_id\030\001 \001(\004\022\r\n\005reply\030\002 \001(\010\"0\n\013ReplyAskAck"
    "\022\021\n\tfriend_id\030\001 \001(\004\022\016\n\006err_no\030\002 \001(\005\"\021\n\017N"
    "ewAskFriendNtf\"%\n\024SetAskFriendStateReq\022\r"
    "\n\005bflag\030\001 \001(\010\"5\n\024SetAskFriendStateAck\022\r\n"
    "\005bflag\030\001 \001(\010\022\016\n\006err_no\030\002 \001(\005\"\017\n\rGetChapt"
    "erReq\"p\n\rOneCheckPoint\022\026\n\016check_point_id"
    "\030\001 \001(\005\022\017\n\007seconds\030\002 \001(\005\022\030\n\020challenged_co"
    "unt\030\003 \001(\005\022\034\n\024buy_challenged_count\030\004 \001(\005\""
    "\340\001\n\nOneChapter\022\022\n\nchapter_id\030\001 \001(\005\022/\n\006po"
    "ints\030\002 \003(\0132\037.protoc.gameproto.OneCheckPo"
    "int\022\024\n\014chapter_kind\030\003 \001(\005\022\030\n\020challenged_"
    "count\030\004 \001(\005\022\036\n\026is_active_chapter_open\030\005 "
    "\001(\005\022\033\n\023max_challenge_count\030\006 \001(\005\022\021\n\tlose"
    "_type\030\007 \001(\005\022\r\n\005times\030\010 \001(\002\"\247\002\n\rGetChapte"
    "rAck\022.\n\010chapters\030\001 \003(\0132\034.protoc.gameprot"
    "o.OneChapter\022\022\n\nchapter_id\030\002 \001(\005\022\026\n\016chec"
    "k_point_id\030\003 \001(\005\022\027\n\017next_chapter_id\030\004 \001("
    "\005\022\033\n\023next_check_point_id\030\005 \001(\005\022\033\n\023jingyi"
    "ng_chapter_id\030\006 \001(\005\022\037\n\027jingying_check_po"
    "int_id\030\007 \001(\005\022 \n\030jingying_next_chapter_id"
    "\030\010 \001(\005\022$\n\034jingying_next_check_point_id\030\t"
    " \001(\005\"d\n\026OneChapterLoseActivity\022\024\n\014chapte"
    "r_kind\030\001 \001(\005\022\022\n\nchapter_id\030\002 \001(\005\022\021\n\tlose"
    "_type\030\003 \001(\005\022\r\n\005times\030\004 \001(\002\"\212\001\n\027ChaptersL"
    "oseActivityNtf\022\022\n\nbegin_time\030\001 \001(\003\022\020\n\010en"
    "d_time\030\002 \001(\003\022I\n\027chapter_lose_activities\030"
    "\003 \003(\0132(.protoc.gameproto.OneChapterLoseA"
    "ctivity\"E\n\023AddActiveChapterNtf\022.\n\010chapte"
    "rs\030\001 \003(\0132\034.protoc.gameproto.OneChapter\"\206"
    "\002\n\023UpdateCheckPointNtf\022\022\n\nchapter_id\030\001 \001"
    "(\005\0222\n\tone_point\030\002 \001(\0132\037.protoc.gameproto"
    ".OneCheckPoint\022\027\n\017next_chapter_id\030\003 \001(\005\022"
    "\033\n\023next_check_point_id\030\004 \001(\005\022\024\n\014chapter_"
    "kind\030\005 \001(\005\022\035\n\025jingying_chapter_open\030\006 \001("
    "\005\022\033\n\023jingying_chapter_id\030\007 \001(\005\022\037\n\027jingyi"
    "ng_check_point_id\030\010 \001(\005\"W\n\023SelectCheckPo"
    "intReq\022\022\n\nchapter_id\030\001 \001(\005\022\026\n\016check_poin"
    "t_id\030\002 \001(\005\022\024\n\014chapter_kind\030\003 \001(\005\"\237\001\n\023Sel"
    "ectCheckPointAck\022\022\n\nchapter_id\030\001 \001(\005\022\026\n\016"
    "check_point_id\030\002 \001(\005\022\016\n\006err_no\030\003 \001(\005\022\024\n\014"
    "chapter_kind\030\004 \001(\005\022\030\n\020challenged_count\030\005"
    " \001(\005\022\034\n\024buy_challenged_count\030\006 \001(\005\"X\n\024Ge"
    "tCheckPointRankReq\022\022\n\nchapter_id\030\001 \001(\005\022\026"
    "\n\016check_point_id\030\002 \001(\005\022\024\n\014chapter_kind\030\003"
    " \001(\005\"S\n\016FriendRankItem\022\014\n\004rank\030\001 \001(\005\022\014\n\004"
    "name\030\002 \001(\t\022\017\n\007head_id\030\003 \001(\005\022\024\n\014pass_seco"
    "nds\030\004 \001(\005\"]\n\024GetCheckPointRankAck\0225\n\013fri"
    "end_rank\030\001 \003(\0132 .protoc.gameproto.Friend"
    "RankItem\022\016\n\006err_no\030\002 \001(\005\"\022\n\020GetFriendArm"
    "sReq\"\213\001\n\nFriendArms\022\017\n\007digitid\030\001 \001(\004\022\014\n\004"
    "name\030\002 \001(\t\022(\n\003pet\030\003 \001(\0132\033.protoc.gamepro"
    "to.PetRecord\022\022\n\nfriendship\030\004 \001(\005\022\r\n\005leve"
    "l\030\005 \001(\005\022\021\n\tis_friend\030\006 \001(\010\"N\n\020GetFriendA"
    "rmsAck\022*\n\004pets\030\001 \003(\0132\034.protoc.gameproto."
    "FriendArms\022\016\n\006err_no\030\002 \001(\005\"\036\n\013BeginWarRe"
    "q\022\017\n\007digitid\030\001 \001(\004\"R\n\020MonsterBurstItem\022\022"
    "\n\nmonster_id\030\001 \001(\005\022*\n\004item\030\002 \003(\0132\034.proto"
    "c.gameproto.TeXiaoItem\"T\n\021TreasureBurstI"
    "tem\022\023\n\013treasure_id\030\001 \001(\005\022*\n\004item\030\002 \003(\0132\034"
    ".protoc.gameproto.TeXiaoItem\"\306\001\n\nBufferI"
    "tem\0229\n\002id\030\001 \001(\0162-.protoc.gameproto.Buffe"
    "rItem.BufferEffectType\022\r\n\005value\030\002 \001(\005\"n\n"
    "\020BufferEffectType\022\013\n\007no_type\020\000\022\010\n\004hurt\020\001"
    "\022\t\n\005reply\020\002\022\006\n\002hp\020\003\022\n\n\006spirit\020\004\022\t\n\005speed"
    "\020\005\022\010\n\004crit\020\006\022\017\n\013magic_reply\020\007\"\255\003\n\013BeginW"
    "arAck\022\016\n\006err_no\030\001 \001(\005\022\023\n\013sign_spirit\030\002 \001"
    "(\014\022\017\n\007sign_hp\030\003 \001(\014\022\017\n\007sign_mp\030\004 \001(\014\0225\n\014"
    "sign_my_pets\030\005 \003(\0132\037.protoc.gameproto.Pe"
    "tRecordSIGN\0226\n\rsign_help_pet\030\006 \001(\0132\037.pro"
    "toc.gameproto.PetRecordSIGN\022-\n\010help_pet\030"
    "\007 \001(\0132\033.protoc.gameproto.PetRecord\022*\n\004bu"
    "ff\030\010 \003(\0132\034.protoc.gameproto.BufferItem\0226"
    "\n\nburst_item\030\t \003(\0132\".protoc.gameproto.Mo"
    "nsterBurstItem\022:\n\rtreasure_item\030\n \003(\0132#."
    "protoc.gameproto.TreasureBurstItem\022\031\n\021rn"
    "d_start_war_key\030\013 \001(\005\"+\n\016NowStartWarRpt\022"
    "\031\n\021rnd_start_war_key\030\001 \001(\005\".\n\013DeadMonste"
    "r\022\020\n\010class_id\030\001 \001(\005\022\r\n\005count\030\002 \001(\005\"\201\002\n\014W"
    "arResultReq\022\022\n\nchapter_id\030\001 \001(\005\022\026\n\016check"
    "_point_id\030\002 \001(\005\022\016\n\006result\030\003 \001(\005\022\023\n\013pass_"
    "second\030\004 \001(\005\022\021\n\tsign_ccrp\030\005 \001(\014\022/\n\tpick_"
    "item\030\006 \003(\0132\034.protoc.gameproto.TeXiaoItem"
    "\022/\n\010monsters\030\007 \003(\0132\035.protoc.gameproto.De"
    "adMonster\022\024\n\014chapter_kind\030\010 \001(\005\022\025\n\rbuff_"
    "item_ids\030\t \003(\r\"\251\001\n\014WarResultAck\0220\n\naward"
    "_item\030\001 \003(\0132\034.protoc.gameproto.TeXiaoIte"
    "m\022\023\n\013pass_second\030\002 \001(\003\022\016\n\006err_no\030\003 \001(\005\022\014"
    "\n\004star\030\004 \001(\005\022\016\n\006result\030\005 \001(\005\022\021\n\told_leve"
    "l\030\006 \001(\005\022\021\n\tnew_level\030\007 \001(\005\"\016\n\014DeadInWarN"
    "tf\" \n\014DeadInWarAck\022\020\n\010need_gem\030\001 \001(\005\"\013\n\t"
    "ReviveReq\"\033\n\tReviveAck\022\016\n\006err_no\030\001 \001(\005\"/"
    "\n\rPetUpgradeReq\022\n\n\002id\030\001 \001(\004\022\022\n\ntunshi_pe"
    "t\030\002 \003(\004\"\?\n\rPetUpgradeAck\022\n\n\002id\030\001 \001(\004\022\022\n\n"
    "tunshi_pet\030\002 \003(\004\022\016\n\006err_no\030\003 \001(\005\"\032\n\014PetE"
    "volveReq\022\n\n\002id\030\001 \001(\004\"*\n\014PetEvolveAck\022\n\n\002"
    "id\030\001 \001(\004\022\016\n\006err_no\030\002 \001(\005\"\023\n\021OwnedPetIDLi"
    "stReq\"\037\n\021OwnedPetIDListAck\022\n\n\002id\030\001 \003(\r\"\035"
    "\n\017NewPetOpenedNtf\022\n\n\002id\030\001 \001(\r\"6\n\013ChenJiu"
    "Data\022\n\n\002id\030\001 \001(\r\022\r\n\005value\030\002 \001(\r\022\014\n\004type\030"
    "\003 \001(\r\"H\n\013ChenJiuKind\022\014\n\004kind\030\001 \001(\r\022+\n\004da"
    "ta\030\002 \003(\0132\035.protoc.gameproto.ChenJiuData\""
    "\017\n\rGetChenJiuReq\"<\n\rGetChenJiuAck\022+\n\004kin"
    "d\030\001 \003(\0132\035.protoc.gameproto.ChenJiuKind\"J"
    "\n\rUpdateChenJiu\022\014\n\004kind\030\001 \001(\r\022+\n\004data\030\002 "
    "\001(\0132\035.protoc.gameproto.ChenJiuData\" \n\022Ge"
    "tChenJiuAwardReq\022\n\n\002id\030\001 \001(\r\"0\n\022GetChenJ"
    "iuAwardAck\022\016\n\006err_no\030\001 \001(\005\022\n\n\002id\030\002 \001(\r\"&"
    "\n\030OneKeyGetChenJiuAwardReq\022\n\n\002id\030\001 \003(\r\"\250"
    "\001\n\tQuestData\022\n\n\002id\030\001 \001(\r\022\r\n\005count\030\003 \001(\r\022"
    "\025\n\rcurrent_count\030\004 \001(\r\022\023\n\013is_finished\030\005 "
    "\001(\010\022\022\n\nis_awarded\030\006 \001(\010\022\014\n\004name\030\007 \001(\t\022\014\n"
    "\004desc\030\010 \001(\t\022\r\n\005award\030\t \001(\t\022\025\n\rcategory_n"
    "ame\030\n \001(\t\";\n\017GetQuestListReq\022(\n\006period\030\001"
    " \001(\0162\030.protoc.gameproto.Period\"W\n\017GetQue"
    "stListAck\022)\n\004data\030\001 \003(\0132\033.protoc.gamepro"
    "to.QuestData\022\014\n\004time\030\002 \001(\r\022\013\n\003day\030\003 \001(\r\""
    "\207\001\n\017QuestUpdateData\022\n\n\002id\030\001 \001(\r\022\025\n\rcurre"
    "nt_count\030\002 \001(\r\022\023\n\013is_finished\030\003 \001(\010\022\022\n\ni"
    "s_awarded\030\004 \001(\010\022(\n\006period\030\005 \001(\0162\030.protoc"
    ".gameproto.Period\"A\n\016UpdateQuestNtf\022/\n\004d"
    "ata\030\001 \003(\0132!.protoc.gameproto.QuestUpdate"
    "Data\"\036\n\020GetQuestAwardReq\022\n\n\002id\030\001 \001(\r\"\"\n\020"
    "GetQuestAwardAck\022\016\n\006err_no\030\001 \001(\005\"$\n\026OneK"
    "eyGetQuestAwardReq\022\n\n\002id\030\001 \003(\r\"f\n\017Refres"
    "hQuestNtf\022(\n\006period\030\001 \001(\0162\030.protoc.gamep"
    "roto.Period\022)\n\004data\030\002 \003(\0132\033.protoc.gamep"
    "roto.QuestData\"\022\n\020GetCurPvpDataReq\"\271\001\n\020G"
    "etCurPvpDataAck\022\020\n\010group_id\030\001 \001(\r\022\r\n\005sco"
    "re\030\002 \001(\r\022\021\n\tsum_count\030\003 \001(\r\022\021\n\twin_count"
    "\030\004 \001(\r\022\023\n\013today_count\030\005 \001(\r\022\021\n\thas_award"
    "\030\006 \001(\010\022\017\n\007cd_time\030\007 \001(\003\022\014\n\004rank\030\010 \001(\r\022\027\n"
    "\017today_buy_count\030\t \001(\r\"t\n\007PvpData\022\021\n\tpla"
    "yer_id\030\001 \001(\004\022\014\n\004name\030\002 \001(\t\022\017\n\007head_id\030\003 "
    "\001(\r\022\r\n\005level\030\004 \001(\r\022\r\n\005score\030\005 \001(\r\022\014\n\004ran"
    "k\030\006 \001(\r\022\013\n\003sex\030\007 \001(\010\"\017\n\rGetAllRankReq\"8\n"
    "\rGetAllRankAck\022\'\n\004data\030\001 \003(\0132\031.protoc.ga"
    "meproto.PvpData\"1\n\rPvpFriendData\022\021\n\tplay"
    "er_id\030\001 \001(\004\022\r\n\005score\030\002 \001(\r\"\022\n\020GetFriendR"
    "ankReq\"A\n\020GetFriendRankAck\022-\n\004data\030\001 \003(\013"
    "2\037.protoc.gameproto.PvpFriendData\"\017\n\rGet"
    "SumRankReq\"8\n\rGetSumRankAck\022\'\n\004data\030\001 \003("
    "\0132\031.protoc.gameproto.PvpData\"\017\n\rClearPvp"
    "CDReq\"4\n\rClearPvpCDAck\022\016\n\006err_no\030\001 \001(\005\022\023"
    "\n\013today_count\030\002 \001(\r\"\020\n\016GetPvpAwardReq\" \n"
    "\016GetPvpAwardAck\022\016\n\006err_no\030\001 \001(\005\"\020\n\016PvpWa"
    "rBeginReq\"\227\003\n\016PvpWarBeginAck\022\016\n\006err_no\030\001"
    " \001(\005\022\017\n\007digitid\030\002 \001(\004\022\014\n\004name\030\003 \001(\t\022\r\n\005l"
    "evel\030\004 \001(\005\022\017\n\007head_id\030\005 \001(\r\022/\n\ntarget_pe"
    "t\030\006 \003(\0132\033.protoc.gameproto.PetRecord\0225\n\014"
    "sign_my_pets\030\007 \003(\0132\037.protoc.gameproto.Pe"
    "tRecordSIGN\0228\n\017sign_target_pet\030\010 \003(\0132\037.p"
    "rotoc.gameproto.PetRecordSIGN\022*\n\004buff\030\t "
    "\003(\0132\034.protoc.gameproto.BufferItem\022\031\n\021rnd"
    "_start_war_key\030\n \001(\005\022\024\n\014total_attack\030\013 \001"
    "(\005\022\013\n\003sex\030\014 \001(\010\022*\n\005equip\030\r \003(\0132\033.protoc."
    "gameproto.EquipData\"a\n\017PvpWarResultReq\022\016"
    "\n\006result\030\001 \001(\r\022\020\n\010match_id\030\002 \001(\004\022\031\n\021rnd_"
    "start_war_key\030\003 \001(\005\022\021\n\tsign_ccrp\030\004 \001(\014\"\277"
    "\001\n\017PvpWarResultAck\022\016\n\006err_no\030\001 \001(\005\022\016\n\006re"
    "sult\030\002 \001(\r\022\r\n\005score\030\003 \001(\r\022\021\n\tsum_count\030\004"
    " \001(\r\022\021\n\twin_count\030\005 \001(\r\022\023\n\013today_count\030\006"
    " \001(\r\022\014\n\004rank\030\007 \001(\r\022\021\n\tcur_score\030\010 \001(\r\022\017\n"
    "\007cd_time\030\t \001(\003\022\020\n\010group_id\030\n \001(\r\"\'\n\022Acti"
    "onCountTickNtf\022\021\n\tlast_time\030\001 \001(\003\"1\n\025Cus"
    "tomerServiceUrlNtf\022\013\n\003url\030\001 \001(\t\022\013\n\003key\030\002"
    " \001(\t\"\200\001\n\tSkillPage\022\014\n\004page\030\001 \001(\r\022\035\n\025acti"
    "ve_skill_id_first\030\002 \001(\r\022\036\n\026active_skill_"
    "id_second\030\003 \001(\r\022&\n\005skill\030\004 \003(\0132\027.protoc."
    "gameproto.Skill\"\"\n\005Skill\022\n\n\002id\030\001 \001(\r\022\r\n\005"
    "level\030\002 \001(\r\"\021\n\017GetSkillListReq\"B\n\017GetSki"
    "llListAck\022/\n\nskill_page\030\001 \003(\0132\033.protoc.g"
    "ameproto.SkillPage\"Q\n\020SaveSkillPageReq\022\014"
    "\n\004page\030\001 \001(\r\022/\n\nskill_page\030\002 \001(\0132\033.proto"
    "c.gameproto.SkillPage\"\"\n\020SaveSkillPageAc"
    "k\022\016\n\006err_no\030\001 \001(\005\"a\n\022SaveActiveSkillReq\022"
    "\014\n\004page\030\001 \001(\r\022\035\n\025active_skill_id_first\030\002"
    " \001(\r\022\036\n\026active_skill_id_second\030\003 \001(\r\"$\n\022"
    "SaveActiveSkillAck\022\016\n\006err_no\030\001 \001(\005\";\n\tGo"
    "odsItem\022\014\n\004qwID\030\001 \001(\004\022\020\n\010goods_id\030\002 \001(\r\022"
    "\016\n\006number\030\003 \001(\r\"6\n\tGoodsList\022)\n\004data\030\001 \003"
    "(\0132\033.protoc.gameproto.GoodsItem\"9\n\014AddGo"
    "odsItem\022)\n\004item\030\001 \001(\0132\033.protoc.gameproto"
    ".GoodsItem\"1\n\021UpdateGoodsNumber\022\014\n\004qwid\030"
    "\001 \001(\004\022\016\n\006number\030\002 \001(\r\"j\n\tEquipData\022\014\n\004qw"
    "ID\030\001 \001(\004\022\020\n\010goods_id\030\002 \001(\r\022\013\n\003exp\030\003 \001(\r\022"
    "\r\n\005level\030\004 \001(\r\022\017\n\007hole_id\030\005 \003(\r\022\020\n\010qwpet"
    "_id\030\006 \001(\004\"6\n\tEquipList\022)\n\004data\030\001 \003(\0132\033.p"
    "rotoc.gameproto.EquipData\"5\n\010AddEquip\022)\n"
    "\004data\030\001 \001(\0132\033.protoc.gameproto.EquipData"
    "\"\030\n\010DelEquip\022\014\n\004qwid\030\001 \001(\004\"8\n\013UpdateEqui"
    "p\022)\n\004data\030\001 \001(\0132\033.protoc.gameproto.Equip"
    "Data\"1\n\rPutOnEquipReq\022\016\n\006pet_id\030\001 \001(\004\022\020\n"
    "\010equip_id\030\002 \001(\004\"A\n\rPutOnEquipAck\022\016\n\006err_"
    "no\030\001 \001(\005\022\016\n\006pet_id\030\002 \001(\004\022\020\n\010equip_id\030\003 \001"
    "(\004\"0\n\014TongShiEquip\022\020\n\010equip_id\030\001 \001(\004\022\016\n\006"
    "number\030\002 \001(\r\"R\n\016StrengEquipReq\022\020\n\010equip_"
    "id\030\001 \001(\004\022.\n\006tonshi\030\002 \003(\0132\036.protoc.gamepr"
    "oto.TongShiEquip\"2\n\016StrengEquipAck\022\016\n\006er"
    "r_no\030\001 \001(\005\022\020\n\010equip_id\030\002 \001(\004\"\"\n\016JinJieEq"
    "uipReq\022\020\n\010equip_id\030\001 \001(\004\"2\n\016JinJieEquipA"
    "ck\022\016\n\006err_no\030\001 \001(\005\022\020\n\010equip_id\030\002 \001(\004\"#\n\017"
    "HeChengEquipReq\022\020\n\010goods_id\030\001 \001(\004\"3\n\017HeC"
    "hengEquipAck\022\016\n\006err_no\030\001 \001(\005\022\020\n\010goods_id"
    "\030\002 \001(\004\"0\n\014SellGoodsReq\022\020\n\010goods_id\030\001 \001(\004"
    "\022\016\n\006number\030\002 \001(\r\"@\n\014SellGoodsAck\022\016\n\006err_"
    "no\030\001 \001(\005\022\020\n\010goods_id\030\002 \001(\004\022\016\n\006number\030\003 \001"
    "(\r\"C\n\020EquipSetStoreReq\022\020\n\010equip_id\030\001 \001(\004"
    "\022\020\n\010store_id\030\002 \001(\004\022\013\n\003idx\030\003 \001(\r\"S\n\020Equip"
    "SetStoreAck\022\016\n\006err_no\030\001 \001(\005\022\020\n\010equip_id\030"
    "\002 \001(\004\022\020\n\010store_id\030\003 \001(\004\022\013\n\003idx\030\004 \001(\r\"(\n\014"
    "ShareDataNtf\022\014\n\004kind\030\001 \001(\r\022\n\n\002id\030\002 \001(\r\"\025"
    "\n\023CompleteLoadDataNtf\"!\n\021SetPetNewStateR"
    "eq\022\014\n\004qwid\030\001 \001(\004\"1\n\021SetPetNewStateAck\022\016\n"
    "\006err_no\030\001 \001(\005\022\014\n\004qwid\030\002 \001(\004\"\?\n\025UpdateBuy"
    "ActionCounts\022\022\n\ncur_counts\030\001 \001(\r\022\022\n\nmax_"
    "counts\030\002 \001(\r\"\323\001\n\021PythonMsg_example\022\020\n\010t_"
    "double\030\001 \001(\001\022\017\n\007t_float\030\002 \001(\002\022\017\n\007t_int32"
    "\030\003 \001(\005\022\017\n\007t_int64\030\004 \001(\003\022\020\n\010t_uint32\030\005 \001("
    "\r\022\020\n\010t_uint64\030\006 \001(\004\022\020\n\010t_sint32\030\007 \001(\021\022\020\n"
    "\010t_sint64\030\010 \001(\022\022\016\n\006t_bool\030\t \001(\010\022\020\n\010t_str"
    "ing\030\n \001(\t\022\017\n\007t_bytes\030\013 \001(\014\"(\n\rPythonMess"
    "age\022\n\n\002id\030\001 \001(\005\022\013\n\003msg\030\002 \001(\014\"/\n\013PyChouKa"
    "Req\022\n\n\002id\030\001 \001(\005\022\024\n\006is_one\030\002 \001(\010:\004true\"*\n"
    "\tPyPetInfo\022\016\n\006pet_id\030\001 \001(\r\022\r\n\005level\030\002 \001("
    "\005\"Y\n\013PyChouKaAck\022\016\n\006err_no\030\001 \001(\005\022)\n\004info"
    "\030\002 \003(\0132\033.protoc.gameproto.PyPetInfo\022\017\n\007i"
    "tem_id\030\003 \003(\r\".\n\014PyGenGaoData\022\r\n\005theme\030\001 "
    "\001(\t\022\017\n\007content\030\002 \001(\t\"\020\n\016PyGetGenGaoReq\">"
    "\n\016PyGetGenGaoAck\022,\n\004data\030\001 \003(\0132\036.protoc."
    "gameproto.PyGenGaoData\"\031\n\027PyGetGoodActiv"
    "ePanelReq\"s\n\020PyGoodActiveInfo\022\021\n\tactive_"
    "id\030\001 \001(\r\022\014\n\004type\030\002 \001(\r\022\r\n\005title\030\003 \001(\t\022\020\n"
    "\010desction\030\004 \001(\t\022\016\n\006param1\030\005 \001(\003\022\r\n\005award"
    "\030\006 \001(\t\"N\n\027PyGetGoodActivePanelAck\0223\n\007act"
    "ives\030\001 \003(\0132\".protoc.gameproto.PyGoodActi"
    "veInfo\"(\n\023PyGetActiveAwardReq\022\021\n\tactive_"
    "id\030\001 \001(\r\"8\n\023PyGetActiveAwardAck\022\021\n\tactiv"
    "e_id\030\001 \001(\r\022\016\n\006err_no\030\002 \001(\005\"F\n\024PyEveryDat"
    "aActiveNtf\022\022\n\nstr_awards\030\001 \001(\t\022\014\n\004days\030\002"
    " \001(\r\022\014\n\004type\030\003 \001(\r\"(\n\022PySaveGuideStepReq"
    "\022\022\n\nguide_step\030\001 \001(\t\"8\n\022PySaveGuideStepA"
    "ck\022\022\n\nguide_step\030\001 \001(\t\022\016\n\006err_no\030\002 \001(\005\"d"
    "\n PyBuyCheckPointChallengeCountReq\022\024\n\014ch"
    "pater_kind\030\001 \001(\005\022\022\n\nchapter_id\030\002 \001(\005\022\026\n\016"
    "check_point_id\030\003 \001(\005\"\243\001\n PyBuyCheckPoint"
    "ChallengeCountAck\022\024\n\014chpater_kind\030\001 \001(\005\022"
    "\022\n\nchapter_id\030\002 \001(\005\022\026\n\016check_point_id\030\003 "
    "\001(\005\022\031\n\021challenged_counts\030\004 \001(\005\022\022\n\nbuy_co"
    "unts\030\005 \001(\005\022\016\n\006err_no\030\006 \001(\005*G\n\rCHAT_MSG_T"
    "YPE\022\022\n\016E_PRIVATE_TALK\020\000\022\020\n\014E_UNION_TALK\020"
    "\001\022\020\n\014E_WORLD_TALK\020\002*n\n\022CHAT_MSG_NODE_TYP"
    "E\022\n\n\006E_TEXT\020\000\022\024\n\020E_PLAYER_ID_NAME\020\001\022\016\n\nE"
    "_PRIORITY\020\020\022\022\n\016E_REPEAT_COUNT\020\021\022\022\n\016E_RON"
    "GHUN_KIND\020\022*\211\001\n\017SYSTEM_MSG_TYPE\022\021\n\rE_NOR"
    "MALL_MSG\020\000\022\014\n\010E_GM_MSG\020\001\022\025\n\021E_PLAYERTOAL"
    "L_MSG\020\002\022\023\n\017E_PAOMADENG_MSG\020\003\022\023\n\017E_GM_Urg"
    "ent_Msg\020\004\022\024\n\020E_POP_NORMAL_MSG\020\005*O\n\013TEXIA"
    "O_TYPE\022\024\n\020e_default_texiao\020\000\022\027\n\023e_jinyin"
    "gdai_texiao\020\001\022\021\n\re_show_li_bao\020\002*W\n\020Comm"
    "onDialogType\022\021\n\rE_ONLY_OK_BTN\020\001\022\024\n\020E_BOT"
    "H_OK_CANCEL\020\002\022\032\n\026E_BOTH_OK_CANCEL_INPUT\020"
    "\003*5\n\014PET_POSITION\022\022\n\016e_pet_in_group\020\000\022\021\n"
    "\re_pet_in_sell\020\001*3\n\tBUFF_TYPE\022\022\n\016E_BUFFT"
    "YPE_PVE\020\000\022\022\n\016E_BUFFTYPE_PVP\020\001*E\n\tSELL_TY"
    "PE\022\n\n\006E_GOLD\020\000\022\t\n\005E_GEM\020\001\022\026\n\022E_FRIENDSHI"
    "P_POINT\020\002\022\t\n\005E_RMB\020\003*\?\n\006Period\022\n\n\006E_NONE"
    "\020\000\022\013\n\007E_DAILY\020\001\022\014\n\010E_WEEKLY\020\002\022\016\n\nE_FESTI"
    "VAL\020\003", 20165);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gameserver_gate_client.proto", &protobuf_RegisterTypes);
  ClientLoginGateReq::default_instance_ = new ClientLoginGateReq();
  ClientLoginGateAck::default_instance_ = new ClientLoginGateAck();
  ClientLoginAgainGateReq::default_instance_ = new ClientLoginAgainGateReq();
  ClientLoginAgainGateAck::default_instance_ = new ClientLoginAgainGateAck();
  ClientLeaveGameReq::default_instance_ = new ClientLeaveGameReq();
  ClientLeaveGameAck::default_instance_ = new ClientLeaveGameAck();
  SysErrorNtf::default_instance_ = new SysErrorNtf();
  KeepClientAlive::default_instance_ = new KeepClientAlive();
  KeepClientAliveAck::default_instance_ = new KeepClientAliveAck();
  TestReq::default_instance_ = new TestReq();
  TestAck::default_instance_ = new TestAck();
  PlayerBaseData::default_instance_ = new PlayerBaseData();
  MsgNodeText::default_instance_ = new MsgNodeText();
  UniqueID::default_instance_ = new UniqueID();
  Priority::default_instance_ = new Priority();
  RepeatCount::default_instance_ = new RepeatCount();
  MsgNodePlayerIDName::default_instance_ = new MsgNodePlayerIDName();
  MessageRepeateNode::default_instance_ = new MessageRepeateNode();
  MessageNode::default_instance_ = new MessageNode();
  ChatRpt::default_instance_ = new ChatRpt();
  ChatNtf::default_instance_ = new ChatNtf();
  GSChatNtf::default_instance_ = new GSChatNtf();
  GSSystemMessageNtf::default_instance_ = new GSSystemMessageNtf();
  SystemMessage::default_instance_ = new SystemMessage();
  GMExecuteResult::default_instance_ = new GMExecuteResult();
  TeXiaoItem::default_instance_ = new TeXiaoItem();
  TeXiao::default_instance_ = new TeXiao();
  TeXiaoTypeNtf::default_instance_ = new TeXiaoTypeNtf();
  GetKeyAwardReq::default_instance_ = new GetKeyAwardReq();
  GetKeyAwardAck::default_instance_ = new GetKeyAwardAck();
  NeedCreatePlayerName::default_instance_ = new NeedCreatePlayerName();
  CreatePlayerNameReq::default_instance_ = new CreatePlayerNameReq();
  CreatePlayerNameAck::default_instance_ = new CreatePlayerNameAck();
  ShangChengGoods::default_instance_ = new ShangChengGoods();
  LabelShangChengGoods::default_instance_ = new LabelShangChengGoods();
  GetShangChengGoodsListAck::default_instance_ = new GetShangChengGoodsListAck();
  GetShangChengGoodsListReq::default_instance_ = new GetShangChengGoodsListReq();
  CommonDialog::default_instance_ = new CommonDialog();
  GetGMAward::default_instance_ = new GetGMAward();
  GetGMAwardAck::default_instance_ = new GetGMAwardAck();
  UpdateExp::default_instance_ = new UpdateExp();
  UpdateGold::default_instance_ = new UpdateGold();
  UpdateLevel::default_instance_ = new UpdateLevel();
  UpdateYuanBao::default_instance_ = new UpdateYuanBao();
  PetRecord::default_instance_ = new PetRecord();
  PetRecordSIGN::default_instance_ = new PetRecordSIGN();
  AddPet::default_instance_ = new AddPet();
  DelPet::default_instance_ = new DelPet();
  UpdatePet::default_instance_ = new UpdatePet();
  PetList::default_instance_ = new PetList();
  SystemData::default_instance_ = new SystemData();
  GetAllSysMsgReq::default_instance_ = new GetAllSysMsgReq();
  GetAllSysMsgAck::default_instance_ = new GetAllSysMsgAck();
  DeleteSysMsgReq::default_instance_ = new DeleteSysMsgReq();
  DeleteSysMsgAck::default_instance_ = new DeleteSysMsgAck();
  SendSysMsgReq::default_instance_ = new SendSysMsgReq();
  SendSysMsgAck::default_instance_ = new SendSysMsgAck();
  ReadSysMsgReq::default_instance_ = new ReadSysMsgReq();
  ReadSysMsgAck::default_instance_ = new ReadSysMsgAck();
  GetEmailAwardReq::default_instance_ = new GetEmailAwardReq();
  GetEmailAwardAck::default_instance_ = new GetEmailAwardAck();
  OneKeyGetEmailAwardReq::default_instance_ = new OneKeyGetEmailAwardReq();
  EmailMessageNtf::default_instance_ = new EmailMessageNtf();
  ProtectPetReq::default_instance_ = new ProtectPetReq();
  ProtectPetAck::default_instance_ = new ProtectPetAck();
  SellPetToSysReq::default_instance_ = new SellPetToSysReq();
  SellPetToSysAck::default_instance_ = new SellPetToSysAck();
  PetInBianDui::default_instance_ = new PetInBianDui();
  BianDuiData::default_instance_ = new BianDuiData();
  BianDuiList::default_instance_ = new BianDuiList();
  SubBianDuiReq::default_instance_ = new SubBianDuiReq();
  SubBianDuiAck::default_instance_ = new SubBianDuiAck();
  ModifyBianDuiNameReq::default_instance_ = new ModifyBianDuiNameReq();
  ModifyBianDuiNameAck::default_instance_ = new ModifyBianDuiNameAck();
  ModifyBIanDuiDataReq::default_instance_ = new ModifyBIanDuiDataReq();
  ModifyBIanDuiDataAck::default_instance_ = new ModifyBIanDuiDataAck();
  BianDuiNtf::default_instance_ = new BianDuiNtf();
  AddBianDui::default_instance_ = new AddBianDui();
  GetCurBianDuiReq::default_instance_ = new GetCurBianDuiReq();
  GetCurBianDuiAck::default_instance_ = new GetCurBianDuiAck();
  SetCurBianDuiReq::default_instance_ = new SetCurBianDuiReq();
  SetCurBianDuiAck::default_instance_ = new SetCurBianDuiAck();
  AddPetToBianDuiReq::default_instance_ = new AddPetToBianDuiReq();
  AddPetToBianDuiAck::default_instance_ = new AddPetToBianDuiAck();
  DelPetToBianDuiReq::default_instance_ = new DelPetToBianDuiReq();
  DelPetToBianDuiAck::default_instance_ = new DelPetToBianDuiAck();
  AddPetMaxNumberReq::default_instance_ = new AddPetMaxNumberReq();
  AddPetMaxNumberAck::default_instance_ = new AddPetMaxNumberAck();
  AddQueueMaxNumberReq::default_instance_ = new AddQueueMaxNumberReq();
  AddQueueMaxNumberAck::default_instance_ = new AddQueueMaxNumberAck();
  PetMaxNumberNtf::default_instance_ = new PetMaxNumberNtf();
  QueueMaxNumberNtf::default_instance_ = new QueueMaxNumberNtf();
  UpdateCurBianDuiIdx::default_instance_ = new UpdateCurBianDuiIdx();
  RecoverActiveCountReq::default_instance_ = new RecoverActiveCountReq();
  RecoverActiveCountAck::default_instance_ = new RecoverActiveCountAck();
  ActiveCountNtf::default_instance_ = new ActiveCountNtf();
  SpiritNtf::default_instance_ = new SpiritNtf();
  UpdateHp::default_instance_ = new UpdateHp();
  UpdateMp::default_instance_ = new UpdateMp();
  GoodsOfSell::default_instance_ = new GoodsOfSell();
  GetShopListReq::default_instance_ = new GetShopListReq();
  GetShopListAck::default_instance_ = new GetShopListAck();
  ShoppingReq::default_instance_ = new ShoppingReq();
  ShoppingAck::default_instance_ = new ShoppingAck();
  UpdateVIPLevel::default_instance_ = new UpdateVIPLevel();
  UpdateFriendShip::default_instance_ = new UpdateFriendShip();
  ChongZhiOrderNtf::default_instance_ = new ChongZhiOrderNtf();
  BuffItemListReq::default_instance_ = new BuffItemListReq();
  BuffItemListAck::default_instance_ = new BuffItemListAck();
  BuffItemBuyReq::default_instance_ = new BuffItemBuyReq();
  BuffItemInfo::default_instance_ = new BuffItemInfo();
  RandomItemListReq::default_instance_ = new RandomItemListReq();
  RandomItemListAck::default_instance_ = new RandomItemListAck();
  RandomItemBuyReq::default_instance_ = new RandomItemBuyReq();
  FriendData::default_instance_ = new FriendData();
  FriendList::default_instance_ = new FriendList();
  UpdateFriend::default_instance_ = new UpdateFriend();
  DelFriendReq::default_instance_ = new DelFriendReq();
  DelFriendAck::default_instance_ = new DelFriendAck();
  DelFriendNtf::default_instance_ = new DelFriendNtf();
  VisitFriendReq::default_instance_ = new VisitFriendReq();
  VisitFriendAck::default_instance_ = new VisitFriendAck();
  AskFriendData::default_instance_ = new AskFriendData();
  GetAskFriendReq::default_instance_ = new GetAskFriendReq();
  GetAskFriendAck::default_instance_ = new GetAskFriendAck();
  SearchPlayerReq::default_instance_ = new SearchPlayerReq();
  SearchPlayerAck::default_instance_ = new SearchPlayerAck();
  AskFriendReq::default_instance_ = new AskFriendReq();
  AskFriendAck::default_instance_ = new AskFriendAck();
  AddAskFriendNtf::default_instance_ = new AddAskFriendNtf();
  ReplyAskReq::default_instance_ = new ReplyAskReq();
  ReplyAskAck::default_instance_ = new ReplyAskAck();
  NewAskFriendNtf::default_instance_ = new NewAskFriendNtf();
  SetAskFriendStateReq::default_instance_ = new SetAskFriendStateReq();
  SetAskFriendStateAck::default_instance_ = new SetAskFriendStateAck();
  GetChapterReq::default_instance_ = new GetChapterReq();
  OneCheckPoint::default_instance_ = new OneCheckPoint();
  OneChapter::default_instance_ = new OneChapter();
  GetChapterAck::default_instance_ = new GetChapterAck();
  OneChapterLoseActivity::default_instance_ = new OneChapterLoseActivity();
  ChaptersLoseActivityNtf::default_instance_ = new ChaptersLoseActivityNtf();
  AddActiveChapterNtf::default_instance_ = new AddActiveChapterNtf();
  UpdateCheckPointNtf::default_instance_ = new UpdateCheckPointNtf();
  SelectCheckPointReq::default_instance_ = new SelectCheckPointReq();
  SelectCheckPointAck::default_instance_ = new SelectCheckPointAck();
  GetCheckPointRankReq::default_instance_ = new GetCheckPointRankReq();
  FriendRankItem::default_instance_ = new FriendRankItem();
  GetCheckPointRankAck::default_instance_ = new GetCheckPointRankAck();
  GetFriendArmsReq::default_instance_ = new GetFriendArmsReq();
  FriendArms::default_instance_ = new FriendArms();
  GetFriendArmsAck::default_instance_ = new GetFriendArmsAck();
  BeginWarReq::default_instance_ = new BeginWarReq();
  MonsterBurstItem::default_instance_ = new MonsterBurstItem();
  TreasureBurstItem::default_instance_ = new TreasureBurstItem();
  BufferItem::default_instance_ = new BufferItem();
  BeginWarAck::default_instance_ = new BeginWarAck();
  NowStartWarRpt::default_instance_ = new NowStartWarRpt();
  DeadMonster::default_instance_ = new DeadMonster();
  WarResultReq::default_instance_ = new WarResultReq();
  WarResultAck::default_instance_ = new WarResultAck();
  DeadInWarNtf::default_instance_ = new DeadInWarNtf();
  DeadInWarAck::default_instance_ = new DeadInWarAck();
  ReviveReq::default_instance_ = new ReviveReq();
  ReviveAck::default_instance_ = new ReviveAck();
  PetUpgradeReq::default_instance_ = new PetUpgradeReq();
  PetUpgradeAck::default_instance_ = new PetUpgradeAck();
  PetEvolveReq::default_instance_ = new PetEvolveReq();
  PetEvolveAck::default_instance_ = new PetEvolveAck();
  OwnedPetIDListReq::default_instance_ = new OwnedPetIDListReq();
  OwnedPetIDListAck::default_instance_ = new OwnedPetIDListAck();
  NewPetOpenedNtf::default_instance_ = new NewPetOpenedNtf();
  ChenJiuData::default_instance_ = new ChenJiuData();
  ChenJiuKind::default_instance_ = new ChenJiuKind();
  GetChenJiuReq::default_instance_ = new GetChenJiuReq();
  GetChenJiuAck::default_instance_ = new GetChenJiuAck();
  UpdateChenJiu::default_instance_ = new UpdateChenJiu();
  GetChenJiuAwardReq::default_instance_ = new GetChenJiuAwardReq();
  GetChenJiuAwardAck::default_instance_ = new GetChenJiuAwardAck();
  OneKeyGetChenJiuAwardReq::default_instance_ = new OneKeyGetChenJiuAwardReq();
  QuestData::default_instance_ = new QuestData();
  GetQuestListReq::default_instance_ = new GetQuestListReq();
  GetQuestListAck::default_instance_ = new GetQuestListAck();
  QuestUpdateData::default_instance_ = new QuestUpdateData();
  UpdateQuestNtf::default_instance_ = new UpdateQuestNtf();
  GetQuestAwardReq::default_instance_ = new GetQuestAwardReq();
  GetQuestAwardAck::default_instance_ = new GetQuestAwardAck();
  OneKeyGetQuestAwardReq::default_instance_ = new OneKeyGetQuestAwardReq();
  RefreshQuestNtf::default_instance_ = new RefreshQuestNtf();
  GetCurPvpDataReq::default_instance_ = new GetCurPvpDataReq();
  GetCurPvpDataAck::default_instance_ = new GetCurPvpDataAck();
  PvpData::default_instance_ = new PvpData();
  GetAllRankReq::default_instance_ = new GetAllRankReq();
  GetAllRankAck::default_instance_ = new GetAllRankAck();
  PvpFriendData::default_instance_ = new PvpFriendData();
  GetFriendRankReq::default_instance_ = new GetFriendRankReq();
  GetFriendRankAck::default_instance_ = new GetFriendRankAck();
  GetSumRankReq::default_instance_ = new GetSumRankReq();
  GetSumRankAck::default_instance_ = new GetSumRankAck();
  ClearPvpCDReq::default_instance_ = new ClearPvpCDReq();
  ClearPvpCDAck::default_instance_ = new ClearPvpCDAck();
  GetPvpAwardReq::default_instance_ = new GetPvpAwardReq();
  GetPvpAwardAck::default_instance_ = new GetPvpAwardAck();
  PvpWarBeginReq::default_instance_ = new PvpWarBeginReq();
  PvpWarBeginAck::default_instance_ = new PvpWarBeginAck();
  PvpWarResultReq::default_instance_ = new PvpWarResultReq();
  PvpWarResultAck::default_instance_ = new PvpWarResultAck();
  ActionCountTickNtf::default_instance_ = new ActionCountTickNtf();
  CustomerServiceUrlNtf::default_instance_ = new CustomerServiceUrlNtf();
  SkillPage::default_instance_ = new SkillPage();
  Skill::default_instance_ = new Skill();
  GetSkillListReq::default_instance_ = new GetSkillListReq();
  GetSkillListAck::default_instance_ = new GetSkillListAck();
  SaveSkillPageReq::default_instance_ = new SaveSkillPageReq();
  SaveSkillPageAck::default_instance_ = new SaveSkillPageAck();
  SaveActiveSkillReq::default_instance_ = new SaveActiveSkillReq();
  SaveActiveSkillAck::default_instance_ = new SaveActiveSkillAck();
  GoodsItem::default_instance_ = new GoodsItem();
  GoodsList::default_instance_ = new GoodsList();
  AddGoodsItem::default_instance_ = new AddGoodsItem();
  UpdateGoodsNumber::default_instance_ = new UpdateGoodsNumber();
  EquipData::default_instance_ = new EquipData();
  EquipList::default_instance_ = new EquipList();
  AddEquip::default_instance_ = new AddEquip();
  DelEquip::default_instance_ = new DelEquip();
  UpdateEquip::default_instance_ = new UpdateEquip();
  PutOnEquipReq::default_instance_ = new PutOnEquipReq();
  PutOnEquipAck::default_instance_ = new PutOnEquipAck();
  TongShiEquip::default_instance_ = new TongShiEquip();
  StrengEquipReq::default_instance_ = new StrengEquipReq();
  StrengEquipAck::default_instance_ = new StrengEquipAck();
  JinJieEquipReq::default_instance_ = new JinJieEquipReq();
  JinJieEquipAck::default_instance_ = new JinJieEquipAck();
  HeChengEquipReq::default_instance_ = new HeChengEquipReq();
  HeChengEquipAck::default_instance_ = new HeChengEquipAck();
  SellGoodsReq::default_instance_ = new SellGoodsReq();
  SellGoodsAck::default_instance_ = new SellGoodsAck();
  EquipSetStoreReq::default_instance_ = new EquipSetStoreReq();
  EquipSetStoreAck::default_instance_ = new EquipSetStoreAck();
  ShareDataNtf::default_instance_ = new ShareDataNtf();
  CompleteLoadDataNtf::default_instance_ = new CompleteLoadDataNtf();
  SetPetNewStateReq::default_instance_ = new SetPetNewStateReq();
  SetPetNewStateAck::default_instance_ = new SetPetNewStateAck();
  UpdateBuyActionCounts::default_instance_ = new UpdateBuyActionCounts();
  PythonMsg_example::default_instance_ = new PythonMsg_example();
  PythonMessage::default_instance_ = new PythonMessage();
  PyChouKaReq::default_instance_ = new PyChouKaReq();
  PyPetInfo::default_instance_ = new PyPetInfo();
  PyChouKaAck::default_instance_ = new PyChouKaAck();
  PyGenGaoData::default_instance_ = new PyGenGaoData();
  PyGetGenGaoReq::default_instance_ = new PyGetGenGaoReq();
  PyGetGenGaoAck::default_instance_ = new PyGetGenGaoAck();
  PyGetGoodActivePanelReq::default_instance_ = new PyGetGoodActivePanelReq();
  PyGoodActiveInfo::default_instance_ = new PyGoodActiveInfo();
  PyGetGoodActivePanelAck::default_instance_ = new PyGetGoodActivePanelAck();
  PyGetActiveAwardReq::default_instance_ = new PyGetActiveAwardReq();
  PyGetActiveAwardAck::default_instance_ = new PyGetActiveAwardAck();
  PyEveryDataActiveNtf::default_instance_ = new PyEveryDataActiveNtf();
  PySaveGuideStepReq::default_instance_ = new PySaveGuideStepReq();
  PySaveGuideStepAck::default_instance_ = new PySaveGuideStepAck();
  PyBuyCheckPointChallengeCountReq::default_instance_ = new PyBuyCheckPointChallengeCountReq();
  PyBuyCheckPointChallengeCountAck::default_instance_ = new PyBuyCheckPointChallengeCountAck();
  ClientLoginGateReq::default_instance_->InitAsDefaultInstance();
  ClientLoginGateAck::default_instance_->InitAsDefaultInstance();
  ClientLoginAgainGateReq::default_instance_->InitAsDefaultInstance();
  ClientLoginAgainGateAck::default_instance_->InitAsDefaultInstance();
  ClientLeaveGameReq::default_instance_->InitAsDefaultInstance();
  ClientLeaveGameAck::default_instance_->InitAsDefaultInstance();
  SysErrorNtf::default_instance_->InitAsDefaultInstance();
  KeepClientAlive::default_instance_->InitAsDefaultInstance();
  KeepClientAliveAck::default_instance_->InitAsDefaultInstance();
  TestReq::default_instance_->InitAsDefaultInstance();
  TestAck::default_instance_->InitAsDefaultInstance();
  PlayerBaseData::default_instance_->InitAsDefaultInstance();
  MsgNodeText::default_instance_->InitAsDefaultInstance();
  UniqueID::default_instance_->InitAsDefaultInstance();
  Priority::default_instance_->InitAsDefaultInstance();
  RepeatCount::default_instance_->InitAsDefaultInstance();
  MsgNodePlayerIDName::default_instance_->InitAsDefaultInstance();
  MessageRepeateNode::default_instance_->InitAsDefaultInstance();
  MessageNode::default_instance_->InitAsDefaultInstance();
  ChatRpt::default_instance_->InitAsDefaultInstance();
  ChatNtf::default_instance_->InitAsDefaultInstance();
  GSChatNtf::default_instance_->InitAsDefaultInstance();
  GSSystemMessageNtf::default_instance_->InitAsDefaultInstance();
  SystemMessage::default_instance_->InitAsDefaultInstance();
  GMExecuteResult::default_instance_->InitAsDefaultInstance();
  TeXiaoItem::default_instance_->InitAsDefaultInstance();
  TeXiao::default_instance_->InitAsDefaultInstance();
  TeXiaoTypeNtf::default_instance_->InitAsDefaultInstance();
  GetKeyAwardReq::default_instance_->InitAsDefaultInstance();
  GetKeyAwardAck::default_instance_->InitAsDefaultInstance();
  NeedCreatePlayerName::default_instance_->InitAsDefaultInstance();
  CreatePlayerNameReq::default_instance_->InitAsDefaultInstance();
  CreatePlayerNameAck::default_instance_->InitAsDefaultInstance();
  ShangChengGoods::default_instance_->InitAsDefaultInstance();
  LabelShangChengGoods::default_instance_->InitAsDefaultInstance();
  GetShangChengGoodsListAck::default_instance_->InitAsDefaultInstance();
  GetShangChengGoodsListReq::default_instance_->InitAsDefaultInstance();
  CommonDialog::default_instance_->InitAsDefaultInstance();
  GetGMAward::default_instance_->InitAsDefaultInstance();
  GetGMAwardAck::default_instance_->InitAsDefaultInstance();
  UpdateExp::default_instance_->InitAsDefaultInstance();
  UpdateGold::default_instance_->InitAsDefaultInstance();
  UpdateLevel::default_instance_->InitAsDefaultInstance();
  UpdateYuanBao::default_instance_->InitAsDefaultInstance();
  PetRecord::default_instance_->InitAsDefaultInstance();
  PetRecordSIGN::default_instance_->InitAsDefaultInstance();
  AddPet::default_instance_->InitAsDefaultInstance();
  DelPet::default_instance_->InitAsDefaultInstance();
  UpdatePet::default_instance_->InitAsDefaultInstance();
  PetList::default_instance_->InitAsDefaultInstance();
  SystemData::default_instance_->InitAsDefaultInstance();
  GetAllSysMsgReq::default_instance_->InitAsDefaultInstance();
  GetAllSysMsgAck::default_instance_->InitAsDefaultInstance();
  DeleteSysMsgReq::default_instance_->InitAsDefaultInstance();
  DeleteSysMsgAck::default_instance_->InitAsDefaultInstance();
  SendSysMsgReq::default_instance_->InitAsDefaultInstance();
  SendSysMsgAck::default_instance_->InitAsDefaultInstance();
  ReadSysMsgReq::default_instance_->InitAsDefaultInstance();
  ReadSysMsgAck::default_instance_->InitAsDefaultInstance();
  GetEmailAwardReq::default_instance_->InitAsDefaultInstance();
  GetEmailAwardAck::default_instance_->InitAsDefaultInstance();
  OneKeyGetEmailAwardReq::default_instance_->InitAsDefaultInstance();
  EmailMessageNtf::default_instance_->InitAsDefaultInstance();
  ProtectPetReq::default_instance_->InitAsDefaultInstance();
  ProtectPetAck::default_instance_->InitAsDefaultInstance();
  SellPetToSysReq::default_instance_->InitAsDefaultInstance();
  SellPetToSysAck::default_instance_->InitAsDefaultInstance();
  PetInBianDui::default_instance_->InitAsDefaultInstance();
  BianDuiData::default_instance_->InitAsDefaultInstance();
  BianDuiList::default_instance_->InitAsDefaultInstance();
  SubBianDuiReq::default_instance_->InitAsDefaultInstance();
  SubBianDuiAck::default_instance_->InitAsDefaultInstance();
  ModifyBianDuiNameReq::default_instance_->InitAsDefaultInstance();
  ModifyBianDuiNameAck::default_instance_->InitAsDefaultInstance();
  ModifyBIanDuiDataReq::default_instance_->InitAsDefaultInstance();
  ModifyBIanDuiDataAck::default_instance_->InitAsDefaultInstance();
  BianDuiNtf::default_instance_->InitAsDefaultInstance();
  AddBianDui::default_instance_->InitAsDefaultInstance();
  GetCurBianDuiReq::default_instance_->InitAsDefaultInstance();
  GetCurBianDuiAck::default_instance_->InitAsDefaultInstance();
  SetCurBianDuiReq::default_instance_->InitAsDefaultInstance();
  SetCurBianDuiAck::default_instance_->InitAsDefaultInstance();
  AddPetToBianDuiReq::default_instance_->InitAsDefaultInstance();
  AddPetToBianDuiAck::default_instance_->InitAsDefaultInstance();
  DelPetToBianDuiReq::default_instance_->InitAsDefaultInstance();
  DelPetToBianDuiAck::default_instance_->InitAsDefaultInstance();
  AddPetMaxNumberReq::default_instance_->InitAsDefaultInstance();
  AddPetMaxNumberAck::default_instance_->InitAsDefaultInstance();
  AddQueueMaxNumberReq::default_instance_->InitAsDefaultInstance();
  AddQueueMaxNumberAck::default_instance_->InitAsDefaultInstance();
  PetMaxNumberNtf::default_instance_->InitAsDefaultInstance();
  QueueMaxNumberNtf::default_instance_->InitAsDefaultInstance();
  UpdateCurBianDuiIdx::default_instance_->InitAsDefaultInstance();
  RecoverActiveCountReq::default_instance_->InitAsDefaultInstance();
  RecoverActiveCountAck::default_instance_->InitAsDefaultInstance();
  ActiveCountNtf::default_instance_->InitAsDefaultInstance();
  SpiritNtf::default_instance_->InitAsDefaultInstance();
  UpdateHp::default_instance_->InitAsDefaultInstance();
  UpdateMp::default_instance_->InitAsDefaultInstance();
  GoodsOfSell::default_instance_->InitAsDefaultInstance();
  GetShopListReq::default_instance_->InitAsDefaultInstance();
  GetShopListAck::default_instance_->InitAsDefaultInstance();
  ShoppingReq::default_instance_->InitAsDefaultInstance();
  ShoppingAck::default_instance_->InitAsDefaultInstance();
  UpdateVIPLevel::default_instance_->InitAsDefaultInstance();
  UpdateFriendShip::default_instance_->InitAsDefaultInstance();
  ChongZhiOrderNtf::default_instance_->InitAsDefaultInstance();
  BuffItemListReq::default_instance_->InitAsDefaultInstance();
  BuffItemListAck::default_instance_->InitAsDefaultInstance();
  BuffItemBuyReq::default_instance_->InitAsDefaultInstance();
  BuffItemInfo::default_instance_->InitAsDefaultInstance();
  RandomItemListReq::default_instance_->InitAsDefaultInstance();
  RandomItemListAck::default_instance_->InitAsDefaultInstance();
  RandomItemBuyReq::default_instance_->InitAsDefaultInstance();
  FriendData::default_instance_->InitAsDefaultInstance();
  FriendList::default_instance_->InitAsDefaultInstance();
  UpdateFriend::default_instance_->InitAsDefaultInstance();
  DelFriendReq::default_instance_->InitAsDefaultInstance();
  DelFriendAck::default_instance_->InitAsDefaultInstance();
  DelFriendNtf::default_instance_->InitAsDefaultInstance();
  VisitFriendReq::default_instance_->InitAsDefaultInstance();
  VisitFriendAck::default_instance_->InitAsDefaultInstance();
  AskFriendData::default_instance_->InitAsDefaultInstance();
  GetAskFriendReq::default_instance_->InitAsDefaultInstance();
  GetAskFriendAck::default_instance_->InitAsDefaultInstance();
  SearchPlayerReq::default_instance_->InitAsDefaultInstance();
  SearchPlayerAck::default_instance_->InitAsDefaultInstance();
  AskFriendReq::default_instance_->InitAsDefaultInstance();
  AskFriendAck::default_instance_->InitAsDefaultInstance();
  AddAskFriendNtf::default_instance_->InitAsDefaultInstance();
  ReplyAskReq::default_instance_->InitAsDefaultInstance();
  ReplyAskAck::default_instance_->InitAsDefaultInstance();
  NewAskFriendNtf::default_instance_->InitAsDefaultInstance();
  SetAskFriendStateReq::default_instance_->InitAsDefaultInstance();
  SetAskFriendStateAck::default_instance_->InitAsDefaultInstance();
  GetChapterReq::default_instance_->InitAsDefaultInstance();
  OneCheckPoint::default_instance_->InitAsDefaultInstance();
  OneChapter::default_instance_->InitAsDefaultInstance();
  GetChapterAck::default_instance_->InitAsDefaultInstance();
  OneChapterLoseActivity::default_instance_->InitAsDefaultInstance();
  ChaptersLoseActivityNtf::default_instance_->InitAsDefaultInstance();
  AddActiveChapterNtf::default_instance_->InitAsDefaultInstance();
  UpdateCheckPointNtf::default_instance_->InitAsDefaultInstance();
  SelectCheckPointReq::default_instance_->InitAsDefaultInstance();
  SelectCheckPointAck::default_instance_->InitAsDefaultInstance();
  GetCheckPointRankReq::default_instance_->InitAsDefaultInstance();
  FriendRankItem::default_instance_->InitAsDefaultInstance();
  GetCheckPointRankAck::default_instance_->InitAsDefaultInstance();
  GetFriendArmsReq::default_instance_->InitAsDefaultInstance();
  FriendArms::default_instance_->InitAsDefaultInstance();
  GetFriendArmsAck::default_instance_->InitAsDefaultInstance();
  BeginWarReq::default_instance_->InitAsDefaultInstance();
  MonsterBurstItem::default_instance_->InitAsDefaultInstance();
  TreasureBurstItem::default_instance_->InitAsDefaultInstance();
  BufferItem::default_instance_->InitAsDefaultInstance();
  BeginWarAck::default_instance_->InitAsDefaultInstance();
  NowStartWarRpt::default_instance_->InitAsDefaultInstance();
  DeadMonster::default_instance_->InitAsDefaultInstance();
  WarResultReq::default_instance_->InitAsDefaultInstance();
  WarResultAck::default_instance_->InitAsDefaultInstance();
  DeadInWarNtf::default_instance_->InitAsDefaultInstance();
  DeadInWarAck::default_instance_->InitAsDefaultInstance();
  ReviveReq::default_instance_->InitAsDefaultInstance();
  ReviveAck::default_instance_->InitAsDefaultInstance();
  PetUpgradeReq::default_instance_->InitAsDefaultInstance();
  PetUpgradeAck::default_instance_->InitAsDefaultInstance();
  PetEvolveReq::default_instance_->InitAsDefaultInstance();
  PetEvolveAck::default_instance_->InitAsDefaultInstance();
  OwnedPetIDListReq::default_instance_->InitAsDefaultInstance();
  OwnedPetIDListAck::default_instance_->InitAsDefaultInstance();
  NewPetOpenedNtf::default_instance_->InitAsDefaultInstance();
  ChenJiuData::default_instance_->InitAsDefaultInstance();
  ChenJiuKind::default_instance_->InitAsDefaultInstance();
  GetChenJiuReq::default_instance_->InitAsDefaultInstance();
  GetChenJiuAck::default_instance_->InitAsDefaultInstance();
  UpdateChenJiu::default_instance_->InitAsDefaultInstance();
  GetChenJiuAwardReq::default_instance_->InitAsDefaultInstance();
  GetChenJiuAwardAck::default_instance_->InitAsDefaultInstance();
  OneKeyGetChenJiuAwardReq::default_instance_->InitAsDefaultInstance();
  QuestData::default_instance_->InitAsDefaultInstance();
  GetQuestListReq::default_instance_->InitAsDefaultInstance();
  GetQuestListAck::default_instance_->InitAsDefaultInstance();
  QuestUpdateData::default_instance_->InitAsDefaultInstance();
  UpdateQuestNtf::default_instance_->InitAsDefaultInstance();
  GetQuestAwardReq::default_instance_->InitAsDefaultInstance();
  GetQuestAwardAck::default_instance_->InitAsDefaultInstance();
  OneKeyGetQuestAwardReq::default_instance_->InitAsDefaultInstance();
  RefreshQuestNtf::default_instance_->InitAsDefaultInstance();
  GetCurPvpDataReq::default_instance_->InitAsDefaultInstance();
  GetCurPvpDataAck::default_instance_->InitAsDefaultInstance();
  PvpData::default_instance_->InitAsDefaultInstance();
  GetAllRankReq::default_instance_->InitAsDefaultInstance();
  GetAllRankAck::default_instance_->InitAsDefaultInstance();
  PvpFriendData::default_instance_->InitAsDefaultInstance();
  GetFriendRankReq::default_instance_->InitAsDefaultInstance();
  GetFriendRankAck::default_instance_->InitAsDefaultInstance();
  GetSumRankReq::default_instance_->InitAsDefaultInstance();
  GetSumRankAck::default_instance_->InitAsDefaultInstance();
  ClearPvpCDReq::default_instance_->InitAsDefaultInstance();
  ClearPvpCDAck::default_instance_->InitAsDefaultInstance();
  GetPvpAwardReq::default_instance_->InitAsDefaultInstance();
  GetPvpAwardAck::default_instance_->InitAsDefaultInstance();
  PvpWarBeginReq::default_instance_->InitAsDefaultInstance();
  PvpWarBeginAck::default_instance_->InitAsDefaultInstance();
  PvpWarResultReq::default_instance_->InitAsDefaultInstance();
  PvpWarResultAck::default_instance_->InitAsDefaultInstance();
  ActionCountTickNtf::default_instance_->InitAsDefaultInstance();
  CustomerServiceUrlNtf::default_instance_->InitAsDefaultInstance();
  SkillPage::default_instance_->InitAsDefaultInstance();
  Skill::default_instance_->InitAsDefaultInstance();
  GetSkillListReq::default_instance_->InitAsDefaultInstance();
  GetSkillListAck::default_instance_->InitAsDefaultInstance();
  SaveSkillPageReq::default_instance_->InitAsDefaultInstance();
  SaveSkillPageAck::default_instance_->InitAsDefaultInstance();
  SaveActiveSkillReq::default_instance_->InitAsDefaultInstance();
  SaveActiveSkillAck::default_instance_->InitAsDefaultInstance();
  GoodsItem::default_instance_->InitAsDefaultInstance();
  GoodsList::default_instance_->InitAsDefaultInstance();
  AddGoodsItem::default_instance_->InitAsDefaultInstance();
  UpdateGoodsNumber::default_instance_->InitAsDefaultInstance();
  EquipData::default_instance_->InitAsDefaultInstance();
  EquipList::default_instance_->InitAsDefaultInstance();
  AddEquip::default_instance_->InitAsDefaultInstance();
  DelEquip::default_instance_->InitAsDefaultInstance();
  UpdateEquip::default_instance_->InitAsDefaultInstance();
  PutOnEquipReq::default_instance_->InitAsDefaultInstance();
  PutOnEquipAck::default_instance_->InitAsDefaultInstance();
  TongShiEquip::default_instance_->InitAsDefaultInstance();
  StrengEquipReq::default_instance_->InitAsDefaultInstance();
  StrengEquipAck::default_instance_->InitAsDefaultInstance();
  JinJieEquipReq::default_instance_->InitAsDefaultInstance();
  JinJieEquipAck::default_instance_->InitAsDefaultInstance();
  HeChengEquipReq::default_instance_->InitAsDefaultInstance();
  HeChengEquipAck::default_instance_->InitAsDefaultInstance();
  SellGoodsReq::default_instance_->InitAsDefaultInstance();
  SellGoodsAck::default_instance_->InitAsDefaultInstance();
  EquipSetStoreReq::default_instance_->InitAsDefaultInstance();
  EquipSetStoreAck::default_instance_->InitAsDefaultInstance();
  ShareDataNtf::default_instance_->InitAsDefaultInstance();
  CompleteLoadDataNtf::default_instance_->InitAsDefaultInstance();
  SetPetNewStateReq::default_instance_->InitAsDefaultInstance();
  SetPetNewStateAck::default_instance_->InitAsDefaultInstance();
  UpdateBuyActionCounts::default_instance_->InitAsDefaultInstance();
  PythonMsg_example::default_instance_->InitAsDefaultInstance();
  PythonMessage::default_instance_->InitAsDefaultInstance();
  PyChouKaReq::default_instance_->InitAsDefaultInstance();
  PyPetInfo::default_instance_->InitAsDefaultInstance();
  PyChouKaAck::default_instance_->InitAsDefaultInstance();
  PyGenGaoData::default_instance_->InitAsDefaultInstance();
  PyGetGenGaoReq::default_instance_->InitAsDefaultInstance();
  PyGetGenGaoAck::default_instance_->InitAsDefaultInstance();
  PyGetGoodActivePanelReq::default_instance_->InitAsDefaultInstance();
  PyGoodActiveInfo::default_instance_->InitAsDefaultInstance();
  PyGetGoodActivePanelAck::default_instance_->InitAsDefaultInstance();
  PyGetActiveAwardReq::default_instance_->InitAsDefaultInstance();
  PyGetActiveAwardAck::default_instance_->InitAsDefaultInstance();
  PyEveryDataActiveNtf::default_instance_->InitAsDefaultInstance();
  PySaveGuideStepReq::default_instance_->InitAsDefaultInstance();
  PySaveGuideStepAck::default_instance_->InitAsDefaultInstance();
  PyBuyCheckPointChallengeCountReq::default_instance_->InitAsDefaultInstance();
  PyBuyCheckPointChallengeCountAck::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_gameserver_5fgate_5fclient_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_gameserver_5fgate_5fclient_2eproto {
  StaticDescriptorInitializer_gameserver_5fgate_5fclient_2eproto() {
    protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  }
} static_descriptor_initializer_gameserver_5fgate_5fclient_2eproto_;
const ::google::protobuf::EnumDescriptor* CHAT_MSG_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CHAT_MSG_TYPE_descriptor_;
}
bool CHAT_MSG_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CHAT_MSG_NODE_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CHAT_MSG_NODE_TYPE_descriptor_;
}
bool CHAT_MSG_NODE_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 16:
    case 17:
    case 18:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SYSTEM_MSG_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SYSTEM_MSG_TYPE_descriptor_;
}
bool SYSTEM_MSG_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TEXIAO_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TEXIAO_TYPE_descriptor_;
}
bool TEXIAO_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CommonDialogType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommonDialogType_descriptor_;
}
bool CommonDialogType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PET_POSITION_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PET_POSITION_descriptor_;
}
bool PET_POSITION_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BUFF_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BUFF_TYPE_descriptor_;
}
bool BUFF_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SELL_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SELL_TYPE_descriptor_;
}
bool SELL_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Period_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Period_descriptor_;
}
bool Period_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int ClientLoginGateReq::kDigitAccountFieldNumber;
const int ClientLoginGateReq::kStrAccountFieldNumber;
const int ClientLoginGateReq::kLoginGateKeyFieldNumber;
const int ClientLoginGateReq::kOptFieldNumber;
#endif  // !_MSC_VER

ClientLoginGateReq::ClientLoginGateReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientLoginGateReq::InitAsDefaultInstance() {
}

ClientLoginGateReq::ClientLoginGateReq(const ClientLoginGateReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientLoginGateReq::SharedCtor() {
  _cached_size_ = 0;
  digit_account_ = GOOGLE_ULONGLONG(0);
  str_account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  login_gate_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  opt_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientLoginGateReq::~ClientLoginGateReq() {
  SharedDtor();
}

void ClientLoginGateReq::SharedDtor() {
  if (str_account_ != &::google::protobuf::internal::kEmptyString) {
    delete str_account_;
  }
  if (login_gate_key_ != &::google::protobuf::internal::kEmptyString) {
    delete login_gate_key_;
  }
  if (opt_ != &::google::protobuf::internal::kEmptyString) {
    delete opt_;
  }
  if (this != default_instance_) {
  }
}

void ClientLoginGateReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientLoginGateReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientLoginGateReq_descriptor_;
}

const ClientLoginGateReq& ClientLoginGateReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

ClientLoginGateReq* ClientLoginGateReq::default_instance_ = NULL;

ClientLoginGateReq* ClientLoginGateReq::New() const {
  return new ClientLoginGateReq;
}

void ClientLoginGateReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    digit_account_ = GOOGLE_ULONGLONG(0);
    if (has_str_account()) {
      if (str_account_ != &::google::protobuf::internal::kEmptyString) {
        str_account_->clear();
      }
    }
    if (has_login_gate_key()) {
      if (login_gate_key_ != &::google::protobuf::internal::kEmptyString) {
        login_gate_key_->clear();
      }
    }
    if (has_opt()) {
      if (opt_ != &::google::protobuf::internal::kEmptyString) {
        opt_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientLoginGateReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 digit_account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &digit_account_)));
          set_has_digit_account();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_str_account;
        break;
      }

      // required string str_account = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_str_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str_account().data(), this->str_account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_login_gate_key;
        break;
      }

      // optional string login_gate_key = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_login_gate_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_login_gate_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->login_gate_key().data(), this->login_gate_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_opt;
        break;
      }

      // optional string opt = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_opt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_opt()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->opt().data(), this->opt().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientLoginGateReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 digit_account = 1;
  if (has_digit_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->digit_account(), output);
  }

  // required string str_account = 2;
  if (has_str_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str_account().data(), this->str_account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->str_account(), output);
  }

  // optional string login_gate_key = 3;
  if (has_login_gate_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->login_gate_key().data(), this->login_gate_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->login_gate_key(), output);
  }

  // optional string opt = 4;
  if (has_opt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->opt().data(), this->opt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->opt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientLoginGateReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 digit_account = 1;
  if (has_digit_account()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->digit_account(), target);
  }

  // required string str_account = 2;
  if (has_str_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str_account().data(), this->str_account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->str_account(), target);
  }

  // optional string login_gate_key = 3;
  if (has_login_gate_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->login_gate_key().data(), this->login_gate_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->login_gate_key(), target);
  }

  // optional string opt = 4;
  if (has_opt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->opt().data(), this->opt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->opt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientLoginGateReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 digit_account = 1;
    if (has_digit_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->digit_account());
    }

    // required string str_account = 2;
    if (has_str_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str_account());
    }

    // optional string login_gate_key = 3;
    if (has_login_gate_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->login_gate_key());
    }

    // optional string opt = 4;
    if (has_opt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->opt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientLoginGateReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientLoginGateReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientLoginGateReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientLoginGateReq::MergeFrom(const ClientLoginGateReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_digit_account()) {
      set_digit_account(from.digit_account());
    }
    if (from.has_str_account()) {
      set_str_account(from.str_account());
    }
    if (from.has_login_gate_key()) {
      set_login_gate_key(from.login_gate_key());
    }
    if (from.has_opt()) {
      set_opt(from.opt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientLoginGateReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientLoginGateReq::CopyFrom(const ClientLoginGateReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientLoginGateReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ClientLoginGateReq::Swap(ClientLoginGateReq* other) {
  if (other != this) {
    std::swap(digit_account_, other->digit_account_);
    std::swap(str_account_, other->str_account_);
    std::swap(login_gate_key_, other->login_gate_key_);
    std::swap(opt_, other->opt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientLoginGateReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientLoginGateReq_descriptor_;
  metadata.reflection = ClientLoginGateReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientLoginGateAck::kErrNoFieldNumber;
const int ClientLoginGateAck::kCodingIdFieldNumber;
#endif  // !_MSC_VER

ClientLoginGateAck::ClientLoginGateAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientLoginGateAck::InitAsDefaultInstance() {
}

ClientLoginGateAck::ClientLoginGateAck(const ClientLoginGateAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientLoginGateAck::SharedCtor() {
  _cached_size_ = 0;
  err_no_ = 0;
  coding_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientLoginGateAck::~ClientLoginGateAck() {
  SharedDtor();
}

void ClientLoginGateAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientLoginGateAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientLoginGateAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientLoginGateAck_descriptor_;
}

const ClientLoginGateAck& ClientLoginGateAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

ClientLoginGateAck* ClientLoginGateAck::default_instance_ = NULL;

ClientLoginGateAck* ClientLoginGateAck::New() const {
  return new ClientLoginGateAck;
}

void ClientLoginGateAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    err_no_ = 0;
    coding_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientLoginGateAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 err_no = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_no_)));
          set_has_err_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_coding_id;
        break;
      }

      // optional int32 coding_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coding_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coding_id_)));
          set_has_coding_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientLoginGateAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 err_no = 1;
  if (has_err_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->err_no(), output);
  }

  // optional int32 coding_id = 2;
  if (has_coding_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->coding_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientLoginGateAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 err_no = 1;
  if (has_err_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->err_no(), target);
  }

  // optional int32 coding_id = 2;
  if (has_coding_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->coding_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientLoginGateAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 err_no = 1;
    if (has_err_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err_no());
    }

    // optional int32 coding_id = 2;
    if (has_coding_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coding_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientLoginGateAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientLoginGateAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientLoginGateAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientLoginGateAck::MergeFrom(const ClientLoginGateAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_err_no()) {
      set_err_no(from.err_no());
    }
    if (from.has_coding_id()) {
      set_coding_id(from.coding_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientLoginGateAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientLoginGateAck::CopyFrom(const ClientLoginGateAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientLoginGateAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ClientLoginGateAck::Swap(ClientLoginGateAck* other) {
  if (other != this) {
    std::swap(err_no_, other->err_no_);
    std::swap(coding_id_, other->coding_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientLoginGateAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientLoginGateAck_descriptor_;
  metadata.reflection = ClientLoginGateAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientLoginAgainGateReq::kDigitAccountFieldNumber;
const int ClientLoginAgainGateReq::kStrAccountFieldNumber;
const int ClientLoginAgainGateReq::kLoginGateKeyFieldNumber;
#endif  // !_MSC_VER

ClientLoginAgainGateReq::ClientLoginAgainGateReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientLoginAgainGateReq::InitAsDefaultInstance() {
}

ClientLoginAgainGateReq::ClientLoginAgainGateReq(const ClientLoginAgainGateReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientLoginAgainGateReq::SharedCtor() {
  _cached_size_ = 0;
  digit_account_ = GOOGLE_ULONGLONG(0);
  str_account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  login_gate_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientLoginAgainGateReq::~ClientLoginAgainGateReq() {
  SharedDtor();
}

void ClientLoginAgainGateReq::SharedDtor() {
  if (str_account_ != &::google::protobuf::internal::kEmptyString) {
    delete str_account_;
  }
  if (login_gate_key_ != &::google::protobuf::internal::kEmptyString) {
    delete login_gate_key_;
  }
  if (this != default_instance_) {
  }
}

void ClientLoginAgainGateReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientLoginAgainGateReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientLoginAgainGateReq_descriptor_;
}

const ClientLoginAgainGateReq& ClientLoginAgainGateReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

ClientLoginAgainGateReq* ClientLoginAgainGateReq::default_instance_ = NULL;

ClientLoginAgainGateReq* ClientLoginAgainGateReq::New() const {
  return new ClientLoginAgainGateReq;
}

void ClientLoginAgainGateReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    digit_account_ = GOOGLE_ULONGLONG(0);
    if (has_str_account()) {
      if (str_account_ != &::google::protobuf::internal::kEmptyString) {
        str_account_->clear();
      }
    }
    if (has_login_gate_key()) {
      if (login_gate_key_ != &::google::protobuf::internal::kEmptyString) {
        login_gate_key_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientLoginAgainGateReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 digit_account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &digit_account_)));
          set_has_digit_account();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_str_account;
        break;
      }

      // required string str_account = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_str_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str_account().data(), this->str_account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_login_gate_key;
        break;
      }

      // optional string login_gate_key = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_login_gate_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_login_gate_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->login_gate_key().data(), this->login_gate_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientLoginAgainGateReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 digit_account = 1;
  if (has_digit_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->digit_account(), output);
  }

  // required string str_account = 2;
  if (has_str_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str_account().data(), this->str_account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->str_account(), output);
  }

  // optional string login_gate_key = 3;
  if (has_login_gate_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->login_gate_key().data(), this->login_gate_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->login_gate_key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientLoginAgainGateReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 digit_account = 1;
  if (has_digit_account()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->digit_account(), target);
  }

  // required string str_account = 2;
  if (has_str_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str_account().data(), this->str_account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->str_account(), target);
  }

  // optional string login_gate_key = 3;
  if (has_login_gate_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->login_gate_key().data(), this->login_gate_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->login_gate_key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientLoginAgainGateReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 digit_account = 1;
    if (has_digit_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->digit_account());
    }

    // required string str_account = 2;
    if (has_str_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str_account());
    }

    // optional string login_gate_key = 3;
    if (has_login_gate_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->login_gate_key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientLoginAgainGateReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientLoginAgainGateReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientLoginAgainGateReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientLoginAgainGateReq::MergeFrom(const ClientLoginAgainGateReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_digit_account()) {
      set_digit_account(from.digit_account());
    }
    if (from.has_str_account()) {
      set_str_account(from.str_account());
    }
    if (from.has_login_gate_key()) {
      set_login_gate_key(from.login_gate_key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientLoginAgainGateReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientLoginAgainGateReq::CopyFrom(const ClientLoginAgainGateReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientLoginAgainGateReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ClientLoginAgainGateReq::Swap(ClientLoginAgainGateReq* other) {
  if (other != this) {
    std::swap(digit_account_, other->digit_account_);
    std::swap(str_account_, other->str_account_);
    std::swap(login_gate_key_, other->login_gate_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientLoginAgainGateReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientLoginAgainGateReq_descriptor_;
  metadata.reflection = ClientLoginAgainGateReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientLoginAgainGateAck::kErrNoFieldNumber;
const int ClientLoginAgainGateAck::kCodingIdFieldNumber;
#endif  // !_MSC_VER

ClientLoginAgainGateAck::ClientLoginAgainGateAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientLoginAgainGateAck::InitAsDefaultInstance() {
}

ClientLoginAgainGateAck::ClientLoginAgainGateAck(const ClientLoginAgainGateAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientLoginAgainGateAck::SharedCtor() {
  _cached_size_ = 0;
  err_no_ = 0;
  coding_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientLoginAgainGateAck::~ClientLoginAgainGateAck() {
  SharedDtor();
}

void ClientLoginAgainGateAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientLoginAgainGateAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientLoginAgainGateAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientLoginAgainGateAck_descriptor_;
}

const ClientLoginAgainGateAck& ClientLoginAgainGateAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

ClientLoginAgainGateAck* ClientLoginAgainGateAck::default_instance_ = NULL;

ClientLoginAgainGateAck* ClientLoginAgainGateAck::New() const {
  return new ClientLoginAgainGateAck;
}

void ClientLoginAgainGateAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    err_no_ = 0;
    coding_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientLoginAgainGateAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 err_no = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_no_)));
          set_has_err_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_coding_id;
        break;
      }

      // optional int32 coding_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coding_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coding_id_)));
          set_has_coding_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientLoginAgainGateAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 err_no = 1;
  if (has_err_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->err_no(), output);
  }

  // optional int32 coding_id = 2;
  if (has_coding_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->coding_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientLoginAgainGateAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 err_no = 1;
  if (has_err_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->err_no(), target);
  }

  // optional int32 coding_id = 2;
  if (has_coding_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->coding_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientLoginAgainGateAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 err_no = 1;
    if (has_err_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err_no());
    }

    // optional int32 coding_id = 2;
    if (has_coding_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coding_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientLoginAgainGateAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientLoginAgainGateAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientLoginAgainGateAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientLoginAgainGateAck::MergeFrom(const ClientLoginAgainGateAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_err_no()) {
      set_err_no(from.err_no());
    }
    if (from.has_coding_id()) {
      set_coding_id(from.coding_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientLoginAgainGateAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientLoginAgainGateAck::CopyFrom(const ClientLoginAgainGateAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientLoginAgainGateAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ClientLoginAgainGateAck::Swap(ClientLoginAgainGateAck* other) {
  if (other != this) {
    std::swap(err_no_, other->err_no_);
    std::swap(coding_id_, other->coding_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientLoginAgainGateAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientLoginAgainGateAck_descriptor_;
  metadata.reflection = ClientLoginAgainGateAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientLeaveGameReq::kLeaveTypeFieldNumber;
#endif  // !_MSC_VER

ClientLeaveGameReq::ClientLeaveGameReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientLeaveGameReq::InitAsDefaultInstance() {
}

ClientLeaveGameReq::ClientLeaveGameReq(const ClientLeaveGameReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientLeaveGameReq::SharedCtor() {
  _cached_size_ = 0;
  leave_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientLeaveGameReq::~ClientLeaveGameReq() {
  SharedDtor();
}

void ClientLeaveGameReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientLeaveGameReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientLeaveGameReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientLeaveGameReq_descriptor_;
}

const ClientLeaveGameReq& ClientLeaveGameReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

ClientLeaveGameReq* ClientLeaveGameReq::default_instance_ = NULL;

ClientLeaveGameReq* ClientLeaveGameReq::New() const {
  return new ClientLeaveGameReq;
}

void ClientLeaveGameReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    leave_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientLeaveGameReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 leave_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leave_type_)));
          set_has_leave_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientLeaveGameReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 leave_type = 3;
  if (has_leave_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->leave_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientLeaveGameReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 leave_type = 3;
  if (has_leave_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->leave_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientLeaveGameReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 leave_type = 3;
    if (has_leave_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leave_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientLeaveGameReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientLeaveGameReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientLeaveGameReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientLeaveGameReq::MergeFrom(const ClientLeaveGameReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_leave_type()) {
      set_leave_type(from.leave_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientLeaveGameReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientLeaveGameReq::CopyFrom(const ClientLeaveGameReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientLeaveGameReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ClientLeaveGameReq::Swap(ClientLeaveGameReq* other) {
  if (other != this) {
    std::swap(leave_type_, other->leave_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientLeaveGameReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientLeaveGameReq_descriptor_;
  metadata.reflection = ClientLeaveGameReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientLeaveGameAck::kErrNoFieldNumber;
#endif  // !_MSC_VER

ClientLeaveGameAck::ClientLeaveGameAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientLeaveGameAck::InitAsDefaultInstance() {
}

ClientLeaveGameAck::ClientLeaveGameAck(const ClientLeaveGameAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientLeaveGameAck::SharedCtor() {
  _cached_size_ = 0;
  err_no_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientLeaveGameAck::~ClientLeaveGameAck() {
  SharedDtor();
}

void ClientLeaveGameAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientLeaveGameAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientLeaveGameAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientLeaveGameAck_descriptor_;
}

const ClientLeaveGameAck& ClientLeaveGameAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

ClientLeaveGameAck* ClientLeaveGameAck::default_instance_ = NULL;

ClientLeaveGameAck* ClientLeaveGameAck::New() const {
  return new ClientLeaveGameAck;
}

void ClientLeaveGameAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    err_no_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientLeaveGameAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 err_no = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_no_)));
          set_has_err_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientLeaveGameAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 err_no = 1;
  if (has_err_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->err_no(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientLeaveGameAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 err_no = 1;
  if (has_err_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->err_no(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientLeaveGameAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 err_no = 1;
    if (has_err_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err_no());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientLeaveGameAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientLeaveGameAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientLeaveGameAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientLeaveGameAck::MergeFrom(const ClientLeaveGameAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_err_no()) {
      set_err_no(from.err_no());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientLeaveGameAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientLeaveGameAck::CopyFrom(const ClientLeaveGameAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientLeaveGameAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ClientLeaveGameAck::Swap(ClientLeaveGameAck* other) {
  if (other != this) {
    std::swap(err_no_, other->err_no_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientLeaveGameAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientLeaveGameAck_descriptor_;
  metadata.reflection = ClientLeaveGameAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SysErrorNtf::kErrNoFieldNumber;
#endif  // !_MSC_VER

SysErrorNtf::SysErrorNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SysErrorNtf::InitAsDefaultInstance() {
}

SysErrorNtf::SysErrorNtf(const SysErrorNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SysErrorNtf::SharedCtor() {
  _cached_size_ = 0;
  err_no_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SysErrorNtf::~SysErrorNtf() {
  SharedDtor();
}

void SysErrorNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SysErrorNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SysErrorNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SysErrorNtf_descriptor_;
}

const SysErrorNtf& SysErrorNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

SysErrorNtf* SysErrorNtf::default_instance_ = NULL;

SysErrorNtf* SysErrorNtf::New() const {
  return new SysErrorNtf;
}

void SysErrorNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    err_no_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SysErrorNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 err_no = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_no_)));
          set_has_err_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SysErrorNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 err_no = 1;
  if (has_err_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->err_no(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SysErrorNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 err_no = 1;
  if (has_err_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->err_no(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SysErrorNtf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 err_no = 1;
    if (has_err_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err_no());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SysErrorNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SysErrorNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SysErrorNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SysErrorNtf::MergeFrom(const SysErrorNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_err_no()) {
      set_err_no(from.err_no());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SysErrorNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SysErrorNtf::CopyFrom(const SysErrorNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SysErrorNtf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SysErrorNtf::Swap(SysErrorNtf* other) {
  if (other != this) {
    std::swap(err_no_, other->err_no_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SysErrorNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SysErrorNtf_descriptor_;
  metadata.reflection = SysErrorNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

KeepClientAlive::KeepClientAlive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KeepClientAlive::InitAsDefaultInstance() {
}

KeepClientAlive::KeepClientAlive(const KeepClientAlive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KeepClientAlive::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KeepClientAlive::~KeepClientAlive() {
  SharedDtor();
}

void KeepClientAlive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KeepClientAlive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeepClientAlive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeepClientAlive_descriptor_;
}

const KeepClientAlive& KeepClientAlive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

KeepClientAlive* KeepClientAlive::default_instance_ = NULL;

KeepClientAlive* KeepClientAlive::New() const {
  return new KeepClientAlive;
}

void KeepClientAlive::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KeepClientAlive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void KeepClientAlive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KeepClientAlive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KeepClientAlive::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeepClientAlive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KeepClientAlive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KeepClientAlive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KeepClientAlive::MergeFrom(const KeepClientAlive& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KeepClientAlive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeepClientAlive::CopyFrom(const KeepClientAlive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeepClientAlive::IsInitialized() const {

  return true;
}

void KeepClientAlive::Swap(KeepClientAlive* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KeepClientAlive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeepClientAlive_descriptor_;
  metadata.reflection = KeepClientAlive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

KeepClientAliveAck::KeepClientAliveAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KeepClientAliveAck::InitAsDefaultInstance() {
}

KeepClientAliveAck::KeepClientAliveAck(const KeepClientAliveAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KeepClientAliveAck::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KeepClientAliveAck::~KeepClientAliveAck() {
  SharedDtor();
}

void KeepClientAliveAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KeepClientAliveAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeepClientAliveAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeepClientAliveAck_descriptor_;
}

const KeepClientAliveAck& KeepClientAliveAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

KeepClientAliveAck* KeepClientAliveAck::default_instance_ = NULL;

KeepClientAliveAck* KeepClientAliveAck::New() const {
  return new KeepClientAliveAck;
}

void KeepClientAliveAck::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KeepClientAliveAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void KeepClientAliveAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KeepClientAliveAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KeepClientAliveAck::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeepClientAliveAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KeepClientAliveAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KeepClientAliveAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KeepClientAliveAck::MergeFrom(const KeepClientAliveAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KeepClientAliveAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeepClientAliveAck::CopyFrom(const KeepClientAliveAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeepClientAliveAck::IsInitialized() const {

  return true;
}

void KeepClientAliveAck::Swap(KeepClientAliveAck* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KeepClientAliveAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeepClientAliveAck_descriptor_;
  metadata.reflection = KeepClientAliveAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TestReq::kTDoubleFieldNumber;
const int TestReq::kTFloatFieldNumber;
const int TestReq::kTInt32FieldNumber;
const int TestReq::kTInt64FieldNumber;
const int TestReq::kTUint32FieldNumber;
const int TestReq::kTUint64FieldNumber;
const int TestReq::kTSint32FieldNumber;
const int TestReq::kTSint64FieldNumber;
const int TestReq::kTBoolFieldNumber;
const int TestReq::kTStringFieldNumber;
const int TestReq::kTBytesFieldNumber;
#endif  // !_MSC_VER

TestReq::TestReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TestReq::InitAsDefaultInstance() {
}

TestReq::TestReq(const TestReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TestReq::SharedCtor() {
  _cached_size_ = 0;
  t_double_ = 0;
  t_float_ = 0;
  t_int32_ = 0;
  t_int64_ = GOOGLE_LONGLONG(0);
  t_uint32_ = 0u;
  t_uint64_ = GOOGLE_ULONGLONG(0);
  t_sint32_ = 0;
  t_sint64_ = GOOGLE_LONGLONG(0);
  t_bool_ = false;
  t_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  t_bytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestReq::~TestReq() {
  SharedDtor();
}

void TestReq::SharedDtor() {
  if (t_string_ != &::google::protobuf::internal::kEmptyString) {
    delete t_string_;
  }
  if (t_bytes_ != &::google::protobuf::internal::kEmptyString) {
    delete t_bytes_;
  }
  if (this != default_instance_) {
  }
}

void TestReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestReq_descriptor_;
}

const TestReq& TestReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

TestReq* TestReq::default_instance_ = NULL;

TestReq* TestReq::New() const {
  return new TestReq;
}

void TestReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    t_double_ = 0;
    t_float_ = 0;
    t_int32_ = 0;
    t_int64_ = GOOGLE_LONGLONG(0);
    t_uint32_ = 0u;
    t_uint64_ = GOOGLE_ULONGLONG(0);
    t_sint32_ = 0;
    t_sint64_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    t_bool_ = false;
    if (has_t_string()) {
      if (t_string_ != &::google::protobuf::internal::kEmptyString) {
        t_string_->clear();
      }
    }
    if (has_t_bytes()) {
      if (t_bytes_ != &::google::protobuf::internal::kEmptyString) {
        t_bytes_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double t_double = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &t_double_)));
          set_has_t_double();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_t_float;
        break;
      }

      // optional float t_float = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_t_float:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &t_float_)));
          set_has_t_float();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_t_int32;
        break;
      }

      // optional int32 t_int32 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_t_int32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &t_int32_)));
          set_has_t_int32();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_t_int64;
        break;
      }

      // optional int64 t_int64 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_t_int64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &t_int64_)));
          set_has_t_int64();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_t_uint32;
        break;
      }

      // optional uint32 t_uint32 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_t_uint32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &t_uint32_)));
          set_has_t_uint32();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_t_uint64;
        break;
      }

      // optional uint64 t_uint64 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_t_uint64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &t_uint64_)));
          set_has_t_uint64();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_t_sint32;
        break;
      }

      // optional sint32 t_sint32 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_t_sint32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &t_sint32_)));
          set_has_t_sint32();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_t_sint64;
        break;
      }

      // optional sint64 t_sint64 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_t_sint64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &t_sint64_)));
          set_has_t_sint64();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_t_bool;
        break;
      }

      // optional bool t_bool = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_t_bool:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &t_bool_)));
          set_has_t_bool();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_t_string;
        break;
      }

      // optional string t_string = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_t_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_t_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->t_string().data(), this->t_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_t_bytes;
        break;
      }

      // optional bytes t_bytes = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_t_bytes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_t_bytes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TestReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double t_double = 1;
  if (has_t_double()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->t_double(), output);
  }

  // optional float t_float = 2;
  if (has_t_float()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->t_float(), output);
  }

  // optional int32 t_int32 = 3;
  if (has_t_int32()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->t_int32(), output);
  }

  // optional int64 t_int64 = 4;
  if (has_t_int64()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->t_int64(), output);
  }

  // optional uint32 t_uint32 = 5;
  if (has_t_uint32()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->t_uint32(), output);
  }

  // optional uint64 t_uint64 = 6;
  if (has_t_uint64()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->t_uint64(), output);
  }

  // optional sint32 t_sint32 = 7;
  if (has_t_sint32()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(7, this->t_sint32(), output);
  }

  // optional sint64 t_sint64 = 8;
  if (has_t_sint64()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(8, this->t_sint64(), output);
  }

  // optional bool t_bool = 9;
  if (has_t_bool()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->t_bool(), output);
  }

  // optional string t_string = 10;
  if (has_t_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->t_string().data(), this->t_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->t_string(), output);
  }

  // optional bytes t_bytes = 11;
  if (has_t_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      11, this->t_bytes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TestReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double t_double = 1;
  if (has_t_double()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->t_double(), target);
  }

  // optional float t_float = 2;
  if (has_t_float()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->t_float(), target);
  }

  // optional int32 t_int32 = 3;
  if (has_t_int32()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->t_int32(), target);
  }

  // optional int64 t_int64 = 4;
  if (has_t_int64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->t_int64(), target);
  }

  // optional uint32 t_uint32 = 5;
  if (has_t_uint32()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->t_uint32(), target);
  }

  // optional uint64 t_uint64 = 6;
  if (has_t_uint64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->t_uint64(), target);
  }

  // optional sint32 t_sint32 = 7;
  if (has_t_sint32()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(7, this->t_sint32(), target);
  }

  // optional sint64 t_sint64 = 8;
  if (has_t_sint64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(8, this->t_sint64(), target);
  }

  // optional bool t_bool = 9;
  if (has_t_bool()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->t_bool(), target);
  }

  // optional string t_string = 10;
  if (has_t_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->t_string().data(), this->t_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->t_string(), target);
  }

  // optional bytes t_bytes = 11;
  if (has_t_bytes()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->t_bytes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TestReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double t_double = 1;
    if (has_t_double()) {
      total_size += 1 + 8;
    }

    // optional float t_float = 2;
    if (has_t_float()) {
      total_size += 1 + 4;
    }

    // optional int32 t_int32 = 3;
    if (has_t_int32()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->t_int32());
    }

    // optional int64 t_int64 = 4;
    if (has_t_int64()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->t_int64());
    }

    // optional uint32 t_uint32 = 5;
    if (has_t_uint32()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->t_uint32());
    }

    // optional uint64 t_uint64 = 6;
    if (has_t_uint64()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->t_uint64());
    }

    // optional sint32 t_sint32 = 7;
    if (has_t_sint32()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->t_sint32());
    }

    // optional sint64 t_sint64 = 8;
    if (has_t_sint64()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->t_sint64());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool t_bool = 9;
    if (has_t_bool()) {
      total_size += 1 + 1;
    }

    // optional string t_string = 10;
    if (has_t_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->t_string());
    }

    // optional bytes t_bytes = 11;
    if (has_t_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->t_bytes());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TestReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestReq::MergeFrom(const TestReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_t_double()) {
      set_t_double(from.t_double());
    }
    if (from.has_t_float()) {
      set_t_float(from.t_float());
    }
    if (from.has_t_int32()) {
      set_t_int32(from.t_int32());
    }
    if (from.has_t_int64()) {
      set_t_int64(from.t_int64());
    }
    if (from.has_t_uint32()) {
      set_t_uint32(from.t_uint32());
    }
    if (from.has_t_uint64()) {
      set_t_uint64(from.t_uint64());
    }
    if (from.has_t_sint32()) {
      set_t_sint32(from.t_sint32());
    }
    if (from.has_t_sint64()) {
      set_t_sint64(from.t_sint64());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_t_bool()) {
      set_t_bool(from.t_bool());
    }
    if (from.has_t_string()) {
      set_t_string(from.t_string());
    }
    if (from.has_t_bytes()) {
      set_t_bytes(from.t_bytes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestReq::CopyFrom(const TestReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestReq::IsInitialized() const {

  return true;
}

void TestReq::Swap(TestReq* other) {
  if (other != this) {
    std::swap(t_double_, other->t_double_);
    std::swap(t_float_, other->t_float_);
    std::swap(t_int32_, other->t_int32_);
    std::swap(t_int64_, other->t_int64_);
    std::swap(t_uint32_, other->t_uint32_);
    std::swap(t_uint64_, other->t_uint64_);
    std::swap(t_sint32_, other->t_sint32_);
    std::swap(t_sint64_, other->t_sint64_);
    std::swap(t_bool_, other->t_bool_);
    std::swap(t_string_, other->t_string_);
    std::swap(t_bytes_, other->t_bytes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TestReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestReq_descriptor_;
  metadata.reflection = TestReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TestAck::kTDoubleFieldNumber;
const int TestAck::kTFloatFieldNumber;
const int TestAck::kTInt32FieldNumber;
const int TestAck::kTInt64FieldNumber;
const int TestAck::kTUint32FieldNumber;
const int TestAck::kTUint64FieldNumber;
const int TestAck::kTSint32FieldNumber;
const int TestAck::kTSint64FieldNumber;
const int TestAck::kTBoolFieldNumber;
const int TestAck::kTStringFieldNumber;
const int TestAck::kTBytesFieldNumber;
#endif  // !_MSC_VER

TestAck::TestAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TestAck::InitAsDefaultInstance() {
}

TestAck::TestAck(const TestAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TestAck::SharedCtor() {
  _cached_size_ = 0;
  t_double_ = 0;
  t_float_ = 0;
  t_int32_ = 0;
  t_int64_ = GOOGLE_LONGLONG(0);
  t_uint32_ = 0u;
  t_uint64_ = GOOGLE_ULONGLONG(0);
  t_sint32_ = 0;
  t_sint64_ = GOOGLE_LONGLONG(0);
  t_bool_ = false;
  t_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  t_bytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestAck::~TestAck() {
  SharedDtor();
}

void TestAck::SharedDtor() {
  if (t_string_ != &::google::protobuf::internal::kEmptyString) {
    delete t_string_;
  }
  if (t_bytes_ != &::google::protobuf::internal::kEmptyString) {
    delete t_bytes_;
  }
  if (this != default_instance_) {
  }
}

void TestAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestAck_descriptor_;
}

const TestAck& TestAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

TestAck* TestAck::default_instance_ = NULL;

TestAck* TestAck::New() const {
  return new TestAck;
}

void TestAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    t_double_ = 0;
    t_float_ = 0;
    t_int32_ = 0;
    t_int64_ = GOOGLE_LONGLONG(0);
    t_uint32_ = 0u;
    t_uint64_ = GOOGLE_ULONGLONG(0);
    t_sint32_ = 0;
    t_sint64_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    t_bool_ = false;
    if (has_t_string()) {
      if (t_string_ != &::google::protobuf::internal::kEmptyString) {
        t_string_->clear();
      }
    }
    if (has_t_bytes()) {
      if (t_bytes_ != &::google::protobuf::internal::kEmptyString) {
        t_bytes_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double t_double = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &t_double_)));
          set_has_t_double();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_t_float;
        break;
      }

      // optional float t_float = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_t_float:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &t_float_)));
          set_has_t_float();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_t_int32;
        break;
      }

      // optional int32 t_int32 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_t_int32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &t_int32_)));
          set_has_t_int32();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_t_int64;
        break;
      }

      // optional int64 t_int64 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_t_int64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &t_int64_)));
          set_has_t_int64();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_t_uint32;
        break;
      }

      // optional uint32 t_uint32 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_t_uint32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &t_uint32_)));
          set_has_t_uint32();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_t_uint64;
        break;
      }

      // optional uint64 t_uint64 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_t_uint64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &t_uint64_)));
          set_has_t_uint64();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_t_sint32;
        break;
      }

      // optional sint32 t_sint32 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_t_sint32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &t_sint32_)));
          set_has_t_sint32();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_t_sint64;
        break;
      }

      // optional sint64 t_sint64 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_t_sint64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &t_sint64_)));
          set_has_t_sint64();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_t_bool;
        break;
      }

      // optional bool t_bool = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_t_bool:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &t_bool_)));
          set_has_t_bool();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_t_string;
        break;
      }

      // optional string t_string = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_t_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_t_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->t_string().data(), this->t_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_t_bytes;
        break;
      }

      // optional bytes t_bytes = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_t_bytes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_t_bytes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TestAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double t_double = 1;
  if (has_t_double()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->t_double(), output);
  }

  // optional float t_float = 2;
  if (has_t_float()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->t_float(), output);
  }

  // optional int32 t_int32 = 3;
  if (has_t_int32()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->t_int32(), output);
  }

  // optional int64 t_int64 = 4;
  if (has_t_int64()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->t_int64(), output);
  }

  // optional uint32 t_uint32 = 5;
  if (has_t_uint32()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->t_uint32(), output);
  }

  // optional uint64 t_uint64 = 6;
  if (has_t_uint64()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->t_uint64(), output);
  }

  // optional sint32 t_sint32 = 7;
  if (has_t_sint32()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(7, this->t_sint32(), output);
  }

  // optional sint64 t_sint64 = 8;
  if (has_t_sint64()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(8, this->t_sint64(), output);
  }

  // optional bool t_bool = 9;
  if (has_t_bool()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->t_bool(), output);
  }

  // optional string t_string = 10;
  if (has_t_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->t_string().data(), this->t_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->t_string(), output);
  }

  // optional bytes t_bytes = 11;
  if (has_t_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      11, this->t_bytes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TestAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double t_double = 1;
  if (has_t_double()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->t_double(), target);
  }

  // optional float t_float = 2;
  if (has_t_float()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->t_float(), target);
  }

  // optional int32 t_int32 = 3;
  if (has_t_int32()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->t_int32(), target);
  }

  // optional int64 t_int64 = 4;
  if (has_t_int64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->t_int64(), target);
  }

  // optional uint32 t_uint32 = 5;
  if (has_t_uint32()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->t_uint32(), target);
  }

  // optional uint64 t_uint64 = 6;
  if (has_t_uint64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->t_uint64(), target);
  }

  // optional sint32 t_sint32 = 7;
  if (has_t_sint32()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(7, this->t_sint32(), target);
  }

  // optional sint64 t_sint64 = 8;
  if (has_t_sint64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(8, this->t_sint64(), target);
  }

  // optional bool t_bool = 9;
  if (has_t_bool()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->t_bool(), target);
  }

  // optional string t_string = 10;
  if (has_t_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->t_string().data(), this->t_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->t_string(), target);
  }

  // optional bytes t_bytes = 11;
  if (has_t_bytes()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->t_bytes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TestAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double t_double = 1;
    if (has_t_double()) {
      total_size += 1 + 8;
    }

    // optional float t_float = 2;
    if (has_t_float()) {
      total_size += 1 + 4;
    }

    // optional int32 t_int32 = 3;
    if (has_t_int32()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->t_int32());
    }

    // optional int64 t_int64 = 4;
    if (has_t_int64()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->t_int64());
    }

    // optional uint32 t_uint32 = 5;
    if (has_t_uint32()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->t_uint32());
    }

    // optional uint64 t_uint64 = 6;
    if (has_t_uint64()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->t_uint64());
    }

    // optional sint32 t_sint32 = 7;
    if (has_t_sint32()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->t_sint32());
    }

    // optional sint64 t_sint64 = 8;
    if (has_t_sint64()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->t_sint64());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool t_bool = 9;
    if (has_t_bool()) {
      total_size += 1 + 1;
    }

    // optional string t_string = 10;
    if (has_t_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->t_string());
    }

    // optional bytes t_bytes = 11;
    if (has_t_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->t_bytes());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TestAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestAck::MergeFrom(const TestAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_t_double()) {
      set_t_double(from.t_double());
    }
    if (from.has_t_float()) {
      set_t_float(from.t_float());
    }
    if (from.has_t_int32()) {
      set_t_int32(from.t_int32());
    }
    if (from.has_t_int64()) {
      set_t_int64(from.t_int64());
    }
    if (from.has_t_uint32()) {
      set_t_uint32(from.t_uint32());
    }
    if (from.has_t_uint64()) {
      set_t_uint64(from.t_uint64());
    }
    if (from.has_t_sint32()) {
      set_t_sint32(from.t_sint32());
    }
    if (from.has_t_sint64()) {
      set_t_sint64(from.t_sint64());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_t_bool()) {
      set_t_bool(from.t_bool());
    }
    if (from.has_t_string()) {
      set_t_string(from.t_string());
    }
    if (from.has_t_bytes()) {
      set_t_bytes(from.t_bytes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestAck::CopyFrom(const TestAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestAck::IsInitialized() const {

  return true;
}

void TestAck::Swap(TestAck* other) {
  if (other != this) {
    std::swap(t_double_, other->t_double_);
    std::swap(t_float_, other->t_float_);
    std::swap(t_int32_, other->t_int32_);
    std::swap(t_int64_, other->t_int64_);
    std::swap(t_uint32_, other->t_uint32_);
    std::swap(t_uint64_, other->t_uint64_);
    std::swap(t_sint32_, other->t_sint32_);
    std::swap(t_sint64_, other->t_sint64_);
    std::swap(t_bool_, other->t_bool_);
    std::swap(t_string_, other->t_string_);
    std::swap(t_bytes_, other->t_bytes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TestAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestAck_descriptor_;
  metadata.reflection = TestAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerBaseData::kPlayernameFieldNumber;
const int PlayerBaseData::kVipLevelFieldNumber;
const int PlayerBaseData::kAreaIdFieldNumber;
const int PlayerBaseData::kHeadPicIdFieldNumber;
const int PlayerBaseData::kSexFieldNumber;
const int PlayerBaseData::kExpFieldNumber;
const int PlayerBaseData::kGoldFieldNumber;
const int PlayerBaseData::kLevelFieldNumber;
const int PlayerBaseData::kActionCountFieldNumber;
const int PlayerBaseData::kSpiritFieldNumber;
const int PlayerBaseData::kHpFieldNumber;
const int PlayerBaseData::kMpFieldNumber;
const int PlayerBaseData::kYuanBaoFieldNumber;
const int PlayerBaseData::kGmlevelFieldNumber;
const int PlayerBaseData::kCurQueueIdFieldNumber;
const int PlayerBaseData::kFriendShipFieldNumber;
const int PlayerBaseData::kNotAskFriendFieldNumber;
const int PlayerBaseData::kTodayFirstLoginFieldNumber;
#endif  // !_MSC_VER

PlayerBaseData::PlayerBaseData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerBaseData::InitAsDefaultInstance() {
}

PlayerBaseData::PlayerBaseData(const PlayerBaseData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerBaseData::SharedCtor() {
  _cached_size_ = 0;
  playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  vip_level_ = 0u;
  area_id_ = 0;
  head_pic_id_ = 0u;
  sex_ = false;
  exp_ = 0u;
  gold_ = 0u;
  level_ = 0u;
  action_count_ = 0u;
  spirit_ = 0u;
  hp_ = 0u;
  mp_ = 0u;
  yuan_bao_ = 0u;
  gmlevel_ = 0;
  cur_queue_id_ = 0u;
  friend_ship_ = 0;
  not_ask_friend_ = false;
  today_first_login_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerBaseData::~PlayerBaseData() {
  SharedDtor();
}

void PlayerBaseData::SharedDtor() {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    delete playername_;
  }
  if (this != default_instance_) {
  }
}

void PlayerBaseData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerBaseData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerBaseData_descriptor_;
}

const PlayerBaseData& PlayerBaseData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

PlayerBaseData* PlayerBaseData::default_instance_ = NULL;

PlayerBaseData* PlayerBaseData::New() const {
  return new PlayerBaseData;
}

void PlayerBaseData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_playername()) {
      if (playername_ != &::google::protobuf::internal::kEmptyString) {
        playername_->clear();
      }
    }
    vip_level_ = 0u;
    area_id_ = 0;
    head_pic_id_ = 0u;
    sex_ = false;
    exp_ = 0u;
    gold_ = 0u;
    level_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    action_count_ = 0u;
    spirit_ = 0u;
    hp_ = 0u;
    mp_ = 0u;
    yuan_bao_ = 0u;
    gmlevel_ = 0;
    cur_queue_id_ = 0u;
    friend_ship_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    not_ask_friend_ = false;
    today_first_login_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerBaseData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string playername = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playername().data(), this->playername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_vip_level;
        break;
      }

      // optional uint32 vip_level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vip_level_)));
          set_has_vip_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_area_id;
        break;
      }

      // optional int32 area_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_area_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &area_id_)));
          set_has_area_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_head_pic_id;
        break;
      }

      // optional uint32 head_pic_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_head_pic_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &head_pic_id_)));
          set_has_head_pic_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_sex;
        break;
      }

      // optional bool sex = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_exp;
        break;
      }

      // optional uint32 exp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_gold;
        break;
      }

      // optional uint32 gold = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_level;
        break;
      }

      // optional uint32 level = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_action_count;
        break;
      }

      // optional uint32 action_count = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &action_count_)));
          set_has_action_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_spirit;
        break;
      }

      // optional uint32 spirit = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_spirit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spirit_)));
          set_has_spirit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_hp;
        break;
      }

      // optional uint32 hp = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_mp;
        break;
      }

      // optional uint32 mp = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mp_)));
          set_has_mp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_yuan_bao;
        break;
      }

      // optional uint32 yuan_bao = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_yuan_bao:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &yuan_bao_)));
          set_has_yuan_bao();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_gmlevel;
        break;
      }

      // optional int32 gmlevel = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gmlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gmlevel_)));
          set_has_gmlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_cur_queue_id;
        break;
      }

      // optional uint32 cur_queue_id = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_queue_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_queue_id_)));
          set_has_cur_queue_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_friend_ship;
        break;
      }

      // optional int32 friend_ship = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_friend_ship:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &friend_ship_)));
          set_has_friend_ship();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_not_ask_friend;
        break;
      }

      // optional bool not_ask_friend = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_not_ask_friend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &not_ask_friend_)));
          set_has_not_ask_friend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_today_first_login;
        break;
      }

      // optional bool today_first_login = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_today_first_login:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &today_first_login_)));
          set_has_today_first_login();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerBaseData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string playername = 1;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->playername(), output);
  }

  // optional uint32 vip_level = 2;
  if (has_vip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->vip_level(), output);
  }

  // optional int32 area_id = 3;
  if (has_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->area_id(), output);
  }

  // optional uint32 head_pic_id = 4;
  if (has_head_pic_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->head_pic_id(), output);
  }

  // optional bool sex = 5;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->sex(), output);
  }

  // optional uint32 exp = 6;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->exp(), output);
  }

  // optional uint32 gold = 7;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->gold(), output);
  }

  // optional uint32 level = 8;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->level(), output);
  }

  // optional uint32 action_count = 9;
  if (has_action_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->action_count(), output);
  }

  // optional uint32 spirit = 10;
  if (has_spirit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->spirit(), output);
  }

  // optional uint32 hp = 11;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->hp(), output);
  }

  // optional uint32 mp = 12;
  if (has_mp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->mp(), output);
  }

  // optional uint32 yuan_bao = 13;
  if (has_yuan_bao()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->yuan_bao(), output);
  }

  // optional int32 gmlevel = 14;
  if (has_gmlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->gmlevel(), output);
  }

  // optional uint32 cur_queue_id = 15;
  if (has_cur_queue_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->cur_queue_id(), output);
  }

  // optional int32 friend_ship = 16;
  if (has_friend_ship()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->friend_ship(), output);
  }

  // optional bool not_ask_friend = 17;
  if (has_not_ask_friend()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->not_ask_friend(), output);
  }

  // optional bool today_first_login = 18;
  if (has_today_first_login()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->today_first_login(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerBaseData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string playername = 1;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->playername(), target);
  }

  // optional uint32 vip_level = 2;
  if (has_vip_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->vip_level(), target);
  }

  // optional int32 area_id = 3;
  if (has_area_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->area_id(), target);
  }

  // optional uint32 head_pic_id = 4;
  if (has_head_pic_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->head_pic_id(), target);
  }

  // optional bool sex = 5;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->sex(), target);
  }

  // optional uint32 exp = 6;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->exp(), target);
  }

  // optional uint32 gold = 7;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->gold(), target);
  }

  // optional uint32 level = 8;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->level(), target);
  }

  // optional uint32 action_count = 9;
  if (has_action_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->action_count(), target);
  }

  // optional uint32 spirit = 10;
  if (has_spirit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->spirit(), target);
  }

  // optional uint32 hp = 11;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->hp(), target);
  }

  // optional uint32 mp = 12;
  if (has_mp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->mp(), target);
  }

  // optional uint32 yuan_bao = 13;
  if (has_yuan_bao()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->yuan_bao(), target);
  }

  // optional int32 gmlevel = 14;
  if (has_gmlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->gmlevel(), target);
  }

  // optional uint32 cur_queue_id = 15;
  if (has_cur_queue_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->cur_queue_id(), target);
  }

  // optional int32 friend_ship = 16;
  if (has_friend_ship()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->friend_ship(), target);
  }

  // optional bool not_ask_friend = 17;
  if (has_not_ask_friend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->not_ask_friend(), target);
  }

  // optional bool today_first_login = 18;
  if (has_today_first_login()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->today_first_login(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerBaseData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string playername = 1;
    if (has_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playername());
    }

    // optional uint32 vip_level = 2;
    if (has_vip_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vip_level());
    }

    // optional int32 area_id = 3;
    if (has_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->area_id());
    }

    // optional uint32 head_pic_id = 4;
    if (has_head_pic_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->head_pic_id());
    }

    // optional bool sex = 5;
    if (has_sex()) {
      total_size += 1 + 1;
    }

    // optional uint32 exp = 6;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

    // optional uint32 gold = 7;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gold());
    }

    // optional uint32 level = 8;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 action_count = 9;
    if (has_action_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->action_count());
    }

    // optional uint32 spirit = 10;
    if (has_spirit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->spirit());
    }

    // optional uint32 hp = 11;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hp());
    }

    // optional uint32 mp = 12;
    if (has_mp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mp());
    }

    // optional uint32 yuan_bao = 13;
    if (has_yuan_bao()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->yuan_bao());
    }

    // optional int32 gmlevel = 14;
    if (has_gmlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gmlevel());
    }

    // optional uint32 cur_queue_id = 15;
    if (has_cur_queue_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_queue_id());
    }

    // optional int32 friend_ship = 16;
    if (has_friend_ship()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->friend_ship());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bool not_ask_friend = 17;
    if (has_not_ask_friend()) {
      total_size += 2 + 1;
    }

    // optional bool today_first_login = 18;
    if (has_today_first_login()) {
      total_size += 2 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerBaseData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerBaseData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerBaseData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerBaseData::MergeFrom(const PlayerBaseData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playername()) {
      set_playername(from.playername());
    }
    if (from.has_vip_level()) {
      set_vip_level(from.vip_level());
    }
    if (from.has_area_id()) {
      set_area_id(from.area_id());
    }
    if (from.has_head_pic_id()) {
      set_head_pic_id(from.head_pic_id());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_action_count()) {
      set_action_count(from.action_count());
    }
    if (from.has_spirit()) {
      set_spirit(from.spirit());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_mp()) {
      set_mp(from.mp());
    }
    if (from.has_yuan_bao()) {
      set_yuan_bao(from.yuan_bao());
    }
    if (from.has_gmlevel()) {
      set_gmlevel(from.gmlevel());
    }
    if (from.has_cur_queue_id()) {
      set_cur_queue_id(from.cur_queue_id());
    }
    if (from.has_friend_ship()) {
      set_friend_ship(from.friend_ship());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_not_ask_friend()) {
      set_not_ask_friend(from.not_ask_friend());
    }
    if (from.has_today_first_login()) {
      set_today_first_login(from.today_first_login());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerBaseData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerBaseData::CopyFrom(const PlayerBaseData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerBaseData::IsInitialized() const {

  return true;
}

void PlayerBaseData::Swap(PlayerBaseData* other) {
  if (other != this) {
    std::swap(playername_, other->playername_);
    std::swap(vip_level_, other->vip_level_);
    std::swap(area_id_, other->area_id_);
    std::swap(head_pic_id_, other->head_pic_id_);
    std::swap(sex_, other->sex_);
    std::swap(exp_, other->exp_);
    std::swap(gold_, other->gold_);
    std::swap(level_, other->level_);
    std::swap(action_count_, other->action_count_);
    std::swap(spirit_, other->spirit_);
    std::swap(hp_, other->hp_);
    std::swap(mp_, other->mp_);
    std::swap(yuan_bao_, other->yuan_bao_);
    std::swap(gmlevel_, other->gmlevel_);
    std::swap(cur_queue_id_, other->cur_queue_id_);
    std::swap(friend_ship_, other->friend_ship_);
    std::swap(not_ask_friend_, other->not_ask_friend_);
    std::swap(today_first_login_, other->today_first_login_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerBaseData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerBaseData_descriptor_;
  metadata.reflection = PlayerBaseData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgNodeText::kTextFieldNumber;
#endif  // !_MSC_VER

MsgNodeText::MsgNodeText()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgNodeText::InitAsDefaultInstance() {
}

MsgNodeText::MsgNodeText(const MsgNodeText& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgNodeText::SharedCtor() {
  _cached_size_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgNodeText::~MsgNodeText() {
  SharedDtor();
}

void MsgNodeText::SharedDtor() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void MsgNodeText::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgNodeText::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgNodeText_descriptor_;
}

const MsgNodeText& MsgNodeText::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

MsgNodeText* MsgNodeText::default_instance_ = NULL;

MsgNodeText* MsgNodeText::New() const {
  return new MsgNodeText;
}

void MsgNodeText::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgNodeText::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string text = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgNodeText::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string text = 1;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->text(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgNodeText::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string text = 1;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgNodeText::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string text = 1;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNodeText::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgNodeText* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgNodeText*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgNodeText::MergeFrom(const MsgNodeText& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_text()) {
      set_text(from.text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgNodeText::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgNodeText::CopyFrom(const MsgNodeText& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNodeText::IsInitialized() const {

  return true;
}

void MsgNodeText::Swap(MsgNodeText* other) {
  if (other != this) {
    std::swap(text_, other->text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgNodeText::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgNodeText_descriptor_;
  metadata.reflection = MsgNodeText_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UniqueID::kIdFieldNumber;
#endif  // !_MSC_VER

UniqueID::UniqueID()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UniqueID::InitAsDefaultInstance() {
}

UniqueID::UniqueID(const UniqueID& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UniqueID::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UniqueID::~UniqueID() {
  SharedDtor();
}

void UniqueID::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UniqueID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UniqueID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UniqueID_descriptor_;
}

const UniqueID& UniqueID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

UniqueID* UniqueID::default_instance_ = NULL;

UniqueID* UniqueID::New() const {
  return new UniqueID;
}

void UniqueID::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UniqueID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UniqueID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UniqueID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UniqueID::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UniqueID::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UniqueID* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UniqueID*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UniqueID::MergeFrom(const UniqueID& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UniqueID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UniqueID::CopyFrom(const UniqueID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UniqueID::IsInitialized() const {

  return true;
}

void UniqueID::Swap(UniqueID* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UniqueID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UniqueID_descriptor_;
  metadata.reflection = UniqueID_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Priority::kPriFieldNumber;
#endif  // !_MSC_VER

Priority::Priority()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Priority::InitAsDefaultInstance() {
}

Priority::Priority(const Priority& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Priority::SharedCtor() {
  _cached_size_ = 0;
  pri_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Priority::~Priority() {
  SharedDtor();
}

void Priority::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Priority::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Priority::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Priority_descriptor_;
}

const Priority& Priority::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

Priority* Priority::default_instance_ = NULL;

Priority* Priority::New() const {
  return new Priority;
}

void Priority::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pri_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Priority::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 pri = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pri_)));
          set_has_pri();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Priority::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 pri = 1;
  if (has_pri()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pri(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Priority::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 pri = 1;
  if (has_pri()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pri(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Priority::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 pri = 1;
    if (has_pri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pri());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Priority::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Priority* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Priority*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Priority::MergeFrom(const Priority& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pri()) {
      set_pri(from.pri());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Priority::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Priority::CopyFrom(const Priority& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Priority::IsInitialized() const {

  return true;
}

void Priority::Swap(Priority* other) {
  if (other != this) {
    std::swap(pri_, other->pri_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Priority::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Priority_descriptor_;
  metadata.reflection = Priority_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RepeatCount::kCountFieldNumber;
#endif  // !_MSC_VER

RepeatCount::RepeatCount()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RepeatCount::InitAsDefaultInstance() {
}

RepeatCount::RepeatCount(const RepeatCount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RepeatCount::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RepeatCount::~RepeatCount() {
  SharedDtor();
}

void RepeatCount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RepeatCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RepeatCount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RepeatCount_descriptor_;
}

const RepeatCount& RepeatCount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

RepeatCount* RepeatCount::default_instance_ = NULL;

RepeatCount* RepeatCount::New() const {
  return new RepeatCount;
}

void RepeatCount::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RepeatCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RepeatCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 count = 1;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RepeatCount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 count = 1;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RepeatCount::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 count = 1;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RepeatCount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RepeatCount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RepeatCount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RepeatCount::MergeFrom(const RepeatCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RepeatCount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RepeatCount::CopyFrom(const RepeatCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RepeatCount::IsInitialized() const {

  return true;
}

void RepeatCount::Swap(RepeatCount* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RepeatCount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RepeatCount_descriptor_;
  metadata.reflection = RepeatCount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgNodePlayerIDName::kIdFieldNumber;
const int MsgNodePlayerIDName::kNameFieldNumber;
#endif  // !_MSC_VER

MsgNodePlayerIDName::MsgNodePlayerIDName()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgNodePlayerIDName::InitAsDefaultInstance() {
}

MsgNodePlayerIDName::MsgNodePlayerIDName(const MsgNodePlayerIDName& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgNodePlayerIDName::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgNodePlayerIDName::~MsgNodePlayerIDName() {
  SharedDtor();
}

void MsgNodePlayerIDName::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void MsgNodePlayerIDName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgNodePlayerIDName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgNodePlayerIDName_descriptor_;
}

const MsgNodePlayerIDName& MsgNodePlayerIDName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

MsgNodePlayerIDName* MsgNodePlayerIDName::default_instance_ = NULL;

MsgNodePlayerIDName* MsgNodePlayerIDName::New() const {
  return new MsgNodePlayerIDName;
}

void MsgNodePlayerIDName::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgNodePlayerIDName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgNodePlayerIDName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgNodePlayerIDName::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgNodePlayerIDName::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNodePlayerIDName::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgNodePlayerIDName* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgNodePlayerIDName*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgNodePlayerIDName::MergeFrom(const MsgNodePlayerIDName& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgNodePlayerIDName::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgNodePlayerIDName::CopyFrom(const MsgNodePlayerIDName& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNodePlayerIDName::IsInitialized() const {

  return true;
}

void MsgNodePlayerIDName::Swap(MsgNodePlayerIDName* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgNodePlayerIDName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgNodePlayerIDName_descriptor_;
  metadata.reflection = MsgNodePlayerIDName_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MessageRepeateNode::kNodesFieldNumber;
#endif  // !_MSC_VER

MessageRepeateNode::MessageRepeateNode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MessageRepeateNode::InitAsDefaultInstance() {
}

MessageRepeateNode::MessageRepeateNode(const MessageRepeateNode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MessageRepeateNode::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageRepeateNode::~MessageRepeateNode() {
  SharedDtor();
}

void MessageRepeateNode::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MessageRepeateNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageRepeateNode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageRepeateNode_descriptor_;
}

const MessageRepeateNode& MessageRepeateNode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

MessageRepeateNode* MessageRepeateNode::default_instance_ = NULL;

MessageRepeateNode* MessageRepeateNode::New() const {
  return new MessageRepeateNode;
}

void MessageRepeateNode::Clear() {
  nodes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MessageRepeateNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protoc.gameproto.MessageNode nodes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_nodes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_nodes;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MessageRepeateNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protoc.gameproto.MessageNode nodes = 1;
  for (int i = 0; i < this->nodes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->nodes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MessageRepeateNode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protoc.gameproto.MessageNode nodes = 1;
  for (int i = 0; i < this->nodes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->nodes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MessageRepeateNode::ByteSize() const {
  int total_size = 0;

  // repeated .protoc.gameproto.MessageNode nodes = 1;
  total_size += 1 * this->nodes_size();
  for (int i = 0; i < this->nodes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nodes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageRepeateNode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MessageRepeateNode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MessageRepeateNode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MessageRepeateNode::MergeFrom(const MessageRepeateNode& from) {
  GOOGLE_CHECK_NE(&from, this);
  nodes_.MergeFrom(from.nodes_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MessageRepeateNode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageRepeateNode::CopyFrom(const MessageRepeateNode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageRepeateNode::IsInitialized() const {

  return true;
}

void MessageRepeateNode::Swap(MessageRepeateNode* other) {
  if (other != this) {
    nodes_.Swap(&other->nodes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MessageRepeateNode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageRepeateNode_descriptor_;
  metadata.reflection = MessageRepeateNode_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MessageNode::kNodeTypeFieldNumber;
const int MessageNode::kDataFieldNumber;
#endif  // !_MSC_VER

MessageNode::MessageNode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MessageNode::InitAsDefaultInstance() {
}

MessageNode::MessageNode(const MessageNode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MessageNode::SharedCtor() {
  _cached_size_ = 0;
  node_type_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageNode::~MessageNode() {
  SharedDtor();
}

void MessageNode::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void MessageNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageNode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageNode_descriptor_;
}

const MessageNode& MessageNode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

MessageNode* MessageNode::default_instance_ = NULL;

MessageNode* MessageNode::New() const {
  return new MessageNode;
}

void MessageNode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    node_type_ = 0;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MessageNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protoc.gameproto.CHAT_MSG_NODE_TYPE node_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protoc::gameproto::CHAT_MSG_NODE_TYPE_IsValid(value)) {
            set_node_type(static_cast< ::protoc::gameproto::CHAT_MSG_NODE_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional bytes data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MessageNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .protoc.gameproto.CHAT_MSG_NODE_TYPE node_type = 1;
  if (has_node_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->node_type(), output);
  }

  // optional bytes data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MessageNode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .protoc.gameproto.CHAT_MSG_NODE_TYPE node_type = 1;
  if (has_node_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->node_type(), target);
  }

  // optional bytes data = 2;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MessageNode::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .protoc.gameproto.CHAT_MSG_NODE_TYPE node_type = 1;
    if (has_node_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->node_type());
    }

    // optional bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageNode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MessageNode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MessageNode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MessageNode::MergeFrom(const MessageNode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_node_type()) {
      set_node_type(from.node_type());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MessageNode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageNode::CopyFrom(const MessageNode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageNode::IsInitialized() const {

  return true;
}

void MessageNode::Swap(MessageNode* other) {
  if (other != this) {
    std::swap(node_type_, other->node_type_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MessageNode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageNode_descriptor_;
  metadata.reflection = MessageNode_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChatRpt::kMsgTypeFieldNumber;
const int ChatRpt::kMsgFieldNumber;
const int ChatRpt::kToPlayeridFieldNumber;
const int ChatRpt::kToPlayernameFieldNumber;
const int ChatRpt::kNodesFieldNumber;
#endif  // !_MSC_VER

ChatRpt::ChatRpt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChatRpt::InitAsDefaultInstance() {
}

ChatRpt::ChatRpt(const ChatRpt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChatRpt::SharedCtor() {
  _cached_size_ = 0;
  msg_type_ = 0;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  to_playerid_ = GOOGLE_ULONGLONG(0);
  to_playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatRpt::~ChatRpt() {
  SharedDtor();
}

void ChatRpt::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (to_playername_ != &::google::protobuf::internal::kEmptyString) {
    delete to_playername_;
  }
  if (this != default_instance_) {
  }
}

void ChatRpt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatRpt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatRpt_descriptor_;
}

const ChatRpt& ChatRpt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

ChatRpt* ChatRpt::default_instance_ = NULL;

ChatRpt* ChatRpt::New() const {
  return new ChatRpt;
}

void ChatRpt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msg_type_ = 0;
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
    to_playerid_ = GOOGLE_ULONGLONG(0);
    if (has_to_playername()) {
      if (to_playername_ != &::google::protobuf::internal::kEmptyString) {
        to_playername_->clear();
      }
    }
  }
  nodes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatRpt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protoc.gameproto.CHAT_MSG_TYPE msg_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protoc::gameproto::CHAT_MSG_TYPE_IsValid(value)) {
            set_msg_type(static_cast< ::protoc::gameproto::CHAT_MSG_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }

      // optional string msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_to_playerid;
        break;
      }

      // optional uint64 to_playerid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_to_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &to_playerid_)));
          set_has_to_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_to_playername;
        break;
      }

      // optional string to_playername = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_to_playername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to_playername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->to_playername().data(), this->to_playername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_nodes;
        break;
      }

      // repeated .protoc.gameproto.MessageNode nodes = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_nodes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_nodes;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChatRpt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .protoc.gameproto.CHAT_MSG_TYPE msg_type = 1;
  if (has_msg_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msg_type(), output);
  }

  // optional string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->msg(), output);
  }

  // optional uint64 to_playerid = 3;
  if (has_to_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->to_playerid(), output);
  }

  // optional string to_playername = 4;
  if (has_to_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->to_playername().data(), this->to_playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->to_playername(), output);
  }

  // repeated .protoc.gameproto.MessageNode nodes = 5;
  for (int i = 0; i < this->nodes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->nodes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChatRpt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .protoc.gameproto.CHAT_MSG_TYPE msg_type = 1;
  if (has_msg_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msg_type(), target);
  }

  // optional string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg(), target);
  }

  // optional uint64 to_playerid = 3;
  if (has_to_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->to_playerid(), target);
  }

  // optional string to_playername = 4;
  if (has_to_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->to_playername().data(), this->to_playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->to_playername(), target);
  }

  // repeated .protoc.gameproto.MessageNode nodes = 5;
  for (int i = 0; i < this->nodes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->nodes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChatRpt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .protoc.gameproto.CHAT_MSG_TYPE msg_type = 1;
    if (has_msg_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_type());
    }

    // optional string msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

    // optional uint64 to_playerid = 3;
    if (has_to_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->to_playerid());
    }

    // optional string to_playername = 4;
    if (has_to_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->to_playername());
    }

  }
  // repeated .protoc.gameproto.MessageNode nodes = 5;
  total_size += 1 * this->nodes_size();
  for (int i = 0; i < this->nodes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nodes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatRpt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatRpt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChatRpt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatRpt::MergeFrom(const ChatRpt& from) {
  GOOGLE_CHECK_NE(&from, this);
  nodes_.MergeFrom(from.nodes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_type()) {
      set_msg_type(from.msg_type());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
    if (from.has_to_playerid()) {
      set_to_playerid(from.to_playerid());
    }
    if (from.has_to_playername()) {
      set_to_playername(from.to_playername());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatRpt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatRpt::CopyFrom(const ChatRpt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatRpt::IsInitialized() const {

  return true;
}

void ChatRpt::Swap(ChatRpt* other) {
  if (other != this) {
    std::swap(msg_type_, other->msg_type_);
    std::swap(msg_, other->msg_);
    std::swap(to_playerid_, other->to_playerid_);
    std::swap(to_playername_, other->to_playername_);
    nodes_.Swap(&other->nodes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChatRpt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatRpt_descriptor_;
  metadata.reflection = ChatRpt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChatNtf::kMsgTypeFieldNumber;
const int ChatNtf::kNodesFieldNumber;
const int ChatNtf::kErrNoFieldNumber;
#endif  // !_MSC_VER

ChatNtf::ChatNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChatNtf::InitAsDefaultInstance() {
}

ChatNtf::ChatNtf(const ChatNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChatNtf::SharedCtor() {
  _cached_size_ = 0;
  msg_type_ = 0;
  err_no_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatNtf::~ChatNtf() {
  SharedDtor();
}

void ChatNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChatNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatNtf_descriptor_;
}

const ChatNtf& ChatNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

ChatNtf* ChatNtf::default_instance_ = NULL;

ChatNtf* ChatNtf::New() const {
  return new ChatNtf;
}

void ChatNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msg_type_ = 0;
    err_no_ = 0;
  }
  nodes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protoc.gameproto.CHAT_MSG_TYPE msg_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protoc::gameproto::CHAT_MSG_TYPE_IsValid(value)) {
            set_msg_type(static_cast< ::protoc::gameproto::CHAT_MSG_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nodes;
        break;
      }

      // repeated .protoc.gameproto.MessageNode nodes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_nodes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nodes;
        if (input->ExpectTag(24)) goto parse_err_no;
        break;
      }

      // optional int32 err_no = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_err_no:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_no_)));
          set_has_err_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChatNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .protoc.gameproto.CHAT_MSG_TYPE msg_type = 1;
  if (has_msg_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msg_type(), output);
  }

  // repeated .protoc.gameproto.MessageNode nodes = 2;
  for (int i = 0; i < this->nodes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->nodes(i), output);
  }

  // optional int32 err_no = 3;
  if (has_err_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->err_no(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChatNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .protoc.gameproto.CHAT_MSG_TYPE msg_type = 1;
  if (has_msg_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msg_type(), target);
  }

  // repeated .protoc.gameproto.MessageNode nodes = 2;
  for (int i = 0; i < this->nodes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->nodes(i), target);
  }

  // optional int32 err_no = 3;
  if (has_err_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->err_no(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChatNtf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .protoc.gameproto.CHAT_MSG_TYPE msg_type = 1;
    if (has_msg_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_type());
    }

    // optional int32 err_no = 3;
    if (has_err_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err_no());
    }

  }
  // repeated .protoc.gameproto.MessageNode nodes = 2;
  total_size += 1 * this->nodes_size();
  for (int i = 0; i < this->nodes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nodes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChatNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatNtf::MergeFrom(const ChatNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  nodes_.MergeFrom(from.nodes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_type()) {
      set_msg_type(from.msg_type());
    }
    if (from.has_err_no()) {
      set_err_no(from.err_no());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatNtf::CopyFrom(const ChatNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatNtf::IsInitialized() const {

  return true;
}

void ChatNtf::Swap(ChatNtf* other) {
  if (other != this) {
    std::swap(msg_type_, other->msg_type_);
    nodes_.Swap(&other->nodes_);
    std::swap(err_no_, other->err_no_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChatNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatNtf_descriptor_;
  metadata.reflection = ChatNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GSChatNtf::kMsgTypeFieldNumber;
const int GSChatNtf::kPlayeridFieldNumber;
const int GSChatNtf::kToPlayeridFieldNumber;
const int GSChatNtf::kToPlayernameFieldNumber;
const int GSChatNtf::kNodesFieldNumber;
#endif  // !_MSC_VER

GSChatNtf::GSChatNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GSChatNtf::InitAsDefaultInstance() {
}

GSChatNtf::GSChatNtf(const GSChatNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GSChatNtf::SharedCtor() {
  _cached_size_ = 0;
  msg_type_ = 0;
  playerid_ = GOOGLE_ULONGLONG(0);
  to_playerid_ = GOOGLE_ULONGLONG(0);
  to_playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GSChatNtf::~GSChatNtf() {
  SharedDtor();
}

void GSChatNtf::SharedDtor() {
  if (to_playername_ != &::google::protobuf::internal::kEmptyString) {
    delete to_playername_;
  }
  if (this != default_instance_) {
  }
}

void GSChatNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GSChatNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GSChatNtf_descriptor_;
}

const GSChatNtf& GSChatNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

GSChatNtf* GSChatNtf::default_instance_ = NULL;

GSChatNtf* GSChatNtf::New() const {
  return new GSChatNtf;
}

void GSChatNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msg_type_ = 0;
    playerid_ = GOOGLE_ULONGLONG(0);
    to_playerid_ = GOOGLE_ULONGLONG(0);
    if (has_to_playername()) {
      if (to_playername_ != &::google::protobuf::internal::kEmptyString) {
        to_playername_->clear();
      }
    }
  }
  nodes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GSChatNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protoc.gameproto.CHAT_MSG_TYPE msg_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protoc::gameproto::CHAT_MSG_TYPE_IsValid(value)) {
            set_msg_type(static_cast< ::protoc::gameproto::CHAT_MSG_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerid;
        break;
      }

      // optional uint64 playerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_to_playerid;
        break;
      }

      // optional uint64 to_playerid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_to_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &to_playerid_)));
          set_has_to_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_to_playername;
        break;
      }

      // optional string to_playername = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_to_playername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to_playername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->to_playername().data(), this->to_playername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_nodes;
        break;
      }

      // repeated .protoc.gameproto.MessageNode nodes = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_nodes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_nodes;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GSChatNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .protoc.gameproto.CHAT_MSG_TYPE msg_type = 1;
  if (has_msg_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msg_type(), output);
  }

  // optional uint64 playerid = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->playerid(), output);
  }

  // optional uint64 to_playerid = 3;
  if (has_to_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->to_playerid(), output);
  }

  // optional string to_playername = 4;
  if (has_to_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->to_playername().data(), this->to_playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->to_playername(), output);
  }

  // repeated .protoc.gameproto.MessageNode nodes = 5;
  for (int i = 0; i < this->nodes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->nodes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GSChatNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .protoc.gameproto.CHAT_MSG_TYPE msg_type = 1;
  if (has_msg_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msg_type(), target);
  }

  // optional uint64 playerid = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->playerid(), target);
  }

  // optional uint64 to_playerid = 3;
  if (has_to_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->to_playerid(), target);
  }

  // optional string to_playername = 4;
  if (has_to_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->to_playername().data(), this->to_playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->to_playername(), target);
  }

  // repeated .protoc.gameproto.MessageNode nodes = 5;
  for (int i = 0; i < this->nodes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->nodes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GSChatNtf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .protoc.gameproto.CHAT_MSG_TYPE msg_type = 1;
    if (has_msg_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_type());
    }

    // optional uint64 playerid = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

    // optional uint64 to_playerid = 3;
    if (has_to_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->to_playerid());
    }

    // optional string to_playername = 4;
    if (has_to_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->to_playername());
    }

  }
  // repeated .protoc.gameproto.MessageNode nodes = 5;
  total_size += 1 * this->nodes_size();
  for (int i = 0; i < this->nodes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nodes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GSChatNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GSChatNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GSChatNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GSChatNtf::MergeFrom(const GSChatNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  nodes_.MergeFrom(from.nodes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_type()) {
      set_msg_type(from.msg_type());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_to_playerid()) {
      set_to_playerid(from.to_playerid());
    }
    if (from.has_to_playername()) {
      set_to_playername(from.to_playername());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GSChatNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GSChatNtf::CopyFrom(const GSChatNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GSChatNtf::IsInitialized() const {

  return true;
}

void GSChatNtf::Swap(GSChatNtf* other) {
  if (other != this) {
    std::swap(msg_type_, other->msg_type_);
    std::swap(playerid_, other->playerid_);
    std::swap(to_playerid_, other->to_playerid_);
    std::swap(to_playername_, other->to_playername_);
    nodes_.Swap(&other->nodes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GSChatNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GSChatNtf_descriptor_;
  metadata.reflection = GSChatNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GSSystemMessageNtf::kMsgTypeFieldNumber;
const int GSSystemMessageNtf::kMsgFieldNumber;
const int GSSystemMessageNtf::kNodesFieldNumber;
#endif  // !_MSC_VER

GSSystemMessageNtf::GSSystemMessageNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GSSystemMessageNtf::InitAsDefaultInstance() {
}

GSSystemMessageNtf::GSSystemMessageNtf(const GSSystemMessageNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GSSystemMessageNtf::SharedCtor() {
  _cached_size_ = 0;
  msg_type_ = 0;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GSSystemMessageNtf::~GSSystemMessageNtf() {
  SharedDtor();
}

void GSSystemMessageNtf::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void GSSystemMessageNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GSSystemMessageNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GSSystemMessageNtf_descriptor_;
}

const GSSystemMessageNtf& GSSystemMessageNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

GSSystemMessageNtf* GSSystemMessageNtf::default_instance_ = NULL;

GSSystemMessageNtf* GSSystemMessageNtf::New() const {
  return new GSSystemMessageNtf;
}

void GSSystemMessageNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msg_type_ = 0;
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
  }
  nodes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GSSystemMessageNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protoc.gameproto.SYSTEM_MSG_TYPE msg_type = 1 [default = E_NORMALL_MSG];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protoc::gameproto::SYSTEM_MSG_TYPE_IsValid(value)) {
            set_msg_type(static_cast< ::protoc::gameproto::SYSTEM_MSG_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }

      // optional string msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_nodes;
        break;
      }

      // repeated .protoc.gameproto.MessageNode nodes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_nodes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_nodes;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GSSystemMessageNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .protoc.gameproto.SYSTEM_MSG_TYPE msg_type = 1 [default = E_NORMALL_MSG];
  if (has_msg_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msg_type(), output);
  }

  // optional string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->msg(), output);
  }

  // repeated .protoc.gameproto.MessageNode nodes = 3;
  for (int i = 0; i < this->nodes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->nodes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GSSystemMessageNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .protoc.gameproto.SYSTEM_MSG_TYPE msg_type = 1 [default = E_NORMALL_MSG];
  if (has_msg_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msg_type(), target);
  }

  // optional string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg(), target);
  }

  // repeated .protoc.gameproto.MessageNode nodes = 3;
  for (int i = 0; i < this->nodes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->nodes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GSSystemMessageNtf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .protoc.gameproto.SYSTEM_MSG_TYPE msg_type = 1 [default = E_NORMALL_MSG];
    if (has_msg_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_type());
    }

    // optional string msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

  }
  // repeated .protoc.gameproto.MessageNode nodes = 3;
  total_size += 1 * this->nodes_size();
  for (int i = 0; i < this->nodes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nodes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GSSystemMessageNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GSSystemMessageNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GSSystemMessageNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GSSystemMessageNtf::MergeFrom(const GSSystemMessageNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  nodes_.MergeFrom(from.nodes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_type()) {
      set_msg_type(from.msg_type());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GSSystemMessageNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GSSystemMessageNtf::CopyFrom(const GSSystemMessageNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GSSystemMessageNtf::IsInitialized() const {

  return true;
}

void GSSystemMessageNtf::Swap(GSSystemMessageNtf* other) {
  if (other != this) {
    std::swap(msg_type_, other->msg_type_);
    std::swap(msg_, other->msg_);
    nodes_.Swap(&other->nodes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GSSystemMessageNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GSSystemMessageNtf_descriptor_;
  metadata.reflection = GSSystemMessageNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SystemMessage::kMsgTypeFieldNumber;
const int SystemMessage::kMsgFieldNumber;
const int SystemMessage::kNodesFieldNumber;
const int SystemMessage::kIsMyMsgFieldNumber;
#endif  // !_MSC_VER

SystemMessage::SystemMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SystemMessage::InitAsDefaultInstance() {
}

SystemMessage::SystemMessage(const SystemMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SystemMessage::SharedCtor() {
  _cached_size_ = 0;
  msg_type_ = 0;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_my_msg_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SystemMessage::~SystemMessage() {
  SharedDtor();
}

void SystemMessage::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void SystemMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SystemMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SystemMessage_descriptor_;
}

const SystemMessage& SystemMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

SystemMessage* SystemMessage::default_instance_ = NULL;

SystemMessage* SystemMessage::New() const {
  return new SystemMessage;
}

void SystemMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msg_type_ = 0;
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
    is_my_msg_ = false;
  }
  nodes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SystemMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protoc.gameproto.SYSTEM_MSG_TYPE msg_type = 1 [default = E_NORMALL_MSG];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protoc::gameproto::SYSTEM_MSG_TYPE_IsValid(value)) {
            set_msg_type(static_cast< ::protoc::gameproto::SYSTEM_MSG_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }

      // optional string msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_nodes;
        break;
      }

      // repeated .protoc.gameproto.MessageNode nodes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_nodes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_nodes;
        if (input->ExpectTag(32)) goto parse_is_my_msg;
        break;
      }

      // optional bool is_my_msg = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_my_msg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_my_msg_)));
          set_has_is_my_msg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SystemMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .protoc.gameproto.SYSTEM_MSG_TYPE msg_type = 1 [default = E_NORMALL_MSG];
  if (has_msg_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msg_type(), output);
  }

  // optional string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->msg(), output);
  }

  // repeated .protoc.gameproto.MessageNode nodes = 3;
  for (int i = 0; i < this->nodes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->nodes(i), output);
  }

  // optional bool is_my_msg = 4;
  if (has_is_my_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_my_msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SystemMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .protoc.gameproto.SYSTEM_MSG_TYPE msg_type = 1 [default = E_NORMALL_MSG];
  if (has_msg_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msg_type(), target);
  }

  // optional string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg(), target);
  }

  // repeated .protoc.gameproto.MessageNode nodes = 3;
  for (int i = 0; i < this->nodes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->nodes(i), target);
  }

  // optional bool is_my_msg = 4;
  if (has_is_my_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_my_msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SystemMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .protoc.gameproto.SYSTEM_MSG_TYPE msg_type = 1 [default = E_NORMALL_MSG];
    if (has_msg_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_type());
    }

    // optional string msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

    // optional bool is_my_msg = 4;
    if (has_is_my_msg()) {
      total_size += 1 + 1;
    }

  }
  // repeated .protoc.gameproto.MessageNode nodes = 3;
  total_size += 1 * this->nodes_size();
  for (int i = 0; i < this->nodes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nodes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SystemMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SystemMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SystemMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SystemMessage::MergeFrom(const SystemMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  nodes_.MergeFrom(from.nodes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_type()) {
      set_msg_type(from.msg_type());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
    if (from.has_is_my_msg()) {
      set_is_my_msg(from.is_my_msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SystemMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SystemMessage::CopyFrom(const SystemMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemMessage::IsInitialized() const {

  return true;
}

void SystemMessage::Swap(SystemMessage* other) {
  if (other != this) {
    std::swap(msg_type_, other->msg_type_);
    std::swap(msg_, other->msg_);
    nodes_.Swap(&other->nodes_);
    std::swap(is_my_msg_, other->is_my_msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SystemMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SystemMessage_descriptor_;
  metadata.reflection = SystemMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMExecuteResult::kErrNoFieldNumber;
const int GMExecuteResult::kMsgFieldNumber;
#endif  // !_MSC_VER

GMExecuteResult::GMExecuteResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMExecuteResult::InitAsDefaultInstance() {
}

GMExecuteResult::GMExecuteResult(const GMExecuteResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMExecuteResult::SharedCtor() {
  _cached_size_ = 0;
  err_no_ = 0;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMExecuteResult::~GMExecuteResult() {
  SharedDtor();
}

void GMExecuteResult::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void GMExecuteResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMExecuteResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMExecuteResult_descriptor_;
}

const GMExecuteResult& GMExecuteResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

GMExecuteResult* GMExecuteResult::default_instance_ = NULL;

GMExecuteResult* GMExecuteResult::New() const {
  return new GMExecuteResult;
}

void GMExecuteResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    err_no_ = 0;
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMExecuteResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 err_no = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_no_)));
          set_has_err_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }

      // optional string msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMExecuteResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 err_no = 1;
  if (has_err_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->err_no(), output);
  }

  // optional string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMExecuteResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 err_no = 1;
  if (has_err_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->err_no(), target);
  }

  // optional string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMExecuteResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 err_no = 1;
    if (has_err_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err_no());
    }

    // optional string msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMExecuteResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMExecuteResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMExecuteResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMExecuteResult::MergeFrom(const GMExecuteResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_err_no()) {
      set_err_no(from.err_no());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMExecuteResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMExecuteResult::CopyFrom(const GMExecuteResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMExecuteResult::IsInitialized() const {

  return true;
}

void GMExecuteResult::Swap(GMExecuteResult* other) {
  if (other != this) {
    std::swap(err_no_, other->err_no_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMExecuteResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMExecuteResult_descriptor_;
  metadata.reflection = GMExecuteResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* TeXiaoItem_ITEM_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeXiaoItem_ITEM_TYPE_descriptor_;
}
bool TeXiaoItem_ITEM_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TeXiaoItem_ITEM_TYPE TeXiaoItem::AWARD_EXP;
const TeXiaoItem_ITEM_TYPE TeXiaoItem::AWARD_GOLD;
const TeXiaoItem_ITEM_TYPE TeXiaoItem::AWARD_YUAN_BAO;
const TeXiaoItem_ITEM_TYPE TeXiaoItem::AWARD_PET;
const TeXiaoItem_ITEM_TYPE TeXiaoItem::AWARD_ACTION_COUNT;
const TeXiaoItem_ITEM_TYPE TeXiaoItem::AWARD_FRIENDSHIP;
const TeXiaoItem_ITEM_TYPE TeXiaoItem::AWARD_EQUIP;
const TeXiaoItem_ITEM_TYPE TeXiaoItem::AWARD_RANDOM_PET;
const TeXiaoItem_ITEM_TYPE TeXiaoItem::AWARD_RANDOM_EQUIP;
const TeXiaoItem_ITEM_TYPE TeXiaoItem::AWARD_GOODS;
const TeXiaoItem_ITEM_TYPE TeXiaoItem::ITEM_TYPE_MIN;
const TeXiaoItem_ITEM_TYPE TeXiaoItem::ITEM_TYPE_MAX;
const int TeXiaoItem::ITEM_TYPE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int TeXiaoItem::kItemtypeFieldNumber;
const int TeXiaoItem::kIdFieldNumber;
const int TeXiaoItem::kNumberFieldNumber;
const int TeXiaoItem::kLevelFieldNumber;
#endif  // !_MSC_VER

TeXiaoItem::TeXiaoItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeXiaoItem::InitAsDefaultInstance() {
}

TeXiaoItem::TeXiaoItem(const TeXiaoItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeXiaoItem::SharedCtor() {
  _cached_size_ = 0;
  itemtype_ = 1;
  id_ = 0;
  number_ = 0;
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeXiaoItem::~TeXiaoItem() {
  SharedDtor();
}

void TeXiaoItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeXiaoItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeXiaoItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeXiaoItem_descriptor_;
}

const TeXiaoItem& TeXiaoItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

TeXiaoItem* TeXiaoItem::default_instance_ = NULL;

TeXiaoItem* TeXiaoItem::New() const {
  return new TeXiaoItem;
}

void TeXiaoItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemtype_ = 1;
    id_ = 0;
    number_ = 0;
    level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeXiaoItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protoc.gameproto.TeXiaoItem.ITEM_TYPE itemtype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protoc::gameproto::TeXiaoItem_ITEM_TYPE_IsValid(value)) {
            set_itemtype(static_cast< ::protoc::gameproto::TeXiaoItem_ITEM_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_number;
        break;
      }

      // optional int32 number = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // optional int32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeXiaoItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .protoc.gameproto.TeXiaoItem.ITEM_TYPE itemtype = 1;
  if (has_itemtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->itemtype(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional int32 number = 3;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->number(), output);
  }

  // optional int32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeXiaoItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .protoc.gameproto.TeXiaoItem.ITEM_TYPE itemtype = 1;
  if (has_itemtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->itemtype(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // optional int32 number = 3;
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->number(), target);
  }

  // optional int32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeXiaoItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .protoc.gameproto.TeXiaoItem.ITEM_TYPE itemtype = 1;
    if (has_itemtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->itemtype());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 number = 3;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->number());
    }

    // optional int32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeXiaoItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeXiaoItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeXiaoItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeXiaoItem::MergeFrom(const TeXiaoItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemtype()) {
      set_itemtype(from.itemtype());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_number()) {
      set_number(from.number());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeXiaoItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeXiaoItem::CopyFrom(const TeXiaoItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeXiaoItem::IsInitialized() const {

  return true;
}

void TeXiaoItem::Swap(TeXiaoItem* other) {
  if (other != this) {
    std::swap(itemtype_, other->itemtype_);
    std::swap(id_, other->id_);
    std::swap(number_, other->number_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeXiaoItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeXiaoItem_descriptor_;
  metadata.reflection = TeXiaoItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeXiao::kTypeFieldNumber;
const int TeXiao::kItemFieldNumber;
#endif  // !_MSC_VER

TeXiao::TeXiao()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeXiao::InitAsDefaultInstance() {
}

TeXiao::TeXiao(const TeXiao& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeXiao::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeXiao::~TeXiao() {
  SharedDtor();
}

void TeXiao::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeXiao::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeXiao::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeXiao_descriptor_;
}

const TeXiao& TeXiao::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

TeXiao* TeXiao::default_instance_ = NULL;

TeXiao* TeXiao::New() const {
  return new TeXiao;
}

void TeXiao::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeXiao::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protoc.gameproto.TEXIAO_TYPE type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protoc::gameproto::TEXIAO_TYPE_IsValid(value)) {
            set_type(static_cast< ::protoc::gameproto::TEXIAO_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item;
        break;
      }

      // repeated .protoc.gameproto.TeXiaoItem item = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeXiao::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .protoc.gameproto.TEXIAO_TYPE type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated .protoc.gameproto.TeXiaoItem item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeXiao::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .protoc.gameproto.TEXIAO_TYPE type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // repeated .protoc.gameproto.TeXiaoItem item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeXiao::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .protoc.gameproto.TEXIAO_TYPE type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  // repeated .protoc.gameproto.TeXiaoItem item = 2;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeXiao::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeXiao* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeXiao*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeXiao::MergeFrom(const TeXiao& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeXiao::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeXiao::CopyFrom(const TeXiao& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeXiao::IsInitialized() const {

  return true;
}

void TeXiao::Swap(TeXiao* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeXiao::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeXiao_descriptor_;
  metadata.reflection = TeXiao_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeXiaoTypeNtf::kTexiaoFieldNumber;
#endif  // !_MSC_VER

TeXiaoTypeNtf::TeXiaoTypeNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeXiaoTypeNtf::InitAsDefaultInstance() {
  texiao_ = const_cast< ::protoc::gameproto::TeXiao*>(&::protoc::gameproto::TeXiao::default_instance());
}

TeXiaoTypeNtf::TeXiaoTypeNtf(const TeXiaoTypeNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeXiaoTypeNtf::SharedCtor() {
  _cached_size_ = 0;
  texiao_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeXiaoTypeNtf::~TeXiaoTypeNtf() {
  SharedDtor();
}

void TeXiaoTypeNtf::SharedDtor() {
  if (this != default_instance_) {
    delete texiao_;
  }
}

void TeXiaoTypeNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeXiaoTypeNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeXiaoTypeNtf_descriptor_;
}

const TeXiaoTypeNtf& TeXiaoTypeNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

TeXiaoTypeNtf* TeXiaoTypeNtf::default_instance_ = NULL;

TeXiaoTypeNtf* TeXiaoTypeNtf::New() const {
  return new TeXiaoTypeNtf;
}

void TeXiaoTypeNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_texiao()) {
      if (texiao_ != NULL) texiao_->::protoc::gameproto::TeXiao::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeXiaoTypeNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protoc.gameproto.TeXiao texiao = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_texiao()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeXiaoTypeNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .protoc.gameproto.TeXiao texiao = 1;
  if (has_texiao()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->texiao(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeXiaoTypeNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .protoc.gameproto.TeXiao texiao = 1;
  if (has_texiao()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->texiao(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeXiaoTypeNtf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .protoc.gameproto.TeXiao texiao = 1;
    if (has_texiao()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->texiao());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeXiaoTypeNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeXiaoTypeNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeXiaoTypeNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeXiaoTypeNtf::MergeFrom(const TeXiaoTypeNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_texiao()) {
      mutable_texiao()->::protoc::gameproto::TeXiao::MergeFrom(from.texiao());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeXiaoTypeNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeXiaoTypeNtf::CopyFrom(const TeXiaoTypeNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeXiaoTypeNtf::IsInitialized() const {

  return true;
}

void TeXiaoTypeNtf::Swap(TeXiaoTypeNtf* other) {
  if (other != this) {
    std::swap(texiao_, other->texiao_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeXiaoTypeNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeXiaoTypeNtf_descriptor_;
  metadata.reflection = TeXiaoTypeNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetKeyAwardReq::kKeyFieldNumber;
#endif  // !_MSC_VER

GetKeyAwardReq::GetKeyAwardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetKeyAwardReq::InitAsDefaultInstance() {
}

GetKeyAwardReq::GetKeyAwardReq(const GetKeyAwardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetKeyAwardReq::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetKeyAwardReq::~GetKeyAwardReq() {
  SharedDtor();
}

void GetKeyAwardReq::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void GetKeyAwardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetKeyAwardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetKeyAwardReq_descriptor_;
}

const GetKeyAwardReq& GetKeyAwardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

GetKeyAwardReq* GetKeyAwardReq::default_instance_ = NULL;

GetKeyAwardReq* GetKeyAwardReq::New() const {
  return new GetKeyAwardReq;
}

void GetKeyAwardReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetKeyAwardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetKeyAwardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetKeyAwardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetKeyAwardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetKeyAwardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetKeyAwardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetKeyAwardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetKeyAwardReq::MergeFrom(const GetKeyAwardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetKeyAwardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetKeyAwardReq::CopyFrom(const GetKeyAwardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetKeyAwardReq::IsInitialized() const {

  return true;
}

void GetKeyAwardReq::Swap(GetKeyAwardReq* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetKeyAwardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetKeyAwardReq_descriptor_;
  metadata.reflection = GetKeyAwardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetKeyAwardAck::kErrNoFieldNumber;
#endif  // !_MSC_VER

GetKeyAwardAck::GetKeyAwardAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetKeyAwardAck::InitAsDefaultInstance() {
}

GetKeyAwardAck::GetKeyAwardAck(const GetKeyAwardAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetKeyAwardAck::SharedCtor() {
  _cached_size_ = 0;
  err_no_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetKeyAwardAck::~GetKeyAwardAck() {
  SharedDtor();
}

void GetKeyAwardAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetKeyAwardAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetKeyAwardAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetKeyAwardAck_descriptor_;
}

const GetKeyAwardAck& GetKeyAwardAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

GetKeyAwardAck* GetKeyAwardAck::default_instance_ = NULL;

GetKeyAwardAck* GetKeyAwardAck::New() const {
  return new GetKeyAwardAck;
}

void GetKeyAwardAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    err_no_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetKeyAwardAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 err_no = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_no_)));
          set_has_err_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetKeyAwardAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 err_no = 1;
  if (has_err_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->err_no(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetKeyAwardAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 err_no = 1;
  if (has_err_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->err_no(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetKeyAwardAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 err_no = 1;
    if (has_err_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err_no());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetKeyAwardAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetKeyAwardAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetKeyAwardAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetKeyAwardAck::MergeFrom(const GetKeyAwardAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_err_no()) {
      set_err_no(from.err_no());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetKeyAwardAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetKeyAwardAck::CopyFrom(const GetKeyAwardAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetKeyAwardAck::IsInitialized() const {

  return true;
}

void GetKeyAwardAck::Swap(GetKeyAwardAck* other) {
  if (other != this) {
    std::swap(err_no_, other->err_no_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetKeyAwardAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetKeyAwardAck_descriptor_;
  metadata.reflection = GetKeyAwardAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

NeedCreatePlayerName::NeedCreatePlayerName()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NeedCreatePlayerName::InitAsDefaultInstance() {
}

NeedCreatePlayerName::NeedCreatePlayerName(const NeedCreatePlayerName& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NeedCreatePlayerName::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NeedCreatePlayerName::~NeedCreatePlayerName() {
  SharedDtor();
}

void NeedCreatePlayerName::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NeedCreatePlayerName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NeedCreatePlayerName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NeedCreatePlayerName_descriptor_;
}

const NeedCreatePlayerName& NeedCreatePlayerName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

NeedCreatePlayerName* NeedCreatePlayerName::default_instance_ = NULL;

NeedCreatePlayerName* NeedCreatePlayerName::New() const {
  return new NeedCreatePlayerName;
}

void NeedCreatePlayerName::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NeedCreatePlayerName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void NeedCreatePlayerName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NeedCreatePlayerName::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NeedCreatePlayerName::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NeedCreatePlayerName::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NeedCreatePlayerName* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NeedCreatePlayerName*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NeedCreatePlayerName::MergeFrom(const NeedCreatePlayerName& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NeedCreatePlayerName::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NeedCreatePlayerName::CopyFrom(const NeedCreatePlayerName& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NeedCreatePlayerName::IsInitialized() const {

  return true;
}

void NeedCreatePlayerName::Swap(NeedCreatePlayerName* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NeedCreatePlayerName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NeedCreatePlayerName_descriptor_;
  metadata.reflection = NeedCreatePlayerName_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreatePlayerNameReq::kNewnameFieldNumber;
const int CreatePlayerNameReq::kHeadPicIdFieldNumber;
const int CreatePlayerNameReq::kSexFieldNumber;
#endif  // !_MSC_VER

CreatePlayerNameReq::CreatePlayerNameReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreatePlayerNameReq::InitAsDefaultInstance() {
}

CreatePlayerNameReq::CreatePlayerNameReq(const CreatePlayerNameReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreatePlayerNameReq::SharedCtor() {
  _cached_size_ = 0;
  newname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  head_pic_id_ = 0u;
  sex_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreatePlayerNameReq::~CreatePlayerNameReq() {
  SharedDtor();
}

void CreatePlayerNameReq::SharedDtor() {
  if (newname_ != &::google::protobuf::internal::kEmptyString) {
    delete newname_;
  }
  if (this != default_instance_) {
  }
}

void CreatePlayerNameReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreatePlayerNameReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreatePlayerNameReq_descriptor_;
}

const CreatePlayerNameReq& CreatePlayerNameReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

CreatePlayerNameReq* CreatePlayerNameReq::default_instance_ = NULL;

CreatePlayerNameReq* CreatePlayerNameReq::New() const {
  return new CreatePlayerNameReq;
}

void CreatePlayerNameReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_newname()) {
      if (newname_ != &::google::protobuf::internal::kEmptyString) {
        newname_->clear();
      }
    }
    head_pic_id_ = 0u;
    sex_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreatePlayerNameReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string newname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_newname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->newname().data(), this->newname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_head_pic_id;
        break;
      }

      // optional uint32 head_pic_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_head_pic_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &head_pic_id_)));
          set_has_head_pic_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sex;
        break;
      }

      // optional bool sex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreatePlayerNameReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string newname = 1;
  if (has_newname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->newname().data(), this->newname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->newname(), output);
  }

  // optional uint32 head_pic_id = 2;
  if (has_head_pic_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->head_pic_id(), output);
  }

  // optional bool sex = 4;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->sex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreatePlayerNameReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string newname = 1;
  if (has_newname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->newname().data(), this->newname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->newname(), target);
  }

  // optional uint32 head_pic_id = 2;
  if (has_head_pic_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->head_pic_id(), target);
  }

  // optional bool sex = 4;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->sex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreatePlayerNameReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string newname = 1;
    if (has_newname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->newname());
    }

    // optional uint32 head_pic_id = 2;
    if (has_head_pic_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->head_pic_id());
    }

    // optional bool sex = 4;
    if (has_sex()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreatePlayerNameReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreatePlayerNameReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreatePlayerNameReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreatePlayerNameReq::MergeFrom(const CreatePlayerNameReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_newname()) {
      set_newname(from.newname());
    }
    if (from.has_head_pic_id()) {
      set_head_pic_id(from.head_pic_id());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreatePlayerNameReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreatePlayerNameReq::CopyFrom(const CreatePlayerNameReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreatePlayerNameReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CreatePlayerNameReq::Swap(CreatePlayerNameReq* other) {
  if (other != this) {
    std::swap(newname_, other->newname_);
    std::swap(head_pic_id_, other->head_pic_id_);
    std::swap(sex_, other->sex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreatePlayerNameReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreatePlayerNameReq_descriptor_;
  metadata.reflection = CreatePlayerNameReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreatePlayerNameAck::kErrNoFieldNumber;
#endif  // !_MSC_VER

CreatePlayerNameAck::CreatePlayerNameAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreatePlayerNameAck::InitAsDefaultInstance() {
}

CreatePlayerNameAck::CreatePlayerNameAck(const CreatePlayerNameAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreatePlayerNameAck::SharedCtor() {
  _cached_size_ = 0;
  err_no_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreatePlayerNameAck::~CreatePlayerNameAck() {
  SharedDtor();
}

void CreatePlayerNameAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CreatePlayerNameAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreatePlayerNameAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreatePlayerNameAck_descriptor_;
}

const CreatePlayerNameAck& CreatePlayerNameAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

CreatePlayerNameAck* CreatePlayerNameAck::default_instance_ = NULL;

CreatePlayerNameAck* CreatePlayerNameAck::New() const {
  return new CreatePlayerNameAck;
}

void CreatePlayerNameAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    err_no_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreatePlayerNameAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 err_no = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_no_)));
          set_has_err_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreatePlayerNameAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 err_no = 1;
  if (has_err_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->err_no(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreatePlayerNameAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 err_no = 1;
  if (has_err_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->err_no(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreatePlayerNameAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 err_no = 1;
    if (has_err_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err_no());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreatePlayerNameAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreatePlayerNameAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreatePlayerNameAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreatePlayerNameAck::MergeFrom(const CreatePlayerNameAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_err_no()) {
      set_err_no(from.err_no());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreatePlayerNameAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreatePlayerNameAck::CopyFrom(const CreatePlayerNameAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreatePlayerNameAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CreatePlayerNameAck::Swap(CreatePlayerNameAck* other) {
  if (other != this) {
    std::swap(err_no_, other->err_no_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreatePlayerNameAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreatePlayerNameAck_descriptor_;
  metadata.reflection = CreatePlayerNameAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShangChengGoods::kIdFieldNumber;
const int ShangChengGoods::kKindFieldNumber;
const int ShangChengGoods::kPriceFieldNumber;
const int ShangChengGoods::kPrice1FieldNumber;
const int ShangChengGoods::kEndTimeFieldNumber;
const int ShangChengGoods::kLimitNumberFieldNumber;
const int ShangChengGoods::kSellTypeFieldNumber;
const int ShangChengGoods::kPercentFieldNumber;
#endif  // !_MSC_VER

ShangChengGoods::ShangChengGoods()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShangChengGoods::InitAsDefaultInstance() {
}

ShangChengGoods::ShangChengGoods(const ShangChengGoods& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShangChengGoods::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  kind_ = 0u;
  price_ = 0u;
  price_1_ = 0u;
  end_time_ = GOOGLE_LONGLONG(0);
  limit_number_ = 0;
  sell_type_ = 0;
  percent_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShangChengGoods::~ShangChengGoods() {
  SharedDtor();
}

void ShangChengGoods::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShangChengGoods::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShangChengGoods::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShangChengGoods_descriptor_;
}

const ShangChengGoods& ShangChengGoods::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

ShangChengGoods* ShangChengGoods::default_instance_ = NULL;

ShangChengGoods* ShangChengGoods::New() const {
  return new ShangChengGoods;
}

void ShangChengGoods::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    kind_ = 0u;
    price_ = 0u;
    price_1_ = 0u;
    end_time_ = GOOGLE_LONGLONG(0);
    limit_number_ = 0;
    sell_type_ = 0;
    percent_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShangChengGoods::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_kind;
        break;
      }

      // optional uint32 kind = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kind_)));
          set_has_kind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_price;
        break;
      }

      // optional uint32 price = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_price_1;
        break;
      }

      // optional uint32 price_1 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &price_1_)));
          set_has_price_1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_end_time;
        break;
      }

      // optional int64 end_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_limit_number;
        break;
      }

      // optional int32 limit_number = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_limit_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_number_)));
          set_has_limit_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_sell_type;
        break;
      }

      // optional int32 sell_type = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sell_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sell_type_)));
          set_has_sell_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_percent;
        break;
      }

      // optional int32 percent = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_percent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &percent_)));
          set_has_percent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShangChengGoods::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 kind = 2;
  if (has_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->kind(), output);
  }

  // optional uint32 price = 3;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->price(), output);
  }

  // optional uint32 price_1 = 4;
  if (has_price_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->price_1(), output);
  }

  // optional int64 end_time = 5;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->end_time(), output);
  }

  // optional int32 limit_number = 6;
  if (has_limit_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->limit_number(), output);
  }

  // optional int32 sell_type = 7;
  if (has_sell_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->sell_type(), output);
  }

  // optional int32 percent = 8;
  if (has_percent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->percent(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShangChengGoods::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 kind = 2;
  if (has_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->kind(), target);
  }

  // optional uint32 price = 3;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->price(), target);
  }

  // optional uint32 price_1 = 4;
  if (has_price_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->price_1(), target);
  }

  // optional int64 end_time = 5;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->end_time(), target);
  }

  // optional int32 limit_number = 6;
  if (has_limit_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->limit_number(), target);
  }

  // optional int32 sell_type = 7;
  if (has_sell_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->sell_type(), target);
  }

  // optional int32 percent = 8;
  if (has_percent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->percent(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShangChengGoods::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 kind = 2;
    if (has_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kind());
    }

    // optional uint32 price = 3;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->price());
    }

    // optional uint32 price_1 = 4;
    if (has_price_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->price_1());
    }

    // optional int64 end_time = 5;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->end_time());
    }

    // optional int32 limit_number = 6;
    if (has_limit_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->limit_number());
    }

    // optional int32 sell_type = 7;
    if (has_sell_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sell_type());
    }

    // optional int32 percent = 8;
    if (has_percent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->percent());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShangChengGoods::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShangChengGoods* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShangChengGoods*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShangChengGoods::MergeFrom(const ShangChengGoods& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_kind()) {
      set_kind(from.kind());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_price_1()) {
      set_price_1(from.price_1());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
    if (from.has_limit_number()) {
      set_limit_number(from.limit_number());
    }
    if (from.has_sell_type()) {
      set_sell_type(from.sell_type());
    }
    if (from.has_percent()) {
      set_percent(from.percent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShangChengGoods::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShangChengGoods::CopyFrom(const ShangChengGoods& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShangChengGoods::IsInitialized() const {

  return true;
}

void ShangChengGoods::Swap(ShangChengGoods* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(kind_, other->kind_);
    std::swap(price_, other->price_);
    std::swap(price_1_, other->price_1_);
    std::swap(end_time_, other->end_time_);
    std::swap(limit_number_, other->limit_number_);
    std::swap(sell_type_, other->sell_type_);
    std::swap(percent_, other->percent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShangChengGoods::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShangChengGoods_descriptor_;
  metadata.reflection = ShangChengGoods_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LabelShangChengGoods::kLabelNameFieldNumber;
const int LabelShangChengGoods::kSellgoodslistFieldNumber;
#endif  // !_MSC_VER

LabelShangChengGoods::LabelShangChengGoods()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LabelShangChengGoods::InitAsDefaultInstance() {
}

LabelShangChengGoods::LabelShangChengGoods(const LabelShangChengGoods& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LabelShangChengGoods::SharedCtor() {
  _cached_size_ = 0;
  label_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LabelShangChengGoods::~LabelShangChengGoods() {
  SharedDtor();
}

void LabelShangChengGoods::SharedDtor() {
  if (label_name_ != &::google::protobuf::internal::kEmptyString) {
    delete label_name_;
  }
  if (this != default_instance_) {
  }
}

void LabelShangChengGoods::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LabelShangChengGoods::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LabelShangChengGoods_descriptor_;
}

const LabelShangChengGoods& LabelShangChengGoods::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

LabelShangChengGoods* LabelShangChengGoods::default_instance_ = NULL;

LabelShangChengGoods* LabelShangChengGoods::New() const {
  return new LabelShangChengGoods;
}

void LabelShangChengGoods::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_label_name()) {
      if (label_name_ != &::google::protobuf::internal::kEmptyString) {
        label_name_->clear();
      }
    }
  }
  sellgoodslist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LabelShangChengGoods::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string label_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->label_name().data(), this->label_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sellgoodslist;
        break;
      }

      // repeated .protoc.gameproto.ShangChengGoods sellgoodslist = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sellgoodslist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sellgoodslist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sellgoodslist;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LabelShangChengGoods::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string label_name = 1;
  if (has_label_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->label_name().data(), this->label_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->label_name(), output);
  }

  // repeated .protoc.gameproto.ShangChengGoods sellgoodslist = 2;
  for (int i = 0; i < this->sellgoodslist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sellgoodslist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LabelShangChengGoods::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string label_name = 1;
  if (has_label_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->label_name().data(), this->label_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->label_name(), target);
  }

  // repeated .protoc.gameproto.ShangChengGoods sellgoodslist = 2;
  for (int i = 0; i < this->sellgoodslist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->sellgoodslist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LabelShangChengGoods::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string label_name = 1;
    if (has_label_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->label_name());
    }

  }
  // repeated .protoc.gameproto.ShangChengGoods sellgoodslist = 2;
  total_size += 1 * this->sellgoodslist_size();
  for (int i = 0; i < this->sellgoodslist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sellgoodslist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LabelShangChengGoods::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LabelShangChengGoods* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LabelShangChengGoods*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LabelShangChengGoods::MergeFrom(const LabelShangChengGoods& from) {
  GOOGLE_CHECK_NE(&from, this);
  sellgoodslist_.MergeFrom(from.sellgoodslist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_label_name()) {
      set_label_name(from.label_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LabelShangChengGoods::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LabelShangChengGoods::CopyFrom(const LabelShangChengGoods& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabelShangChengGoods::IsInitialized() const {

  return true;
}

void LabelShangChengGoods::Swap(LabelShangChengGoods* other) {
  if (other != this) {
    std::swap(label_name_, other->label_name_);
    sellgoodslist_.Swap(&other->sellgoodslist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LabelShangChengGoods::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LabelShangChengGoods_descriptor_;
  metadata.reflection = LabelShangChengGoods_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetShangChengGoodsListAck::kShopIdFieldNumber;
const int GetShangChengGoodsListAck::kLabelsFieldNumber;
#endif  // !_MSC_VER

GetShangChengGoodsListAck::GetShangChengGoodsListAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetShangChengGoodsListAck::InitAsDefaultInstance() {
}

GetShangChengGoodsListAck::GetShangChengGoodsListAck(const GetShangChengGoodsListAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetShangChengGoodsListAck::SharedCtor() {
  _cached_size_ = 0;
  shop_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetShangChengGoodsListAck::~GetShangChengGoodsListAck() {
  SharedDtor();
}

void GetShangChengGoodsListAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetShangChengGoodsListAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetShangChengGoodsListAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetShangChengGoodsListAck_descriptor_;
}

const GetShangChengGoodsListAck& GetShangChengGoodsListAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

GetShangChengGoodsListAck* GetShangChengGoodsListAck::default_instance_ = NULL;

GetShangChengGoodsListAck* GetShangChengGoodsListAck::New() const {
  return new GetShangChengGoodsListAck;
}

void GetShangChengGoodsListAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    shop_id_ = 0u;
  }
  labels_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetShangChengGoodsListAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 shop_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shop_id_)));
          set_has_shop_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_labels;
        break;
      }

      // repeated .protoc.gameproto.LabelShangChengGoods labels = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_labels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_labels()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_labels;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetShangChengGoodsListAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 shop_id = 1;
  if (has_shop_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->shop_id(), output);
  }

  // repeated .protoc.gameproto.LabelShangChengGoods labels = 2;
  for (int i = 0; i < this->labels_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->labels(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetShangChengGoodsListAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 shop_id = 1;
  if (has_shop_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->shop_id(), target);
  }

  // repeated .protoc.gameproto.LabelShangChengGoods labels = 2;
  for (int i = 0; i < this->labels_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->labels(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetShangChengGoodsListAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 shop_id = 1;
    if (has_shop_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shop_id());
    }

  }
  // repeated .protoc.gameproto.LabelShangChengGoods labels = 2;
  total_size += 1 * this->labels_size();
  for (int i = 0; i < this->labels_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->labels(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetShangChengGoodsListAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetShangChengGoodsListAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetShangChengGoodsListAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetShangChengGoodsListAck::MergeFrom(const GetShangChengGoodsListAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  labels_.MergeFrom(from.labels_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shop_id()) {
      set_shop_id(from.shop_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetShangChengGoodsListAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetShangChengGoodsListAck::CopyFrom(const GetShangChengGoodsListAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetShangChengGoodsListAck::IsInitialized() const {

  return true;
}

void GetShangChengGoodsListAck::Swap(GetShangChengGoodsListAck* other) {
  if (other != this) {
    std::swap(shop_id_, other->shop_id_);
    labels_.Swap(&other->labels_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetShangChengGoodsListAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetShangChengGoodsListAck_descriptor_;
  metadata.reflection = GetShangChengGoodsListAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetShangChengGoodsListReq::GetShangChengGoodsListReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetShangChengGoodsListReq::InitAsDefaultInstance() {
}

GetShangChengGoodsListReq::GetShangChengGoodsListReq(const GetShangChengGoodsListReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetShangChengGoodsListReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetShangChengGoodsListReq::~GetShangChengGoodsListReq() {
  SharedDtor();
}

void GetShangChengGoodsListReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetShangChengGoodsListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetShangChengGoodsListReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetShangChengGoodsListReq_descriptor_;
}

const GetShangChengGoodsListReq& GetShangChengGoodsListReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

GetShangChengGoodsListReq* GetShangChengGoodsListReq::default_instance_ = NULL;

GetShangChengGoodsListReq* GetShangChengGoodsListReq::New() const {
  return new GetShangChengGoodsListReq;
}

void GetShangChengGoodsListReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetShangChengGoodsListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetShangChengGoodsListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetShangChengGoodsListReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetShangChengGoodsListReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetShangChengGoodsListReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetShangChengGoodsListReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetShangChengGoodsListReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetShangChengGoodsListReq::MergeFrom(const GetShangChengGoodsListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetShangChengGoodsListReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetShangChengGoodsListReq::CopyFrom(const GetShangChengGoodsListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetShangChengGoodsListReq::IsInitialized() const {

  return true;
}

void GetShangChengGoodsListReq::Swap(GetShangChengGoodsListReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetShangChengGoodsListReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetShangChengGoodsListReq_descriptor_;
  metadata.reflection = GetShangChengGoodsListReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommonDialog::kDlgIdFieldNumber;
const int CommonDialog::kDlgTypeFieldNumber;
const int CommonDialog::kDlgReturnFieldNumber;
const int CommonDialog::kOutputTextFieldNumber;
const int CommonDialog::kInputTextFieldNumber;
const int CommonDialog::kR321FieldNumber;
const int CommonDialog::kR322FieldNumber;
const int CommonDialog::kR641FieldNumber;
#endif  // !_MSC_VER

CommonDialog::CommonDialog()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommonDialog::InitAsDefaultInstance() {
}

CommonDialog::CommonDialog(const CommonDialog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommonDialog::SharedCtor() {
  _cached_size_ = 0;
  dlg_id_ = 0;
  dlg_type_ = 1;
  dlg_return_ = 0;
  output_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  input_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  r32_1_ = 0;
  r32_2_ = 0;
  r64_1_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommonDialog::~CommonDialog() {
  SharedDtor();
}

void CommonDialog::SharedDtor() {
  if (output_text_ != &::google::protobuf::internal::kEmptyString) {
    delete output_text_;
  }
  if (input_text_ != &::google::protobuf::internal::kEmptyString) {
    delete input_text_;
  }
  if (this != default_instance_) {
  }
}

void CommonDialog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommonDialog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommonDialog_descriptor_;
}

const CommonDialog& CommonDialog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

CommonDialog* CommonDialog::default_instance_ = NULL;

CommonDialog* CommonDialog::New() const {
  return new CommonDialog;
}

void CommonDialog::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dlg_id_ = 0;
    dlg_type_ = 1;
    dlg_return_ = 0;
    if (has_output_text()) {
      if (output_text_ != &::google::protobuf::internal::kEmptyString) {
        output_text_->clear();
      }
    }
    if (has_input_text()) {
      if (input_text_ != &::google::protobuf::internal::kEmptyString) {
        input_text_->clear();
      }
    }
    r32_1_ = 0;
    r32_2_ = 0;
    r64_1_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommonDialog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 dlg_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dlg_id_)));
          set_has_dlg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dlg_type;
        break;
      }

      // optional .protoc.gameproto.CommonDialogType dlg_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dlg_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protoc::gameproto::CommonDialogType_IsValid(value)) {
            set_dlg_type(static_cast< ::protoc::gameproto::CommonDialogType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dlg_return;
        break;
      }

      // optional int32 dlg_return = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dlg_return:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dlg_return_)));
          set_has_dlg_return();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_output_text;
        break;
      }

      // optional string output_text = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_output_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_output_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->output_text().data(), this->output_text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_input_text;
        break;
      }

      // optional string input_text = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_input_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_input_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->input_text().data(), this->input_text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_r32_1;
        break;
      }

      // optional int32 r32_1 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_r32_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &r32_1_)));
          set_has_r32_1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_r32_2;
        break;
      }

      // optional int32 r32_2 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_r32_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &r32_2_)));
          set_has_r32_2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_r64_1;
        break;
      }

      // optional uint64 r64_1 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_r64_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &r64_1_)));
          set_has_r64_1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommonDialog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 dlg_id = 1;
  if (has_dlg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dlg_id(), output);
  }

  // optional .protoc.gameproto.CommonDialogType dlg_type = 2;
  if (has_dlg_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->dlg_type(), output);
  }

  // optional int32 dlg_return = 3;
  if (has_dlg_return()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->dlg_return(), output);
  }

  // optional string output_text = 4;
  if (has_output_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->output_text().data(), this->output_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->output_text(), output);
  }

  // optional string input_text = 5;
  if (has_input_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->input_text().data(), this->input_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->input_text(), output);
  }

  // optional int32 r32_1 = 6;
  if (has_r32_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->r32_1(), output);
  }

  // optional int32 r32_2 = 7;
  if (has_r32_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->r32_2(), output);
  }

  // optional uint64 r64_1 = 8;
  if (has_r64_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->r64_1(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommonDialog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 dlg_id = 1;
  if (has_dlg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dlg_id(), target);
  }

  // optional .protoc.gameproto.CommonDialogType dlg_type = 2;
  if (has_dlg_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->dlg_type(), target);
  }

  // optional int32 dlg_return = 3;
  if (has_dlg_return()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->dlg_return(), target);
  }

  // optional string output_text = 4;
  if (has_output_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->output_text().data(), this->output_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->output_text(), target);
  }

  // optional string input_text = 5;
  if (has_input_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->input_text().data(), this->input_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->input_text(), target);
  }

  // optional int32 r32_1 = 6;
  if (has_r32_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->r32_1(), target);
  }

  // optional int32 r32_2 = 7;
  if (has_r32_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->r32_2(), target);
  }

  // optional uint64 r64_1 = 8;
  if (has_r64_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->r64_1(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommonDialog::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 dlg_id = 1;
    if (has_dlg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dlg_id());
    }

    // optional .protoc.gameproto.CommonDialogType dlg_type = 2;
    if (has_dlg_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->dlg_type());
    }

    // optional int32 dlg_return = 3;
    if (has_dlg_return()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dlg_return());
    }

    // optional string output_text = 4;
    if (has_output_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->output_text());
    }

    // optional string input_text = 5;
    if (has_input_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->input_text());
    }

    // optional int32 r32_1 = 6;
    if (has_r32_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->r32_1());
    }

    // optional int32 r32_2 = 7;
    if (has_r32_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->r32_2());
    }

    // optional uint64 r64_1 = 8;
    if (has_r64_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->r64_1());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommonDialog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommonDialog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommonDialog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommonDialog::MergeFrom(const CommonDialog& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dlg_id()) {
      set_dlg_id(from.dlg_id());
    }
    if (from.has_dlg_type()) {
      set_dlg_type(from.dlg_type());
    }
    if (from.has_dlg_return()) {
      set_dlg_return(from.dlg_return());
    }
    if (from.has_output_text()) {
      set_output_text(from.output_text());
    }
    if (from.has_input_text()) {
      set_input_text(from.input_text());
    }
    if (from.has_r32_1()) {
      set_r32_1(from.r32_1());
    }
    if (from.has_r32_2()) {
      set_r32_2(from.r32_2());
    }
    if (from.has_r64_1()) {
      set_r64_1(from.r64_1());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommonDialog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommonDialog::CopyFrom(const CommonDialog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonDialog::IsInitialized() const {

  return true;
}

void CommonDialog::Swap(CommonDialog* other) {
  if (other != this) {
    std::swap(dlg_id_, other->dlg_id_);
    std::swap(dlg_type_, other->dlg_type_);
    std::swap(dlg_return_, other->dlg_return_);
    std::swap(output_text_, other->output_text_);
    std::swap(input_text_, other->input_text_);
    std::swap(r32_1_, other->r32_1_);
    std::swap(r32_2_, other->r32_2_);
    std::swap(r64_1_, other->r64_1_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommonDialog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommonDialog_descriptor_;
  metadata.reflection = CommonDialog_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetGMAward::GetGMAward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetGMAward::InitAsDefaultInstance() {
}

GetGMAward::GetGMAward(const GetGMAward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetGMAward::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetGMAward::~GetGMAward() {
  SharedDtor();
}

void GetGMAward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetGMAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetGMAward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetGMAward_descriptor_;
}

const GetGMAward& GetGMAward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

GetGMAward* GetGMAward::default_instance_ = NULL;

GetGMAward* GetGMAward::New() const {
  return new GetGMAward;
}

void GetGMAward::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetGMAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetGMAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetGMAward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetGMAward::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGMAward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetGMAward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetGMAward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetGMAward::MergeFrom(const GetGMAward& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetGMAward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGMAward::CopyFrom(const GetGMAward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGMAward::IsInitialized() const {

  return true;
}

void GetGMAward::Swap(GetGMAward* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetGMAward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetGMAward_descriptor_;
  metadata.reflection = GetGMAward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetGMAwardAck::kErrNoFieldNumber;
#endif  // !_MSC_VER

GetGMAwardAck::GetGMAwardAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetGMAwardAck::InitAsDefaultInstance() {
}

GetGMAwardAck::GetGMAwardAck(const GetGMAwardAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetGMAwardAck::SharedCtor() {
  _cached_size_ = 0;
  err_no_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetGMAwardAck::~GetGMAwardAck() {
  SharedDtor();
}

void GetGMAwardAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetGMAwardAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetGMAwardAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetGMAwardAck_descriptor_;
}

const GetGMAwardAck& GetGMAwardAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

GetGMAwardAck* GetGMAwardAck::default_instance_ = NULL;

GetGMAwardAck* GetGMAwardAck::New() const {
  return new GetGMAwardAck;
}

void GetGMAwardAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    err_no_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetGMAwardAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 err_no = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_no_)));
          set_has_err_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetGMAwardAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 err_no = 1;
  if (has_err_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->err_no(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetGMAwardAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 err_no = 1;
  if (has_err_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->err_no(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetGMAwardAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 err_no = 1;
    if (has_err_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err_no());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGMAwardAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetGMAwardAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetGMAwardAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetGMAwardAck::MergeFrom(const GetGMAwardAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_err_no()) {
      set_err_no(from.err_no());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetGMAwardAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGMAwardAck::CopyFrom(const GetGMAwardAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGMAwardAck::IsInitialized() const {

  return true;
}

void GetGMAwardAck::Swap(GetGMAwardAck* other) {
  if (other != this) {
    std::swap(err_no_, other->err_no_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetGMAwardAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetGMAwardAck_descriptor_;
  metadata.reflection = GetGMAwardAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateExp::kExpFieldNumber;
#endif  // !_MSC_VER

UpdateExp::UpdateExp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateExp::InitAsDefaultInstance() {
}

UpdateExp::UpdateExp(const UpdateExp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateExp::SharedCtor() {
  _cached_size_ = 0;
  exp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateExp::~UpdateExp() {
  SharedDtor();
}

void UpdateExp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateExp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateExp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateExp_descriptor_;
}

const UpdateExp& UpdateExp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

UpdateExp* UpdateExp::default_instance_ = NULL;

UpdateExp* UpdateExp::New() const {
  return new UpdateExp;
}

void UpdateExp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    exp_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateExp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 exp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateExp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 exp = 1;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateExp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 exp = 1;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateExp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 exp = 1;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateExp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateExp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateExp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateExp::MergeFrom(const UpdateExp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateExp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateExp::CopyFrom(const UpdateExp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateExp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UpdateExp::Swap(UpdateExp* other) {
  if (other != this) {
    std::swap(exp_, other->exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateExp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateExp_descriptor_;
  metadata.reflection = UpdateExp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateGold::kGoldFieldNumber;
#endif  // !_MSC_VER

UpdateGold::UpdateGold()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateGold::InitAsDefaultInstance() {
}

UpdateGold::UpdateGold(const UpdateGold& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateGold::SharedCtor() {
  _cached_size_ = 0;
  gold_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateGold::~UpdateGold() {
  SharedDtor();
}

void UpdateGold::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateGold::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateGold::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateGold_descriptor_;
}

const UpdateGold& UpdateGold::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

UpdateGold* UpdateGold::default_instance_ = NULL;

UpdateGold* UpdateGold::New() const {
  return new UpdateGold;
}

void UpdateGold::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gold_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateGold::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gold = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateGold::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 gold = 1;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gold(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateGold::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 gold = 1;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gold(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateGold::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gold = 1;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gold());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateGold::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateGold* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateGold*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateGold::MergeFrom(const UpdateGold& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gold()) {
      set_gold(from.gold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateGold::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateGold::CopyFrom(const UpdateGold& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateGold::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UpdateGold::Swap(UpdateGold* other) {
  if (other != this) {
    std::swap(gold_, other->gold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateGold::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateGold_descriptor_;
  metadata.reflection = UpdateGold_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateLevel::kIdFieldNumber;
#endif  // !_MSC_VER

UpdateLevel::UpdateLevel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateLevel::InitAsDefaultInstance() {
}

UpdateLevel::UpdateLevel(const UpdateLevel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateLevel::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateLevel::~UpdateLevel() {
  SharedDtor();
}

void UpdateLevel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateLevel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateLevel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateLevel_descriptor_;
}

const UpdateLevel& UpdateLevel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

UpdateLevel* UpdateLevel::default_instance_ = NULL;

UpdateLevel* UpdateLevel::New() const {
  return new UpdateLevel;
}

void UpdateLevel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateLevel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateLevel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateLevel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateLevel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateLevel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateLevel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateLevel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateLevel::MergeFrom(const UpdateLevel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateLevel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateLevel::CopyFrom(const UpdateLevel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateLevel::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UpdateLevel::Swap(UpdateLevel* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateLevel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateLevel_descriptor_;
  metadata.reflection = UpdateLevel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateYuanBao::kYuanBaoFieldNumber;
#endif  // !_MSC_VER

UpdateYuanBao::UpdateYuanBao()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateYuanBao::InitAsDefaultInstance() {
}

UpdateYuanBao::UpdateYuanBao(const UpdateYuanBao& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateYuanBao::SharedCtor() {
  _cached_size_ = 0;
  yuan_bao_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateYuanBao::~UpdateYuanBao() {
  SharedDtor();
}

void UpdateYuanBao::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateYuanBao::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateYuanBao::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateYuanBao_descriptor_;
}

const UpdateYuanBao& UpdateYuanBao::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

UpdateYuanBao* UpdateYuanBao::default_instance_ = NULL;

UpdateYuanBao* UpdateYuanBao::New() const {
  return new UpdateYuanBao;
}

void UpdateYuanBao::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    yuan_bao_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateYuanBao::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 yuan_bao = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &yuan_bao_)));
          set_has_yuan_bao();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateYuanBao::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 yuan_bao = 1;
  if (has_yuan_bao()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->yuan_bao(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateYuanBao::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 yuan_bao = 1;
  if (has_yuan_bao()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->yuan_bao(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateYuanBao::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 yuan_bao = 1;
    if (has_yuan_bao()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->yuan_bao());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateYuanBao::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateYuanBao* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateYuanBao*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateYuanBao::MergeFrom(const UpdateYuanBao& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_yuan_bao()) {
      set_yuan_bao(from.yuan_bao());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateYuanBao::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateYuanBao::CopyFrom(const UpdateYuanBao& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateYuanBao::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UpdateYuanBao::Swap(UpdateYuanBao* other) {
  if (other != this) {
    std::swap(yuan_bao_, other->yuan_bao_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateYuanBao::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateYuanBao_descriptor_;
  metadata.reflection = UpdateYuanBao_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PetRecord::kQwidFieldNumber;
const int PetRecord::kPetIdFieldNumber;
const int PetRecord::kPositionFieldNumber;
const int PetRecord::kBindFieldNumber;
const int PetRecord::kRecoverFieldNumber;
const int PetRecord::kDpsFieldNumber;
const int PetRecord::kHpFieldNumber;
const int PetRecord::kLevelFieldNumber;
const int PetRecord::kExpFieldNumber;
const int PetRecord::kActionSkillFieldNumber;
const int PetRecord::kLeaderSkillFieldNumber;
const int PetRecord::kPassiveSkillFieldNumber;
const int PetRecord::kCreateTimeFieldNumber;
const int PetRecord::kProtectFieldNumber;
const int PetRecord::kSkillLevelFieldNumber;
const int PetRecord::kEquipIdFieldNumber;
const int PetRecord::kNewStateFieldNumber;
const int PetRecord::kPvpNumberFieldNumber;
#endif  // !_MSC_VER

PetRecord::PetRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PetRecord::InitAsDefaultInstance() {
}

PetRecord::PetRecord(const PetRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PetRecord::SharedCtor() {
  _cached_size_ = 0;
  qwid_ = GOOGLE_ULONGLONG(0);
  pet_id_ = 0u;
  position_ = 0;
  bind_ = 0u;
  recover_ = 0u;
  dps_ = 0;
  hp_ = 0u;
  level_ = 0u;
  exp_ = 0u;
  action_skill_ = 0u;
  leader_skill_ = 0u;
  create_time_ = GOOGLE_LONGLONG(0);
  protect_ = 0u;
  skill_level_ = 0u;
  new_state_ = false;
  pvp_number_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetRecord::~PetRecord() {
  SharedDtor();
}

void PetRecord::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PetRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetRecord_descriptor_;
}

const PetRecord& PetRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

PetRecord* PetRecord::default_instance_ = NULL;

PetRecord* PetRecord::New() const {
  return new PetRecord;
}

void PetRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    qwid_ = GOOGLE_ULONGLONG(0);
    pet_id_ = 0u;
    position_ = 0;
    bind_ = 0u;
    recover_ = 0u;
    dps_ = 0;
    hp_ = 0u;
    level_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    exp_ = 0u;
    action_skill_ = 0u;
    leader_skill_ = 0u;
    create_time_ = GOOGLE_LONGLONG(0);
    protect_ = 0u;
    skill_level_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    new_state_ = false;
    pvp_number_ = 0u;
  }
  passive_skill_.Clear();
  equip_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 qwid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &qwid_)));
          set_has_qwid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pet_id;
        break;
      }

      // optional uint32 pet_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pet_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pet_id_)));
          set_has_pet_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_position;
        break;
      }

      // optional .protoc.gameproto.PET_POSITION position = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_position:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protoc::gameproto::PET_POSITION_IsValid(value)) {
            set_position(static_cast< ::protoc::gameproto::PET_POSITION >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bind;
        break;
      }

      // optional uint32 bind = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bind_)));
          set_has_bind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_recover;
        break;
      }

      // optional uint32 recover = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recover:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recover_)));
          set_has_recover();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_dps;
        break;
      }

      // optional float dps = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dps_)));
          set_has_dps();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_hp;
        break;
      }

      // optional uint32 hp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_level;
        break;
      }

      // optional uint32 level = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_exp;
        break;
      }

      // optional uint32 exp = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_action_skill;
        break;
      }

      // optional uint32 action_skill = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action_skill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &action_skill_)));
          set_has_action_skill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_leader_skill;
        break;
      }

      // optional uint32 leader_skill = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leader_skill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leader_skill_)));
          set_has_leader_skill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_passive_skill;
        break;
      }

      // repeated uint32 passive_skill = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_passive_skill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 96, input, this->mutable_passive_skill())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_passive_skill())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_passive_skill;
        if (input->ExpectTag(104)) goto parse_create_time;
        break;
      }

      // optional int64 create_time = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_protect;
        break;
      }

      // optional uint32 protect = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_protect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &protect_)));
          set_has_protect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_skill_level;
        break;
      }

      // optional uint32 skill_level = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_level_)));
          set_has_skill_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_equip_id;
        break;
      }

      // repeated uint64 equip_id = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equip_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 2, 128, input, this->mutable_equip_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_equip_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_equip_id;
        if (input->ExpectTag(136)) goto parse_new_state;
        break;
      }

      // optional bool new_state = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &new_state_)));
          set_has_new_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_pvp_number;
        break;
      }

      // optional uint32 pvp_number = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pvp_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pvp_number_)));
          set_has_pvp_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PetRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 qwid = 1;
  if (has_qwid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->qwid(), output);
  }

  // optional uint32 pet_id = 2;
  if (has_pet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pet_id(), output);
  }

  // optional .protoc.gameproto.PET_POSITION position = 3;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->position(), output);
  }

  // optional uint32 bind = 4;
  if (has_bind()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->bind(), output);
  }

  // optional uint32 recover = 5;
  if (has_recover()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->recover(), output);
  }

  // optional float dps = 6;
  if (has_dps()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->dps(), output);
  }

  // optional uint32 hp = 7;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->hp(), output);
  }

  // optional uint32 level = 8;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->level(), output);
  }

  // optional uint32 exp = 9;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->exp(), output);
  }

  // optional uint32 action_skill = 10;
  if (has_action_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->action_skill(), output);
  }

  // optional uint32 leader_skill = 11;
  if (has_leader_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->leader_skill(), output);
  }

  // repeated uint32 passive_skill = 12;
  for (int i = 0; i < this->passive_skill_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      12, this->passive_skill(i), output);
  }

  // optional int64 create_time = 13;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->create_time(), output);
  }

  // optional uint32 protect = 14;
  if (has_protect()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->protect(), output);
  }

  // optional uint32 skill_level = 15;
  if (has_skill_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->skill_level(), output);
  }

  // repeated uint64 equip_id = 16;
  for (int i = 0; i < this->equip_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      16, this->equip_id(i), output);
  }

  // optional bool new_state = 17;
  if (has_new_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->new_state(), output);
  }

  // optional uint32 pvp_number = 18;
  if (has_pvp_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->pvp_number(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PetRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 qwid = 1;
  if (has_qwid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->qwid(), target);
  }

  // optional uint32 pet_id = 2;
  if (has_pet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pet_id(), target);
  }

  // optional .protoc.gameproto.PET_POSITION position = 3;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->position(), target);
  }

  // optional uint32 bind = 4;
  if (has_bind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->bind(), target);
  }

  // optional uint32 recover = 5;
  if (has_recover()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->recover(), target);
  }

  // optional float dps = 6;
  if (has_dps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->dps(), target);
  }

  // optional uint32 hp = 7;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->hp(), target);
  }

  // optional uint32 level = 8;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->level(), target);
  }

  // optional uint32 exp = 9;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->exp(), target);
  }

  // optional uint32 action_skill = 10;
  if (has_action_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->action_skill(), target);
  }

  // optional uint32 leader_skill = 11;
  if (has_leader_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->leader_skill(), target);
  }

  // repeated uint32 passive_skill = 12;
  for (int i = 0; i < this->passive_skill_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(12, this->passive_skill(i), target);
  }

  // optional int64 create_time = 13;
  if (has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->create_time(), target);
  }

  // optional uint32 protect = 14;
  if (has_protect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->protect(), target);
  }

  // optional uint32 skill_level = 15;
  if (has_skill_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->skill_level(), target);
  }

  // repeated uint64 equip_id = 16;
  for (int i = 0; i < this->equip_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(16, this->equip_id(i), target);
  }

  // optional bool new_state = 17;
  if (has_new_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->new_state(), target);
  }

  // optional uint32 pvp_number = 18;
  if (has_pvp_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->pvp_number(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PetRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 qwid = 1;
    if (has_qwid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->qwid());
    }

    // optional uint32 pet_id = 2;
    if (has_pet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pet_id());
    }

    // optional .protoc.gameproto.PET_POSITION position = 3;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->position());
    }

    // optional uint32 bind = 4;
    if (has_bind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bind());
    }

    // optional uint32 recover = 5;
    if (has_recover()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recover());
    }

    // optional float dps = 6;
    if (has_dps()) {
      total_size += 1 + 4;
    }

    // optional uint32 hp = 7;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hp());
    }

    // optional uint32 level = 8;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 exp = 9;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

    // optional uint32 action_skill = 10;
    if (has_action_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->action_skill());
    }

    // optional uint32 leader_skill = 11;
    if (has_leader_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leader_skill());
    }

    // optional int64 create_time = 13;
    if (has_create_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->create_time());
    }

    // optional uint32 protect = 14;
    if (has_protect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->protect());
    }

    // optional uint32 skill_level = 15;
    if (has_skill_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_level());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bool new_state = 17;
    if (has_new_state()) {
      total_size += 2 + 1;
    }

    // optional uint32 pvp_number = 18;
    if (has_pvp_number()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pvp_number());
    }

  }
  // repeated uint32 passive_skill = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->passive_skill_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->passive_skill(i));
    }
    total_size += 1 * this->passive_skill_size() + data_size;
  }

  // repeated uint64 equip_id = 16;
  {
    int data_size = 0;
    for (int i = 0; i < this->equip_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->equip_id(i));
    }
    total_size += 2 * this->equip_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetRecord::MergeFrom(const PetRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  passive_skill_.MergeFrom(from.passive_skill_);
  equip_id_.MergeFrom(from.equip_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_qwid()) {
      set_qwid(from.qwid());
    }
    if (from.has_pet_id()) {
      set_pet_id(from.pet_id());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_bind()) {
      set_bind(from.bind());
    }
    if (from.has_recover()) {
      set_recover(from.recover());
    }
    if (from.has_dps()) {
      set_dps(from.dps());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_action_skill()) {
      set_action_skill(from.action_skill());
    }
    if (from.has_leader_skill()) {
      set_leader_skill(from.leader_skill());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
    if (from.has_protect()) {
      set_protect(from.protect());
    }
    if (from.has_skill_level()) {
      set_skill_level(from.skill_level());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_new_state()) {
      set_new_state(from.new_state());
    }
    if (from.has_pvp_number()) {
      set_pvp_number(from.pvp_number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetRecord::CopyFrom(const PetRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetRecord::IsInitialized() const {

  return true;
}

void PetRecord::Swap(PetRecord* other) {
  if (other != this) {
    std::swap(qwid_, other->qwid_);
    std::swap(pet_id_, other->pet_id_);
    std::swap(position_, other->position_);
    std::swap(bind_, other->bind_);
    std::swap(recover_, other->recover_);
    std::swap(dps_, other->dps_);
    std::swap(hp_, other->hp_);
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(action_skill_, other->action_skill_);
    std::swap(leader_skill_, other->leader_skill_);
    passive_skill_.Swap(&other->passive_skill_);
    std::swap(create_time_, other->create_time_);
    std::swap(protect_, other->protect_);
    std::swap(skill_level_, other->skill_level_);
    equip_id_.Swap(&other->equip_id_);
    std::swap(new_state_, other->new_state_);
    std::swap(pvp_number_, other->pvp_number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetRecord_descriptor_;
  metadata.reflection = PetRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PetRecordSIGN::kQwidFieldNumber;
const int PetRecordSIGN::kSignPetIdFieldNumber;
const int PetRecordSIGN::kSignRecoverFieldNumber;
const int PetRecordSIGN::kSignDpsFieldNumber;
const int PetRecordSIGN::kSignHpFieldNumber;
const int PetRecordSIGN::kSignActionSkillFieldNumber;
const int PetRecordSIGN::kSignLeaderSkillFieldNumber;
const int PetRecordSIGN::kSignSkillLevelFieldNumber;
const int PetRecordSIGN::kSignMpFieldNumber;
const int PetRecordSIGN::kSignSpiritFieldNumber;
#endif  // !_MSC_VER

PetRecordSIGN::PetRecordSIGN()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PetRecordSIGN::InitAsDefaultInstance() {
}

PetRecordSIGN::PetRecordSIGN(const PetRecordSIGN& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PetRecordSIGN::SharedCtor() {
  _cached_size_ = 0;
  qwid_ = GOOGLE_ULONGLONG(0);
  sign_pet_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sign_recover_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sign_dps_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sign_hp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sign_action_skill_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sign_leader_skill_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sign_skill_level_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sign_mp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sign_spirit_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetRecordSIGN::~PetRecordSIGN() {
  SharedDtor();
}

void PetRecordSIGN::SharedDtor() {
  if (sign_pet_id_ != &::google::protobuf::internal::kEmptyString) {
    delete sign_pet_id_;
  }
  if (sign_recover_ != &::google::protobuf::internal::kEmptyString) {
    delete sign_recover_;
  }
  if (sign_dps_ != &::google::protobuf::internal::kEmptyString) {
    delete sign_dps_;
  }
  if (sign_hp_ != &::google::protobuf::internal::kEmptyString) {
    delete sign_hp_;
  }
  if (sign_action_skill_ != &::google::protobuf::internal::kEmptyString) {
    delete sign_action_skill_;
  }
  if (sign_leader_skill_ != &::google::protobuf::internal::kEmptyString) {
    delete sign_leader_skill_;
  }
  if (sign_skill_level_ != &::google::protobuf::internal::kEmptyString) {
    delete sign_skill_level_;
  }
  if (sign_mp_ != &::google::protobuf::internal::kEmptyString) {
    delete sign_mp_;
  }
  if (sign_spirit_ != &::google::protobuf::internal::kEmptyString) {
    delete sign_spirit_;
  }
  if (this != default_instance_) {
  }
}

void PetRecordSIGN::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetRecordSIGN::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetRecordSIGN_descriptor_;
}

const PetRecordSIGN& PetRecordSIGN::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

PetRecordSIGN* PetRecordSIGN::default_instance_ = NULL;

PetRecordSIGN* PetRecordSIGN::New() const {
  return new PetRecordSIGN;
}

void PetRecordSIGN::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    qwid_ = GOOGLE_ULONGLONG(0);
    if (has_sign_pet_id()) {
      if (sign_pet_id_ != &::google::protobuf::internal::kEmptyString) {
        sign_pet_id_->clear();
      }
    }
    if (has_sign_recover()) {
      if (sign_recover_ != &::google::protobuf::internal::kEmptyString) {
        sign_recover_->clear();
      }
    }
    if (has_sign_dps()) {
      if (sign_dps_ != &::google::protobuf::internal::kEmptyString) {
        sign_dps_->clear();
      }
    }
    if (has_sign_hp()) {
      if (sign_hp_ != &::google::protobuf::internal::kEmptyString) {
        sign_hp_->clear();
      }
    }
    if (has_sign_action_skill()) {
      if (sign_action_skill_ != &::google::protobuf::internal::kEmptyString) {
        sign_action_skill_->clear();
      }
    }
    if (has_sign_leader_skill()) {
      if (sign_leader_skill_ != &::google::protobuf::internal::kEmptyString) {
        sign_leader_skill_->clear();
      }
    }
    if (has_sign_skill_level()) {
      if (sign_skill_level_ != &::google::protobuf::internal::kEmptyString) {
        sign_skill_level_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_sign_mp()) {
      if (sign_mp_ != &::google::protobuf::internal::kEmptyString) {
        sign_mp_->clear();
      }
    }
    if (has_sign_spirit()) {
      if (sign_spirit_ != &::google::protobuf::internal::kEmptyString) {
        sign_spirit_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetRecordSIGN::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 qwid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &qwid_)));
          set_has_qwid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sign_pet_id;
        break;
      }

      // optional bytes sign_pet_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sign_pet_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sign_pet_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sign_recover;
        break;
      }

      // optional bytes sign_recover = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sign_recover:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sign_recover()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_sign_dps;
        break;
      }

      // optional bytes sign_dps = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sign_dps:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sign_dps()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_sign_hp;
        break;
      }

      // optional bytes sign_hp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sign_hp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sign_hp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_sign_action_skill;
        break;
      }

      // optional bytes sign_action_skill = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sign_action_skill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sign_action_skill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_sign_leader_skill;
        break;
      }

      // optional bytes sign_leader_skill = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sign_leader_skill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sign_leader_skill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_sign_skill_level;
        break;
      }

      // optional bytes sign_skill_level = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sign_skill_level:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sign_skill_level()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_sign_mp;
        break;
      }

      // optional bytes sign_mp = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sign_mp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sign_mp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_sign_spirit;
        break;
      }

      // optional bytes sign_spirit = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sign_spirit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sign_spirit()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PetRecordSIGN::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 qwid = 1;
  if (has_qwid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->qwid(), output);
  }

  // optional bytes sign_pet_id = 2;
  if (has_sign_pet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->sign_pet_id(), output);
  }

  // optional bytes sign_recover = 3;
  if (has_sign_recover()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->sign_recover(), output);
  }

  // optional bytes sign_dps = 4;
  if (has_sign_dps()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->sign_dps(), output);
  }

  // optional bytes sign_hp = 5;
  if (has_sign_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->sign_hp(), output);
  }

  // optional bytes sign_action_skill = 6;
  if (has_sign_action_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->sign_action_skill(), output);
  }

  // optional bytes sign_leader_skill = 7;
  if (has_sign_leader_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->sign_leader_skill(), output);
  }

  // optional bytes sign_skill_level = 8;
  if (has_sign_skill_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->sign_skill_level(), output);
  }

  // optional bytes sign_mp = 9;
  if (has_sign_mp()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      9, this->sign_mp(), output);
  }

  // optional bytes sign_spirit = 10;
  if (has_sign_spirit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      10, this->sign_spirit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PetRecordSIGN::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 qwid = 1;
  if (has_qwid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->qwid(), target);
  }

  // optional bytes sign_pet_id = 2;
  if (has_sign_pet_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->sign_pet_id(), target);
  }

  // optional bytes sign_recover = 3;
  if (has_sign_recover()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->sign_recover(), target);
  }

  // optional bytes sign_dps = 4;
  if (has_sign_dps()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->sign_dps(), target);
  }

  // optional bytes sign_hp = 5;
  if (has_sign_hp()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->sign_hp(), target);
  }

  // optional bytes sign_action_skill = 6;
  if (has_sign_action_skill()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->sign_action_skill(), target);
  }

  // optional bytes sign_leader_skill = 7;
  if (has_sign_leader_skill()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->sign_leader_skill(), target);
  }

  // optional bytes sign_skill_level = 8;
  if (has_sign_skill_level()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->sign_skill_level(), target);
  }

  // optional bytes sign_mp = 9;
  if (has_sign_mp()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->sign_mp(), target);
  }

  // optional bytes sign_spirit = 10;
  if (has_sign_spirit()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->sign_spirit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PetRecordSIGN::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 qwid = 1;
    if (has_qwid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->qwid());
    }

    // optional bytes sign_pet_id = 2;
    if (has_sign_pet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sign_pet_id());
    }

    // optional bytes sign_recover = 3;
    if (has_sign_recover()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sign_recover());
    }

    // optional bytes sign_dps = 4;
    if (has_sign_dps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sign_dps());
    }

    // optional bytes sign_hp = 5;
    if (has_sign_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sign_hp());
    }

    // optional bytes sign_action_skill = 6;
    if (has_sign_action_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sign_action_skill());
    }

    // optional bytes sign_leader_skill = 7;
    if (has_sign_leader_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sign_leader_skill());
    }

    // optional bytes sign_skill_level = 8;
    if (has_sign_skill_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sign_skill_level());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes sign_mp = 9;
    if (has_sign_mp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sign_mp());
    }

    // optional bytes sign_spirit = 10;
    if (has_sign_spirit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sign_spirit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetRecordSIGN::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetRecordSIGN* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetRecordSIGN*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetRecordSIGN::MergeFrom(const PetRecordSIGN& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_qwid()) {
      set_qwid(from.qwid());
    }
    if (from.has_sign_pet_id()) {
      set_sign_pet_id(from.sign_pet_id());
    }
    if (from.has_sign_recover()) {
      set_sign_recover(from.sign_recover());
    }
    if (from.has_sign_dps()) {
      set_sign_dps(from.sign_dps());
    }
    if (from.has_sign_hp()) {
      set_sign_hp(from.sign_hp());
    }
    if (from.has_sign_action_skill()) {
      set_sign_action_skill(from.sign_action_skill());
    }
    if (from.has_sign_leader_skill()) {
      set_sign_leader_skill(from.sign_leader_skill());
    }
    if (from.has_sign_skill_level()) {
      set_sign_skill_level(from.sign_skill_level());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_sign_mp()) {
      set_sign_mp(from.sign_mp());
    }
    if (from.has_sign_spirit()) {
      set_sign_spirit(from.sign_spirit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetRecordSIGN::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetRecordSIGN::CopyFrom(const PetRecordSIGN& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetRecordSIGN::IsInitialized() const {

  return true;
}

void PetRecordSIGN::Swap(PetRecordSIGN* other) {
  if (other != this) {
    std::swap(qwid_, other->qwid_);
    std::swap(sign_pet_id_, other->sign_pet_id_);
    std::swap(sign_recover_, other->sign_recover_);
    std::swap(sign_dps_, other->sign_dps_);
    std::swap(sign_hp_, other->sign_hp_);
    std::swap(sign_action_skill_, other->sign_action_skill_);
    std::swap(sign_leader_skill_, other->sign_leader_skill_);
    std::swap(sign_skill_level_, other->sign_skill_level_);
    std::swap(sign_mp_, other->sign_mp_);
    std::swap(sign_spirit_, other->sign_spirit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetRecordSIGN::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetRecordSIGN_descriptor_;
  metadata.reflection = PetRecordSIGN_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddPet::kPetFieldNumber;
#endif  // !_MSC_VER

AddPet::AddPet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddPet::InitAsDefaultInstance() {
  pet_ = const_cast< ::protoc::gameproto::PetRecord*>(&::protoc::gameproto::PetRecord::default_instance());
}

AddPet::AddPet(const AddPet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddPet::SharedCtor() {
  _cached_size_ = 0;
  pet_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddPet::~AddPet() {
  SharedDtor();
}

void AddPet::SharedDtor() {
  if (this != default_instance_) {
    delete pet_;
  }
}

void AddPet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddPet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddPet_descriptor_;
}

const AddPet& AddPet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

AddPet* AddPet::default_instance_ = NULL;

AddPet* AddPet::New() const {
  return new AddPet;
}

void AddPet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pet()) {
      if (pet_ != NULL) pet_->::protoc::gameproto::PetRecord::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddPet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protoc.gameproto.PetRecord pet = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pet()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddPet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .protoc.gameproto.PetRecord pet = 1;
  if (has_pet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pet(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddPet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .protoc.gameproto.PetRecord pet = 1;
  if (has_pet()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pet(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddPet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .protoc.gameproto.PetRecord pet = 1;
    if (has_pet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pet());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddPet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddPet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddPet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddPet::MergeFrom(const AddPet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pet()) {
      mutable_pet()->::protoc::gameproto::PetRecord::MergeFrom(from.pet());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddPet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddPet::CopyFrom(const AddPet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddPet::IsInitialized() const {

  return true;
}

void AddPet::Swap(AddPet* other) {
  if (other != this) {
    std::swap(pet_, other->pet_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddPet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddPet_descriptor_;
  metadata.reflection = AddPet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DelPet::kIdFieldNumber;
#endif  // !_MSC_VER

DelPet::DelPet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DelPet::InitAsDefaultInstance() {
}

DelPet::DelPet(const DelPet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DelPet::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DelPet::~DelPet() {
  SharedDtor();
}

void DelPet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DelPet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DelPet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DelPet_descriptor_;
}

const DelPet& DelPet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

DelPet* DelPet::default_instance_ = NULL;

DelPet* DelPet::New() const {
  return new DelPet;
}

void DelPet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DelPet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DelPet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DelPet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DelPet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DelPet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DelPet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DelPet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DelPet::MergeFrom(const DelPet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DelPet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelPet::CopyFrom(const DelPet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelPet::IsInitialized() const {

  return true;
}

void DelPet::Swap(DelPet* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DelPet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DelPet_descriptor_;
  metadata.reflection = DelPet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdatePet::kPetFieldNumber;
#endif  // !_MSC_VER

UpdatePet::UpdatePet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdatePet::InitAsDefaultInstance() {
  pet_ = const_cast< ::protoc::gameproto::PetRecord*>(&::protoc::gameproto::PetRecord::default_instance());
}

UpdatePet::UpdatePet(const UpdatePet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdatePet::SharedCtor() {
  _cached_size_ = 0;
  pet_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdatePet::~UpdatePet() {
  SharedDtor();
}

void UpdatePet::SharedDtor() {
  if (this != default_instance_) {
    delete pet_;
  }
}

void UpdatePet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdatePet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdatePet_descriptor_;
}

const UpdatePet& UpdatePet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

UpdatePet* UpdatePet::default_instance_ = NULL;

UpdatePet* UpdatePet::New() const {
  return new UpdatePet;
}

void UpdatePet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pet()) {
      if (pet_ != NULL) pet_->::protoc::gameproto::PetRecord::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdatePet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protoc.gameproto.PetRecord pet = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pet()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdatePet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .protoc.gameproto.PetRecord pet = 1;
  if (has_pet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pet(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdatePet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .protoc.gameproto.PetRecord pet = 1;
  if (has_pet()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pet(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdatePet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .protoc.gameproto.PetRecord pet = 1;
    if (has_pet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pet());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdatePet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdatePet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdatePet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdatePet::MergeFrom(const UpdatePet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pet()) {
      mutable_pet()->::protoc::gameproto::PetRecord::MergeFrom(from.pet());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdatePet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdatePet::CopyFrom(const UpdatePet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdatePet::IsInitialized() const {

  return true;
}

void UpdatePet::Swap(UpdatePet* other) {
  if (other != this) {
    std::swap(pet_, other->pet_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdatePet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdatePet_descriptor_;
  metadata.reflection = UpdatePet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PetList::kTalbeFieldNumber;
#endif  // !_MSC_VER

PetList::PetList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PetList::InitAsDefaultInstance() {
}

PetList::PetList(const PetList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PetList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetList::~PetList() {
  SharedDtor();
}

void PetList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PetList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetList_descriptor_;
}

const PetList& PetList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

PetList* PetList::default_instance_ = NULL;

PetList* PetList::New() const {
  return new PetList;
}

void PetList::Clear() {
  talbe_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protoc.gameproto.PetRecord talbe = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_talbe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_talbe()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_talbe;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PetList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protoc.gameproto.PetRecord talbe = 1;
  for (int i = 0; i < this->talbe_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->talbe(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PetList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protoc.gameproto.PetRecord talbe = 1;
  for (int i = 0; i < this->talbe_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->talbe(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PetList::ByteSize() const {
  int total_size = 0;

  // repeated .protoc.gameproto.PetRecord talbe = 1;
  total_size += 1 * this->talbe_size();
  for (int i = 0; i < this->talbe_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->talbe(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetList::MergeFrom(const PetList& from) {
  GOOGLE_CHECK_NE(&from, this);
  talbe_.MergeFrom(from.talbe_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetList::CopyFrom(const PetList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetList::IsInitialized() const {

  return true;
}

void PetList::Swap(PetList* other) {
  if (other != this) {
    talbe_.Swap(&other->talbe_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetList_descriptor_;
  metadata.reflection = PetList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SystemData::kMsgIdFieldNumber;
const int SystemData::kMsgTypeFieldNumber;
const int SystemData::kSendNameFieldNumber;
const int SystemData::kTitleFieldNumber;
const int SystemData::kReadFlagFieldNumber;
const int SystemData::kMsgTimeFieldNumber;
const int SystemData::kAwardFieldNumber;
const int SystemData::kLastDaysFieldNumber;
const int SystemData::kContentFieldNumber;
#endif  // !_MSC_VER

SystemData::SystemData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SystemData::InitAsDefaultInstance() {
}

SystemData::SystemData(const SystemData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SystemData::SharedCtor() {
  _cached_size_ = 0;
  msg_id_ = GOOGLE_ULONGLONG(0);
  msg_type_ = 0u;
  send_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  read_flag_ = false;
  msg_time_ = GOOGLE_LONGLONG(0);
  award_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  last_days_ = 0u;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SystemData::~SystemData() {
  SharedDtor();
}

void SystemData::SharedDtor() {
  if (send_name_ != &::google::protobuf::internal::kEmptyString) {
    delete send_name_;
  }
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (award_ != &::google::protobuf::internal::kEmptyString) {
    delete award_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void SystemData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SystemData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SystemData_descriptor_;
}

const SystemData& SystemData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

SystemData* SystemData::default_instance_ = NULL;

SystemData* SystemData::New() const {
  return new SystemData;
}

void SystemData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msg_id_ = GOOGLE_ULONGLONG(0);
    msg_type_ = 0u;
    if (has_send_name()) {
      if (send_name_ != &::google::protobuf::internal::kEmptyString) {
        send_name_->clear();
      }
    }
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    read_flag_ = false;
    msg_time_ = GOOGLE_LONGLONG(0);
    if (has_award()) {
      if (award_ != &::google::protobuf::internal::kEmptyString) {
        award_->clear();
      }
    }
    last_days_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SystemData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 msg_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &msg_id_)));
          set_has_msg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_msg_type;
        break;
      }

      // optional uint32 msg_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msg_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_type_)));
          set_has_msg_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_send_name;
        break;
      }

      // optional string send_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_send_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_send_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->send_name().data(), this->send_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_title;
        break;
      }

      // optional string title = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_read_flag;
        break;
      }

      // optional bool read_flag = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_read_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &read_flag_)));
          set_has_read_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_msg_time;
        break;
      }

      // optional int64 msg_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msg_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &msg_time_)));
          set_has_msg_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_award;
        break;
      }

      // optional string award = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_award:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_award()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->award().data(), this->award().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_last_days;
        break;
      }

      // optional uint32 last_days = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_days:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_days_)));
          set_has_last_days();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_content;
        break;
      }

      // optional string content = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SystemData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 msg_id = 1;
  if (has_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->msg_id(), output);
  }

  // optional uint32 msg_type = 2;
  if (has_msg_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->msg_type(), output);
  }

  // optional string send_name = 3;
  if (has_send_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->send_name().data(), this->send_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->send_name(), output);
  }

  // optional string title = 4;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->title(), output);
  }

  // optional bool read_flag = 5;
  if (has_read_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->read_flag(), output);
  }

  // optional int64 msg_time = 6;
  if (has_msg_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->msg_time(), output);
  }

  // optional string award = 7;
  if (has_award()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->award().data(), this->award().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->award(), output);
  }

  // optional uint32 last_days = 8;
  if (has_last_days()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->last_days(), output);
  }

  // optional string content = 9;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SystemData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 msg_id = 1;
  if (has_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->msg_id(), target);
  }

  // optional uint32 msg_type = 2;
  if (has_msg_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->msg_type(), target);
  }

  // optional string send_name = 3;
  if (has_send_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->send_name().data(), this->send_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->send_name(), target);
  }

  // optional string title = 4;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->title(), target);
  }

  // optional bool read_flag = 5;
  if (has_read_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->read_flag(), target);
  }

  // optional int64 msg_time = 6;
  if (has_msg_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->msg_time(), target);
  }

  // optional string award = 7;
  if (has_award()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->award().data(), this->award().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->award(), target);
  }

  // optional uint32 last_days = 8;
  if (has_last_days()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->last_days(), target);
  }

  // optional string content = 9;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SystemData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 msg_id = 1;
    if (has_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->msg_id());
    }

    // optional uint32 msg_type = 2;
    if (has_msg_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msg_type());
    }

    // optional string send_name = 3;
    if (has_send_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->send_name());
    }

    // optional string title = 4;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional bool read_flag = 5;
    if (has_read_flag()) {
      total_size += 1 + 1;
    }

    // optional int64 msg_time = 6;
    if (has_msg_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->msg_time());
    }

    // optional string award = 7;
    if (has_award()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->award());
    }

    // optional uint32 last_days = 8;
    if (has_last_days()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_days());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string content = 9;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SystemData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SystemData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SystemData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SystemData::MergeFrom(const SystemData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_id()) {
      set_msg_id(from.msg_id());
    }
    if (from.has_msg_type()) {
      set_msg_type(from.msg_type());
    }
    if (from.has_send_name()) {
      set_send_name(from.send_name());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_read_flag()) {
      set_read_flag(from.read_flag());
    }
    if (from.has_msg_time()) {
      set_msg_time(from.msg_time());
    }
    if (from.has_award()) {
      set_award(from.award());
    }
    if (from.has_last_days()) {
      set_last_days(from.last_days());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SystemData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SystemData::CopyFrom(const SystemData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemData::IsInitialized() const {

  return true;
}

void SystemData::Swap(SystemData* other) {
  if (other != this) {
    std::swap(msg_id_, other->msg_id_);
    std::swap(msg_type_, other->msg_type_);
    std::swap(send_name_, other->send_name_);
    std::swap(title_, other->title_);
    std::swap(read_flag_, other->read_flag_);
    std::swap(msg_time_, other->msg_time_);
    std::swap(award_, other->award_);
    std::swap(last_days_, other->last_days_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SystemData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SystemData_descriptor_;
  metadata.reflection = SystemData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetAllSysMsgReq::GetAllSysMsgReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetAllSysMsgReq::InitAsDefaultInstance() {
}

GetAllSysMsgReq::GetAllSysMsgReq(const GetAllSysMsgReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetAllSysMsgReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAllSysMsgReq::~GetAllSysMsgReq() {
  SharedDtor();
}

void GetAllSysMsgReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetAllSysMsgReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAllSysMsgReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAllSysMsgReq_descriptor_;
}

const GetAllSysMsgReq& GetAllSysMsgReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

GetAllSysMsgReq* GetAllSysMsgReq::default_instance_ = NULL;

GetAllSysMsgReq* GetAllSysMsgReq::New() const {
  return new GetAllSysMsgReq;
}

void GetAllSysMsgReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAllSysMsgReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetAllSysMsgReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetAllSysMsgReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetAllSysMsgReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAllSysMsgReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAllSysMsgReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAllSysMsgReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAllSysMsgReq::MergeFrom(const GetAllSysMsgReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAllSysMsgReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAllSysMsgReq::CopyFrom(const GetAllSysMsgReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAllSysMsgReq::IsInitialized() const {

  return true;
}

void GetAllSysMsgReq::Swap(GetAllSysMsgReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAllSysMsgReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAllSysMsgReq_descriptor_;
  metadata.reflection = GetAllSysMsgReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetAllSysMsgAck::kSysmsgFieldNumber;
#endif  // !_MSC_VER

GetAllSysMsgAck::GetAllSysMsgAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetAllSysMsgAck::InitAsDefaultInstance() {
}

GetAllSysMsgAck::GetAllSysMsgAck(const GetAllSysMsgAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetAllSysMsgAck::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAllSysMsgAck::~GetAllSysMsgAck() {
  SharedDtor();
}

void GetAllSysMsgAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetAllSysMsgAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAllSysMsgAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAllSysMsgAck_descriptor_;
}

const GetAllSysMsgAck& GetAllSysMsgAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

GetAllSysMsgAck* GetAllSysMsgAck::default_instance_ = NULL;

GetAllSysMsgAck* GetAllSysMsgAck::New() const {
  return new GetAllSysMsgAck;
}

void GetAllSysMsgAck::Clear() {
  sysmsg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAllSysMsgAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protoc.gameproto.SystemData sysmsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sysmsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sysmsg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_sysmsg;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetAllSysMsgAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protoc.gameproto.SystemData sysmsg = 1;
  for (int i = 0; i < this->sysmsg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sysmsg(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetAllSysMsgAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protoc.gameproto.SystemData sysmsg = 1;
  for (int i = 0; i < this->sysmsg_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->sysmsg(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetAllSysMsgAck::ByteSize() const {
  int total_size = 0;

  // repeated .protoc.gameproto.SystemData sysmsg = 1;
  total_size += 1 * this->sysmsg_size();
  for (int i = 0; i < this->sysmsg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sysmsg(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAllSysMsgAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAllSysMsgAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAllSysMsgAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAllSysMsgAck::MergeFrom(const GetAllSysMsgAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  sysmsg_.MergeFrom(from.sysmsg_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAllSysMsgAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAllSysMsgAck::CopyFrom(const GetAllSysMsgAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAllSysMsgAck::IsInitialized() const {

  return true;
}

void GetAllSysMsgAck::Swap(GetAllSysMsgAck* other) {
  if (other != this) {
    sysmsg_.Swap(&other->sysmsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAllSysMsgAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAllSysMsgAck_descriptor_;
  metadata.reflection = GetAllSysMsgAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteSysMsgReq::kMsgIdsFieldNumber;
#endif  // !_MSC_VER

DeleteSysMsgReq::DeleteSysMsgReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeleteSysMsgReq::InitAsDefaultInstance() {
}

DeleteSysMsgReq::DeleteSysMsgReq(const DeleteSysMsgReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeleteSysMsgReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteSysMsgReq::~DeleteSysMsgReq() {
  SharedDtor();
}

void DeleteSysMsgReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeleteSysMsgReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteSysMsgReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteSysMsgReq_descriptor_;
}

const DeleteSysMsgReq& DeleteSysMsgReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

DeleteSysMsgReq* DeleteSysMsgReq::default_instance_ = NULL;

DeleteSysMsgReq* DeleteSysMsgReq::New() const {
  return new DeleteSysMsgReq;
}

void DeleteSysMsgReq::Clear() {
  msg_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteSysMsgReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 msg_ids = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msg_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_msg_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_msg_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_msg_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeleteSysMsgReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 msg_ids = 1;
  for (int i = 0; i < this->msg_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->msg_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeleteSysMsgReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint64 msg_ids = 1;
  for (int i = 0; i < this->msg_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->msg_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeleteSysMsgReq::ByteSize() const {
  int total_size = 0;

  // repeated uint64 msg_ids = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->msg_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->msg_ids(i));
    }
    total_size += 1 * this->msg_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteSysMsgReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteSysMsgReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteSysMsgReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteSysMsgReq::MergeFrom(const DeleteSysMsgReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  msg_ids_.MergeFrom(from.msg_ids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteSysMsgReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteSysMsgReq::CopyFrom(const DeleteSysMsgReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteSysMsgReq::IsInitialized() const {

  return true;
}

void DeleteSysMsgReq::Swap(DeleteSysMsgReq* other) {
  if (other != this) {
    msg_ids_.Swap(&other->msg_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteSysMsgReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteSysMsgReq_descriptor_;
  metadata.reflection = DeleteSysMsgReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteSysMsgAck::kErrNoFieldNumber;
#endif  // !_MSC_VER

DeleteSysMsgAck::DeleteSysMsgAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeleteSysMsgAck::InitAsDefaultInstance() {
}

DeleteSysMsgAck::DeleteSysMsgAck(const DeleteSysMsgAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeleteSysMsgAck::SharedCtor() {
  _cached_size_ = 0;
  err_no_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteSysMsgAck::~DeleteSysMsgAck() {
  SharedDtor();
}

void DeleteSysMsgAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeleteSysMsgAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteSysMsgAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteSysMsgAck_descriptor_;
}

const DeleteSysMsgAck& DeleteSysMsgAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

DeleteSysMsgAck* DeleteSysMsgAck::default_instance_ = NULL;

DeleteSysMsgAck* DeleteSysMsgAck::New() const {
  return new DeleteSysMsgAck;
}

void DeleteSysMsgAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    err_no_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteSysMsgAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 err_no = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_no_)));
          set_has_err_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeleteSysMsgAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 err_no = 1;
  if (has_err_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->err_no(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeleteSysMsgAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 err_no = 1;
  if (has_err_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->err_no(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeleteSysMsgAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 err_no = 1;
    if (has_err_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err_no());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteSysMsgAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteSysMsgAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteSysMsgAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteSysMsgAck::MergeFrom(const DeleteSysMsgAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_err_no()) {
      set_err_no(from.err_no());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteSysMsgAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteSysMsgAck::CopyFrom(const DeleteSysMsgAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteSysMsgAck::IsInitialized() const {

  return true;
}

void DeleteSysMsgAck::Swap(DeleteSysMsgAck* other) {
  if (other != this) {
    std::swap(err_no_, other->err_no_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteSysMsgAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteSysMsgAck_descriptor_;
  metadata.reflection = DeleteSysMsgAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SendSysMsgReq::kPlayerNameFieldNumber;
const int SendSysMsgReq::kThemeFieldNumber;
const int SendSysMsgReq::kContentFieldNumber;
const int SendSysMsgReq::kPlayeridFieldNumber;
#endif  // !_MSC_VER

SendSysMsgReq::SendSysMsgReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SendSysMsgReq::InitAsDefaultInstance() {
}

SendSysMsgReq::SendSysMsgReq(const SendSysMsgReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SendSysMsgReq::SharedCtor() {
  _cached_size_ = 0;
  player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  theme_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  playerid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendSysMsgReq::~SendSysMsgReq() {
  SharedDtor();
}

void SendSysMsgReq::SharedDtor() {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    delete player_name_;
  }
  if (theme_ != &::google::protobuf::internal::kEmptyString) {
    delete theme_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void SendSysMsgReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendSysMsgReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendSysMsgReq_descriptor_;
}

const SendSysMsgReq& SendSysMsgReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

SendSysMsgReq* SendSysMsgReq::default_instance_ = NULL;

SendSysMsgReq* SendSysMsgReq::New() const {
  return new SendSysMsgReq;
}

void SendSysMsgReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_player_name()) {
      if (player_name_ != &::google::protobuf::internal::kEmptyString) {
        player_name_->clear();
      }
    }
    if (has_theme()) {
      if (theme_ != &::google::protobuf::internal::kEmptyString) {
        theme_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    playerid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SendSysMsgReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string player_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->player_name().data(), this->player_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_theme;
        break;
      }

      // optional string theme = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_theme:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_theme()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->theme().data(), this->theme().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_content;
        break;
      }

      // optional string content = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_playerid;
        break;
      }

      // optional uint64 playerid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SendSysMsgReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string player_name = 1;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->player_name(), output);
  }

  // optional string theme = 2;
  if (has_theme()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->theme().data(), this->theme().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->theme(), output);
  }

  // optional string content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->content(), output);
  }

  // optional uint64 playerid = 4;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SendSysMsgReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string player_name = 1;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->player_name(), target);
  }

  // optional string theme = 2;
  if (has_theme()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->theme().data(), this->theme().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->theme(), target);
  }

  // optional string content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->content(), target);
  }

  // optional uint64 playerid = 4;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SendSysMsgReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string player_name = 1;
    if (has_player_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_name());
    }

    // optional string theme = 2;
    if (has_theme()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->theme());
    }

    // optional string content = 3;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional uint64 playerid = 4;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendSysMsgReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SendSysMsgReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SendSysMsgReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SendSysMsgReq::MergeFrom(const SendSysMsgReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_name()) {
      set_player_name(from.player_name());
    }
    if (from.has_theme()) {
      set_theme(from.theme());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SendSysMsgReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendSysMsgReq::CopyFrom(const SendSysMsgReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendSysMsgReq::IsInitialized() const {

  return true;
}

void SendSysMsgReq::Swap(SendSysMsgReq* other) {
  if (other != this) {
    std::swap(player_name_, other->player_name_);
    std::swap(theme_, other->theme_);
    std::swap(content_, other->content_);
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SendSysMsgReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendSysMsgReq_descriptor_;
  metadata.reflection = SendSysMsgReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SendSysMsgAck::kErrNoFieldNumber;
#endif  // !_MSC_VER

SendSysMsgAck::SendSysMsgAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SendSysMsgAck::InitAsDefaultInstance() {
}

SendSysMsgAck::SendSysMsgAck(const SendSysMsgAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SendSysMsgAck::SharedCtor() {
  _cached_size_ = 0;
  err_no_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendSysMsgAck::~SendSysMsgAck() {
  SharedDtor();
}

void SendSysMsgAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SendSysMsgAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendSysMsgAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendSysMsgAck_descriptor_;
}

const SendSysMsgAck& SendSysMsgAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

SendSysMsgAck* SendSysMsgAck::default_instance_ = NULL;

SendSysMsgAck* SendSysMsgAck::New() const {
  return new SendSysMsgAck;
}

void SendSysMsgAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    err_no_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SendSysMsgAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 err_no = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_no_)));
          set_has_err_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SendSysMsgAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 err_no = 1;
  if (has_err_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->err_no(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SendSysMsgAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 err_no = 1;
  if (has_err_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->err_no(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SendSysMsgAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 err_no = 1;
    if (has_err_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err_no());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendSysMsgAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SendSysMsgAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SendSysMsgAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SendSysMsgAck::MergeFrom(const SendSysMsgAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_err_no()) {
      set_err_no(from.err_no());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SendSysMsgAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendSysMsgAck::CopyFrom(const SendSysMsgAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendSysMsgAck::IsInitialized() const {

  return true;
}

void SendSysMsgAck::Swap(SendSysMsgAck* other) {
  if (other != this) {
    std::swap(err_no_, other->err_no_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SendSysMsgAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendSysMsgAck_descriptor_;
  metadata.reflection = SendSysMsgAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReadSysMsgReq::kMsgIdFieldNumber;
#endif  // !_MSC_VER

ReadSysMsgReq::ReadSysMsgReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReadSysMsgReq::InitAsDefaultInstance() {
}

ReadSysMsgReq::ReadSysMsgReq(const ReadSysMsgReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReadSysMsgReq::SharedCtor() {
  _cached_size_ = 0;
  msg_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReadSysMsgReq::~ReadSysMsgReq() {
  SharedDtor();
}

void ReadSysMsgReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReadSysMsgReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadSysMsgReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadSysMsgReq_descriptor_;
}

const ReadSysMsgReq& ReadSysMsgReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

ReadSysMsgReq* ReadSysMsgReq::default_instance_ = NULL;

ReadSysMsgReq* ReadSysMsgReq::New() const {
  return new ReadSysMsgReq;
}

void ReadSysMsgReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msg_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReadSysMsgReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 msg_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &msg_id_)));
          set_has_msg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReadSysMsgReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 msg_id = 1;
  if (has_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->msg_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReadSysMsgReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 msg_id = 1;
  if (has_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->msg_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReadSysMsgReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 msg_id = 1;
    if (has_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->msg_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadSysMsgReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReadSysMsgReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReadSysMsgReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReadSysMsgReq::MergeFrom(const ReadSysMsgReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_id()) {
      set_msg_id(from.msg_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReadSysMsgReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadSysMsgReq::CopyFrom(const ReadSysMsgReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadSysMsgReq::IsInitialized() const {

  return true;
}

void ReadSysMsgReq::Swap(ReadSysMsgReq* other) {
  if (other != this) {
    std::swap(msg_id_, other->msg_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReadSysMsgReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReadSysMsgReq_descriptor_;
  metadata.reflection = ReadSysMsgReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReadSysMsgAck::kMsgIdFieldNumber;
const int ReadSysMsgAck::kContentFieldNumber;
#endif  // !_MSC_VER

ReadSysMsgAck::ReadSysMsgAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReadSysMsgAck::InitAsDefaultInstance() {
}

ReadSysMsgAck::ReadSysMsgAck(const ReadSysMsgAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReadSysMsgAck::SharedCtor() {
  _cached_size_ = 0;
  msg_id_ = GOOGLE_ULONGLONG(0);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReadSysMsgAck::~ReadSysMsgAck() {
  SharedDtor();
}

void ReadSysMsgAck::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void ReadSysMsgAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadSysMsgAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadSysMsgAck_descriptor_;
}

const ReadSysMsgAck& ReadSysMsgAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

ReadSysMsgAck* ReadSysMsgAck::default_instance_ = NULL;

ReadSysMsgAck* ReadSysMsgAck::New() const {
  return new ReadSysMsgAck;
}

void ReadSysMsgAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msg_id_ = GOOGLE_ULONGLONG(0);
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReadSysMsgAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 msg_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &msg_id_)));
          set_has_msg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }

      // optional string content = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReadSysMsgAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 msg_id = 1;
  if (has_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->msg_id(), output);
  }

  // optional string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReadSysMsgAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 msg_id = 1;
  if (has_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->msg_id(), target);
  }

  // optional string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReadSysMsgAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 msg_id = 1;
    if (has_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->msg_id());
    }

    // optional string content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadSysMsgAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReadSysMsgAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReadSysMsgAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReadSysMsgAck::MergeFrom(const ReadSysMsgAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_id()) {
      set_msg_id(from.msg_id());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReadSysMsgAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadSysMsgAck::CopyFrom(const ReadSysMsgAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadSysMsgAck::IsInitialized() const {

  return true;
}

void ReadSysMsgAck::Swap(ReadSysMsgAck* other) {
  if (other != this) {
    std::swap(msg_id_, other->msg_id_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReadSysMsgAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReadSysMsgAck_descriptor_;
  metadata.reflection = ReadSysMsgAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetEmailAwardReq::kMsgIdFieldNumber;
#endif  // !_MSC_VER

GetEmailAwardReq::GetEmailAwardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetEmailAwardReq::InitAsDefaultInstance() {
}

GetEmailAwardReq::GetEmailAwardReq(const GetEmailAwardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetEmailAwardReq::SharedCtor() {
  _cached_size_ = 0;
  msg_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetEmailAwardReq::~GetEmailAwardReq() {
  SharedDtor();
}

void GetEmailAwardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetEmailAwardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetEmailAwardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetEmailAwardReq_descriptor_;
}

const GetEmailAwardReq& GetEmailAwardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

GetEmailAwardReq* GetEmailAwardReq::default_instance_ = NULL;

GetEmailAwardReq* GetEmailAwardReq::New() const {
  return new GetEmailAwardReq;
}

void GetEmailAwardReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msg_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetEmailAwardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 msg_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &msg_id_)));
          set_has_msg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetEmailAwardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 msg_id = 1;
  if (has_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->msg_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetEmailAwardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 msg_id = 1;
  if (has_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->msg_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetEmailAwardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 msg_id = 1;
    if (has_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->msg_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetEmailAwardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetEmailAwardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetEmailAwardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetEmailAwardReq::MergeFrom(const GetEmailAwardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_id()) {
      set_msg_id(from.msg_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetEmailAwardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetEmailAwardReq::CopyFrom(const GetEmailAwardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetEmailAwardReq::IsInitialized() const {

  return true;
}

void GetEmailAwardReq::Swap(GetEmailAwardReq* other) {
  if (other != this) {
    std::swap(msg_id_, other->msg_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetEmailAwardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetEmailAwardReq_descriptor_;
  metadata.reflection = GetEmailAwardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetEmailAwardAck::kMsgIdFieldNumber;
const int GetEmailAwardAck::kErrNoFieldNumber;
#endif  // !_MSC_VER

GetEmailAwardAck::GetEmailAwardAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetEmailAwardAck::InitAsDefaultInstance() {
}

GetEmailAwardAck::GetEmailAwardAck(const GetEmailAwardAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetEmailAwardAck::SharedCtor() {
  _cached_size_ = 0;
  msg_id_ = GOOGLE_ULONGLONG(0);
  err_no_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetEmailAwardAck::~GetEmailAwardAck() {
  SharedDtor();
}

void GetEmailAwardAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetEmailAwardAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetEmailAwardAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetEmailAwardAck_descriptor_;
}

const GetEmailAwardAck& GetEmailAwardAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

GetEmailAwardAck* GetEmailAwardAck::default_instance_ = NULL;

GetEmailAwardAck* GetEmailAwardAck::New() const {
  return new GetEmailAwardAck;
}

void GetEmailAwardAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msg_id_ = GOOGLE_ULONGLONG(0);
    err_no_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetEmailAwardAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 msg_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &msg_id_)));
          set_has_msg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_err_no;
        break;
      }

      // optional int32 err_no = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_err_no:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_no_)));
          set_has_err_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetEmailAwardAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 msg_id = 1;
  if (has_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->msg_id(), output);
  }

  // optional int32 err_no = 2;
  if (has_err_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->err_no(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetEmailAwardAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 msg_id = 1;
  if (has_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->msg_id(), target);
  }

  // optional int32 err_no = 2;
  if (has_err_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->err_no(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetEmailAwardAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 msg_id = 1;
    if (has_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->msg_id());
    }

    // optional int32 err_no = 2;
    if (has_err_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err_no());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetEmailAwardAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetEmailAwardAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetEmailAwardAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetEmailAwardAck::MergeFrom(const GetEmailAwardAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_id()) {
      set_msg_id(from.msg_id());
    }
    if (from.has_err_no()) {
      set_err_no(from.err_no());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetEmailAwardAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetEmailAwardAck::CopyFrom(const GetEmailAwardAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetEmailAwardAck::IsInitialized() const {

  return true;
}

void GetEmailAwardAck::Swap(GetEmailAwardAck* other) {
  if (other != this) {
    std::swap(msg_id_, other->msg_id_);
    std::swap(err_no_, other->err_no_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetEmailAwardAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetEmailAwardAck_descriptor_;
  metadata.reflection = GetEmailAwardAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OneKeyGetEmailAwardReq::kMsgIdFieldNumber;
#endif  // !_MSC_VER

OneKeyGetEmailAwardReq::OneKeyGetEmailAwardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OneKeyGetEmailAwardReq::InitAsDefaultInstance() {
}

OneKeyGetEmailAwardReq::OneKeyGetEmailAwardReq(const OneKeyGetEmailAwardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OneKeyGetEmailAwardReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OneKeyGetEmailAwardReq::~OneKeyGetEmailAwardReq() {
  SharedDtor();
}

void OneKeyGetEmailAwardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OneKeyGetEmailAwardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OneKeyGetEmailAwardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OneKeyGetEmailAwardReq_descriptor_;
}

const OneKeyGetEmailAwardReq& OneKeyGetEmailAwardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

OneKeyGetEmailAwardReq* OneKeyGetEmailAwardReq::default_instance_ = NULL;

OneKeyGetEmailAwardReq* OneKeyGetEmailAwardReq::New() const {
  return new OneKeyGetEmailAwardReq;
}

void OneKeyGetEmailAwardReq::Clear() {
  msg_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OneKeyGetEmailAwardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 msg_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msg_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_msg_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_msg_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_msg_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OneKeyGetEmailAwardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 msg_id = 1;
  for (int i = 0; i < this->msg_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->msg_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OneKeyGetEmailAwardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint64 msg_id = 1;
  for (int i = 0; i < this->msg_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->msg_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OneKeyGetEmailAwardReq::ByteSize() const {
  int total_size = 0;

  // repeated uint64 msg_id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->msg_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->msg_id(i));
    }
    total_size += 1 * this->msg_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OneKeyGetEmailAwardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OneKeyGetEmailAwardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OneKeyGetEmailAwardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OneKeyGetEmailAwardReq::MergeFrom(const OneKeyGetEmailAwardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  msg_id_.MergeFrom(from.msg_id_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OneKeyGetEmailAwardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OneKeyGetEmailAwardReq::CopyFrom(const OneKeyGetEmailAwardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OneKeyGetEmailAwardReq::IsInitialized() const {

  return true;
}

void OneKeyGetEmailAwardReq::Swap(OneKeyGetEmailAwardReq* other) {
  if (other != this) {
    msg_id_.Swap(&other->msg_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OneKeyGetEmailAwardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OneKeyGetEmailAwardReq_descriptor_;
  metadata.reflection = OneKeyGetEmailAwardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

EmailMessageNtf::EmailMessageNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EmailMessageNtf::InitAsDefaultInstance() {
}

EmailMessageNtf::EmailMessageNtf(const EmailMessageNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EmailMessageNtf::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EmailMessageNtf::~EmailMessageNtf() {
  SharedDtor();
}

void EmailMessageNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EmailMessageNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmailMessageNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EmailMessageNtf_descriptor_;
}

const EmailMessageNtf& EmailMessageNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

EmailMessageNtf* EmailMessageNtf::default_instance_ = NULL;

EmailMessageNtf* EmailMessageNtf::New() const {
  return new EmailMessageNtf;
}

void EmailMessageNtf::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EmailMessageNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void EmailMessageNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EmailMessageNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EmailMessageNtf::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmailMessageNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EmailMessageNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EmailMessageNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EmailMessageNtf::MergeFrom(const EmailMessageNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EmailMessageNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmailMessageNtf::CopyFrom(const EmailMessageNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmailMessageNtf::IsInitialized() const {

  return true;
}

void EmailMessageNtf::Swap(EmailMessageNtf* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EmailMessageNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EmailMessageNtf_descriptor_;
  metadata.reflection = EmailMessageNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtectPetReq::kPetIdFieldNumber;
#endif  // !_MSC_VER

ProtectPetReq::ProtectPetReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtectPetReq::InitAsDefaultInstance() {
}

ProtectPetReq::ProtectPetReq(const ProtectPetReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtectPetReq::SharedCtor() {
  _cached_size_ = 0;
  pet_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtectPetReq::~ProtectPetReq() {
  SharedDtor();
}

void ProtectPetReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtectPetReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtectPetReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtectPetReq_descriptor_;
}

const ProtectPetReq& ProtectPetReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

ProtectPetReq* ProtectPetReq::default_instance_ = NULL;

ProtectPetReq* ProtectPetReq::New() const {
  return new ProtectPetReq;
}

void ProtectPetReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pet_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtectPetReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 pet_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pet_id_)));
          set_has_pet_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtectPetReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 pet_id = 1;
  if (has_pet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->pet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtectPetReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 pet_id = 1;
  if (has_pet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->pet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtectPetReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 pet_id = 1;
    if (has_pet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtectPetReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtectPetReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtectPetReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtectPetReq::MergeFrom(const ProtectPetReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pet_id()) {
      set_pet_id(from.pet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtectPetReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtectPetReq::CopyFrom(const ProtectPetReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtectPetReq::IsInitialized() const {

  return true;
}

void ProtectPetReq::Swap(ProtectPetReq* other) {
  if (other != this) {
    std::swap(pet_id_, other->pet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtectPetReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtectPetReq_descriptor_;
  metadata.reflection = ProtectPetReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtectPetAck::kPetIdFieldNumber;
const int ProtectPetAck::kErrNoFieldNumber;
#endif  // !_MSC_VER

ProtectPetAck::ProtectPetAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtectPetAck::InitAsDefaultInstance() {
}

ProtectPetAck::ProtectPetAck(const ProtectPetAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtectPetAck::SharedCtor() {
  _cached_size_ = 0;
  pet_id_ = GOOGLE_ULONGLONG(0);
  err_no_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtectPetAck::~ProtectPetAck() {
  SharedDtor();
}

void ProtectPetAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtectPetAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtectPetAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtectPetAck_descriptor_;
}

const ProtectPetAck& ProtectPetAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

ProtectPetAck* ProtectPetAck::default_instance_ = NULL;

ProtectPetAck* ProtectPetAck::New() const {
  return new ProtectPetAck;
}

void ProtectPetAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pet_id_ = GOOGLE_ULONGLONG(0);
    err_no_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtectPetAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 pet_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pet_id_)));
          set_has_pet_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_err_no;
        break;
      }

      // optional int32 err_no = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_err_no:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_no_)));
          set_has_err_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtectPetAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 pet_id = 1;
  if (has_pet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->pet_id(), output);
  }

  // optional int32 err_no = 2;
  if (has_err_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->err_no(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtectPetAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 pet_id = 1;
  if (has_pet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->pet_id(), target);
  }

  // optional int32 err_no = 2;
  if (has_err_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->err_no(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtectPetAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 pet_id = 1;
    if (has_pet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pet_id());
    }

    // optional int32 err_no = 2;
    if (has_err_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err_no());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtectPetAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtectPetAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtectPetAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtectPetAck::MergeFrom(const ProtectPetAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pet_id()) {
      set_pet_id(from.pet_id());
    }
    if (from.has_err_no()) {
      set_err_no(from.err_no());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtectPetAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtectPetAck::CopyFrom(const ProtectPetAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtectPetAck::IsInitialized() const {

  return true;
}

void ProtectPetAck::Swap(ProtectPetAck* other) {
  if (other != this) {
    std::swap(pet_id_, other->pet_id_);
    std::swap(err_no_, other->err_no_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtectPetAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtectPetAck_descriptor_;
  metadata.reflection = ProtectPetAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SellPetToSysReq::kPetIdsFieldNumber;
#endif  // !_MSC_VER

SellPetToSysReq::SellPetToSysReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SellPetToSysReq::InitAsDefaultInstance() {
}

SellPetToSysReq::SellPetToSysReq(const SellPetToSysReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SellPetToSysReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SellPetToSysReq::~SellPetToSysReq() {
  SharedDtor();
}

void SellPetToSysReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SellPetToSysReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SellPetToSysReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SellPetToSysReq_descriptor_;
}

const SellPetToSysReq& SellPetToSysReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

SellPetToSysReq* SellPetToSysReq::default_instance_ = NULL;

SellPetToSysReq* SellPetToSysReq::New() const {
  return new SellPetToSysReq;
}

void SellPetToSysReq::Clear() {
  pet_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SellPetToSysReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 pet_ids = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pet_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_pet_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_pet_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_pet_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SellPetToSysReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 pet_ids = 1;
  for (int i = 0; i < this->pet_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->pet_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SellPetToSysReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint64 pet_ids = 1;
  for (int i = 0; i < this->pet_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->pet_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SellPetToSysReq::ByteSize() const {
  int total_size = 0;

  // repeated uint64 pet_ids = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->pet_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->pet_ids(i));
    }
    total_size += 1 * this->pet_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SellPetToSysReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SellPetToSysReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SellPetToSysReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SellPetToSysReq::MergeFrom(const SellPetToSysReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  pet_ids_.MergeFrom(from.pet_ids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SellPetToSysReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SellPetToSysReq::CopyFrom(const SellPetToSysReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SellPetToSysReq::IsInitialized() const {

  return true;
}

void SellPetToSysReq::Swap(SellPetToSysReq* other) {
  if (other != this) {
    pet_ids_.Swap(&other->pet_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SellPetToSysReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SellPetToSysReq_descriptor_;
  metadata.reflection = SellPetToSysReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SellPetToSysAck::kPetIdsFieldNumber;
const int SellPetToSysAck::kErrNoFieldNumber;
#endif  // !_MSC_VER

SellPetToSysAck::SellPetToSysAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SellPetToSysAck::InitAsDefaultInstance() {
}

SellPetToSysAck::SellPetToSysAck(const SellPetToSysAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SellPetToSysAck::SharedCtor() {
  _cached_size_ = 0;
  err_no_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SellPetToSysAck::~SellPetToSysAck() {
  SharedDtor();
}

void SellPetToSysAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SellPetToSysAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SellPetToSysAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SellPetToSysAck_descriptor_;
}

const SellPetToSysAck& SellPetToSysAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

SellPetToSysAck* SellPetToSysAck::default_instance_ = NULL;

SellPetToSysAck* SellPetToSysAck::New() const {
  return new SellPetToSysAck;
}

void SellPetToSysAck::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    err_no_ = 0;
  }
  pet_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SellPetToSysAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 pet_ids = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pet_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_pet_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_pet_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_pet_ids;
        if (input->ExpectTag(16)) goto parse_err_no;
        break;
      }

      // optional int32 err_no = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_err_no:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_no_)));
          set_has_err_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SellPetToSysAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 pet_ids = 1;
  for (int i = 0; i < this->pet_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->pet_ids(i), output);
  }

  // optional int32 err_no = 2;
  if (has_err_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->err_no(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SellPetToSysAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint64 pet_ids = 1;
  for (int i = 0; i < this->pet_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->pet_ids(i), target);
  }

  // optional int32 err_no = 2;
  if (has_err_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->err_no(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SellPetToSysAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 err_no = 2;
    if (has_err_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err_no());
    }

  }
  // repeated uint64 pet_ids = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->pet_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->pet_ids(i));
    }
    total_size += 1 * this->pet_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SellPetToSysAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SellPetToSysAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SellPetToSysAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SellPetToSysAck::MergeFrom(const SellPetToSysAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  pet_ids_.MergeFrom(from.pet_ids_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_err_no()) {
      set_err_no(from.err_no());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SellPetToSysAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SellPetToSysAck::CopyFrom(const SellPetToSysAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SellPetToSysAck::IsInitialized() const {

  return true;
}

void SellPetToSysAck::Swap(SellPetToSysAck* other) {
  if (other != this) {
    pet_ids_.Swap(&other->pet_ids_);
    std::swap(err_no_, other->err_no_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SellPetToSysAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SellPetToSysAck_descriptor_;
  metadata.reflection = SellPetToSysAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PetInBianDui::kPetIdFieldNumber;
const int PetInBianDui::kIdxFieldNumber;
const int PetInBianDui::kNumberFieldNumber;
#endif  // !_MSC_VER

PetInBianDui::PetInBianDui()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PetInBianDui::InitAsDefaultInstance() {
}

PetInBianDui::PetInBianDui(const PetInBianDui& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PetInBianDui::SharedCtor() {
  _cached_size_ = 0;
  pet_id_ = GOOGLE_ULONGLONG(0);
  idx_ = 0u;
  number_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetInBianDui::~PetInBianDui() {
  SharedDtor();
}

void PetInBianDui::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PetInBianDui::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetInBianDui::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetInBianDui_descriptor_;
}

const PetInBianDui& PetInBianDui::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

PetInBianDui* PetInBianDui::default_instance_ = NULL;

PetInBianDui* PetInBianDui::New() const {
  return new PetInBianDui;
}

void PetInBianDui::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pet_id_ = GOOGLE_ULONGLONG(0);
    idx_ = 0u;
    number_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetInBianDui::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 pet_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pet_id_)));
          set_has_pet_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_idx;
        break;
      }

      // optional uint32 idx = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &idx_)));
          set_has_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_number;
        break;
      }

      // optional uint32 number = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PetInBianDui::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 pet_id = 1;
  if (has_pet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->pet_id(), output);
  }

  // optional uint32 idx = 2;
  if (has_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->idx(), output);
  }

  // optional uint32 number = 3;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->number(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PetInBianDui::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 pet_id = 1;
  if (has_pet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->pet_id(), target);
  }

  // optional uint32 idx = 2;
  if (has_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->idx(), target);
  }

  // optional uint32 number = 3;
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->number(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PetInBianDui::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 pet_id = 1;
    if (has_pet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pet_id());
    }

    // optional uint32 idx = 2;
    if (has_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->idx());
    }

    // optional uint32 number = 3;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->number());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetInBianDui::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetInBianDui* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetInBianDui*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetInBianDui::MergeFrom(const PetInBianDui& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pet_id()) {
      set_pet_id(from.pet_id());
    }
    if (from.has_idx()) {
      set_idx(from.idx());
    }
    if (from.has_number()) {
      set_number(from.number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetInBianDui::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetInBianDui::CopyFrom(const PetInBianDui& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetInBianDui::IsInitialized() const {

  return true;
}

void PetInBianDui::Swap(PetInBianDui* other) {
  if (other != this) {
    std::swap(pet_id_, other->pet_id_);
    std::swap(idx_, other->idx_);
    std::swap(number_, other->number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetInBianDui::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetInBianDui_descriptor_;
  metadata.reflection = PetInBianDui_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BianDuiData::kIndexFieldNumber;
const int BianDuiData::kNameFieldNumber;
const int BianDuiData::kAdminPetIdFieldNumber;
const int BianDuiData::kPetFieldNumber;
const int BianDuiData::kTotalAttackFieldNumber;
const int BianDuiData::kStateFieldNumber;
#endif  // !_MSC_VER

BianDuiData::BianDuiData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BianDuiData::InitAsDefaultInstance() {
}

BianDuiData::BianDuiData(const BianDuiData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BianDuiData::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  admin_pet_id_ = GOOGLE_ULONGLONG(0);
  total_attack_ = 0;
  state_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BianDuiData::~BianDuiData() {
  SharedDtor();
}

void BianDuiData::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void BianDuiData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BianDuiData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BianDuiData_descriptor_;
}

const BianDuiData& BianDuiData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

BianDuiData* BianDuiData::default_instance_ = NULL;

BianDuiData* BianDuiData::New() const {
  return new BianDuiData;
}

void BianDuiData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    admin_pet_id_ = GOOGLE_ULONGLONG(0);
    total_attack_ = 0;
    state_ = false;
  }
  pet_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BianDuiData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_admin_pet_id;
        break;
      }

      // optional uint64 admin_pet_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_admin_pet_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &admin_pet_id_)));
          set_has_admin_pet_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_pet;
        break;
      }

      // repeated .protoc.gameproto.PetInBianDui pet = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pet()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_pet;
        if (input->ExpectTag(40)) goto parse_total_attack;
        break;
      }

      // optional int32 total_attack = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_attack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_attack_)));
          set_has_total_attack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_state;
        break;
      }

      // optional bool state = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BianDuiData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional uint64 admin_pet_id = 3;
  if (has_admin_pet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->admin_pet_id(), output);
  }

  // repeated .protoc.gameproto.PetInBianDui pet = 4;
  for (int i = 0; i < this->pet_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->pet(i), output);
  }

  // optional int32 total_attack = 5;
  if (has_total_attack()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->total_attack(), output);
  }

  // optional bool state = 6;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BianDuiData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->index(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint64 admin_pet_id = 3;
  if (has_admin_pet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->admin_pet_id(), target);
  }

  // repeated .protoc.gameproto.PetInBianDui pet = 4;
  for (int i = 0; i < this->pet_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->pet(i), target);
  }

  // optional int32 total_attack = 5;
  if (has_total_attack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->total_attack(), target);
  }

  // optional bool state = 6;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BianDuiData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint64 admin_pet_id = 3;
    if (has_admin_pet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->admin_pet_id());
    }

    // optional int32 total_attack = 5;
    if (has_total_attack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_attack());
    }

    // optional bool state = 6;
    if (has_state()) {
      total_size += 1 + 1;
    }

  }
  // repeated .protoc.gameproto.PetInBianDui pet = 4;
  total_size += 1 * this->pet_size();
  for (int i = 0; i < this->pet_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pet(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BianDuiData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BianDuiData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BianDuiData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BianDuiData::MergeFrom(const BianDuiData& from) {
  GOOGLE_CHECK_NE(&from, this);
  pet_.MergeFrom(from.pet_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_admin_pet_id()) {
      set_admin_pet_id(from.admin_pet_id());
    }
    if (from.has_total_attack()) {
      set_total_attack(from.total_attack());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BianDuiData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BianDuiData::CopyFrom(const BianDuiData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BianDuiData::IsInitialized() const {

  return true;
}

void BianDuiData::Swap(BianDuiData* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(name_, other->name_);
    std::swap(admin_pet_id_, other->admin_pet_id_);
    pet_.Swap(&other->pet_);
    std::swap(total_attack_, other->total_attack_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BianDuiData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BianDuiData_descriptor_;
  metadata.reflection = BianDuiData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BianDuiList::kDataFieldNumber;
#endif  // !_MSC_VER

BianDuiList::BianDuiList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BianDuiList::InitAsDefaultInstance() {
}

BianDuiList::BianDuiList(const BianDuiList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BianDuiList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BianDuiList::~BianDuiList() {
  SharedDtor();
}

void BianDuiList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BianDuiList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BianDuiList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BianDuiList_descriptor_;
}

const BianDuiList& BianDuiList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

BianDuiList* BianDuiList::default_instance_ = NULL;

BianDuiList* BianDuiList::New() const {
  return new BianDuiList;
}

void BianDuiList::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BianDuiList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protoc.gameproto.BianDuiData data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BianDuiList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protoc.gameproto.BianDuiData data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BianDuiList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protoc.gameproto.BianDuiData data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BianDuiList::ByteSize() const {
  int total_size = 0;

  // repeated .protoc.gameproto.BianDuiData data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BianDuiList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BianDuiList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BianDuiList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BianDuiList::MergeFrom(const BianDuiList& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BianDuiList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BianDuiList::CopyFrom(const BianDuiList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BianDuiList::IsInitialized() const {

  return true;
}

void BianDuiList::Swap(BianDuiList* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BianDuiList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BianDuiList_descriptor_;
  metadata.reflection = BianDuiList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SubBianDuiReq::kBianduiFieldNumber;
#endif  // !_MSC_VER

SubBianDuiReq::SubBianDuiReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SubBianDuiReq::InitAsDefaultInstance() {
  biandui_ = const_cast< ::protoc::gameproto::BianDuiData*>(&::protoc::gameproto::BianDuiData::default_instance());
}

SubBianDuiReq::SubBianDuiReq(const SubBianDuiReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SubBianDuiReq::SharedCtor() {
  _cached_size_ = 0;
  biandui_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubBianDuiReq::~SubBianDuiReq() {
  SharedDtor();
}

void SubBianDuiReq::SharedDtor() {
  if (this != default_instance_) {
    delete biandui_;
  }
}

void SubBianDuiReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubBianDuiReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubBianDuiReq_descriptor_;
}

const SubBianDuiReq& SubBianDuiReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

SubBianDuiReq* SubBianDuiReq::default_instance_ = NULL;

SubBianDuiReq* SubBianDuiReq::New() const {
  return new SubBianDuiReq;
}

void SubBianDuiReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_biandui()) {
      if (biandui_ != NULL) biandui_->::protoc::gameproto::BianDuiData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubBianDuiReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protoc.gameproto.BianDuiData biandui = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_biandui()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SubBianDuiReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .protoc.gameproto.BianDuiData biandui = 1;
  if (has_biandui()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->biandui(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SubBianDuiReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .protoc.gameproto.BianDuiData biandui = 1;
  if (has_biandui()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->biandui(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SubBianDuiReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .protoc.gameproto.BianDuiData biandui = 1;
    if (has_biandui()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->biandui());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubBianDuiReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubBianDuiReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubBianDuiReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubBianDuiReq::MergeFrom(const SubBianDuiReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_biandui()) {
      mutable_biandui()->::protoc::gameproto::BianDuiData::MergeFrom(from.biandui());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubBianDuiReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubBianDuiReq::CopyFrom(const SubBianDuiReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubBianDuiReq::IsInitialized() const {

  return true;
}

void SubBianDuiReq::Swap(SubBianDuiReq* other) {
  if (other != this) {
    std::swap(biandui_, other->biandui_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubBianDuiReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubBianDuiReq_descriptor_;
  metadata.reflection = SubBianDuiReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SubBianDuiAck::kIdxFieldNumber;
const int SubBianDuiAck::kErrNoFieldNumber;
#endif  // !_MSC_VER

SubBianDuiAck::SubBianDuiAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SubBianDuiAck::InitAsDefaultInstance() {
}

SubBianDuiAck::SubBianDuiAck(const SubBianDuiAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SubBianDuiAck::SharedCtor() {
  _cached_size_ = 0;
  idx_ = 0u;
  err_no_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubBianDuiAck::~SubBianDuiAck() {
  SharedDtor();
}

void SubBianDuiAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SubBianDuiAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubBianDuiAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubBianDuiAck_descriptor_;
}

const SubBianDuiAck& SubBianDuiAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

SubBianDuiAck* SubBianDuiAck::default_instance_ = NULL;

SubBianDuiAck* SubBianDuiAck::New() const {
  return new SubBianDuiAck;
}

void SubBianDuiAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    idx_ = 0u;
    err_no_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubBianDuiAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 idx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &idx_)));
          set_has_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_err_no;
        break;
      }

      // optional int32 err_no = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_err_no:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_no_)));
          set_has_err_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SubBianDuiAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 idx = 1;
  if (has_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->idx(), output);
  }

  // optional int32 err_no = 2;
  if (has_err_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->err_no(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SubBianDuiAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 idx = 1;
  if (has_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->idx(), target);
  }

  // optional int32 err_no = 2;
  if (has_err_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->err_no(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SubBianDuiAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 idx = 1;
    if (has_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->idx());
    }

    // optional int32 err_no = 2;
    if (has_err_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err_no());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubBianDuiAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubBianDuiAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubBianDuiAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubBianDuiAck::MergeFrom(const SubBianDuiAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_idx()) {
      set_idx(from.idx());
    }
    if (from.has_err_no()) {
      set_err_no(from.err_no());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubBianDuiAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubBianDuiAck::CopyFrom(const SubBianDuiAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubBianDuiAck::IsInitialized() const {

  return true;
}

void SubBianDuiAck::Swap(SubBianDuiAck* other) {
  if (other != this) {
    std::swap(idx_, other->idx_);
    std::swap(err_no_, other->err_no_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubBianDuiAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubBianDuiAck_descriptor_;
  metadata.reflection = SubBianDuiAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ModifyBianDuiNameReq::kNameFieldNumber;
#endif  // !_MSC_VER

ModifyBianDuiNameReq::ModifyBianDuiNameReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ModifyBianDuiNameReq::InitAsDefaultInstance() {
}

ModifyBianDuiNameReq::ModifyBianDuiNameReq(const ModifyBianDuiNameReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ModifyBianDuiNameReq::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModifyBianDuiNameReq::~ModifyBianDuiNameReq() {
  SharedDtor();
}

void ModifyBianDuiNameReq::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ModifyBianDuiNameReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModifyBianDuiNameReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModifyBianDuiNameReq_descriptor_;
}

const ModifyBianDuiNameReq& ModifyBianDuiNameReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

ModifyBianDuiNameReq* ModifyBianDuiNameReq::default_instance_ = NULL;

ModifyBianDuiNameReq* ModifyBianDuiNameReq::New() const {
  return new ModifyBianDuiNameReq;
}

void ModifyBianDuiNameReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModifyBianDuiNameReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ModifyBianDuiNameReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ModifyBianDuiNameReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ModifyBianDuiNameReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModifyBianDuiNameReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModifyBianDuiNameReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModifyBianDuiNameReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModifyBianDuiNameReq::MergeFrom(const ModifyBianDuiNameReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModifyBianDuiNameReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifyBianDuiNameReq::CopyFrom(const ModifyBianDuiNameReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifyBianDuiNameReq::IsInitialized() const {

  return true;
}

void ModifyBianDuiNameReq::Swap(ModifyBianDuiNameReq* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModifyBianDuiNameReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModifyBianDuiNameReq_descriptor_;
  metadata.reflection = ModifyBianDuiNameReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ModifyBianDuiNameAck::kNameFieldNumber;
const int ModifyBianDuiNameAck::kErrNoFieldNumber;
#endif  // !_MSC_VER

ModifyBianDuiNameAck::ModifyBianDuiNameAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ModifyBianDuiNameAck::InitAsDefaultInstance() {
}

ModifyBianDuiNameAck::ModifyBianDuiNameAck(const ModifyBianDuiNameAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ModifyBianDuiNameAck::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  err_no_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModifyBianDuiNameAck::~ModifyBianDuiNameAck() {
  SharedDtor();
}

void ModifyBianDuiNameAck::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ModifyBianDuiNameAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModifyBianDuiNameAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModifyBianDuiNameAck_descriptor_;
}

const ModifyBianDuiNameAck& ModifyBianDuiNameAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

ModifyBianDuiNameAck* ModifyBianDuiNameAck::default_instance_ = NULL;

ModifyBianDuiNameAck* ModifyBianDuiNameAck::New() const {
  return new ModifyBianDuiNameAck;
}

void ModifyBianDuiNameAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    err_no_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModifyBianDuiNameAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_err_no;
        break;
      }

      // optional int32 err_no = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_err_no:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_no_)));
          set_has_err_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ModifyBianDuiNameAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional int32 err_no = 2;
  if (has_err_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->err_no(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ModifyBianDuiNameAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int32 err_no = 2;
  if (has_err_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->err_no(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ModifyBianDuiNameAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 err_no = 2;
    if (has_err_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err_no());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModifyBianDuiNameAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModifyBianDuiNameAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModifyBianDuiNameAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModifyBianDuiNameAck::MergeFrom(const ModifyBianDuiNameAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_err_no()) {
      set_err_no(from.err_no());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModifyBianDuiNameAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifyBianDuiNameAck::CopyFrom(const ModifyBianDuiNameAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifyBianDuiNameAck::IsInitialized() const {

  return true;
}

void ModifyBianDuiNameAck::Swap(ModifyBianDuiNameAck* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(err_no_, other->err_no_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModifyBianDuiNameAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModifyBianDuiNameAck_descriptor_;
  metadata.reflection = ModifyBianDuiNameAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ModifyBIanDuiDataReq::kPetId1FieldNumber;
const int ModifyBIanDuiDataReq::kPetId2FieldNumber;
const int ModifyBIanDuiDataReq::kQueueIdxFieldNumber;
#endif  // !_MSC_VER

ModifyBIanDuiDataReq::ModifyBIanDuiDataReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ModifyBIanDuiDataReq::InitAsDefaultInstance() {
}

ModifyBIanDuiDataReq::ModifyBIanDuiDataReq(const ModifyBIanDuiDataReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ModifyBIanDuiDataReq::SharedCtor() {
  _cached_size_ = 0;
  pet_id_1_ = GOOGLE_ULONGLONG(0);
  pet_id_2_ = GOOGLE_ULONGLONG(0);
  queue_idx_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModifyBIanDuiDataReq::~ModifyBIanDuiDataReq() {
  SharedDtor();
}

void ModifyBIanDuiDataReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ModifyBIanDuiDataReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModifyBIanDuiDataReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModifyBIanDuiDataReq_descriptor_;
}

const ModifyBIanDuiDataReq& ModifyBIanDuiDataReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

ModifyBIanDuiDataReq* ModifyBIanDuiDataReq::default_instance_ = NULL;

ModifyBIanDuiDataReq* ModifyBIanDuiDataReq::New() const {
  return new ModifyBIanDuiDataReq;
}

void ModifyBIanDuiDataReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pet_id_1_ = GOOGLE_ULONGLONG(0);
    pet_id_2_ = GOOGLE_ULONGLONG(0);
    queue_idx_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModifyBIanDuiDataReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 pet_id_1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pet_id_1_)));
          set_has_pet_id_1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pet_id_2;
        break;
      }

      // optional uint64 pet_id_2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pet_id_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pet_id_2_)));
          set_has_pet_id_2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_queue_idx;
        break;
      }

      // optional uint32 queue_idx = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_queue_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &queue_idx_)));
          set_has_queue_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ModifyBIanDuiDataReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 pet_id_1 = 1;
  if (has_pet_id_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->pet_id_1(), output);
  }

  // optional uint64 pet_id_2 = 2;
  if (has_pet_id_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->pet_id_2(), output);
  }

  // optional uint32 queue_idx = 3;
  if (has_queue_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->queue_idx(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ModifyBIanDuiDataReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 pet_id_1 = 1;
  if (has_pet_id_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->pet_id_1(), target);
  }

  // optional uint64 pet_id_2 = 2;
  if (has_pet_id_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->pet_id_2(), target);
  }

  // optional uint32 queue_idx = 3;
  if (has_queue_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->queue_idx(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ModifyBIanDuiDataReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 pet_id_1 = 1;
    if (has_pet_id_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pet_id_1());
    }

    // optional uint64 pet_id_2 = 2;
    if (has_pet_id_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pet_id_2());
    }

    // optional uint32 queue_idx = 3;
    if (has_queue_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->queue_idx());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModifyBIanDuiDataReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModifyBIanDuiDataReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModifyBIanDuiDataReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModifyBIanDuiDataReq::MergeFrom(const ModifyBIanDuiDataReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pet_id_1()) {
      set_pet_id_1(from.pet_id_1());
    }
    if (from.has_pet_id_2()) {
      set_pet_id_2(from.pet_id_2());
    }
    if (from.has_queue_idx()) {
      set_queue_idx(from.queue_idx());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModifyBIanDuiDataReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifyBIanDuiDataReq::CopyFrom(const ModifyBIanDuiDataReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifyBIanDuiDataReq::IsInitialized() const {

  return true;
}

void ModifyBIanDuiDataReq::Swap(ModifyBIanDuiDataReq* other) {
  if (other != this) {
    std::swap(pet_id_1_, other->pet_id_1_);
    std::swap(pet_id_2_, other->pet_id_2_);
    std::swap(queue_idx_, other->queue_idx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModifyBIanDuiDataReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModifyBIanDuiDataReq_descriptor_;
  metadata.reflection = ModifyBIanDuiDataReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ModifyBIanDuiDataAck::kPetId1FieldNumber;
const int ModifyBIanDuiDataAck::kPetId2FieldNumber;
const int ModifyBIanDuiDataAck::kErrNoFieldNumber;
const int ModifyBIanDuiDataAck::kQueueIdxFieldNumber;
#endif  // !_MSC_VER

ModifyBIanDuiDataAck::ModifyBIanDuiDataAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ModifyBIanDuiDataAck::InitAsDefaultInstance() {
}

ModifyBIanDuiDataAck::ModifyBIanDuiDataAck(const ModifyBIanDuiDataAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ModifyBIanDuiDataAck::SharedCtor() {
  _cached_size_ = 0;
  pet_id_1_ = GOOGLE_ULONGLONG(0);
  pet_id_2_ = GOOGLE_ULONGLONG(0);
  err_no_ = 0;
  queue_idx_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModifyBIanDuiDataAck::~ModifyBIanDuiDataAck() {
  SharedDtor();
}

void ModifyBIanDuiDataAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ModifyBIanDuiDataAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModifyBIanDuiDataAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModifyBIanDuiDataAck_descriptor_;
}

const ModifyBIanDuiDataAck& ModifyBIanDuiDataAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

ModifyBIanDuiDataAck* ModifyBIanDuiDataAck::default_instance_ = NULL;

ModifyBIanDuiDataAck* ModifyBIanDuiDataAck::New() const {
  return new ModifyBIanDuiDataAck;
}

void ModifyBIanDuiDataAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pet_id_1_ = GOOGLE_ULONGLONG(0);
    pet_id_2_ = GOOGLE_ULONGLONG(0);
    err_no_ = 0;
    queue_idx_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModifyBIanDuiDataAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 pet_id_1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pet_id_1_)));
          set_has_pet_id_1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pet_id_2;
        break;
      }

      // optional uint64 pet_id_2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pet_id_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pet_id_2_)));
          set_has_pet_id_2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_err_no;
        break;
      }

      // optional int32 err_no = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_err_no:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_no_)));
          set_has_err_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_queue_idx;
        break;
      }

      // optional uint32 queue_idx = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_queue_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &queue_idx_)));
          set_has_queue_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ModifyBIanDuiDataAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 pet_id_1 = 1;
  if (has_pet_id_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->pet_id_1(), output);
  }

  // optional uint64 pet_id_2 = 2;
  if (has_pet_id_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->pet_id_2(), output);
  }

  // optional int32 err_no = 3;
  if (has_err_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->err_no(), output);
  }

  // optional uint32 queue_idx = 4;
  if (has_queue_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->queue_idx(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ModifyBIanDuiDataAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 pet_id_1 = 1;
  if (has_pet_id_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->pet_id_1(), target);
  }

  // optional uint64 pet_id_2 = 2;
  if (has_pet_id_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->pet_id_2(), target);
  }

  // optional int32 err_no = 3;
  if (has_err_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->err_no(), target);
  }

  // optional uint32 queue_idx = 4;
  if (has_queue_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->queue_idx(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ModifyBIanDuiDataAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 pet_id_1 = 1;
    if (has_pet_id_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pet_id_1());
    }

    // optional uint64 pet_id_2 = 2;
    if (has_pet_id_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pet_id_2());
    }

    // optional int32 err_no = 3;
    if (has_err_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err_no());
    }

    // optional uint32 queue_idx = 4;
    if (has_queue_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->queue_idx());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModifyBIanDuiDataAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModifyBIanDuiDataAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModifyBIanDuiDataAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModifyBIanDuiDataAck::MergeFrom(const ModifyBIanDuiDataAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pet_id_1()) {
      set_pet_id_1(from.pet_id_1());
    }
    if (from.has_pet_id_2()) {
      set_pet_id_2(from.pet_id_2());
    }
    if (from.has_err_no()) {
      set_err_no(from.err_no());
    }
    if (from.has_queue_idx()) {
      set_queue_idx(from.queue_idx());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModifyBIanDuiDataAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifyBIanDuiDataAck::CopyFrom(const ModifyBIanDuiDataAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifyBIanDuiDataAck::IsInitialized() const {

  return true;
}

void ModifyBIanDuiDataAck::Swap(ModifyBIanDuiDataAck* other) {
  if (other != this) {
    std::swap(pet_id_1_, other->pet_id_1_);
    std::swap(pet_id_2_, other->pet_id_2_);
    std::swap(err_no_, other->err_no_);
    std::swap(queue_idx_, other->queue_idx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModifyBIanDuiDataAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModifyBIanDuiDataAck_descriptor_;
  metadata.reflection = ModifyBIanDuiDataAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BianDuiNtf::kQueueFieldNumber;
#endif  // !_MSC_VER

BianDuiNtf::BianDuiNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BianDuiNtf::InitAsDefaultInstance() {
  queue_ = const_cast< ::protoc::gameproto::BianDuiData*>(&::protoc::gameproto::BianDuiData::default_instance());
}

BianDuiNtf::BianDuiNtf(const BianDuiNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BianDuiNtf::SharedCtor() {
  _cached_size_ = 0;
  queue_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BianDuiNtf::~BianDuiNtf() {
  SharedDtor();
}

void BianDuiNtf::SharedDtor() {
  if (this != default_instance_) {
    delete queue_;
  }
}

void BianDuiNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BianDuiNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BianDuiNtf_descriptor_;
}

const BianDuiNtf& BianDuiNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

BianDuiNtf* BianDuiNtf::default_instance_ = NULL;

BianDuiNtf* BianDuiNtf::New() const {
  return new BianDuiNtf;
}

void BianDuiNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_queue()) {
      if (queue_ != NULL) queue_->::protoc::gameproto::BianDuiData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BianDuiNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protoc.gameproto.BianDuiData queue = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_queue()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BianDuiNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .protoc.gameproto.BianDuiData queue = 1;
  if (has_queue()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->queue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BianDuiNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .protoc.gameproto.BianDuiData queue = 1;
  if (has_queue()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->queue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BianDuiNtf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .protoc.gameproto.BianDuiData queue = 1;
    if (has_queue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->queue());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BianDuiNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BianDuiNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BianDuiNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BianDuiNtf::MergeFrom(const BianDuiNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_queue()) {
      mutable_queue()->::protoc::gameproto::BianDuiData::MergeFrom(from.queue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BianDuiNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BianDuiNtf::CopyFrom(const BianDuiNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BianDuiNtf::IsInitialized() const {

  return true;
}

void BianDuiNtf::Swap(BianDuiNtf* other) {
  if (other != this) {
    std::swap(queue_, other->queue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BianDuiNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BianDuiNtf_descriptor_;
  metadata.reflection = BianDuiNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddBianDui::kQueueFieldNumber;
#endif  // !_MSC_VER

AddBianDui::AddBianDui()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddBianDui::InitAsDefaultInstance() {
  queue_ = const_cast< ::protoc::gameproto::BianDuiData*>(&::protoc::gameproto::BianDuiData::default_instance());
}

AddBianDui::AddBianDui(const AddBianDui& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddBianDui::SharedCtor() {
  _cached_size_ = 0;
  queue_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddBianDui::~AddBianDui() {
  SharedDtor();
}

void AddBianDui::SharedDtor() {
  if (this != default_instance_) {
    delete queue_;
  }
}

void AddBianDui::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddBianDui::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddBianDui_descriptor_;
}

const AddBianDui& AddBianDui::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

AddBianDui* AddBianDui::default_instance_ = NULL;

AddBianDui* AddBianDui::New() const {
  return new AddBianDui;
}

void AddBianDui::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_queue()) {
      if (queue_ != NULL) queue_->::protoc::gameproto::BianDuiData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddBianDui::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protoc.gameproto.BianDuiData queue = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_queue()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddBianDui::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .protoc.gameproto.BianDuiData queue = 1;
  if (has_queue()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->queue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddBianDui::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .protoc.gameproto.BianDuiData queue = 1;
  if (has_queue()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->queue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddBianDui::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .protoc.gameproto.BianDuiData queue = 1;
    if (has_queue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->queue());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddBianDui::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddBianDui* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddBianDui*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddBianDui::MergeFrom(const AddBianDui& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_queue()) {
      mutable_queue()->::protoc::gameproto::BianDuiData::MergeFrom(from.queue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddBianDui::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddBianDui::CopyFrom(const AddBianDui& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddBianDui::IsInitialized() const {

  return true;
}

void AddBianDui::Swap(AddBianDui* other) {
  if (other != this) {
    std::swap(queue_, other->queue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddBianDui::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddBianDui_descriptor_;
  metadata.reflection = AddBianDui_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetCurBianDuiReq::kIdxFieldNumber;
#endif  // !_MSC_VER

GetCurBianDuiReq::GetCurBianDuiReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetCurBianDuiReq::InitAsDefaultInstance() {
}

GetCurBianDuiReq::GetCurBianDuiReq(const GetCurBianDuiReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetCurBianDuiReq::SharedCtor() {
  _cached_size_ = 0;
  idx_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetCurBianDuiReq::~GetCurBianDuiReq() {
  SharedDtor();
}

void GetCurBianDuiReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetCurBianDuiReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetCurBianDuiReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetCurBianDuiReq_descriptor_;
}

const GetCurBianDuiReq& GetCurBianDuiReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

GetCurBianDuiReq* GetCurBianDuiReq::default_instance_ = NULL;

GetCurBianDuiReq* GetCurBianDuiReq::New() const {
  return new GetCurBianDuiReq;
}

void GetCurBianDuiReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    idx_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetCurBianDuiReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 idx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &idx_)));
          set_has_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetCurBianDuiReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 idx = 1;
  if (has_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->idx(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetCurBianDuiReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 idx = 1;
  if (has_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->idx(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetCurBianDuiReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 idx = 1;
    if (has_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->idx());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetCurBianDuiReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetCurBianDuiReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetCurBianDuiReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetCurBianDuiReq::MergeFrom(const GetCurBianDuiReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_idx()) {
      set_idx(from.idx());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetCurBianDuiReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCurBianDuiReq::CopyFrom(const GetCurBianDuiReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCurBianDuiReq::IsInitialized() const {

  return true;
}

void GetCurBianDuiReq::Swap(GetCurBianDuiReq* other) {
  if (other != this) {
    std::swap(idx_, other->idx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetCurBianDuiReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetCurBianDuiReq_descriptor_;
  metadata.reflection = GetCurBianDuiReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetCurBianDuiAck::kBianduiFieldNumber;
const int GetCurBianDuiAck::kErrNoFieldNumber;
#endif  // !_MSC_VER

GetCurBianDuiAck::GetCurBianDuiAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetCurBianDuiAck::InitAsDefaultInstance() {
  biandui_ = const_cast< ::protoc::gameproto::BianDuiData*>(&::protoc::gameproto::BianDuiData::default_instance());
}

GetCurBianDuiAck::GetCurBianDuiAck(const GetCurBianDuiAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetCurBianDuiAck::SharedCtor() {
  _cached_size_ = 0;
  biandui_ = NULL;
  err_no_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetCurBianDuiAck::~GetCurBianDuiAck() {
  SharedDtor();
}

void GetCurBianDuiAck::SharedDtor() {
  if (this != default_instance_) {
    delete biandui_;
  }
}

void GetCurBianDuiAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetCurBianDuiAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetCurBianDuiAck_descriptor_;
}

const GetCurBianDuiAck& GetCurBianDuiAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

GetCurBianDuiAck* GetCurBianDuiAck::default_instance_ = NULL;

GetCurBianDuiAck* GetCurBianDuiAck::New() const {
  return new GetCurBianDuiAck;
}

void GetCurBianDuiAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_biandui()) {
      if (biandui_ != NULL) biandui_->::protoc::gameproto::BianDuiData::Clear();
    }
    err_no_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetCurBianDuiAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protoc.gameproto.BianDuiData biandui = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_biandui()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_err_no;
        break;
      }

      // optional int32 err_no = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_err_no:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_no_)));
          set_has_err_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetCurBianDuiAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .protoc.gameproto.BianDuiData biandui = 1;
  if (has_biandui()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->biandui(), output);
  }

  // optional int32 err_no = 2;
  if (has_err_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->err_no(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetCurBianDuiAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .protoc.gameproto.BianDuiData biandui = 1;
  if (has_biandui()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->biandui(), target);
  }

  // optional int32 err_no = 2;
  if (has_err_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->err_no(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetCurBianDuiAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .protoc.gameproto.BianDuiData biandui = 1;
    if (has_biandui()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->biandui());
    }

    // optional int32 err_no = 2;
    if (has_err_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err_no());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetCurBianDuiAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetCurBianDuiAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetCurBianDuiAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetCurBianDuiAck::MergeFrom(const GetCurBianDuiAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_biandui()) {
      mutable_biandui()->::protoc::gameproto::BianDuiData::MergeFrom(from.biandui());
    }
    if (from.has_err_no()) {
      set_err_no(from.err_no());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetCurBianDuiAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCurBianDuiAck::CopyFrom(const GetCurBianDuiAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCurBianDuiAck::IsInitialized() const {

  return true;
}

void GetCurBianDuiAck::Swap(GetCurBianDuiAck* other) {
  if (other != this) {
    std::swap(biandui_, other->biandui_);
    std::swap(err_no_, other->err_no_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetCurBianDuiAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetCurBianDuiAck_descriptor_;
  metadata.reflection = GetCurBianDuiAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetCurBianDuiReq::kQueueIdFieldNumber;
#endif  // !_MSC_VER

SetCurBianDuiReq::SetCurBianDuiReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetCurBianDuiReq::InitAsDefaultInstance() {
}

SetCurBianDuiReq::SetCurBianDuiReq(const SetCurBianDuiReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetCurBianDuiReq::SharedCtor() {
  _cached_size_ = 0;
  queue_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetCurBianDuiReq::~SetCurBianDuiReq() {
  SharedDtor();
}

void SetCurBianDuiReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetCurBianDuiReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetCurBianDuiReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetCurBianDuiReq_descriptor_;
}

const SetCurBianDuiReq& SetCurBianDuiReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

SetCurBianDuiReq* SetCurBianDuiReq::default_instance_ = NULL;

SetCurBianDuiReq* SetCurBianDuiReq::New() const {
  return new SetCurBianDuiReq;
}

void SetCurBianDuiReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    queue_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetCurBianDuiReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 queue_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &queue_id_)));
          set_has_queue_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetCurBianDuiReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 queue_id = 1;
  if (has_queue_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->queue_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetCurBianDuiReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 queue_id = 1;
  if (has_queue_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->queue_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetCurBianDuiReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 queue_id = 1;
    if (has_queue_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->queue_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetCurBianDuiReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetCurBianDuiReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetCurBianDuiReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetCurBianDuiReq::MergeFrom(const SetCurBianDuiReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_queue_id()) {
      set_queue_id(from.queue_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetCurBianDuiReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetCurBianDuiReq::CopyFrom(const SetCurBianDuiReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetCurBianDuiReq::IsInitialized() const {

  return true;
}

void SetCurBianDuiReq::Swap(SetCurBianDuiReq* other) {
  if (other != this) {
    std::swap(queue_id_, other->queue_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetCurBianDuiReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetCurBianDuiReq_descriptor_;
  metadata.reflection = SetCurBianDuiReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetCurBianDuiAck::kQueueIdFieldNumber;
const int SetCurBianDuiAck::kErrNoFieldNumber;
#endif  // !_MSC_VER

SetCurBianDuiAck::SetCurBianDuiAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetCurBianDuiAck::InitAsDefaultInstance() {
}

SetCurBianDuiAck::SetCurBianDuiAck(const SetCurBianDuiAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetCurBianDuiAck::SharedCtor() {
  _cached_size_ = 0;
  queue_id_ = 0u;
  err_no_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetCurBianDuiAck::~SetCurBianDuiAck() {
  SharedDtor();
}

void SetCurBianDuiAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetCurBianDuiAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetCurBianDuiAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetCurBianDuiAck_descriptor_;
}

const SetCurBianDuiAck& SetCurBianDuiAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

SetCurBianDuiAck* SetCurBianDuiAck::default_instance_ = NULL;

SetCurBianDuiAck* SetCurBianDuiAck::New() const {
  return new SetCurBianDuiAck;
}

void SetCurBianDuiAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    queue_id_ = 0u;
    err_no_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetCurBianDuiAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 queue_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &queue_id_)));
          set_has_queue_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_err_no;
        break;
      }

      // optional int32 err_no = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_err_no:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_no_)));
          set_has_err_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetCurBianDuiAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 queue_id = 1;
  if (has_queue_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->queue_id(), output);
  }

  // optional int32 err_no = 2;
  if (has_err_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->err_no(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetCurBianDuiAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 queue_id = 1;
  if (has_queue_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->queue_id(), target);
  }

  // optional int32 err_no = 2;
  if (has_err_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->err_no(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetCurBianDuiAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 queue_id = 1;
    if (has_queue_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->queue_id());
    }

    // optional int32 err_no = 2;
    if (has_err_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err_no());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetCurBianDuiAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetCurBianDuiAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetCurBianDuiAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetCurBianDuiAck::MergeFrom(const SetCurBianDuiAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_queue_id()) {
      set_queue_id(from.queue_id());
    }
    if (from.has_err_no()) {
      set_err_no(from.err_no());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetCurBianDuiAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetCurBianDuiAck::CopyFrom(const SetCurBianDuiAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetCurBianDuiAck::IsInitialized() const {

  return true;
}

void SetCurBianDuiAck::Swap(SetCurBianDuiAck* other) {
  if (other != this) {
    std::swap(queue_id_, other->queue_id_);
    std::swap(err_no_, other->err_no_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetCurBianDuiAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetCurBianDuiAck_descriptor_;
  metadata.reflection = SetCurBianDuiAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddPetToBianDuiReq::kPetIdFieldNumber;
const int AddPetToBianDuiReq::kIdxFieldNumber;
const int AddPetToBianDuiReq::kQueueIdxFieldNumber;
#endif  // !_MSC_VER

AddPetToBianDuiReq::AddPetToBianDuiReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddPetToBianDuiReq::InitAsDefaultInstance() {
}

AddPetToBianDuiReq::AddPetToBianDuiReq(const AddPetToBianDuiReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddPetToBianDuiReq::SharedCtor() {
  _cached_size_ = 0;
  pet_id_ = GOOGLE_ULONGLONG(0);
  idx_ = 0u;
  queue_idx_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddPetToBianDuiReq::~AddPetToBianDuiReq() {
  SharedDtor();
}

void AddPetToBianDuiReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddPetToBianDuiReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddPetToBianDuiReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddPetToBianDuiReq_descriptor_;
}

const AddPetToBianDuiReq& AddPetToBianDuiReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

AddPetToBianDuiReq* AddPetToBianDuiReq::default_instance_ = NULL;

AddPetToBianDuiReq* AddPetToBianDuiReq::New() const {
  return new AddPetToBianDuiReq;
}

void AddPetToBianDuiReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pet_id_ = GOOGLE_ULONGLONG(0);
    idx_ = 0u;
    queue_idx_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddPetToBianDuiReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 pet_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pet_id_)));
          set_has_pet_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_idx;
        break;
      }

      // optional uint32 idx = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &idx_)));
          set_has_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_queue_idx;
        break;
      }

      // optional uint32 queue_idx = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_queue_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &queue_idx_)));
          set_has_queue_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddPetToBianDuiReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 pet_id = 1;
  if (has_pet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->pet_id(), output);
  }

  // optional uint32 idx = 2;
  if (has_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->idx(), output);
  }

  // optional uint32 queue_idx = 3;
  if (has_queue_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->queue_idx(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddPetToBianDuiReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 pet_id = 1;
  if (has_pet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->pet_id(), target);
  }

  // optional uint32 idx = 2;
  if (has_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->idx(), target);
  }

  // optional uint32 queue_idx = 3;
  if (has_queue_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->queue_idx(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddPetToBianDuiReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 pet_id = 1;
    if (has_pet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pet_id());
    }

    // optional uint32 idx = 2;
    if (has_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->idx());
    }

    // optional uint32 queue_idx = 3;
    if (has_queue_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->queue_idx());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddPetToBianDuiReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddPetToBianDuiReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddPetToBianDuiReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddPetToBianDuiReq::MergeFrom(const AddPetToBianDuiReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pet_id()) {
      set_pet_id(from.pet_id());
    }
    if (from.has_idx()) {
      set_idx(from.idx());
    }
    if (from.has_queue_idx()) {
      set_queue_idx(from.queue_idx());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddPetToBianDuiReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddPetToBianDuiReq::CopyFrom(const AddPetToBianDuiReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddPetToBianDuiReq::IsInitialized() const {

  return true;
}

void AddPetToBianDuiReq::Swap(AddPetToBianDuiReq* other) {
  if (other != this) {
    std::swap(pet_id_, other->pet_id_);
    std::swap(idx_, other->idx_);
    std::swap(queue_idx_, other->queue_idx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddPetToBianDuiReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddPetToBianDuiReq_descriptor_;
  metadata.reflection = AddPetToBianDuiReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddPetToBianDuiAck::kPetIdFieldNumber;
const int AddPetToBianDuiAck::kErrNoFieldNumber;
const int AddPetToBianDuiAck::kQueueIdxFieldNumber;
#endif  // !_MSC_VER

AddPetToBianDuiAck::AddPetToBianDuiAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddPetToBianDuiAck::InitAsDefaultInstance() {
}

AddPetToBianDuiAck::AddPetToBianDuiAck(const AddPetToBianDuiAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddPetToBianDuiAck::SharedCtor() {
  _cached_size_ = 0;
  pet_id_ = GOOGLE_ULONGLONG(0);
  err_no_ = 0;
  queue_idx_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddPetToBianDuiAck::~AddPetToBianDuiAck() {
  SharedDtor();
}

void AddPetToBianDuiAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddPetToBianDuiAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddPetToBianDuiAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddPetToBianDuiAck_descriptor_;
}

const AddPetToBianDuiAck& AddPetToBianDuiAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

AddPetToBianDuiAck* AddPetToBianDuiAck::default_instance_ = NULL;

AddPetToBianDuiAck* AddPetToBianDuiAck::New() const {
  return new AddPetToBianDuiAck;
}

void AddPetToBianDuiAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pet_id_ = GOOGLE_ULONGLONG(0);
    err_no_ = 0;
    queue_idx_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddPetToBianDuiAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 pet_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pet_id_)));
          set_has_pet_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_err_no;
        break;
      }

      // optional int32 err_no = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_err_no:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_no_)));
          set_has_err_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_queue_idx;
        break;
      }

      // optional uint32 queue_idx = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_queue_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &queue_idx_)));
          set_has_queue_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddPetToBianDuiAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 pet_id = 1;
  if (has_pet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->pet_id(), output);
  }

  // optional int32 err_no = 2;
  if (has_err_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->err_no(), output);
  }

  // optional uint32 queue_idx = 3;
  if (has_queue_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->queue_idx(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddPetToBianDuiAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 pet_id = 1;
  if (has_pet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->pet_id(), target);
  }

  // optional int32 err_no = 2;
  if (has_err_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->err_no(), target);
  }

  // optional uint32 queue_idx = 3;
  if (has_queue_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->queue_idx(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddPetToBianDuiAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 pet_id = 1;
    if (has_pet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pet_id());
    }

    // optional int32 err_no = 2;
    if (has_err_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err_no());
    }

    // optional uint32 queue_idx = 3;
    if (has_queue_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->queue_idx());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddPetToBianDuiAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddPetToBianDuiAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddPetToBianDuiAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddPetToBianDuiAck::MergeFrom(const AddPetToBianDuiAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pet_id()) {
      set_pet_id(from.pet_id());
    }
    if (from.has_err_no()) {
      set_err_no(from.err_no());
    }
    if (from.has_queue_idx()) {
      set_queue_idx(from.queue_idx());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddPetToBianDuiAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddPetToBianDuiAck::CopyFrom(const AddPetToBianDuiAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddPetToBianDuiAck::IsInitialized() const {

  return true;
}

void AddPetToBianDuiAck::Swap(AddPetToBianDuiAck* other) {
  if (other != this) {
    std::swap(pet_id_, other->pet_id_);
    std::swap(err_no_, other->err_no_);
    std::swap(queue_idx_, other->queue_idx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddPetToBianDuiAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddPetToBianDuiAck_descriptor_;
  metadata.reflection = AddPetToBianDuiAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DelPetToBianDuiReq::kPetIdFieldNumber;
const int DelPetToBianDuiReq::kQueueIdxFieldNumber;
#endif  // !_MSC_VER

DelPetToBianDuiReq::DelPetToBianDuiReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DelPetToBianDuiReq::InitAsDefaultInstance() {
}

DelPetToBianDuiReq::DelPetToBianDuiReq(const DelPetToBianDuiReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DelPetToBianDuiReq::SharedCtor() {
  _cached_size_ = 0;
  pet_id_ = GOOGLE_ULONGLONG(0);
  queue_idx_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DelPetToBianDuiReq::~DelPetToBianDuiReq() {
  SharedDtor();
}

void DelPetToBianDuiReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DelPetToBianDuiReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DelPetToBianDuiReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DelPetToBianDuiReq_descriptor_;
}

const DelPetToBianDuiReq& DelPetToBianDuiReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

DelPetToBianDuiReq* DelPetToBianDuiReq::default_instance_ = NULL;

DelPetToBianDuiReq* DelPetToBianDuiReq::New() const {
  return new DelPetToBianDuiReq;
}

void DelPetToBianDuiReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pet_id_ = GOOGLE_ULONGLONG(0);
    queue_idx_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DelPetToBianDuiReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 pet_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pet_id_)));
          set_has_pet_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_queue_idx;
        break;
      }

      // optional uint32 queue_idx = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_queue_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &queue_idx_)));
          set_has_queue_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DelPetToBianDuiReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 pet_id = 1;
  if (has_pet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->pet_id(), output);
  }

  // optional uint32 queue_idx = 3;
  if (has_queue_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->queue_idx(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DelPetToBianDuiReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 pet_id = 1;
  if (has_pet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->pet_id(), target);
  }

  // optional uint32 queue_idx = 3;
  if (has_queue_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->queue_idx(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DelPetToBianDuiReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 pet_id = 1;
    if (has_pet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pet_id());
    }

    // optional uint32 queue_idx = 3;
    if (has_queue_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->queue_idx());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DelPetToBianDuiReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DelPetToBianDuiReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DelPetToBianDuiReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DelPetToBianDuiReq::MergeFrom(const DelPetToBianDuiReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pet_id()) {
      set_pet_id(from.pet_id());
    }
    if (from.has_queue_idx()) {
      set_queue_idx(from.queue_idx());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DelPetToBianDuiReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelPetToBianDuiReq::CopyFrom(const DelPetToBianDuiReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelPetToBianDuiReq::IsInitialized() const {

  return true;
}

void DelPetToBianDuiReq::Swap(DelPetToBianDuiReq* other) {
  if (other != this) {
    std::swap(pet_id_, other->pet_id_);
    std::swap(queue_idx_, other->queue_idx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DelPetToBianDuiReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DelPetToBianDuiReq_descriptor_;
  metadata.reflection = DelPetToBianDuiReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DelPetToBianDuiAck::kPetIdFieldNumber;
const int DelPetToBianDuiAck::kErrNoFieldNumber;
const int DelPetToBianDuiAck::kQueueIdxFieldNumber;
#endif  // !_MSC_VER

DelPetToBianDuiAck::DelPetToBianDuiAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DelPetToBianDuiAck::InitAsDefaultInstance() {
}

DelPetToBianDuiAck::DelPetToBianDuiAck(const DelPetToBianDuiAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DelPetToBianDuiAck::SharedCtor() {
  _cached_size_ = 0;
  pet_id_ = GOOGLE_ULONGLONG(0);
  err_no_ = 0;
  queue_idx_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DelPetToBianDuiAck::~DelPetToBianDuiAck() {
  SharedDtor();
}

void DelPetToBianDuiAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DelPetToBianDuiAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DelPetToBianDuiAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DelPetToBianDuiAck_descriptor_;
}

const DelPetToBianDuiAck& DelPetToBianDuiAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

DelPetToBianDuiAck* DelPetToBianDuiAck::default_instance_ = NULL;

DelPetToBianDuiAck* DelPetToBianDuiAck::New() const {
  return new DelPetToBianDuiAck;
}

void DelPetToBianDuiAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pet_id_ = GOOGLE_ULONGLONG(0);
    err_no_ = 0;
    queue_idx_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DelPetToBianDuiAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 pet_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pet_id_)));
          set_has_pet_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_err_no;
        break;
      }

      // optional int32 err_no = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_err_no:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_no_)));
          set_has_err_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_queue_idx;
        break;
      }

      // optional uint32 queue_idx = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_queue_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &queue_idx_)));
          set_has_queue_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DelPetToBianDuiAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 pet_id = 1;
  if (has_pet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->pet_id(), output);
  }

  // optional int32 err_no = 2;
  if (has_err_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->err_no(), output);
  }

  // optional uint32 queue_idx = 3;
  if (has_queue_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->queue_idx(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DelPetToBianDuiAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 pet_id = 1;
  if (has_pet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->pet_id(), target);
  }

  // optional int32 err_no = 2;
  if (has_err_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->err_no(), target);
  }

  // optional uint32 queue_idx = 3;
  if (has_queue_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->queue_idx(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DelPetToBianDuiAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 pet_id = 1;
    if (has_pet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pet_id());
    }

    // optional int32 err_no = 2;
    if (has_err_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err_no());
    }

    // optional uint32 queue_idx = 3;
    if (has_queue_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->queue_idx());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DelPetToBianDuiAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DelPetToBianDuiAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DelPetToBianDuiAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DelPetToBianDuiAck::MergeFrom(const DelPetToBianDuiAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pet_id()) {
      set_pet_id(from.pet_id());
    }
    if (from.has_err_no()) {
      set_err_no(from.err_no());
    }
    if (from.has_queue_idx()) {
      set_queue_idx(from.queue_idx());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DelPetToBianDuiAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelPetToBianDuiAck::CopyFrom(const DelPetToBianDuiAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelPetToBianDuiAck::IsInitialized() const {

  return true;
}

void DelPetToBianDuiAck::Swap(DelPetToBianDuiAck* other) {
  if (other != this) {
    std::swap(pet_id_, other->pet_id_);
    std::swap(err_no_, other->err_no_);
    std::swap(queue_idx_, other->queue_idx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DelPetToBianDuiAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DelPetToBianDuiAck_descriptor_;
  metadata.reflection = DelPetToBianDuiAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

AddPetMaxNumberReq::AddPetMaxNumberReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddPetMaxNumberReq::InitAsDefaultInstance() {
}

AddPetMaxNumberReq::AddPetMaxNumberReq(const AddPetMaxNumberReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddPetMaxNumberReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddPetMaxNumberReq::~AddPetMaxNumberReq() {
  SharedDtor();
}

void AddPetMaxNumberReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddPetMaxNumberReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddPetMaxNumberReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddPetMaxNumberReq_descriptor_;
}

const AddPetMaxNumberReq& AddPetMaxNumberReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

AddPetMaxNumberReq* AddPetMaxNumberReq::default_instance_ = NULL;

AddPetMaxNumberReq* AddPetMaxNumberReq::New() const {
  return new AddPetMaxNumberReq;
}

void AddPetMaxNumberReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddPetMaxNumberReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void AddPetMaxNumberReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddPetMaxNumberReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddPetMaxNumberReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddPetMaxNumberReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddPetMaxNumberReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddPetMaxNumberReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddPetMaxNumberReq::MergeFrom(const AddPetMaxNumberReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddPetMaxNumberReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddPetMaxNumberReq::CopyFrom(const AddPetMaxNumberReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddPetMaxNumberReq::IsInitialized() const {

  return true;
}

void AddPetMaxNumberReq::Swap(AddPetMaxNumberReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddPetMaxNumberReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddPetMaxNumberReq_descriptor_;
  metadata.reflection = AddPetMaxNumberReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddPetMaxNumberAck::kErrNoFieldNumber;
#endif  // !_MSC_VER

AddPetMaxNumberAck::AddPetMaxNumberAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddPetMaxNumberAck::InitAsDefaultInstance() {
}

AddPetMaxNumberAck::AddPetMaxNumberAck(const AddPetMaxNumberAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddPetMaxNumberAck::SharedCtor() {
  _cached_size_ = 0;
  err_no_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddPetMaxNumberAck::~AddPetMaxNumberAck() {
  SharedDtor();
}

void AddPetMaxNumberAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddPetMaxNumberAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddPetMaxNumberAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddPetMaxNumberAck_descriptor_;
}

const AddPetMaxNumberAck& AddPetMaxNumberAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

AddPetMaxNumberAck* AddPetMaxNumberAck::default_instance_ = NULL;

AddPetMaxNumberAck* AddPetMaxNumberAck::New() const {
  return new AddPetMaxNumberAck;
}

void AddPetMaxNumberAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    err_no_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddPetMaxNumberAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 err_no = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_no_)));
          set_has_err_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddPetMaxNumberAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 err_no = 1;
  if (has_err_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->err_no(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddPetMaxNumberAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 err_no = 1;
  if (has_err_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->err_no(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddPetMaxNumberAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 err_no = 1;
    if (has_err_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err_no());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddPetMaxNumberAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddPetMaxNumberAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddPetMaxNumberAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddPetMaxNumberAck::MergeFrom(const AddPetMaxNumberAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_err_no()) {
      set_err_no(from.err_no());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddPetMaxNumberAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddPetMaxNumberAck::CopyFrom(const AddPetMaxNumberAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddPetMaxNumberAck::IsInitialized() const {

  return true;
}

void AddPetMaxNumberAck::Swap(AddPetMaxNumberAck* other) {
  if (other != this) {
    std::swap(err_no_, other->err_no_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddPetMaxNumberAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddPetMaxNumberAck_descriptor_;
  metadata.reflection = AddPetMaxNumberAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

AddQueueMaxNumberReq::AddQueueMaxNumberReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddQueueMaxNumberReq::InitAsDefaultInstance() {
}

AddQueueMaxNumberReq::AddQueueMaxNumberReq(const AddQueueMaxNumberReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddQueueMaxNumberReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddQueueMaxNumberReq::~AddQueueMaxNumberReq() {
  SharedDtor();
}

void AddQueueMaxNumberReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddQueueMaxNumberReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddQueueMaxNumberReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddQueueMaxNumberReq_descriptor_;
}

const AddQueueMaxNumberReq& AddQueueMaxNumberReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

AddQueueMaxNumberReq* AddQueueMaxNumberReq::default_instance_ = NULL;

AddQueueMaxNumberReq* AddQueueMaxNumberReq::New() const {
  return new AddQueueMaxNumberReq;
}

void AddQueueMaxNumberReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddQueueMaxNumberReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void AddQueueMaxNumberReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddQueueMaxNumberReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddQueueMaxNumberReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddQueueMaxNumberReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddQueueMaxNumberReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddQueueMaxNumberReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddQueueMaxNumberReq::MergeFrom(const AddQueueMaxNumberReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddQueueMaxNumberReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddQueueMaxNumberReq::CopyFrom(const AddQueueMaxNumberReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddQueueMaxNumberReq::IsInitialized() const {

  return true;
}

void AddQueueMaxNumberReq::Swap(AddQueueMaxNumberReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddQueueMaxNumberReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddQueueMaxNumberReq_descriptor_;
  metadata.reflection = AddQueueMaxNumberReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddQueueMaxNumberAck::kErrNoFieldNumber;
#endif  // !_MSC_VER

AddQueueMaxNumberAck::AddQueueMaxNumberAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddQueueMaxNumberAck::InitAsDefaultInstance() {
}

AddQueueMaxNumberAck::AddQueueMaxNumberAck(const AddQueueMaxNumberAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddQueueMaxNumberAck::SharedCtor() {
  _cached_size_ = 0;
  err_no_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddQueueMaxNumberAck::~AddQueueMaxNumberAck() {
  SharedDtor();
}

void AddQueueMaxNumberAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddQueueMaxNumberAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddQueueMaxNumberAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddQueueMaxNumberAck_descriptor_;
}

const AddQueueMaxNumberAck& AddQueueMaxNumberAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

AddQueueMaxNumberAck* AddQueueMaxNumberAck::default_instance_ = NULL;

AddQueueMaxNumberAck* AddQueueMaxNumberAck::New() const {
  return new AddQueueMaxNumberAck;
}

void AddQueueMaxNumberAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    err_no_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddQueueMaxNumberAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 err_no = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_no_)));
          set_has_err_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddQueueMaxNumberAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 err_no = 1;
  if (has_err_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->err_no(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddQueueMaxNumberAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 err_no = 1;
  if (has_err_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->err_no(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddQueueMaxNumberAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 err_no = 1;
    if (has_err_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err_no());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddQueueMaxNumberAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddQueueMaxNumberAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddQueueMaxNumberAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddQueueMaxNumberAck::MergeFrom(const AddQueueMaxNumberAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_err_no()) {
      set_err_no(from.err_no());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddQueueMaxNumberAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddQueueMaxNumberAck::CopyFrom(const AddQueueMaxNumberAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddQueueMaxNumberAck::IsInitialized() const {

  return true;
}

void AddQueueMaxNumberAck::Swap(AddQueueMaxNumberAck* other) {
  if (other != this) {
    std::swap(err_no_, other->err_no_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddQueueMaxNumberAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddQueueMaxNumberAck_descriptor_;
  metadata.reflection = AddQueueMaxNumberAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PetMaxNumberNtf::kNumberFieldNumber;
#endif  // !_MSC_VER

PetMaxNumberNtf::PetMaxNumberNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PetMaxNumberNtf::InitAsDefaultInstance() {
}

PetMaxNumberNtf::PetMaxNumberNtf(const PetMaxNumberNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PetMaxNumberNtf::SharedCtor() {
  _cached_size_ = 0;
  number_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetMaxNumberNtf::~PetMaxNumberNtf() {
  SharedDtor();
}

void PetMaxNumberNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PetMaxNumberNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetMaxNumberNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetMaxNumberNtf_descriptor_;
}

const PetMaxNumberNtf& PetMaxNumberNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

PetMaxNumberNtf* PetMaxNumberNtf::default_instance_ = NULL;

PetMaxNumberNtf* PetMaxNumberNtf::New() const {
  return new PetMaxNumberNtf;
}

void PetMaxNumberNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    number_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetMaxNumberNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 number = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PetMaxNumberNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 number = 1;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->number(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PetMaxNumberNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 number = 1;
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->number(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PetMaxNumberNtf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 number = 1;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->number());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetMaxNumberNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetMaxNumberNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetMaxNumberNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetMaxNumberNtf::MergeFrom(const PetMaxNumberNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_number()) {
      set_number(from.number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetMaxNumberNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetMaxNumberNtf::CopyFrom(const PetMaxNumberNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetMaxNumberNtf::IsInitialized() const {

  return true;
}

void PetMaxNumberNtf::Swap(PetMaxNumberNtf* other) {
  if (other != this) {
    std::swap(number_, other->number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetMaxNumberNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetMaxNumberNtf_descriptor_;
  metadata.reflection = PetMaxNumberNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueueMaxNumberNtf::kNumberFieldNumber;
#endif  // !_MSC_VER

QueueMaxNumberNtf::QueueMaxNumberNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QueueMaxNumberNtf::InitAsDefaultInstance() {
}

QueueMaxNumberNtf::QueueMaxNumberNtf(const QueueMaxNumberNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QueueMaxNumberNtf::SharedCtor() {
  _cached_size_ = 0;
  number_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueueMaxNumberNtf::~QueueMaxNumberNtf() {
  SharedDtor();
}

void QueueMaxNumberNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueueMaxNumberNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueueMaxNumberNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueueMaxNumberNtf_descriptor_;
}

const QueueMaxNumberNtf& QueueMaxNumberNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

QueueMaxNumberNtf* QueueMaxNumberNtf::default_instance_ = NULL;

QueueMaxNumberNtf* QueueMaxNumberNtf::New() const {
  return new QueueMaxNumberNtf;
}

void QueueMaxNumberNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    number_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueueMaxNumberNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 number = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueueMaxNumberNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 number = 1;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->number(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QueueMaxNumberNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 number = 1;
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->number(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QueueMaxNumberNtf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 number = 1;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->number());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueueMaxNumberNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueueMaxNumberNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueueMaxNumberNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueueMaxNumberNtf::MergeFrom(const QueueMaxNumberNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_number()) {
      set_number(from.number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueueMaxNumberNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueueMaxNumberNtf::CopyFrom(const QueueMaxNumberNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueueMaxNumberNtf::IsInitialized() const {

  return true;
}

void QueueMaxNumberNtf::Swap(QueueMaxNumberNtf* other) {
  if (other != this) {
    std::swap(number_, other->number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueueMaxNumberNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueueMaxNumberNtf_descriptor_;
  metadata.reflection = QueueMaxNumberNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateCurBianDuiIdx::kIdxFieldNumber;
#endif  // !_MSC_VER

UpdateCurBianDuiIdx::UpdateCurBianDuiIdx()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateCurBianDuiIdx::InitAsDefaultInstance() {
}

UpdateCurBianDuiIdx::UpdateCurBianDuiIdx(const UpdateCurBianDuiIdx& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateCurBianDuiIdx::SharedCtor() {
  _cached_size_ = 0;
  idx_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateCurBianDuiIdx::~UpdateCurBianDuiIdx() {
  SharedDtor();
}

void UpdateCurBianDuiIdx::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateCurBianDuiIdx::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateCurBianDuiIdx::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateCurBianDuiIdx_descriptor_;
}

const UpdateCurBianDuiIdx& UpdateCurBianDuiIdx::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

UpdateCurBianDuiIdx* UpdateCurBianDuiIdx::default_instance_ = NULL;

UpdateCurBianDuiIdx* UpdateCurBianDuiIdx::New() const {
  return new UpdateCurBianDuiIdx;
}

void UpdateCurBianDuiIdx::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    idx_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateCurBianDuiIdx::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 idx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &idx_)));
          set_has_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateCurBianDuiIdx::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 idx = 1;
  if (has_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->idx(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateCurBianDuiIdx::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 idx = 1;
  if (has_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->idx(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateCurBianDuiIdx::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 idx = 1;
    if (has_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->idx());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateCurBianDuiIdx::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateCurBianDuiIdx* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateCurBianDuiIdx*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateCurBianDuiIdx::MergeFrom(const UpdateCurBianDuiIdx& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_idx()) {
      set_idx(from.idx());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateCurBianDuiIdx::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateCurBianDuiIdx::CopyFrom(const UpdateCurBianDuiIdx& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateCurBianDuiIdx::IsInitialized() const {

  return true;
}

void UpdateCurBianDuiIdx::Swap(UpdateCurBianDuiIdx* other) {
  if (other != this) {
    std::swap(idx_, other->idx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateCurBianDuiIdx::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateCurBianDuiIdx_descriptor_;
  metadata.reflection = UpdateCurBianDuiIdx_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RecoverActiveCountReq::RecoverActiveCountReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RecoverActiveCountReq::InitAsDefaultInstance() {
}

RecoverActiveCountReq::RecoverActiveCountReq(const RecoverActiveCountReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RecoverActiveCountReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecoverActiveCountReq::~RecoverActiveCountReq() {
  SharedDtor();
}

void RecoverActiveCountReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RecoverActiveCountReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecoverActiveCountReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecoverActiveCountReq_descriptor_;
}

const RecoverActiveCountReq& RecoverActiveCountReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

RecoverActiveCountReq* RecoverActiveCountReq::default_instance_ = NULL;

RecoverActiveCountReq* RecoverActiveCountReq::New() const {
  return new RecoverActiveCountReq;
}

void RecoverActiveCountReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecoverActiveCountReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void RecoverActiveCountReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RecoverActiveCountReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RecoverActiveCountReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecoverActiveCountReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecoverActiveCountReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecoverActiveCountReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecoverActiveCountReq::MergeFrom(const RecoverActiveCountReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecoverActiveCountReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecoverActiveCountReq::CopyFrom(const RecoverActiveCountReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecoverActiveCountReq::IsInitialized() const {

  return true;
}

void RecoverActiveCountReq::Swap(RecoverActiveCountReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecoverActiveCountReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecoverActiveCountReq_descriptor_;
  metadata.reflection = RecoverActiveCountReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RecoverActiveCountAck::kErrNoFieldNumber;
#endif  // !_MSC_VER

RecoverActiveCountAck::RecoverActiveCountAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RecoverActiveCountAck::InitAsDefaultInstance() {
}

RecoverActiveCountAck::RecoverActiveCountAck(const RecoverActiveCountAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RecoverActiveCountAck::SharedCtor() {
  _cached_size_ = 0;
  err_no_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecoverActiveCountAck::~RecoverActiveCountAck() {
  SharedDtor();
}

void RecoverActiveCountAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RecoverActiveCountAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecoverActiveCountAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecoverActiveCountAck_descriptor_;
}

const RecoverActiveCountAck& RecoverActiveCountAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

RecoverActiveCountAck* RecoverActiveCountAck::default_instance_ = NULL;

RecoverActiveCountAck* RecoverActiveCountAck::New() const {
  return new RecoverActiveCountAck;
}

void RecoverActiveCountAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    err_no_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecoverActiveCountAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 err_no = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_no_)));
          set_has_err_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RecoverActiveCountAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 err_no = 1;
  if (has_err_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->err_no(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RecoverActiveCountAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 err_no = 1;
  if (has_err_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->err_no(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RecoverActiveCountAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 err_no = 1;
    if (has_err_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err_no());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecoverActiveCountAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecoverActiveCountAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecoverActiveCountAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecoverActiveCountAck::MergeFrom(const RecoverActiveCountAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_err_no()) {
      set_err_no(from.err_no());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecoverActiveCountAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecoverActiveCountAck::CopyFrom(const RecoverActiveCountAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecoverActiveCountAck::IsInitialized() const {

  return true;
}

void RecoverActiveCountAck::Swap(RecoverActiveCountAck* other) {
  if (other != this) {
    std::swap(err_no_, other->err_no_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecoverActiveCountAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecoverActiveCountAck_descriptor_;
  metadata.reflection = RecoverActiveCountAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActiveCountNtf::kCountFieldNumber;
#endif  // !_MSC_VER

ActiveCountNtf::ActiveCountNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActiveCountNtf::InitAsDefaultInstance() {
}

ActiveCountNtf::ActiveCountNtf(const ActiveCountNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActiveCountNtf::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActiveCountNtf::~ActiveCountNtf() {
  SharedDtor();
}

void ActiveCountNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActiveCountNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActiveCountNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActiveCountNtf_descriptor_;
}

const ActiveCountNtf& ActiveCountNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

ActiveCountNtf* ActiveCountNtf::default_instance_ = NULL;

ActiveCountNtf* ActiveCountNtf::New() const {
  return new ActiveCountNtf;
}

void ActiveCountNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActiveCountNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActiveCountNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 count = 1;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActiveCountNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 count = 1;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActiveCountNtf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 count = 1;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActiveCountNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActiveCountNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActiveCountNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActiveCountNtf::MergeFrom(const ActiveCountNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActiveCountNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActiveCountNtf::CopyFrom(const ActiveCountNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActiveCountNtf::IsInitialized() const {

  return true;
}

void ActiveCountNtf::Swap(ActiveCountNtf* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActiveCountNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActiveCountNtf_descriptor_;
  metadata.reflection = ActiveCountNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SpiritNtf::kSpiritFieldNumber;
#endif  // !_MSC_VER

SpiritNtf::SpiritNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SpiritNtf::InitAsDefaultInstance() {
}

SpiritNtf::SpiritNtf(const SpiritNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SpiritNtf::SharedCtor() {
  _cached_size_ = 0;
  spirit_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpiritNtf::~SpiritNtf() {
  SharedDtor();
}

void SpiritNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SpiritNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpiritNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpiritNtf_descriptor_;
}

const SpiritNtf& SpiritNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

SpiritNtf* SpiritNtf::default_instance_ = NULL;

SpiritNtf* SpiritNtf::New() const {
  return new SpiritNtf;
}

void SpiritNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    spirit_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SpiritNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 spirit = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spirit_)));
          set_has_spirit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SpiritNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 spirit = 1;
  if (has_spirit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->spirit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SpiritNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 spirit = 1;
  if (has_spirit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->spirit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SpiritNtf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 spirit = 1;
    if (has_spirit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->spirit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpiritNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SpiritNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SpiritNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SpiritNtf::MergeFrom(const SpiritNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_spirit()) {
      set_spirit(from.spirit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SpiritNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpiritNtf::CopyFrom(const SpiritNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpiritNtf::IsInitialized() const {

  return true;
}

void SpiritNtf::Swap(SpiritNtf* other) {
  if (other != this) {
    std::swap(spirit_, other->spirit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SpiritNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpiritNtf_descriptor_;
  metadata.reflection = SpiritNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateHp::kHpFieldNumber;
#endif  // !_MSC_VER

UpdateHp::UpdateHp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateHp::InitAsDefaultInstance() {
}

UpdateHp::UpdateHp(const UpdateHp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateHp::SharedCtor() {
  _cached_size_ = 0;
  hp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateHp::~UpdateHp() {
  SharedDtor();
}

void UpdateHp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateHp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateHp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateHp_descriptor_;
}

const UpdateHp& UpdateHp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

UpdateHp* UpdateHp::default_instance_ = NULL;

UpdateHp* UpdateHp::New() const {
  return new UpdateHp;
}

void UpdateHp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hp_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateHp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 hp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateHp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 hp = 1;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateHp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 hp = 1;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateHp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 hp = 1;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateHp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateHp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateHp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateHp::MergeFrom(const UpdateHp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hp()) {
      set_hp(from.hp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateHp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateHp::CopyFrom(const UpdateHp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateHp::IsInitialized() const {

  return true;
}

void UpdateHp::Swap(UpdateHp* other) {
  if (other != this) {
    std::swap(hp_, other->hp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateHp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateHp_descriptor_;
  metadata.reflection = UpdateHp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateMp::kMpFieldNumber;
#endif  // !_MSC_VER

UpdateMp::UpdateMp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateMp::InitAsDefaultInstance() {
}

UpdateMp::UpdateMp(const UpdateMp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateMp::SharedCtor() {
  _cached_size_ = 0;
  mp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateMp::~UpdateMp() {
  SharedDtor();
}

void UpdateMp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateMp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateMp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateMp_descriptor_;
}

const UpdateMp& UpdateMp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

UpdateMp* UpdateMp::default_instance_ = NULL;

UpdateMp* UpdateMp::New() const {
  return new UpdateMp;
}

void UpdateMp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mp_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateMp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mp_)));
          set_has_mp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateMp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 mp = 1;
  if (has_mp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateMp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 mp = 1;
  if (has_mp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateMp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 mp = 1;
    if (has_mp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateMp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateMp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateMp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateMp::MergeFrom(const UpdateMp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mp()) {
      set_mp(from.mp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateMp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateMp::CopyFrom(const UpdateMp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateMp::IsInitialized() const {

  return true;
}

void UpdateMp::Swap(UpdateMp* other) {
  if (other != this) {
    std::swap(mp_, other->mp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateMp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateMp_descriptor_;
  metadata.reflection = UpdateMp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GoodsOfSell::kIdFieldNumber;
const int GoodsOfSell::kNameFieldNumber;
const int GoodsOfSell::kPriceFieldNumber;
const int GoodsOfSell::kCostTypeFieldNumber;
const int GoodsOfSell::kDescFieldNumber;
const int GoodsOfSell::kPrice1FieldNumber;
const int GoodsOfSell::kFpercentFieldNumber;
const int GoodsOfSell::kLastMonthDaysFieldNumber;
const int GoodsOfSell::kZhaohuanFreeTimeFieldNumber;
const int GoodsOfSell::kShowIdFieldNumber;
#endif  // !_MSC_VER

GoodsOfSell::GoodsOfSell()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GoodsOfSell::InitAsDefaultInstance() {
}

GoodsOfSell::GoodsOfSell(const GoodsOfSell& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GoodsOfSell::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  price_ = 0u;
  cost_type_ = 0u;
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  price_1_ = 0u;
  fpercent_ = 0;
  last_month_days_ = 0;
  zhaohuan_free_time_ = GOOGLE_LONGLONG(0);
  show_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GoodsOfSell::~GoodsOfSell() {
  SharedDtor();
}

void GoodsOfSell::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (this != default_instance_) {
  }
}

void GoodsOfSell::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GoodsOfSell::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GoodsOfSell_descriptor_;
}

const GoodsOfSell& GoodsOfSell::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

GoodsOfSell* GoodsOfSell::default_instance_ = NULL;

GoodsOfSell* GoodsOfSell::New() const {
  return new GoodsOfSell;
}

void GoodsOfSell::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    price_ = 0u;
    cost_type_ = 0u;
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::kEmptyString) {
        desc_->clear();
      }
    }
    price_1_ = 0u;
    fpercent_ = 0;
    last_month_days_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    zhaohuan_free_time_ = GOOGLE_LONGLONG(0);
    show_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GoodsOfSell::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_price;
        break;
      }

      // optional uint32 price = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cost_type;
        break;
      }

      // optional uint32 cost_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cost_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cost_type_)));
          set_has_cost_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_desc;
        break;
      }

      // optional string desc = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_price_1;
        break;
      }

      // optional uint32 price_1 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &price_1_)));
          set_has_price_1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_fpercent;
        break;
      }

      // optional float fpercent = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_fpercent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fpercent_)));
          set_has_fpercent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_last_month_days;
        break;
      }

      // optional int32 last_month_days = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_month_days:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &last_month_days_)));
          set_has_last_month_days();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_zhaohuan_free_time;
        break;
      }

      // optional int64 zhaohuan_free_time = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zhaohuan_free_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &zhaohuan_free_time_)));
          set_has_zhaohuan_free_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_show_id;
        break;
      }

      // optional uint32 show_id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &show_id_)));
          set_has_show_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GoodsOfSell::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional uint32 price = 3;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->price(), output);
  }

  // optional uint32 cost_type = 4;
  if (has_cost_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cost_type(), output);
  }

  // optional string desc = 5;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->desc(), output);
  }

  // optional uint32 price_1 = 6;
  if (has_price_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->price_1(), output);
  }

  // optional float fpercent = 7;
  if (has_fpercent()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->fpercent(), output);
  }

  // optional int32 last_month_days = 8;
  if (has_last_month_days()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->last_month_days(), output);
  }

  // optional int64 zhaohuan_free_time = 9;
  if (has_zhaohuan_free_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->zhaohuan_free_time(), output);
  }

  // optional uint32 show_id = 10;
  if (has_show_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->show_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GoodsOfSell::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 price = 3;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->price(), target);
  }

  // optional uint32 cost_type = 4;
  if (has_cost_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cost_type(), target);
  }

  // optional string desc = 5;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->desc(), target);
  }

  // optional uint32 price_1 = 6;
  if (has_price_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->price_1(), target);
  }

  // optional float fpercent = 7;
  if (has_fpercent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->fpercent(), target);
  }

  // optional int32 last_month_days = 8;
  if (has_last_month_days()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->last_month_days(), target);
  }

  // optional int64 zhaohuan_free_time = 9;
  if (has_zhaohuan_free_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->zhaohuan_free_time(), target);
  }

  // optional uint32 show_id = 10;
  if (has_show_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->show_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GoodsOfSell::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 price = 3;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->price());
    }

    // optional uint32 cost_type = 4;
    if (has_cost_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cost_type());
    }

    // optional string desc = 5;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

    // optional uint32 price_1 = 6;
    if (has_price_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->price_1());
    }

    // optional float fpercent = 7;
    if (has_fpercent()) {
      total_size += 1 + 4;
    }

    // optional int32 last_month_days = 8;
    if (has_last_month_days()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->last_month_days());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 zhaohuan_free_time = 9;
    if (has_zhaohuan_free_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->zhaohuan_free_time());
    }

    // optional uint32 show_id = 10;
    if (has_show_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->show_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GoodsOfSell::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GoodsOfSell* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GoodsOfSell*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GoodsOfSell::MergeFrom(const GoodsOfSell& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_cost_type()) {
      set_cost_type(from.cost_type());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
    if (from.has_price_1()) {
      set_price_1(from.price_1());
    }
    if (from.has_fpercent()) {
      set_fpercent(from.fpercent());
    }
    if (from.has_last_month_days()) {
      set_last_month_days(from.last_month_days());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_zhaohuan_free_time()) {
      set_zhaohuan_free_time(from.zhaohuan_free_time());
    }
    if (from.has_show_id()) {
      set_show_id(from.show_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GoodsOfSell::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GoodsOfSell::CopyFrom(const GoodsOfSell& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GoodsOfSell::IsInitialized() const {

  return true;
}

void GoodsOfSell::Swap(GoodsOfSell* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(price_, other->price_);
    std::swap(cost_type_, other->cost_type_);
    std::swap(desc_, other->desc_);
    std::swap(price_1_, other->price_1_);
    std::swap(fpercent_, other->fpercent_);
    std::swap(last_month_days_, other->last_month_days_);
    std::swap(zhaohuan_free_time_, other->zhaohuan_free_time_);
    std::swap(show_id_, other->show_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GoodsOfSell::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GoodsOfSell_descriptor_;
  metadata.reflection = GoodsOfSell_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetShopListReq::kShopidFieldNumber;
#endif  // !_MSC_VER

GetShopListReq::GetShopListReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetShopListReq::InitAsDefaultInstance() {
}

GetShopListReq::GetShopListReq(const GetShopListReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetShopListReq::SharedCtor() {
  _cached_size_ = 0;
  shopid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetShopListReq::~GetShopListReq() {
  SharedDtor();
}

void GetShopListReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetShopListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetShopListReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetShopListReq_descriptor_;
}

const GetShopListReq& GetShopListReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

GetShopListReq* GetShopListReq::default_instance_ = NULL;

GetShopListReq* GetShopListReq::New() const {
  return new GetShopListReq;
}

void GetShopListReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    shopid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetShopListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 shopid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shopid_)));
          set_has_shopid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetShopListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 shopid = 1;
  if (has_shopid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->shopid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetShopListReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 shopid = 1;
  if (has_shopid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->shopid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetShopListReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 shopid = 1;
    if (has_shopid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shopid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetShopListReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetShopListReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetShopListReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetShopListReq::MergeFrom(const GetShopListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shopid()) {
      set_shopid(from.shopid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetShopListReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetShopListReq::CopyFrom(const GetShopListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetShopListReq::IsInitialized() const {

  return true;
}

void GetShopListReq::Swap(GetShopListReq* other) {
  if (other != this) {
    std::swap(shopid_, other->shopid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetShopListReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetShopListReq_descriptor_;
  metadata.reflection = GetShopListReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetShopListAck::kShopidFieldNumber;
const int GetShopListAck::kGoodsFieldNumber;
#endif  // !_MSC_VER

GetShopListAck::GetShopListAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetShopListAck::InitAsDefaultInstance() {
}

GetShopListAck::GetShopListAck(const GetShopListAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetShopListAck::SharedCtor() {
  _cached_size_ = 0;
  shopid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetShopListAck::~GetShopListAck() {
  SharedDtor();
}

void GetShopListAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetShopListAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetShopListAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetShopListAck_descriptor_;
}

const GetShopListAck& GetShopListAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

GetShopListAck* GetShopListAck::default_instance_ = NULL;

GetShopListAck* GetShopListAck::New() const {
  return new GetShopListAck;
}

void GetShopListAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    shopid_ = 0u;
  }
  goods_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetShopListAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 shopid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shopid_)));
          set_has_shopid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_goods;
        break;
      }

      // repeated .protoc.gameproto.GoodsOfSell goods = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_goods:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_goods()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_goods;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetShopListAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 shopid = 1;
  if (has_shopid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->shopid(), output);
  }

  // repeated .protoc.gameproto.GoodsOfSell goods = 2;
  for (int i = 0; i < this->goods_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->goods(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetShopListAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 shopid = 1;
  if (has_shopid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->shopid(), target);
  }

  // repeated .protoc.gameproto.GoodsOfSell goods = 2;
  for (int i = 0; i < this->goods_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->goods(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetShopListAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 shopid = 1;
    if (has_shopid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shopid());
    }

  }
  // repeated .protoc.gameproto.GoodsOfSell goods = 2;
  total_size += 1 * this->goods_size();
  for (int i = 0; i < this->goods_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->goods(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetShopListAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetShopListAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetShopListAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetShopListAck::MergeFrom(const GetShopListAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  goods_.MergeFrom(from.goods_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shopid()) {
      set_shopid(from.shopid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetShopListAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetShopListAck::CopyFrom(const GetShopListAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetShopListAck::IsInitialized() const {

  return true;
}

void GetShopListAck::Swap(GetShopListAck* other) {
  if (other != this) {
    std::swap(shopid_, other->shopid_);
    goods_.Swap(&other->goods_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetShopListAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetShopListAck_descriptor_;
  metadata.reflection = GetShopListAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShoppingReq::kShopidFieldNumber;
const int ShoppingReq::kIdFieldNumber;
#endif  // !_MSC_VER

ShoppingReq::ShoppingReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShoppingReq::InitAsDefaultInstance() {
}

ShoppingReq::ShoppingReq(const ShoppingReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShoppingReq::SharedCtor() {
  _cached_size_ = 0;
  shopid_ = 0u;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShoppingReq::~ShoppingReq() {
  SharedDtor();
}

void ShoppingReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShoppingReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShoppingReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShoppingReq_descriptor_;
}

const ShoppingReq& ShoppingReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

ShoppingReq* ShoppingReq::default_instance_ = NULL;

ShoppingReq* ShoppingReq::New() const {
  return new ShoppingReq;
}

void ShoppingReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    shopid_ = 0u;
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShoppingReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 shopid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shopid_)));
          set_has_shopid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional uint32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShoppingReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 shopid = 1;
  if (has_shopid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->shopid(), output);
  }

  // optional uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShoppingReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 shopid = 1;
  if (has_shopid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->shopid(), target);
  }

  // optional uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShoppingReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 shopid = 1;
    if (has_shopid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shopid());
    }

    // optional uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShoppingReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShoppingReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShoppingReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShoppingReq::MergeFrom(const ShoppingReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shopid()) {
      set_shopid(from.shopid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShoppingReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShoppingReq::CopyFrom(const ShoppingReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShoppingReq::IsInitialized() const {

  return true;
}

void ShoppingReq::Swap(ShoppingReq* other) {
  if (other != this) {
    std::swap(shopid_, other->shopid_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShoppingReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShoppingReq_descriptor_;
  metadata.reflection = ShoppingReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShoppingAck::kShopidFieldNumber;
const int ShoppingAck::kIdFieldNumber;
const int ShoppingAck::kErrNoFieldNumber;
#endif  // !_MSC_VER

ShoppingAck::ShoppingAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShoppingAck::InitAsDefaultInstance() {
}

ShoppingAck::ShoppingAck(const ShoppingAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShoppingAck::SharedCtor() {
  _cached_size_ = 0;
  shopid_ = 0u;
  id_ = 0u;
  err_no_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShoppingAck::~ShoppingAck() {
  SharedDtor();
}

void ShoppingAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShoppingAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShoppingAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShoppingAck_descriptor_;
}

const ShoppingAck& ShoppingAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

ShoppingAck* ShoppingAck::default_instance_ = NULL;

ShoppingAck* ShoppingAck::New() const {
  return new ShoppingAck;
}

void ShoppingAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    shopid_ = 0u;
    id_ = 0u;
    err_no_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShoppingAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 shopid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shopid_)));
          set_has_shopid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional uint32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_err_no;
        break;
      }

      // optional int32 err_no = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_err_no:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_no_)));
          set_has_err_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShoppingAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 shopid = 1;
  if (has_shopid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->shopid(), output);
  }

  // optional uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // optional int32 err_no = 3;
  if (has_err_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->err_no(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShoppingAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 shopid = 1;
  if (has_shopid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->shopid(), target);
  }

  // optional uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  // optional int32 err_no = 3;
  if (has_err_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->err_no(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShoppingAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 shopid = 1;
    if (has_shopid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shopid());
    }

    // optional uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional int32 err_no = 3;
    if (has_err_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err_no());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShoppingAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShoppingAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShoppingAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShoppingAck::MergeFrom(const ShoppingAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shopid()) {
      set_shopid(from.shopid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_err_no()) {
      set_err_no(from.err_no());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShoppingAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShoppingAck::CopyFrom(const ShoppingAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShoppingAck::IsInitialized() const {

  return true;
}

void ShoppingAck::Swap(ShoppingAck* other) {
  if (other != this) {
    std::swap(shopid_, other->shopid_);
    std::swap(id_, other->id_);
    std::swap(err_no_, other->err_no_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShoppingAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShoppingAck_descriptor_;
  metadata.reflection = ShoppingAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateVIPLevel::kLevelFieldNumber;
const int UpdateVIPLevel::kSumChongzhiFieldNumber;
#endif  // !_MSC_VER

UpdateVIPLevel::UpdateVIPLevel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateVIPLevel::InitAsDefaultInstance() {
}

UpdateVIPLevel::UpdateVIPLevel(const UpdateVIPLevel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateVIPLevel::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0u;
  sum_chongzhi_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateVIPLevel::~UpdateVIPLevel() {
  SharedDtor();
}

void UpdateVIPLevel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateVIPLevel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateVIPLevel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateVIPLevel_descriptor_;
}

const UpdateVIPLevel& UpdateVIPLevel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

UpdateVIPLevel* UpdateVIPLevel::default_instance_ = NULL;

UpdateVIPLevel* UpdateVIPLevel::New() const {
  return new UpdateVIPLevel;
}

void UpdateVIPLevel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0u;
    sum_chongzhi_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateVIPLevel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sum_chongzhi;
        break;
      }

      // optional uint32 sum_chongzhi = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sum_chongzhi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sum_chongzhi_)));
          set_has_sum_chongzhi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateVIPLevel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->level(), output);
  }

  // optional uint32 sum_chongzhi = 2;
  if (has_sum_chongzhi()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sum_chongzhi(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateVIPLevel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->level(), target);
  }

  // optional uint32 sum_chongzhi = 2;
  if (has_sum_chongzhi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sum_chongzhi(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateVIPLevel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 sum_chongzhi = 2;
    if (has_sum_chongzhi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sum_chongzhi());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateVIPLevel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateVIPLevel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateVIPLevel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateVIPLevel::MergeFrom(const UpdateVIPLevel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_sum_chongzhi()) {
      set_sum_chongzhi(from.sum_chongzhi());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateVIPLevel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateVIPLevel::CopyFrom(const UpdateVIPLevel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateVIPLevel::IsInitialized() const {

  return true;
}

void UpdateVIPLevel::Swap(UpdateVIPLevel* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(sum_chongzhi_, other->sum_chongzhi_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateVIPLevel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateVIPLevel_descriptor_;
  metadata.reflection = UpdateVIPLevel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateFriendShip::kShipFieldNumber;
#endif  // !_MSC_VER

UpdateFriendShip::UpdateFriendShip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateFriendShip::InitAsDefaultInstance() {
}

UpdateFriendShip::UpdateFriendShip(const UpdateFriendShip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateFriendShip::SharedCtor() {
  _cached_size_ = 0;
  ship_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateFriendShip::~UpdateFriendShip() {
  SharedDtor();
}

void UpdateFriendShip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateFriendShip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateFriendShip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateFriendShip_descriptor_;
}

const UpdateFriendShip& UpdateFriendShip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

UpdateFriendShip* UpdateFriendShip::default_instance_ = NULL;

UpdateFriendShip* UpdateFriendShip::New() const {
  return new UpdateFriendShip;
}

void UpdateFriendShip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ship_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateFriendShip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ship = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ship_)));
          set_has_ship();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateFriendShip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 ship = 1;
  if (has_ship()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ship(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateFriendShip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ship = 1;
  if (has_ship()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ship(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateFriendShip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ship = 1;
    if (has_ship()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ship());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateFriendShip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateFriendShip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateFriendShip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateFriendShip::MergeFrom(const UpdateFriendShip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ship()) {
      set_ship(from.ship());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateFriendShip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateFriendShip::CopyFrom(const UpdateFriendShip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateFriendShip::IsInitialized() const {

  return true;
}

void UpdateFriendShip::Swap(UpdateFriendShip* other) {
  if (other != this) {
    std::swap(ship_, other->ship_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateFriendShip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateFriendShip_descriptor_;
  metadata.reflection = UpdateFriendShip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChongZhiOrderNtf::kOrderIdFieldNumber;
const int ChongZhiOrderNtf::kMoneyFieldNumber;
const int ChongZhiOrderNtf::kStrUrlFieldNumber;
#endif  // !_MSC_VER

ChongZhiOrderNtf::ChongZhiOrderNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChongZhiOrderNtf::InitAsDefaultInstance() {
}

ChongZhiOrderNtf::ChongZhiOrderNtf(const ChongZhiOrderNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChongZhiOrderNtf::SharedCtor() {
  _cached_size_ = 0;
  order_id_ = GOOGLE_ULONGLONG(0);
  money_ = 0;
  str_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChongZhiOrderNtf::~ChongZhiOrderNtf() {
  SharedDtor();
}

void ChongZhiOrderNtf::SharedDtor() {
  if (str_url_ != &::google::protobuf::internal::kEmptyString) {
    delete str_url_;
  }
  if (this != default_instance_) {
  }
}

void ChongZhiOrderNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChongZhiOrderNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChongZhiOrderNtf_descriptor_;
}

const ChongZhiOrderNtf& ChongZhiOrderNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

ChongZhiOrderNtf* ChongZhiOrderNtf::default_instance_ = NULL;

ChongZhiOrderNtf* ChongZhiOrderNtf::New() const {
  return new ChongZhiOrderNtf;
}

void ChongZhiOrderNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    order_id_ = GOOGLE_ULONGLONG(0);
    money_ = 0;
    if (has_str_url()) {
      if (str_url_ != &::google::protobuf::internal::kEmptyString) {
        str_url_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChongZhiOrderNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 order_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &order_id_)));
          set_has_order_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_money;
        break;
      }

      // optional float money = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_str_url;
        break;
      }

      // optional string str_url = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_str_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str_url().data(), this->str_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChongZhiOrderNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 order_id = 1;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->order_id(), output);
  }

  // optional float money = 2;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->money(), output);
  }

  // optional string str_url = 3;
  if (has_str_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str_url().data(), this->str_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->str_url(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChongZhiOrderNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 order_id = 1;
  if (has_order_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->order_id(), target);
  }

  // optional float money = 2;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->money(), target);
  }

  // optional string str_url = 3;
  if (has_str_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str_url().data(), this->str_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->str_url(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChongZhiOrderNtf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 order_id = 1;
    if (has_order_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->order_id());
    }

    // optional float money = 2;
    if (has_money()) {
      total_size += 1 + 4;
    }

    // optional string str_url = 3;
    if (has_str_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str_url());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChongZhiOrderNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChongZhiOrderNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChongZhiOrderNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChongZhiOrderNtf::MergeFrom(const ChongZhiOrderNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_order_id()) {
      set_order_id(from.order_id());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_str_url()) {
      set_str_url(from.str_url());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChongZhiOrderNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChongZhiOrderNtf::CopyFrom(const ChongZhiOrderNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChongZhiOrderNtf::IsInitialized() const {

  return true;
}

void ChongZhiOrderNtf::Swap(ChongZhiOrderNtf* other) {
  if (other != this) {
    std::swap(order_id_, other->order_id_);
    std::swap(money_, other->money_);
    std::swap(str_url_, other->str_url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChongZhiOrderNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChongZhiOrderNtf_descriptor_;
  metadata.reflection = ChongZhiOrderNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuffItemListReq::kTypeFieldNumber;
#endif  // !_MSC_VER

BuffItemListReq::BuffItemListReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuffItemListReq::InitAsDefaultInstance() {
}

BuffItemListReq::BuffItemListReq(const BuffItemListReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuffItemListReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuffItemListReq::~BuffItemListReq() {
  SharedDtor();
}

void BuffItemListReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuffItemListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuffItemListReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuffItemListReq_descriptor_;
}

const BuffItemListReq& BuffItemListReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

BuffItemListReq* BuffItemListReq::default_instance_ = NULL;

BuffItemListReq* BuffItemListReq::New() const {
  return new BuffItemListReq;
}

void BuffItemListReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuffItemListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protoc.gameproto.BUFF_TYPE type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protoc::gameproto::BUFF_TYPE_IsValid(value)) {
            set_type(static_cast< ::protoc::gameproto::BUFF_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuffItemListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .protoc.gameproto.BUFF_TYPE type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuffItemListReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .protoc.gameproto.BUFF_TYPE type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuffItemListReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .protoc.gameproto.BUFF_TYPE type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuffItemListReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuffItemListReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuffItemListReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuffItemListReq::MergeFrom(const BuffItemListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuffItemListReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuffItemListReq::CopyFrom(const BuffItemListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuffItemListReq::IsInitialized() const {

  return true;
}

void BuffItemListReq::Swap(BuffItemListReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuffItemListReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuffItemListReq_descriptor_;
  metadata.reflection = BuffItemListReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuffItemListAck::kErrNoFieldNumber;
const int BuffItemListAck::kItemsFieldNumber;
#endif  // !_MSC_VER

BuffItemListAck::BuffItemListAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuffItemListAck::InitAsDefaultInstance() {
}

BuffItemListAck::BuffItemListAck(const BuffItemListAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuffItemListAck::SharedCtor() {
  _cached_size_ = 0;
  err_no_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuffItemListAck::~BuffItemListAck() {
  SharedDtor();
}

void BuffItemListAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuffItemListAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuffItemListAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuffItemListAck_descriptor_;
}

const BuffItemListAck& BuffItemListAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

BuffItemListAck* BuffItemListAck::default_instance_ = NULL;

BuffItemListAck* BuffItemListAck::New() const {
  return new BuffItemListAck;
}

void BuffItemListAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    err_no_ = 0;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuffItemListAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 err_no = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_no_)));
          set_has_err_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_items;
        break;
      }

      // repeated .protoc.gameproto.BuffItemInfo items = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuffItemListAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 err_no = 1;
  if (has_err_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->err_no(), output);
  }

  // repeated .protoc.gameproto.BuffItemInfo items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuffItemListAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 err_no = 1;
  if (has_err_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->err_no(), target);
  }

  // repeated .protoc.gameproto.BuffItemInfo items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuffItemListAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 err_no = 1;
    if (has_err_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err_no());
    }

  }
  // repeated .protoc.gameproto.BuffItemInfo items = 2;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuffItemListAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuffItemListAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuffItemListAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuffItemListAck::MergeFrom(const BuffItemListAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_err_no()) {
      set_err_no(from.err_no());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuffItemListAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuffItemListAck::CopyFrom(const BuffItemListAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuffItemListAck::IsInitialized() const {

  return true;
}

void BuffItemListAck::Swap(BuffItemListAck* other) {
  if (other != this) {
    std::swap(err_no_, other->err_no_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuffItemListAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuffItemListAck_descriptor_;
  metadata.reflection = BuffItemListAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuffItemBuyReq::kIdsFieldNumber;
const int BuffItemBuyReq::kTypeFieldNumber;
#endif  // !_MSC_VER

BuffItemBuyReq::BuffItemBuyReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuffItemBuyReq::InitAsDefaultInstance() {
}

BuffItemBuyReq::BuffItemBuyReq(const BuffItemBuyReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuffItemBuyReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuffItemBuyReq::~BuffItemBuyReq() {
  SharedDtor();
}

void BuffItemBuyReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuffItemBuyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuffItemBuyReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuffItemBuyReq_descriptor_;
}

const BuffItemBuyReq& BuffItemBuyReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

BuffItemBuyReq* BuffItemBuyReq::default_instance_ = NULL;

BuffItemBuyReq* BuffItemBuyReq::New() const {
  return new BuffItemBuyReq;
}

void BuffItemBuyReq::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    type_ = 0;
  }
  ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuffItemBuyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 ids = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_ids;
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .protoc.gameproto.BUFF_TYPE type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protoc::gameproto::BUFF_TYPE_IsValid(value)) {
            set_type(static_cast< ::protoc::gameproto::BUFF_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuffItemBuyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 ids = 1;
  for (int i = 0; i < this->ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->ids(i), output);
  }

  // optional .protoc.gameproto.BUFF_TYPE type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuffItemBuyReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 ids = 1;
  for (int i = 0; i < this->ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->ids(i), target);
  }

  // optional .protoc.gameproto.BUFF_TYPE type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuffItemBuyReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .protoc.gameproto.BUFF_TYPE type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  // repeated uint32 ids = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->ids(i));
    }
    total_size += 1 * this->ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuffItemBuyReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuffItemBuyReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuffItemBuyReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuffItemBuyReq::MergeFrom(const BuffItemBuyReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  ids_.MergeFrom(from.ids_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuffItemBuyReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuffItemBuyReq::CopyFrom(const BuffItemBuyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuffItemBuyReq::IsInitialized() const {

  return true;
}

void BuffItemBuyReq::Swap(BuffItemBuyReq* other) {
  if (other != this) {
    ids_.Swap(&other->ids_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuffItemBuyReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuffItemBuyReq_descriptor_;
  metadata.reflection = BuffItemBuyReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuffItemInfo::kIdFieldNumber;
const int BuffItemInfo::kPriceFieldNumber;
const int BuffItemInfo::kNumberFieldNumber;
const int BuffItemInfo::kTypeFieldNumber;
const int BuffItemInfo::kNameFieldNumber;
const int BuffItemInfo::kDescFieldNumber;
const int BuffItemInfo::kOwnedFieldNumber;
const int BuffItemInfo::kDurationFieldNumber;
#endif  // !_MSC_VER

BuffItemInfo::BuffItemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuffItemInfo::InitAsDefaultInstance() {
}

BuffItemInfo::BuffItemInfo(const BuffItemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuffItemInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  price_ = 0u;
  number_ = 0u;
  type_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  owned_ = false;
  duration_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuffItemInfo::~BuffItemInfo() {
  SharedDtor();
}

void BuffItemInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (this != default_instance_) {
  }
}

void BuffItemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuffItemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuffItemInfo_descriptor_;
}

const BuffItemInfo& BuffItemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

BuffItemInfo* BuffItemInfo::default_instance_ = NULL;

BuffItemInfo* BuffItemInfo::New() const {
  return new BuffItemInfo;
}

void BuffItemInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    price_ = 0u;
    number_ = 0u;
    type_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::kEmptyString) {
        desc_->clear();
      }
    }
    owned_ = false;
    duration_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuffItemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_price;
        break;
      }

      // optional uint32 price = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_number;
        break;
      }

      // optional uint32 number = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional .protoc.gameproto.SELL_TYPE type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protoc::gameproto::SELL_TYPE_IsValid(value)) {
            set_type(static_cast< ::protoc::gameproto::SELL_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }

      // optional string name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_desc;
        break;
      }

      // optional string desc = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_owned;
        break;
      }

      // optional bool owned = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_owned:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &owned_)));
          set_has_owned();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_duration;
        break;
      }

      // optional uint32 duration = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuffItemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 price = 2;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->price(), output);
  }

  // optional uint32 number = 3;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->number(), output);
  }

  // optional .protoc.gameproto.SELL_TYPE type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->name(), output);
  }

  // optional string desc = 6;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->desc(), output);
  }

  // optional bool owned = 7;
  if (has_owned()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->owned(), output);
  }

  // optional uint32 duration = 8;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->duration(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuffItemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 price = 2;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->price(), target);
  }

  // optional uint32 number = 3;
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->number(), target);
  }

  // optional .protoc.gameproto.SELL_TYPE type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }

  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }

  // optional string desc = 6;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->desc(), target);
  }

  // optional bool owned = 7;
  if (has_owned()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->owned(), target);
  }

  // optional uint32 duration = 8;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->duration(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuffItemInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 price = 2;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->price());
    }

    // optional uint32 number = 3;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->number());
    }

    // optional .protoc.gameproto.SELL_TYPE type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string desc = 6;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

    // optional bool owned = 7;
    if (has_owned()) {
      total_size += 1 + 1;
    }

    // optional uint32 duration = 8;
    if (has_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duration());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuffItemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuffItemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuffItemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuffItemInfo::MergeFrom(const BuffItemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_number()) {
      set_number(from.number());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
    if (from.has_owned()) {
      set_owned(from.owned());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuffItemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuffItemInfo::CopyFrom(const BuffItemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuffItemInfo::IsInitialized() const {

  return true;
}

void BuffItemInfo::Swap(BuffItemInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(price_, other->price_);
    std::swap(number_, other->number_);
    std::swap(type_, other->type_);
    std::swap(name_, other->name_);
    std::swap(desc_, other->desc_);
    std::swap(owned_, other->owned_);
    std::swap(duration_, other->duration_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuffItemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuffItemInfo_descriptor_;
  metadata.reflection = BuffItemInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RandomItemListReq::kTypeFieldNumber;
#endif  // !_MSC_VER

RandomItemListReq::RandomItemListReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RandomItemListReq::InitAsDefaultInstance() {
}

RandomItemListReq::RandomItemListReq(const RandomItemListReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RandomItemListReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RandomItemListReq::~RandomItemListReq() {
  SharedDtor();
}

void RandomItemListReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RandomItemListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RandomItemListReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RandomItemListReq_descriptor_;
}

const RandomItemListReq& RandomItemListReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

RandomItemListReq* RandomItemListReq::default_instance_ = NULL;

RandomItemListReq* RandomItemListReq::New() const {
  return new RandomItemListReq;
}

void RandomItemListReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RandomItemListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protoc.gameproto.BUFF_TYPE type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protoc::gameproto::BUFF_TYPE_IsValid(value)) {
            set_type(static_cast< ::protoc::gameproto::BUFF_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RandomItemListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .protoc.gameproto.BUFF_TYPE type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RandomItemListReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .protoc.gameproto.BUFF_TYPE type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RandomItemListReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .protoc.gameproto.BUFF_TYPE type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RandomItemListReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RandomItemListReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RandomItemListReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RandomItemListReq::MergeFrom(const RandomItemListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RandomItemListReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RandomItemListReq::CopyFrom(const RandomItemListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RandomItemListReq::IsInitialized() const {

  return true;
}

void RandomItemListReq::Swap(RandomItemListReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RandomItemListReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RandomItemListReq_descriptor_;
  metadata.reflection = RandomItemListReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RandomItemListAck::kErrNoFieldNumber;
const int RandomItemListAck::kInfoFieldNumber;
#endif  // !_MSC_VER

RandomItemListAck::RandomItemListAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RandomItemListAck::InitAsDefaultInstance() {
  info_ = const_cast< ::protoc::gameproto::BuffItemInfo*>(&::protoc::gameproto::BuffItemInfo::default_instance());
}

RandomItemListAck::RandomItemListAck(const RandomItemListAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RandomItemListAck::SharedCtor() {
  _cached_size_ = 0;
  err_no_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RandomItemListAck::~RandomItemListAck() {
  SharedDtor();
}

void RandomItemListAck::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void RandomItemListAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RandomItemListAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RandomItemListAck_descriptor_;
}

const RandomItemListAck& RandomItemListAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

RandomItemListAck* RandomItemListAck::default_instance_ = NULL;

RandomItemListAck* RandomItemListAck::New() const {
  return new RandomItemListAck;
}

void RandomItemListAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    err_no_ = 0;
    if (has_info()) {
      if (info_ != NULL) info_->::protoc::gameproto::BuffItemInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RandomItemListAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 err_no = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_no_)));
          set_has_err_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // optional .protoc.gameproto.BuffItemInfo info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RandomItemListAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 err_no = 1;
  if (has_err_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->err_no(), output);
  }

  // optional .protoc.gameproto.BuffItemInfo info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RandomItemListAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 err_no = 1;
  if (has_err_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->err_no(), target);
  }

  // optional .protoc.gameproto.BuffItemInfo info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RandomItemListAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 err_no = 1;
    if (has_err_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err_no());
    }

    // optional .protoc.gameproto.BuffItemInfo info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RandomItemListAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RandomItemListAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RandomItemListAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RandomItemListAck::MergeFrom(const RandomItemListAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_err_no()) {
      set_err_no(from.err_no());
    }
    if (from.has_info()) {
      mutable_info()->::protoc::gameproto::BuffItemInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RandomItemListAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RandomItemListAck::CopyFrom(const RandomItemListAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RandomItemListAck::IsInitialized() const {

  return true;
}

void RandomItemListAck::Swap(RandomItemListAck* other) {
  if (other != this) {
    std::swap(err_no_, other->err_no_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RandomItemListAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RandomItemListAck_descriptor_;
  metadata.reflection = RandomItemListAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RandomItemBuyReq::kTypeFieldNumber;
#endif  // !_MSC_VER

RandomItemBuyReq::RandomItemBuyReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RandomItemBuyReq::InitAsDefaultInstance() {
}

RandomItemBuyReq::RandomItemBuyReq(const RandomItemBuyReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RandomItemBuyReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RandomItemBuyReq::~RandomItemBuyReq() {
  SharedDtor();
}

void RandomItemBuyReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RandomItemBuyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RandomItemBuyReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RandomItemBuyReq_descriptor_;
}

const RandomItemBuyReq& RandomItemBuyReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

RandomItemBuyReq* RandomItemBuyReq::default_instance_ = NULL;

RandomItemBuyReq* RandomItemBuyReq::New() const {
  return new RandomItemBuyReq;
}

void RandomItemBuyReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RandomItemBuyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protoc.gameproto.BUFF_TYPE type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protoc::gameproto::BUFF_TYPE_IsValid(value)) {
            set_type(static_cast< ::protoc::gameproto::BUFF_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RandomItemBuyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .protoc.gameproto.BUFF_TYPE type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RandomItemBuyReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .protoc.gameproto.BUFF_TYPE type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RandomItemBuyReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .protoc.gameproto.BUFF_TYPE type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RandomItemBuyReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RandomItemBuyReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RandomItemBuyReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RandomItemBuyReq::MergeFrom(const RandomItemBuyReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RandomItemBuyReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RandomItemBuyReq::CopyFrom(const RandomItemBuyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RandomItemBuyReq::IsInitialized() const {

  return true;
}

void RandomItemBuyReq::Swap(RandomItemBuyReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RandomItemBuyReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RandomItemBuyReq_descriptor_;
  metadata.reflection = RandomItemBuyReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FriendData::kFriendIdFieldNumber;
const int FriendData::kNameFieldNumber;
const int FriendData::kHeadIdFieldNumber;
const int FriendData::kLevelFieldNumber;
const int FriendData::kKindFieldNumber;
const int FriendData::kLastOnlineTimeFieldNumber;
const int FriendData::kSexFieldNumber;
const int FriendData::kTotalAttackFieldNumber;
#endif  // !_MSC_VER

FriendData::FriendData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FriendData::InitAsDefaultInstance() {
}

FriendData::FriendData(const FriendData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FriendData::SharedCtor() {
  _cached_size_ = 0;
  friend_id_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  head_id_ = 0u;
  level_ = 0u;
  kind_ = 0u;
  last_online_time_ = GOOGLE_LONGLONG(0);
  sex_ = false;
  total_attack_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendData::~FriendData() {
  SharedDtor();
}

void FriendData::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void FriendData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendData_descriptor_;
}

const FriendData& FriendData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

FriendData* FriendData::default_instance_ = NULL;

FriendData* FriendData::New() const {
  return new FriendData;
}

void FriendData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    friend_id_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    head_id_ = 0u;
    level_ = 0u;
    kind_ = 0u;
    last_online_time_ = GOOGLE_LONGLONG(0);
    sex_ = false;
    total_attack_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FriendData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 friend_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &friend_id_)));
          set_has_friend_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_head_id;
        break;
      }

      // optional uint32 head_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_head_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &head_id_)));
          set_has_head_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // optional uint32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_kind;
        break;
      }

      // optional uint32 kind = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kind_)));
          set_has_kind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_last_online_time;
        break;
      }

      // optional int64 last_online_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_online_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_online_time_)));
          set_has_last_online_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_sex;
        break;
      }

      // optional bool sex = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_total_attack;
        break;
      }

      // optional int32 total_attack = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_attack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_attack_)));
          set_has_total_attack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FriendData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 friend_id = 1;
  if (has_friend_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->friend_id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional uint32 head_id = 3;
  if (has_head_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->head_id(), output);
  }

  // optional uint32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->level(), output);
  }

  // optional uint32 kind = 5;
  if (has_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->kind(), output);
  }

  // optional int64 last_online_time = 6;
  if (has_last_online_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->last_online_time(), output);
  }

  // optional bool sex = 7;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->sex(), output);
  }

  // optional int32 total_attack = 8;
  if (has_total_attack()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->total_attack(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FriendData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 friend_id = 1;
  if (has_friend_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->friend_id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 head_id = 3;
  if (has_head_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->head_id(), target);
  }

  // optional uint32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->level(), target);
  }

  // optional uint32 kind = 5;
  if (has_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->kind(), target);
  }

  // optional int64 last_online_time = 6;
  if (has_last_online_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->last_online_time(), target);
  }

  // optional bool sex = 7;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->sex(), target);
  }

  // optional int32 total_attack = 8;
  if (has_total_attack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->total_attack(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FriendData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 friend_id = 1;
    if (has_friend_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->friend_id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 head_id = 3;
    if (has_head_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->head_id());
    }

    // optional uint32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 kind = 5;
    if (has_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kind());
    }

    // optional int64 last_online_time = 6;
    if (has_last_online_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_online_time());
    }

    // optional bool sex = 7;
    if (has_sex()) {
      total_size += 1 + 1;
    }

    // optional int32 total_attack = 8;
    if (has_total_attack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_attack());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FriendData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FriendData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FriendData::MergeFrom(const FriendData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_friend_id()) {
      set_friend_id(from.friend_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_head_id()) {
      set_head_id(from.head_id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_kind()) {
      set_kind(from.kind());
    }
    if (from.has_last_online_time()) {
      set_last_online_time(from.last_online_time());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_total_attack()) {
      set_total_attack(from.total_attack());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FriendData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendData::CopyFrom(const FriendData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendData::IsInitialized() const {

  return true;
}

void FriendData::Swap(FriendData* other) {
  if (other != this) {
    std::swap(friend_id_, other->friend_id_);
    std::swap(name_, other->name_);
    std::swap(head_id_, other->head_id_);
    std::swap(level_, other->level_);
    std::swap(kind_, other->kind_);
    std::swap(last_online_time_, other->last_online_time_);
    std::swap(sex_, other->sex_);
    std::swap(total_attack_, other->total_attack_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FriendData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendData_descriptor_;
  metadata.reflection = FriendData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FriendList::kDataFieldNumber;
#endif  // !_MSC_VER

FriendList::FriendList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FriendList::InitAsDefaultInstance() {
}

FriendList::FriendList(const FriendList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FriendList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendList::~FriendList() {
  SharedDtor();
}

void FriendList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FriendList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendList_descriptor_;
}

const FriendList& FriendList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

FriendList* FriendList::default_instance_ = NULL;

FriendList* FriendList::New() const {
  return new FriendList;
}

void FriendList::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FriendList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protoc.gameproto.FriendData data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FriendList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protoc.gameproto.FriendData data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FriendList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protoc.gameproto.FriendData data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FriendList::ByteSize() const {
  int total_size = 0;

  // repeated .protoc.gameproto.FriendData data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FriendList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FriendList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FriendList::MergeFrom(const FriendList& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FriendList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendList::CopyFrom(const FriendList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendList::IsInitialized() const {

  return true;
}

void FriendList::Swap(FriendList* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FriendList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendList_descriptor_;
  metadata.reflection = FriendList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateFriend::kDataFieldNumber;
#endif  // !_MSC_VER

UpdateFriend::UpdateFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateFriend::InitAsDefaultInstance() {
  data_ = const_cast< ::protoc::gameproto::FriendData*>(&::protoc::gameproto::FriendData::default_instance());
}

UpdateFriend::UpdateFriend(const UpdateFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateFriend::SharedCtor() {
  _cached_size_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateFriend::~UpdateFriend() {
  SharedDtor();
}

void UpdateFriend::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void UpdateFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateFriend_descriptor_;
}

const UpdateFriend& UpdateFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

UpdateFriend* UpdateFriend::default_instance_ = NULL;

UpdateFriend* UpdateFriend::New() const {
  return new UpdateFriend;
}

void UpdateFriend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != NULL) data_->::protoc::gameproto::FriendData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protoc.gameproto.FriendData data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .protoc.gameproto.FriendData data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .protoc.gameproto.FriendData data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateFriend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .protoc.gameproto.FriendData data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateFriend::MergeFrom(const UpdateFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      mutable_data()->::protoc::gameproto::FriendData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateFriend::CopyFrom(const UpdateFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateFriend::IsInitialized() const {

  return true;
}

void UpdateFriend::Swap(UpdateFriend* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateFriend_descriptor_;
  metadata.reflection = UpdateFriend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DelFriendReq::kFriendIdFieldNumber;
#endif  // !_MSC_VER

DelFriendReq::DelFriendReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DelFriendReq::InitAsDefaultInstance() {
}

DelFriendReq::DelFriendReq(const DelFriendReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DelFriendReq::SharedCtor() {
  _cached_size_ = 0;
  friend_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DelFriendReq::~DelFriendReq() {
  SharedDtor();
}

void DelFriendReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DelFriendReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DelFriendReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DelFriendReq_descriptor_;
}

const DelFriendReq& DelFriendReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

DelFriendReq* DelFriendReq::default_instance_ = NULL;

DelFriendReq* DelFriendReq::New() const {
  return new DelFriendReq;
}

void DelFriendReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    friend_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DelFriendReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 friend_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &friend_id_)));
          set_has_friend_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DelFriendReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 friend_id = 1;
  if (has_friend_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->friend_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DelFriendReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 friend_id = 1;
  if (has_friend_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->friend_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DelFriendReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 friend_id = 1;
    if (has_friend_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->friend_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DelFriendReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DelFriendReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DelFriendReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DelFriendReq::MergeFrom(const DelFriendReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_friend_id()) {
      set_friend_id(from.friend_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DelFriendReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelFriendReq::CopyFrom(const DelFriendReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelFriendReq::IsInitialized() const {

  return true;
}

void DelFriendReq::Swap(DelFriendReq* other) {
  if (other != this) {
    std::swap(friend_id_, other->friend_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DelFriendReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DelFriendReq_descriptor_;
  metadata.reflection = DelFriendReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DelFriendAck::kFriendIdFieldNumber;
const int DelFriendAck::kErrNoFieldNumber;
#endif  // !_MSC_VER

DelFriendAck::DelFriendAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DelFriendAck::InitAsDefaultInstance() {
}

DelFriendAck::DelFriendAck(const DelFriendAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DelFriendAck::SharedCtor() {
  _cached_size_ = 0;
  friend_id_ = GOOGLE_ULONGLONG(0);
  err_no_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DelFriendAck::~DelFriendAck() {
  SharedDtor();
}

void DelFriendAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DelFriendAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DelFriendAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DelFriendAck_descriptor_;
}

const DelFriendAck& DelFriendAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

DelFriendAck* DelFriendAck::default_instance_ = NULL;

DelFriendAck* DelFriendAck::New() const {
  return new DelFriendAck;
}

void DelFriendAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    friend_id_ = GOOGLE_ULONGLONG(0);
    err_no_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DelFriendAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 friend_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &friend_id_)));
          set_has_friend_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_err_no;
        break;
      }

      // optional int32 err_no = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_err_no:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_no_)));
          set_has_err_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DelFriendAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 friend_id = 1;
  if (has_friend_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->friend_id(), output);
  }

  // optional int32 err_no = 2;
  if (has_err_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->err_no(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DelFriendAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 friend_id = 1;
  if (has_friend_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->friend_id(), target);
  }

  // optional int32 err_no = 2;
  if (has_err_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->err_no(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DelFriendAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 friend_id = 1;
    if (has_friend_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->friend_id());
    }

    // optional int32 err_no = 2;
    if (has_err_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err_no());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DelFriendAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DelFriendAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DelFriendAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DelFriendAck::MergeFrom(const DelFriendAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_friend_id()) {
      set_friend_id(from.friend_id());
    }
    if (from.has_err_no()) {
      set_err_no(from.err_no());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DelFriendAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelFriendAck::CopyFrom(const DelFriendAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelFriendAck::IsInitialized() const {

  return true;
}

void DelFriendAck::Swap(DelFriendAck* other) {
  if (other != this) {
    std::swap(friend_id_, other->friend_id_);
    std::swap(err_no_, other->err_no_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DelFriendAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DelFriendAck_descriptor_;
  metadata.reflection = DelFriendAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DelFriendNtf::kFriendIdFieldNumber;
#endif  // !_MSC_VER

DelFriendNtf::DelFriendNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DelFriendNtf::InitAsDefaultInstance() {
}

DelFriendNtf::DelFriendNtf(const DelFriendNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DelFriendNtf::SharedCtor() {
  _cached_size_ = 0;
  friend_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DelFriendNtf::~DelFriendNtf() {
  SharedDtor();
}

void DelFriendNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DelFriendNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DelFriendNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DelFriendNtf_descriptor_;
}

const DelFriendNtf& DelFriendNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

DelFriendNtf* DelFriendNtf::default_instance_ = NULL;

DelFriendNtf* DelFriendNtf::New() const {
  return new DelFriendNtf;
}

void DelFriendNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    friend_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DelFriendNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 friend_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &friend_id_)));
          set_has_friend_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DelFriendNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 friend_id = 1;
  if (has_friend_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->friend_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DelFriendNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 friend_id = 1;
  if (has_friend_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->friend_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DelFriendNtf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 friend_id = 1;
    if (has_friend_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->friend_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DelFriendNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DelFriendNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DelFriendNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DelFriendNtf::MergeFrom(const DelFriendNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_friend_id()) {
      set_friend_id(from.friend_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DelFriendNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelFriendNtf::CopyFrom(const DelFriendNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelFriendNtf::IsInitialized() const {

  return true;
}

void DelFriendNtf::Swap(DelFriendNtf* other) {
  if (other != this) {
    std::swap(friend_id_, other->friend_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DelFriendNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DelFriendNtf_descriptor_;
  metadata.reflection = DelFriendNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VisitFriendReq::kFriendIdFieldNumber;
const int VisitFriendReq::kCurQueueFieldNumber;
#endif  // !_MSC_VER

VisitFriendReq::VisitFriendReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VisitFriendReq::InitAsDefaultInstance() {
}

VisitFriendReq::VisitFriendReq(const VisitFriendReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VisitFriendReq::SharedCtor() {
  _cached_size_ = 0;
  friend_id_ = GOOGLE_ULONGLONG(0);
  cur_queue_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VisitFriendReq::~VisitFriendReq() {
  SharedDtor();
}

void VisitFriendReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VisitFriendReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VisitFriendReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VisitFriendReq_descriptor_;
}

const VisitFriendReq& VisitFriendReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

VisitFriendReq* VisitFriendReq::default_instance_ = NULL;

VisitFriendReq* VisitFriendReq::New() const {
  return new VisitFriendReq;
}

void VisitFriendReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    friend_id_ = GOOGLE_ULONGLONG(0);
    cur_queue_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VisitFriendReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 friend_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &friend_id_)));
          set_has_friend_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cur_queue;
        break;
      }

      // optional bool cur_queue = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_queue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cur_queue_)));
          set_has_cur_queue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VisitFriendReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 friend_id = 1;
  if (has_friend_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->friend_id(), output);
  }

  // optional bool cur_queue = 2;
  if (has_cur_queue()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->cur_queue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VisitFriendReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 friend_id = 1;
  if (has_friend_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->friend_id(), target);
  }

  // optional bool cur_queue = 2;
  if (has_cur_queue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->cur_queue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VisitFriendReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 friend_id = 1;
    if (has_friend_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->friend_id());
    }

    // optional bool cur_queue = 2;
    if (has_cur_queue()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VisitFriendReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VisitFriendReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VisitFriendReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VisitFriendReq::MergeFrom(const VisitFriendReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_friend_id()) {
      set_friend_id(from.friend_id());
    }
    if (from.has_cur_queue()) {
      set_cur_queue(from.cur_queue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VisitFriendReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VisitFriendReq::CopyFrom(const VisitFriendReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VisitFriendReq::IsInitialized() const {

  return true;
}

void VisitFriendReq::Swap(VisitFriendReq* other) {
  if (other != this) {
    std::swap(friend_id_, other->friend_id_);
    std::swap(cur_queue_, other->cur_queue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VisitFriendReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VisitFriendReq_descriptor_;
  metadata.reflection = VisitFriendReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VisitFriendAck::kFriendIdFieldNumber;
const int VisitFriendAck::kPetFieldNumber;
const int VisitFriendAck::kAdminIdFieldNumber;
#endif  // !_MSC_VER

VisitFriendAck::VisitFriendAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VisitFriendAck::InitAsDefaultInstance() {
}

VisitFriendAck::VisitFriendAck(const VisitFriendAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VisitFriendAck::SharedCtor() {
  _cached_size_ = 0;
  friend_id_ = GOOGLE_ULONGLONG(0);
  admin_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VisitFriendAck::~VisitFriendAck() {
  SharedDtor();
}

void VisitFriendAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VisitFriendAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VisitFriendAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VisitFriendAck_descriptor_;
}

const VisitFriendAck& VisitFriendAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

VisitFriendAck* VisitFriendAck::default_instance_ = NULL;

VisitFriendAck* VisitFriendAck::New() const {
  return new VisitFriendAck;
}

void VisitFriendAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    friend_id_ = GOOGLE_ULONGLONG(0);
    admin_id_ = GOOGLE_ULONGLONG(0);
  }
  pet_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VisitFriendAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 friend_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &friend_id_)));
          set_has_friend_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pet;
        break;
      }

      // repeated .protoc.gameproto.PetRecord pet = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pet()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pet;
        if (input->ExpectTag(24)) goto parse_admin_id;
        break;
      }

      // optional uint64 admin_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_admin_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &admin_id_)));
          set_has_admin_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VisitFriendAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 friend_id = 1;
  if (has_friend_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->friend_id(), output);
  }

  // repeated .protoc.gameproto.PetRecord pet = 2;
  for (int i = 0; i < this->pet_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pet(i), output);
  }

  // optional uint64 admin_id = 3;
  if (has_admin_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->admin_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VisitFriendAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 friend_id = 1;
  if (has_friend_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->friend_id(), target);
  }

  // repeated .protoc.gameproto.PetRecord pet = 2;
  for (int i = 0; i < this->pet_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pet(i), target);
  }

  // optional uint64 admin_id = 3;
  if (has_admin_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->admin_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VisitFriendAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 friend_id = 1;
    if (has_friend_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->friend_id());
    }

    // optional uint64 admin_id = 3;
    if (has_admin_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->admin_id());
    }

  }
  // repeated .protoc.gameproto.PetRecord pet = 2;
  total_size += 1 * this->pet_size();
  for (int i = 0; i < this->pet_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pet(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VisitFriendAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VisitFriendAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VisitFriendAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VisitFriendAck::MergeFrom(const VisitFriendAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  pet_.MergeFrom(from.pet_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_friend_id()) {
      set_friend_id(from.friend_id());
    }
    if (from.has_admin_id()) {
      set_admin_id(from.admin_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VisitFriendAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VisitFriendAck::CopyFrom(const VisitFriendAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VisitFriendAck::IsInitialized() const {

  return true;
}

void VisitFriendAck::Swap(VisitFriendAck* other) {
  if (other != this) {
    std::swap(friend_id_, other->friend_id_);
    pet_.Swap(&other->pet_);
    std::swap(admin_id_, other->admin_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VisitFriendAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VisitFriendAck_descriptor_;
  metadata.reflection = VisitFriendAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AskFriendData::kAskFriendIdFieldNumber;
const int AskFriendData::kNameFieldNumber;
const int AskFriendData::kHeadIdFieldNumber;
const int AskFriendData::kLevelFieldNumber;
const int AskFriendData::kKindFieldNumber;
const int AskFriendData::kAskTimeFieldNumber;
const int AskFriendData::kTotalAttackFieldNumber;
const int AskFriendData::kSexFieldNumber;
#endif  // !_MSC_VER

AskFriendData::AskFriendData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AskFriendData::InitAsDefaultInstance() {
}

AskFriendData::AskFriendData(const AskFriendData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AskFriendData::SharedCtor() {
  _cached_size_ = 0;
  ask_friend_id_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  head_id_ = 0u;
  level_ = 0u;
  kind_ = 0u;
  ask_time_ = GOOGLE_LONGLONG(0);
  total_attack_ = 0;
  sex_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskFriendData::~AskFriendData() {
  SharedDtor();
}

void AskFriendData::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void AskFriendData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskFriendData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskFriendData_descriptor_;
}

const AskFriendData& AskFriendData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

AskFriendData* AskFriendData::default_instance_ = NULL;

AskFriendData* AskFriendData::New() const {
  return new AskFriendData;
}

void AskFriendData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ask_friend_id_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    head_id_ = 0u;
    level_ = 0u;
    kind_ = 0u;
    ask_time_ = GOOGLE_LONGLONG(0);
    total_attack_ = 0;
    sex_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AskFriendData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 ask_friend_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ask_friend_id_)));
          set_has_ask_friend_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_head_id;
        break;
      }

      // optional uint32 head_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_head_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &head_id_)));
          set_has_head_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // optional uint32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_kind;
        break;
      }

      // optional uint32 kind = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kind_)));
          set_has_kind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ask_time;
        break;
      }

      // optional int64 ask_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ask_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ask_time_)));
          set_has_ask_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_total_attack;
        break;
      }

      // optional int32 total_attack = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_attack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_attack_)));
          set_has_total_attack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_sex;
        break;
      }

      // optional bool sex = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AskFriendData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 ask_friend_id = 1;
  if (has_ask_friend_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->ask_friend_id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional uint32 head_id = 3;
  if (has_head_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->head_id(), output);
  }

  // optional uint32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->level(), output);
  }

  // optional uint32 kind = 5;
  if (has_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->kind(), output);
  }

  // optional int64 ask_time = 6;
  if (has_ask_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->ask_time(), output);
  }

  // optional int32 total_attack = 7;
  if (has_total_attack()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->total_attack(), output);
  }

  // optional bool sex = 8;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->sex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AskFriendData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 ask_friend_id = 1;
  if (has_ask_friend_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->ask_friend_id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 head_id = 3;
  if (has_head_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->head_id(), target);
  }

  // optional uint32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->level(), target);
  }

  // optional uint32 kind = 5;
  if (has_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->kind(), target);
  }

  // optional int64 ask_time = 6;
  if (has_ask_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->ask_time(), target);
  }

  // optional int32 total_attack = 7;
  if (has_total_attack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->total_attack(), target);
  }

  // optional bool sex = 8;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->sex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AskFriendData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 ask_friend_id = 1;
    if (has_ask_friend_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ask_friend_id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 head_id = 3;
    if (has_head_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->head_id());
    }

    // optional uint32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 kind = 5;
    if (has_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kind());
    }

    // optional int64 ask_time = 6;
    if (has_ask_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ask_time());
    }

    // optional int32 total_attack = 7;
    if (has_total_attack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_attack());
    }

    // optional bool sex = 8;
    if (has_sex()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskFriendData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskFriendData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskFriendData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AskFriendData::MergeFrom(const AskFriendData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ask_friend_id()) {
      set_ask_friend_id(from.ask_friend_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_head_id()) {
      set_head_id(from.head_id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_kind()) {
      set_kind(from.kind());
    }
    if (from.has_ask_time()) {
      set_ask_time(from.ask_time());
    }
    if (from.has_total_attack()) {
      set_total_attack(from.total_attack());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AskFriendData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskFriendData::CopyFrom(const AskFriendData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskFriendData::IsInitialized() const {

  return true;
}

void AskFriendData::Swap(AskFriendData* other) {
  if (other != this) {
    std::swap(ask_friend_id_, other->ask_friend_id_);
    std::swap(name_, other->name_);
    std::swap(head_id_, other->head_id_);
    std::swap(level_, other->level_);
    std::swap(kind_, other->kind_);
    std::swap(ask_time_, other->ask_time_);
    std::swap(total_attack_, other->total_attack_);
    std::swap(sex_, other->sex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AskFriendData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskFriendData_descriptor_;
  metadata.reflection = AskFriendData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetAskFriendReq::GetAskFriendReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetAskFriendReq::InitAsDefaultInstance() {
}

GetAskFriendReq::GetAskFriendReq(const GetAskFriendReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetAskFriendReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAskFriendReq::~GetAskFriendReq() {
  SharedDtor();
}

void GetAskFriendReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetAskFriendReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAskFriendReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAskFriendReq_descriptor_;
}

const GetAskFriendReq& GetAskFriendReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

GetAskFriendReq* GetAskFriendReq::default_instance_ = NULL;

GetAskFriendReq* GetAskFriendReq::New() const {
  return new GetAskFriendReq;
}

void GetAskFriendReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAskFriendReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetAskFriendReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetAskFriendReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetAskFriendReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAskFriendReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAskFriendReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAskFriendReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAskFriendReq::MergeFrom(const GetAskFriendReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAskFriendReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAskFriendReq::CopyFrom(const GetAskFriendReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAskFriendReq::IsInitialized() const {

  return true;
}

void GetAskFriendReq::Swap(GetAskFriendReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAskFriendReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAskFriendReq_descriptor_;
  metadata.reflection = GetAskFriendReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetAskFriendAck::kDataFieldNumber;
#endif  // !_MSC_VER

GetAskFriendAck::GetAskFriendAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetAskFriendAck::InitAsDefaultInstance() {
}

GetAskFriendAck::GetAskFriendAck(const GetAskFriendAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetAskFriendAck::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAskFriendAck::~GetAskFriendAck() {
  SharedDtor();
}

void GetAskFriendAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetAskFriendAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAskFriendAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAskFriendAck_descriptor_;
}

const GetAskFriendAck& GetAskFriendAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

GetAskFriendAck* GetAskFriendAck::default_instance_ = NULL;

GetAskFriendAck* GetAskFriendAck::New() const {
  return new GetAskFriendAck;
}

void GetAskFriendAck::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAskFriendAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protoc.gameproto.AskFriendData data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetAskFriendAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protoc.gameproto.AskFriendData data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetAskFriendAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protoc.gameproto.AskFriendData data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetAskFriendAck::ByteSize() const {
  int total_size = 0;

  // repeated .protoc.gameproto.AskFriendData data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAskFriendAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAskFriendAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAskFriendAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAskFriendAck::MergeFrom(const GetAskFriendAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAskFriendAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAskFriendAck::CopyFrom(const GetAskFriendAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAskFriendAck::IsInitialized() const {

  return true;
}

void GetAskFriendAck::Swap(GetAskFriendAck* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAskFriendAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAskFriendAck_descriptor_;
  metadata.reflection = GetAskFriendAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SearchPlayerReq::kPlayerIdFieldNumber;
const int SearchPlayerReq::kPlayerNameFieldNumber;
#endif  // !_MSC_VER

SearchPlayerReq::SearchPlayerReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SearchPlayerReq::InitAsDefaultInstance() {
}

SearchPlayerReq::SearchPlayerReq(const SearchPlayerReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SearchPlayerReq::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = GOOGLE_ULONGLONG(0);
  player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SearchPlayerReq::~SearchPlayerReq() {
  SharedDtor();
}

void SearchPlayerReq::SharedDtor() {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    delete player_name_;
  }
  if (this != default_instance_) {
  }
}

void SearchPlayerReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchPlayerReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchPlayerReq_descriptor_;
}

const SearchPlayerReq& SearchPlayerReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

SearchPlayerReq* SearchPlayerReq::default_instance_ = NULL;

SearchPlayerReq* SearchPlayerReq::New() const {
  return new SearchPlayerReq;
}

void SearchPlayerReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = GOOGLE_ULONGLONG(0);
    if (has_player_name()) {
      if (player_name_ != &::google::protobuf::internal::kEmptyString) {
        player_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SearchPlayerReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_player_name;
        break;
      }

      // optional string player_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->player_name().data(), this->player_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SearchPlayerReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->player_id(), output);
  }

  // optional string player_name = 2;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->player_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SearchPlayerReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->player_id(), target);
  }

  // optional string player_name = 2;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->player_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SearchPlayerReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_id());
    }

    // optional string player_name = 2;
    if (has_player_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchPlayerReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SearchPlayerReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SearchPlayerReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SearchPlayerReq::MergeFrom(const SearchPlayerReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_player_name()) {
      set_player_name(from.player_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SearchPlayerReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchPlayerReq::CopyFrom(const SearchPlayerReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchPlayerReq::IsInitialized() const {

  return true;
}

void SearchPlayerReq::Swap(SearchPlayerReq* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(player_name_, other->player_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SearchPlayerReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SearchPlayerReq_descriptor_;
  metadata.reflection = SearchPlayerReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SearchPlayerAck::kPlayerIdFieldNumber;
const int SearchPlayerAck::kNameFieldNumber;
const int SearchPlayerAck::kHeadIdFieldNumber;
const int SearchPlayerAck::kLevelFieldNumber;
const int SearchPlayerAck::kErrNoFieldNumber;
const int SearchPlayerAck::kTotalAttackFieldNumber;
const int SearchPlayerAck::kSexFieldNumber;
#endif  // !_MSC_VER

SearchPlayerAck::SearchPlayerAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SearchPlayerAck::InitAsDefaultInstance() {
}

SearchPlayerAck::SearchPlayerAck(const SearchPlayerAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SearchPlayerAck::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  head_id_ = 0u;
  level_ = 0u;
  err_no_ = 0;
  total_attack_ = 0;
  sex_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SearchPlayerAck::~SearchPlayerAck() {
  SharedDtor();
}

void SearchPlayerAck::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void SearchPlayerAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchPlayerAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchPlayerAck_descriptor_;
}

const SearchPlayerAck& SearchPlayerAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

SearchPlayerAck* SearchPlayerAck::default_instance_ = NULL;

SearchPlayerAck* SearchPlayerAck::New() const {
  return new SearchPlayerAck;
}

void SearchPlayerAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    head_id_ = 0u;
    level_ = 0u;
    err_no_ = 0;
    total_attack_ = 0;
    sex_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SearchPlayerAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_head_id;
        break;
      }

      // optional uint32 head_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_head_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &head_id_)));
          set_has_head_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // optional uint32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_err_no;
        break;
      }

      // optional int32 err_no = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_err_no:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_no_)));
          set_has_err_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_total_attack;
        break;
      }

      // optional int32 total_attack = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_attack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_attack_)));
          set_has_total_attack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_sex;
        break;
      }

      // optional bool sex = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SearchPlayerAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->player_id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional uint32 head_id = 3;
  if (has_head_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->head_id(), output);
  }

  // optional uint32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->level(), output);
  }

  // optional int32 err_no = 5;
  if (has_err_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->err_no(), output);
  }

  // optional int32 total_attack = 6;
  if (has_total_attack()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->total_attack(), output);
  }

  // optional bool sex = 7;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->sex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SearchPlayerAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->player_id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 head_id = 3;
  if (has_head_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->head_id(), target);
  }

  // optional uint32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->level(), target);
  }

  // optional int32 err_no = 5;
  if (has_err_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->err_no(), target);
  }

  // optional int32 total_attack = 6;
  if (has_total_attack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->total_attack(), target);
  }

  // optional bool sex = 7;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->sex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SearchPlayerAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 head_id = 3;
    if (has_head_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->head_id());
    }

    // optional uint32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional int32 err_no = 5;
    if (has_err_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err_no());
    }

    // optional int32 total_attack = 6;
    if (has_total_attack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_attack());
    }

    // optional bool sex = 7;
    if (has_sex()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchPlayerAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SearchPlayerAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SearchPlayerAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SearchPlayerAck::MergeFrom(const SearchPlayerAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_head_id()) {
      set_head_id(from.head_id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_err_no()) {
      set_err_no(from.err_no());
    }
    if (from.has_total_attack()) {
      set_total_attack(from.total_attack());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SearchPlayerAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchPlayerAck::CopyFrom(const SearchPlayerAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchPlayerAck::IsInitialized() const {

  return true;
}

void SearchPlayerAck::Swap(SearchPlayerAck* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(name_, other->name_);
    std::swap(head_id_, other->head_id_);
    std::swap(level_, other->level_);
    std::swap(err_no_, other->err_no_);
    std::swap(total_attack_, other->total_attack_);
    std::swap(sex_, other->sex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SearchPlayerAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SearchPlayerAck_descriptor_;
  metadata.reflection = SearchPlayerAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AskFriendReq::kFriendIdFieldNumber;
#endif  // !_MSC_VER

AskFriendReq::AskFriendReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AskFriendReq::InitAsDefaultInstance() {
}

AskFriendReq::AskFriendReq(const AskFriendReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AskFriendReq::SharedCtor() {
  _cached_size_ = 0;
  friend_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskFriendReq::~AskFriendReq() {
  SharedDtor();
}

void AskFriendReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AskFriendReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskFriendReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskFriendReq_descriptor_;
}

const AskFriendReq& AskFriendReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

AskFriendReq* AskFriendReq::default_instance_ = NULL;

AskFriendReq* AskFriendReq::New() const {
  return new AskFriendReq;
}

void AskFriendReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    friend_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AskFriendReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 friend_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &friend_id_)));
          set_has_friend_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AskFriendReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 friend_id = 1;
  if (has_friend_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->friend_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AskFriendReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 friend_id = 1;
  if (has_friend_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->friend_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AskFriendReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 friend_id = 1;
    if (has_friend_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->friend_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskFriendReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskFriendReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskFriendReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AskFriendReq::MergeFrom(const AskFriendReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_friend_id()) {
      set_friend_id(from.friend_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AskFriendReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskFriendReq::CopyFrom(const AskFriendReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskFriendReq::IsInitialized() const {

  return true;
}

void AskFriendReq::Swap(AskFriendReq* other) {
  if (other != this) {
    std::swap(friend_id_, other->friend_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AskFriendReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskFriendReq_descriptor_;
  metadata.reflection = AskFriendReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AskFriendAck::kFriendIdFieldNumber;
const int AskFriendAck::kErrNoFieldNumber;
#endif  // !_MSC_VER

AskFriendAck::AskFriendAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AskFriendAck::InitAsDefaultInstance() {
}

AskFriendAck::AskFriendAck(const AskFriendAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AskFriendAck::SharedCtor() {
  _cached_size_ = 0;
  friend_id_ = GOOGLE_ULONGLONG(0);
  err_no_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskFriendAck::~AskFriendAck() {
  SharedDtor();
}

void AskFriendAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AskFriendAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskFriendAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskFriendAck_descriptor_;
}

const AskFriendAck& AskFriendAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

AskFriendAck* AskFriendAck::default_instance_ = NULL;

AskFriendAck* AskFriendAck::New() const {
  return new AskFriendAck;
}

void AskFriendAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    friend_id_ = GOOGLE_ULONGLONG(0);
    err_no_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AskFriendAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 friend_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &friend_id_)));
          set_has_friend_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_err_no;
        break;
      }

      // optional int32 err_no = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_err_no:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_no_)));
          set_has_err_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AskFriendAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 friend_id = 1;
  if (has_friend_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->friend_id(), output);
  }

  // optional int32 err_no = 2;
  if (has_err_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->err_no(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AskFriendAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 friend_id = 1;
  if (has_friend_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->friend_id(), target);
  }

  // optional int32 err_no = 2;
  if (has_err_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->err_no(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AskFriendAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 friend_id = 1;
    if (has_friend_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->friend_id());
    }

    // optional int32 err_no = 2;
    if (has_err_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err_no());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskFriendAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskFriendAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskFriendAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AskFriendAck::MergeFrom(const AskFriendAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_friend_id()) {
      set_friend_id(from.friend_id());
    }
    if (from.has_err_no()) {
      set_err_no(from.err_no());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AskFriendAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskFriendAck::CopyFrom(const AskFriendAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskFriendAck::IsInitialized() const {

  return true;
}

void AskFriendAck::Swap(AskFriendAck* other) {
  if (other != this) {
    std::swap(friend_id_, other->friend_id_);
    std::swap(err_no_, other->err_no_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AskFriendAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskFriendAck_descriptor_;
  metadata.reflection = AskFriendAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddAskFriendNtf::kDataFieldNumber;
#endif  // !_MSC_VER

AddAskFriendNtf::AddAskFriendNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddAskFriendNtf::InitAsDefaultInstance() {
  data_ = const_cast< ::protoc::gameproto::AskFriendData*>(&::protoc::gameproto::AskFriendData::default_instance());
}

AddAskFriendNtf::AddAskFriendNtf(const AddAskFriendNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddAskFriendNtf::SharedCtor() {
  _cached_size_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddAskFriendNtf::~AddAskFriendNtf() {
  SharedDtor();
}

void AddAskFriendNtf::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void AddAskFriendNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddAskFriendNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddAskFriendNtf_descriptor_;
}

const AddAskFriendNtf& AddAskFriendNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

AddAskFriendNtf* AddAskFriendNtf::default_instance_ = NULL;

AddAskFriendNtf* AddAskFriendNtf::New() const {
  return new AddAskFriendNtf;
}

void AddAskFriendNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != NULL) data_->::protoc::gameproto::AskFriendData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddAskFriendNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protoc.gameproto.AskFriendData data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddAskFriendNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .protoc.gameproto.AskFriendData data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddAskFriendNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .protoc.gameproto.AskFriendData data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddAskFriendNtf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .protoc.gameproto.AskFriendData data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddAskFriendNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddAskFriendNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddAskFriendNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddAskFriendNtf::MergeFrom(const AddAskFriendNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      mutable_data()->::protoc::gameproto::AskFriendData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddAskFriendNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddAskFriendNtf::CopyFrom(const AddAskFriendNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddAskFriendNtf::IsInitialized() const {

  return true;
}

void AddAskFriendNtf::Swap(AddAskFriendNtf* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddAskFriendNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddAskFriendNtf_descriptor_;
  metadata.reflection = AddAskFriendNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplyAskReq::kFriendIdFieldNumber;
const int ReplyAskReq::kReplyFieldNumber;
#endif  // !_MSC_VER

ReplyAskReq::ReplyAskReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReplyAskReq::InitAsDefaultInstance() {
}

ReplyAskReq::ReplyAskReq(const ReplyAskReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReplyAskReq::SharedCtor() {
  _cached_size_ = 0;
  friend_id_ = GOOGLE_ULONGLONG(0);
  reply_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplyAskReq::~ReplyAskReq() {
  SharedDtor();
}

void ReplyAskReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReplyAskReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplyAskReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplyAskReq_descriptor_;
}

const ReplyAskReq& ReplyAskReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

ReplyAskReq* ReplyAskReq::default_instance_ = NULL;

ReplyAskReq* ReplyAskReq::New() const {
  return new ReplyAskReq;
}

void ReplyAskReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    friend_id_ = GOOGLE_ULONGLONG(0);
    reply_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplyAskReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 friend_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &friend_id_)));
          set_has_friend_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reply;
        break;
      }

      // optional bool reply = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reply:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reply_)));
          set_has_reply();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReplyAskReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 friend_id = 1;
  if (has_friend_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->friend_id(), output);
  }

  // optional bool reply = 2;
  if (has_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->reply(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReplyAskReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 friend_id = 1;
  if (has_friend_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->friend_id(), target);
  }

  // optional bool reply = 2;
  if (has_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->reply(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReplyAskReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 friend_id = 1;
    if (has_friend_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->friend_id());
    }

    // optional bool reply = 2;
    if (has_reply()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplyAskReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplyAskReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplyAskReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplyAskReq::MergeFrom(const ReplyAskReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_friend_id()) {
      set_friend_id(from.friend_id());
    }
    if (from.has_reply()) {
      set_reply(from.reply());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplyAskReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyAskReq::CopyFrom(const ReplyAskReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyAskReq::IsInitialized() const {

  return true;
}

void ReplyAskReq::Swap(ReplyAskReq* other) {
  if (other != this) {
    std::swap(friend_id_, other->friend_id_);
    std::swap(reply_, other->reply_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplyAskReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplyAskReq_descriptor_;
  metadata.reflection = ReplyAskReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplyAskAck::kFriendIdFieldNumber;
const int ReplyAskAck::kErrNoFieldNumber;
#endif  // !_MSC_VER

ReplyAskAck::ReplyAskAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReplyAskAck::InitAsDefaultInstance() {
}

ReplyAskAck::ReplyAskAck(const ReplyAskAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReplyAskAck::SharedCtor() {
  _cached_size_ = 0;
  friend_id_ = GOOGLE_ULONGLONG(0);
  err_no_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplyAskAck::~ReplyAskAck() {
  SharedDtor();
}

void ReplyAskAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReplyAskAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplyAskAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplyAskAck_descriptor_;
}

const ReplyAskAck& ReplyAskAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

ReplyAskAck* ReplyAskAck::default_instance_ = NULL;

ReplyAskAck* ReplyAskAck::New() const {
  return new ReplyAskAck;
}

void ReplyAskAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    friend_id_ = GOOGLE_ULONGLONG(0);
    err_no_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplyAskAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 friend_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &friend_id_)));
          set_has_friend_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_err_no;
        break;
      }

      // optional int32 err_no = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_err_no:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_no_)));
          set_has_err_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReplyAskAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 friend_id = 1;
  if (has_friend_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->friend_id(), output);
  }

  // optional int32 err_no = 2;
  if (has_err_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->err_no(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReplyAskAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 friend_id = 1;
  if (has_friend_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->friend_id(), target);
  }

  // optional int32 err_no = 2;
  if (has_err_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->err_no(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReplyAskAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 friend_id = 1;
    if (has_friend_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->friend_id());
    }

    // optional int32 err_no = 2;
    if (has_err_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err_no());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplyAskAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplyAskAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplyAskAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplyAskAck::MergeFrom(const ReplyAskAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_friend_id()) {
      set_friend_id(from.friend_id());
    }
    if (from.has_err_no()) {
      set_err_no(from.err_no());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplyAskAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyAskAck::CopyFrom(const ReplyAskAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyAskAck::IsInitialized() const {

  return true;
}

void ReplyAskAck::Swap(ReplyAskAck* other) {
  if (other != this) {
    std::swap(friend_id_, other->friend_id_);
    std::swap(err_no_, other->err_no_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplyAskAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplyAskAck_descriptor_;
  metadata.reflection = ReplyAskAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

NewAskFriendNtf::NewAskFriendNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NewAskFriendNtf::InitAsDefaultInstance() {
}

NewAskFriendNtf::NewAskFriendNtf(const NewAskFriendNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NewAskFriendNtf::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NewAskFriendNtf::~NewAskFriendNtf() {
  SharedDtor();
}

void NewAskFriendNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NewAskFriendNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewAskFriendNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NewAskFriendNtf_descriptor_;
}

const NewAskFriendNtf& NewAskFriendNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

NewAskFriendNtf* NewAskFriendNtf::default_instance_ = NULL;

NewAskFriendNtf* NewAskFriendNtf::New() const {
  return new NewAskFriendNtf;
}

void NewAskFriendNtf::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NewAskFriendNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void NewAskFriendNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NewAskFriendNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NewAskFriendNtf::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewAskFriendNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NewAskFriendNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NewAskFriendNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NewAskFriendNtf::MergeFrom(const NewAskFriendNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NewAskFriendNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewAskFriendNtf::CopyFrom(const NewAskFriendNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewAskFriendNtf::IsInitialized() const {

  return true;
}

void NewAskFriendNtf::Swap(NewAskFriendNtf* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NewAskFriendNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NewAskFriendNtf_descriptor_;
  metadata.reflection = NewAskFriendNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetAskFriendStateReq::kBflagFieldNumber;
#endif  // !_MSC_VER

SetAskFriendStateReq::SetAskFriendStateReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetAskFriendStateReq::InitAsDefaultInstance() {
}

SetAskFriendStateReq::SetAskFriendStateReq(const SetAskFriendStateReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetAskFriendStateReq::SharedCtor() {
  _cached_size_ = 0;
  bflag_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetAskFriendStateReq::~SetAskFriendStateReq() {
  SharedDtor();
}

void SetAskFriendStateReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetAskFriendStateReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetAskFriendStateReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetAskFriendStateReq_descriptor_;
}

const SetAskFriendStateReq& SetAskFriendStateReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

SetAskFriendStateReq* SetAskFriendStateReq::default_instance_ = NULL;

SetAskFriendStateReq* SetAskFriendStateReq::New() const {
  return new SetAskFriendStateReq;
}

void SetAskFriendStateReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bflag_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetAskFriendStateReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool bflag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bflag_)));
          set_has_bflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetAskFriendStateReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool bflag = 1;
  if (has_bflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->bflag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetAskFriendStateReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool bflag = 1;
  if (has_bflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->bflag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetAskFriendStateReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool bflag = 1;
    if (has_bflag()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetAskFriendStateReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetAskFriendStateReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetAskFriendStateReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetAskFriendStateReq::MergeFrom(const SetAskFriendStateReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bflag()) {
      set_bflag(from.bflag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetAskFriendStateReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetAskFriendStateReq::CopyFrom(const SetAskFriendStateReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetAskFriendStateReq::IsInitialized() const {

  return true;
}

void SetAskFriendStateReq::Swap(SetAskFriendStateReq* other) {
  if (other != this) {
    std::swap(bflag_, other->bflag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetAskFriendStateReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetAskFriendStateReq_descriptor_;
  metadata.reflection = SetAskFriendStateReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetAskFriendStateAck::kBflagFieldNumber;
const int SetAskFriendStateAck::kErrNoFieldNumber;
#endif  // !_MSC_VER

SetAskFriendStateAck::SetAskFriendStateAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetAskFriendStateAck::InitAsDefaultInstance() {
}

SetAskFriendStateAck::SetAskFriendStateAck(const SetAskFriendStateAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetAskFriendStateAck::SharedCtor() {
  _cached_size_ = 0;
  bflag_ = false;
  err_no_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetAskFriendStateAck::~SetAskFriendStateAck() {
  SharedDtor();
}

void SetAskFriendStateAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetAskFriendStateAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetAskFriendStateAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetAskFriendStateAck_descriptor_;
}

const SetAskFriendStateAck& SetAskFriendStateAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

SetAskFriendStateAck* SetAskFriendStateAck::default_instance_ = NULL;

SetAskFriendStateAck* SetAskFriendStateAck::New() const {
  return new SetAskFriendStateAck;
}

void SetAskFriendStateAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bflag_ = false;
    err_no_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetAskFriendStateAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool bflag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bflag_)));
          set_has_bflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_err_no;
        break;
      }

      // optional int32 err_no = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_err_no:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_no_)));
          set_has_err_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetAskFriendStateAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool bflag = 1;
  if (has_bflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->bflag(), output);
  }

  // optional int32 err_no = 2;
  if (has_err_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->err_no(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetAskFriendStateAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool bflag = 1;
  if (has_bflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->bflag(), target);
  }

  // optional int32 err_no = 2;
  if (has_err_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->err_no(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetAskFriendStateAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool bflag = 1;
    if (has_bflag()) {
      total_size += 1 + 1;
    }

    // optional int32 err_no = 2;
    if (has_err_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err_no());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetAskFriendStateAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetAskFriendStateAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetAskFriendStateAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetAskFriendStateAck::MergeFrom(const SetAskFriendStateAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bflag()) {
      set_bflag(from.bflag());
    }
    if (from.has_err_no()) {
      set_err_no(from.err_no());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetAskFriendStateAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetAskFriendStateAck::CopyFrom(const SetAskFriendStateAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetAskFriendStateAck::IsInitialized() const {

  return true;
}

void SetAskFriendStateAck::Swap(SetAskFriendStateAck* other) {
  if (other != this) {
    std::swap(bflag_, other->bflag_);
    std::swap(err_no_, other->err_no_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetAskFriendStateAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetAskFriendStateAck_descriptor_;
  metadata.reflection = SetAskFriendStateAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetChapterReq::GetChapterReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetChapterReq::InitAsDefaultInstance() {
}

GetChapterReq::GetChapterReq(const GetChapterReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetChapterReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetChapterReq::~GetChapterReq() {
  SharedDtor();
}

void GetChapterReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetChapterReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetChapterReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetChapterReq_descriptor_;
}

const GetChapterReq& GetChapterReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

GetChapterReq* GetChapterReq::default_instance_ = NULL;

GetChapterReq* GetChapterReq::New() const {
  return new GetChapterReq;
}

void GetChapterReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetChapterReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetChapterReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetChapterReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetChapterReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetChapterReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetChapterReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetChapterReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetChapterReq::MergeFrom(const GetChapterReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetChapterReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetChapterReq::CopyFrom(const GetChapterReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetChapterReq::IsInitialized() const {

  return true;
}

void GetChapterReq::Swap(GetChapterReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetChapterReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetChapterReq_descriptor_;
  metadata.reflection = GetChapterReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OneCheckPoint::kCheckPointIdFieldNumber;
const int OneCheckPoint::kSecondsFieldNumber;
const int OneCheckPoint::kChallengedCountFieldNumber;
const int OneCheckPoint::kBuyChallengedCountFieldNumber;
#endif  // !_MSC_VER

OneCheckPoint::OneCheckPoint()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OneCheckPoint::InitAsDefaultInstance() {
}

OneCheckPoint::OneCheckPoint(const OneCheckPoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OneCheckPoint::SharedCtor() {
  _cached_size_ = 0;
  check_point_id_ = 0;
  seconds_ = 0;
  challenged_count_ = 0;
  buy_challenged_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OneCheckPoint::~OneCheckPoint() {
  SharedDtor();
}

void OneCheckPoint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OneCheckPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OneCheckPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OneCheckPoint_descriptor_;
}

const OneCheckPoint& OneCheckPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

OneCheckPoint* OneCheckPoint::default_instance_ = NULL;

OneCheckPoint* OneCheckPoint::New() const {
  return new OneCheckPoint;
}

void OneCheckPoint::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    check_point_id_ = 0;
    seconds_ = 0;
    challenged_count_ = 0;
    buy_challenged_count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OneCheckPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 check_point_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &check_point_id_)));
          set_has_check_point_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_seconds;
        break;
      }

      // optional int32 seconds = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seconds_)));
          set_has_seconds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_challenged_count;
        break;
      }

      // optional int32 challenged_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_challenged_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &challenged_count_)));
          set_has_challenged_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_buy_challenged_count;
        break;
      }

      // optional int32 buy_challenged_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_challenged_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buy_challenged_count_)));
          set_has_buy_challenged_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OneCheckPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 check_point_id = 1;
  if (has_check_point_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->check_point_id(), output);
  }

  // optional int32 seconds = 2;
  if (has_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seconds(), output);
  }

  // optional int32 challenged_count = 3;
  if (has_challenged_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->challenged_count(), output);
  }

  // optional int32 buy_challenged_count = 4;
  if (has_buy_challenged_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->buy_challenged_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OneCheckPoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 check_point_id = 1;
  if (has_check_point_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->check_point_id(), target);
  }

  // optional int32 seconds = 2;
  if (has_seconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seconds(), target);
  }

  // optional int32 challenged_count = 3;
  if (has_challenged_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->challenged_count(), target);
  }

  // optional int32 buy_challenged_count = 4;
  if (has_buy_challenged_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->buy_challenged_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OneCheckPoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 check_point_id = 1;
    if (has_check_point_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->check_point_id());
    }

    // optional int32 seconds = 2;
    if (has_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seconds());
    }

    // optional int32 challenged_count = 3;
    if (has_challenged_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->challenged_count());
    }

    // optional int32 buy_challenged_count = 4;
    if (has_buy_challenged_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buy_challenged_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OneCheckPoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OneCheckPoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OneCheckPoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OneCheckPoint::MergeFrom(const OneCheckPoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_check_point_id()) {
      set_check_point_id(from.check_point_id());
    }
    if (from.has_seconds()) {
      set_seconds(from.seconds());
    }
    if (from.has_challenged_count()) {
      set_challenged_count(from.challenged_count());
    }
    if (from.has_buy_challenged_count()) {
      set_buy_challenged_count(from.buy_challenged_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OneCheckPoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OneCheckPoint::CopyFrom(const OneCheckPoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OneCheckPoint::IsInitialized() const {

  return true;
}

void OneCheckPoint::Swap(OneCheckPoint* other) {
  if (other != this) {
    std::swap(check_point_id_, other->check_point_id_);
    std::swap(seconds_, other->seconds_);
    std::swap(challenged_count_, other->challenged_count_);
    std::swap(buy_challenged_count_, other->buy_challenged_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OneCheckPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OneCheckPoint_descriptor_;
  metadata.reflection = OneCheckPoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OneChapter::kChapterIdFieldNumber;
const int OneChapter::kPointsFieldNumber;
const int OneChapter::kChapterKindFieldNumber;
const int OneChapter::kChallengedCountFieldNumber;
const int OneChapter::kIsActiveChapterOpenFieldNumber;
const int OneChapter::kMaxChallengeCountFieldNumber;
const int OneChapter::kLoseTypeFieldNumber;
const int OneChapter::kTimesFieldNumber;
#endif  // !_MSC_VER

OneChapter::OneChapter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OneChapter::InitAsDefaultInstance() {
}

OneChapter::OneChapter(const OneChapter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OneChapter::SharedCtor() {
  _cached_size_ = 0;
  chapter_id_ = 0;
  chapter_kind_ = 0;
  challenged_count_ = 0;
  is_active_chapter_open_ = 0;
  max_challenge_count_ = 0;
  lose_type_ = 0;
  times_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OneChapter::~OneChapter() {
  SharedDtor();
}

void OneChapter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OneChapter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OneChapter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OneChapter_descriptor_;
}

const OneChapter& OneChapter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

OneChapter* OneChapter::default_instance_ = NULL;

OneChapter* OneChapter::New() const {
  return new OneChapter;
}

void OneChapter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chapter_id_ = 0;
    chapter_kind_ = 0;
    challenged_count_ = 0;
    is_active_chapter_open_ = 0;
    max_challenge_count_ = 0;
    lose_type_ = 0;
    times_ = 0;
  }
  points_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OneChapter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 chapter_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chapter_id_)));
          set_has_chapter_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_points;
        break;
      }

      // repeated .protoc.gameproto.OneCheckPoint points = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_points:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_points()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_points;
        if (input->ExpectTag(24)) goto parse_chapter_kind;
        break;
      }

      // optional int32 chapter_kind = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chapter_kind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chapter_kind_)));
          set_has_chapter_kind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_challenged_count;
        break;
      }

      // optional int32 challenged_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_challenged_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &challenged_count_)));
          set_has_challenged_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_is_active_chapter_open;
        break;
      }

      // optional int32 is_active_chapter_open = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_active_chapter_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_active_chapter_open_)));
          set_has_is_active_chapter_open();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_max_challenge_count;
        break;
      }

      // optional int32 max_challenge_count = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_challenge_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_challenge_count_)));
          set_has_max_challenge_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_lose_type;
        break;
      }

      // optional int32 lose_type = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lose_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lose_type_)));
          set_has_lose_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_times;
        break;
      }

      // optional float times = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OneChapter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 chapter_id = 1;
  if (has_chapter_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chapter_id(), output);
  }

  // repeated .protoc.gameproto.OneCheckPoint points = 2;
  for (int i = 0; i < this->points_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->points(i), output);
  }

  // optional int32 chapter_kind = 3;
  if (has_chapter_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->chapter_kind(), output);
  }

  // optional int32 challenged_count = 4;
  if (has_challenged_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->challenged_count(), output);
  }

  // optional int32 is_active_chapter_open = 5;
  if (has_is_active_chapter_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->is_active_chapter_open(), output);
  }

  // optional int32 max_challenge_count = 6;
  if (has_max_challenge_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->max_challenge_count(), output);
  }

  // optional int32 lose_type = 7;
  if (has_lose_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->lose_type(), output);
  }

  // optional float times = 8;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OneChapter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 chapter_id = 1;
  if (has_chapter_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chapter_id(), target);
  }

  // repeated .protoc.gameproto.OneCheckPoint points = 2;
  for (int i = 0; i < this->points_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->points(i), target);
  }

  // optional int32 chapter_kind = 3;
  if (has_chapter_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->chapter_kind(), target);
  }

  // optional int32 challenged_count = 4;
  if (has_challenged_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->challenged_count(), target);
  }

  // optional int32 is_active_chapter_open = 5;
  if (has_is_active_chapter_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->is_active_chapter_open(), target);
  }

  // optional int32 max_challenge_count = 6;
  if (has_max_challenge_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->max_challenge_count(), target);
  }

  // optional int32 lose_type = 7;
  if (has_lose_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->lose_type(), target);
  }

  // optional float times = 8;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OneChapter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 chapter_id = 1;
    if (has_chapter_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chapter_id());
    }

    // optional int32 chapter_kind = 3;
    if (has_chapter_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chapter_kind());
    }

    // optional int32 challenged_count = 4;
    if (has_challenged_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->challenged_count());
    }

    // optional int32 is_active_chapter_open = 5;
    if (has_is_active_chapter_open()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_active_chapter_open());
    }

    // optional int32 max_challenge_count = 6;
    if (has_max_challenge_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_challenge_count());
    }

    // optional int32 lose_type = 7;
    if (has_lose_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lose_type());
    }

    // optional float times = 8;
    if (has_times()) {
      total_size += 1 + 4;
    }

  }
  // repeated .protoc.gameproto.OneCheckPoint points = 2;
  total_size += 1 * this->points_size();
  for (int i = 0; i < this->points_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->points(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OneChapter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OneChapter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OneChapter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OneChapter::MergeFrom(const OneChapter& from) {
  GOOGLE_CHECK_NE(&from, this);
  points_.MergeFrom(from.points_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chapter_id()) {
      set_chapter_id(from.chapter_id());
    }
    if (from.has_chapter_kind()) {
      set_chapter_kind(from.chapter_kind());
    }
    if (from.has_challenged_count()) {
      set_challenged_count(from.challenged_count());
    }
    if (from.has_is_active_chapter_open()) {
      set_is_active_chapter_open(from.is_active_chapter_open());
    }
    if (from.has_max_challenge_count()) {
      set_max_challenge_count(from.max_challenge_count());
    }
    if (from.has_lose_type()) {
      set_lose_type(from.lose_type());
    }
    if (from.has_times()) {
      set_times(from.times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OneChapter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OneChapter::CopyFrom(const OneChapter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OneChapter::IsInitialized() const {

  return true;
}

void OneChapter::Swap(OneChapter* other) {
  if (other != this) {
    std::swap(chapter_id_, other->chapter_id_);
    points_.Swap(&other->points_);
    std::swap(chapter_kind_, other->chapter_kind_);
    std::swap(challenged_count_, other->challenged_count_);
    std::swap(is_active_chapter_open_, other->is_active_chapter_open_);
    std::swap(max_challenge_count_, other->max_challenge_count_);
    std::swap(lose_type_, other->lose_type_);
    std::swap(times_, other->times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OneChapter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OneChapter_descriptor_;
  metadata.reflection = OneChapter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetChapterAck::kChaptersFieldNumber;
const int GetChapterAck::kChapterIdFieldNumber;
const int GetChapterAck::kCheckPointIdFieldNumber;
const int GetChapterAck::kNextChapterIdFieldNumber;
const int GetChapterAck::kNextCheckPointIdFieldNumber;
const int GetChapterAck::kJingyingChapterIdFieldNumber;
const int GetChapterAck::kJingyingCheckPointIdFieldNumber;
const int GetChapterAck::kJingyingNextChapterIdFieldNumber;
const int GetChapterAck::kJingyingNextCheckPointIdFieldNumber;
#endif  // !_MSC_VER

GetChapterAck::GetChapterAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetChapterAck::InitAsDefaultInstance() {
}

GetChapterAck::GetChapterAck(const GetChapterAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetChapterAck::SharedCtor() {
  _cached_size_ = 0;
  chapter_id_ = 0;
  check_point_id_ = 0;
  next_chapter_id_ = 0;
  next_check_point_id_ = 0;
  jingying_chapter_id_ = 0;
  jingying_check_point_id_ = 0;
  jingying_next_chapter_id_ = 0;
  jingying_next_check_point_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetChapterAck::~GetChapterAck() {
  SharedDtor();
}

void GetChapterAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetChapterAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetChapterAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetChapterAck_descriptor_;
}

const GetChapterAck& GetChapterAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

GetChapterAck* GetChapterAck::default_instance_ = NULL;

GetChapterAck* GetChapterAck::New() const {
  return new GetChapterAck;
}

void GetChapterAck::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    chapter_id_ = 0;
    check_point_id_ = 0;
    next_chapter_id_ = 0;
    next_check_point_id_ = 0;
    jingying_chapter_id_ = 0;
    jingying_check_point_id_ = 0;
    jingying_next_chapter_id_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    jingying_next_check_point_id_ = 0;
  }
  chapters_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetChapterAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protoc.gameproto.OneChapter chapters = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chapters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chapters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_chapters;
        if (input->ExpectTag(16)) goto parse_chapter_id;
        break;
      }

      // optional int32 chapter_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chapter_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chapter_id_)));
          set_has_chapter_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_check_point_id;
        break;
      }

      // optional int32 check_point_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_check_point_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &check_point_id_)));
          set_has_check_point_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_next_chapter_id;
        break;
      }

      // optional int32 next_chapter_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_next_chapter_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &next_chapter_id_)));
          set_has_next_chapter_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_next_check_point_id;
        break;
      }

      // optional int32 next_check_point_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_next_check_point_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &next_check_point_id_)));
          set_has_next_check_point_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_jingying_chapter_id;
        break;
      }

      // optional int32 jingying_chapter_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jingying_chapter_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jingying_chapter_id_)));
          set_has_jingying_chapter_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_jingying_check_point_id;
        break;
      }

      // optional int32 jingying_check_point_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jingying_check_point_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jingying_check_point_id_)));
          set_has_jingying_check_point_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_jingying_next_chapter_id;
        break;
      }

      // optional int32 jingying_next_chapter_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jingying_next_chapter_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jingying_next_chapter_id_)));
          set_has_jingying_next_chapter_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_jingying_next_check_point_id;
        break;
      }

      // optional int32 jingying_next_check_point_id = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jingying_next_check_point_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jingying_next_check_point_id_)));
          set_has_jingying_next_check_point_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetChapterAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protoc.gameproto.OneChapter chapters = 1;
  for (int i = 0; i < this->chapters_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->chapters(i), output);
  }

  // optional int32 chapter_id = 2;
  if (has_chapter_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->chapter_id(), output);
  }

  // optional int32 check_point_id = 3;
  if (has_check_point_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->check_point_id(), output);
  }

  // optional int32 next_chapter_id = 4;
  if (has_next_chapter_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->next_chapter_id(), output);
  }

  // optional int32 next_check_point_id = 5;
  if (has_next_check_point_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->next_check_point_id(), output);
  }

  // optional int32 jingying_chapter_id = 6;
  if (has_jingying_chapter_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->jingying_chapter_id(), output);
  }

  // optional int32 jingying_check_point_id = 7;
  if (has_jingying_check_point_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->jingying_check_point_id(), output);
  }

  // optional int32 jingying_next_chapter_id = 8;
  if (has_jingying_next_chapter_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->jingying_next_chapter_id(), output);
  }

  // optional int32 jingying_next_check_point_id = 9;
  if (has_jingying_next_check_point_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->jingying_next_check_point_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetChapterAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protoc.gameproto.OneChapter chapters = 1;
  for (int i = 0; i < this->chapters_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->chapters(i), target);
  }

  // optional int32 chapter_id = 2;
  if (has_chapter_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->chapter_id(), target);
  }

  // optional int32 check_point_id = 3;
  if (has_check_point_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->check_point_id(), target);
  }

  // optional int32 next_chapter_id = 4;
  if (has_next_chapter_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->next_chapter_id(), target);
  }

  // optional int32 next_check_point_id = 5;
  if (has_next_check_point_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->next_check_point_id(), target);
  }

  // optional int32 jingying_chapter_id = 6;
  if (has_jingying_chapter_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->jingying_chapter_id(), target);
  }

  // optional int32 jingying_check_point_id = 7;
  if (has_jingying_check_point_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->jingying_check_point_id(), target);
  }

  // optional int32 jingying_next_chapter_id = 8;
  if (has_jingying_next_chapter_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->jingying_next_chapter_id(), target);
  }

  // optional int32 jingying_next_check_point_id = 9;
  if (has_jingying_next_check_point_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->jingying_next_check_point_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetChapterAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 chapter_id = 2;
    if (has_chapter_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chapter_id());
    }

    // optional int32 check_point_id = 3;
    if (has_check_point_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->check_point_id());
    }

    // optional int32 next_chapter_id = 4;
    if (has_next_chapter_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->next_chapter_id());
    }

    // optional int32 next_check_point_id = 5;
    if (has_next_check_point_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->next_check_point_id());
    }

    // optional int32 jingying_chapter_id = 6;
    if (has_jingying_chapter_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jingying_chapter_id());
    }

    // optional int32 jingying_check_point_id = 7;
    if (has_jingying_check_point_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jingying_check_point_id());
    }

    // optional int32 jingying_next_chapter_id = 8;
    if (has_jingying_next_chapter_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jingying_next_chapter_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 jingying_next_check_point_id = 9;
    if (has_jingying_next_check_point_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jingying_next_check_point_id());
    }

  }
  // repeated .protoc.gameproto.OneChapter chapters = 1;
  total_size += 1 * this->chapters_size();
  for (int i = 0; i < this->chapters_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chapters(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetChapterAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetChapterAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetChapterAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetChapterAck::MergeFrom(const GetChapterAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  chapters_.MergeFrom(from.chapters_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_chapter_id()) {
      set_chapter_id(from.chapter_id());
    }
    if (from.has_check_point_id()) {
      set_check_point_id(from.check_point_id());
    }
    if (from.has_next_chapter_id()) {
      set_next_chapter_id(from.next_chapter_id());
    }
    if (from.has_next_check_point_id()) {
      set_next_check_point_id(from.next_check_point_id());
    }
    if (from.has_jingying_chapter_id()) {
      set_jingying_chapter_id(from.jingying_chapter_id());
    }
    if (from.has_jingying_check_point_id()) {
      set_jingying_check_point_id(from.jingying_check_point_id());
    }
    if (from.has_jingying_next_chapter_id()) {
      set_jingying_next_chapter_id(from.jingying_next_chapter_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_jingying_next_check_point_id()) {
      set_jingying_next_check_point_id(from.jingying_next_check_point_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetChapterAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetChapterAck::CopyFrom(const GetChapterAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetChapterAck::IsInitialized() const {

  return true;
}

void GetChapterAck::Swap(GetChapterAck* other) {
  if (other != this) {
    chapters_.Swap(&other->chapters_);
    std::swap(chapter_id_, other->chapter_id_);
    std::swap(check_point_id_, other->check_point_id_);
    std::swap(next_chapter_id_, other->next_chapter_id_);
    std::swap(next_check_point_id_, other->next_check_point_id_);
    std::swap(jingying_chapter_id_, other->jingying_chapter_id_);
    std::swap(jingying_check_point_id_, other->jingying_check_point_id_);
    std::swap(jingying_next_chapter_id_, other->jingying_next_chapter_id_);
    std::swap(jingying_next_check_point_id_, other->jingying_next_check_point_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetChapterAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetChapterAck_descriptor_;
  metadata.reflection = GetChapterAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OneChapterLoseActivity::kChapterKindFieldNumber;
const int OneChapterLoseActivity::kChapterIdFieldNumber;
const int OneChapterLoseActivity::kLoseTypeFieldNumber;
const int OneChapterLoseActivity::kTimesFieldNumber;
#endif  // !_MSC_VER

OneChapterLoseActivity::OneChapterLoseActivity()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OneChapterLoseActivity::InitAsDefaultInstance() {
}

OneChapterLoseActivity::OneChapterLoseActivity(const OneChapterLoseActivity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OneChapterLoseActivity::SharedCtor() {
  _cached_size_ = 0;
  chapter_kind_ = 0;
  chapter_id_ = 0;
  lose_type_ = 0;
  times_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OneChapterLoseActivity::~OneChapterLoseActivity() {
  SharedDtor();
}

void OneChapterLoseActivity::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OneChapterLoseActivity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OneChapterLoseActivity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OneChapterLoseActivity_descriptor_;
}

const OneChapterLoseActivity& OneChapterLoseActivity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

OneChapterLoseActivity* OneChapterLoseActivity::default_instance_ = NULL;

OneChapterLoseActivity* OneChapterLoseActivity::New() const {
  return new OneChapterLoseActivity;
}

void OneChapterLoseActivity::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chapter_kind_ = 0;
    chapter_id_ = 0;
    lose_type_ = 0;
    times_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OneChapterLoseActivity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 chapter_kind = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chapter_kind_)));
          set_has_chapter_kind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_chapter_id;
        break;
      }

      // optional int32 chapter_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chapter_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chapter_id_)));
          set_has_chapter_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lose_type;
        break;
      }

      // optional int32 lose_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lose_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lose_type_)));
          set_has_lose_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_times;
        break;
      }

      // optional float times = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OneChapterLoseActivity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 chapter_kind = 1;
  if (has_chapter_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chapter_kind(), output);
  }

  // optional int32 chapter_id = 2;
  if (has_chapter_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->chapter_id(), output);
  }

  // optional int32 lose_type = 3;
  if (has_lose_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->lose_type(), output);
  }

  // optional float times = 4;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OneChapterLoseActivity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 chapter_kind = 1;
  if (has_chapter_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chapter_kind(), target);
  }

  // optional int32 chapter_id = 2;
  if (has_chapter_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->chapter_id(), target);
  }

  // optional int32 lose_type = 3;
  if (has_lose_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->lose_type(), target);
  }

  // optional float times = 4;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OneChapterLoseActivity::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 chapter_kind = 1;
    if (has_chapter_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chapter_kind());
    }

    // optional int32 chapter_id = 2;
    if (has_chapter_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chapter_id());
    }

    // optional int32 lose_type = 3;
    if (has_lose_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lose_type());
    }

    // optional float times = 4;
    if (has_times()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OneChapterLoseActivity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OneChapterLoseActivity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OneChapterLoseActivity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OneChapterLoseActivity::MergeFrom(const OneChapterLoseActivity& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chapter_kind()) {
      set_chapter_kind(from.chapter_kind());
    }
    if (from.has_chapter_id()) {
      set_chapter_id(from.chapter_id());
    }
    if (from.has_lose_type()) {
      set_lose_type(from.lose_type());
    }
    if (from.has_times()) {
      set_times(from.times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OneChapterLoseActivity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OneChapterLoseActivity::CopyFrom(const OneChapterLoseActivity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OneChapterLoseActivity::IsInitialized() const {

  return true;
}

void OneChapterLoseActivity::Swap(OneChapterLoseActivity* other) {
  if (other != this) {
    std::swap(chapter_kind_, other->chapter_kind_);
    std::swap(chapter_id_, other->chapter_id_);
    std::swap(lose_type_, other->lose_type_);
    std::swap(times_, other->times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OneChapterLoseActivity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OneChapterLoseActivity_descriptor_;
  metadata.reflection = OneChapterLoseActivity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChaptersLoseActivityNtf::kBeginTimeFieldNumber;
const int ChaptersLoseActivityNtf::kEndTimeFieldNumber;
const int ChaptersLoseActivityNtf::kChapterLoseActivitiesFieldNumber;
#endif  // !_MSC_VER

ChaptersLoseActivityNtf::ChaptersLoseActivityNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChaptersLoseActivityNtf::InitAsDefaultInstance() {
}

ChaptersLoseActivityNtf::ChaptersLoseActivityNtf(const ChaptersLoseActivityNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChaptersLoseActivityNtf::SharedCtor() {
  _cached_size_ = 0;
  begin_time_ = GOOGLE_LONGLONG(0);
  end_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChaptersLoseActivityNtf::~ChaptersLoseActivityNtf() {
  SharedDtor();
}

void ChaptersLoseActivityNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChaptersLoseActivityNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChaptersLoseActivityNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChaptersLoseActivityNtf_descriptor_;
}

const ChaptersLoseActivityNtf& ChaptersLoseActivityNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

ChaptersLoseActivityNtf* ChaptersLoseActivityNtf::default_instance_ = NULL;

ChaptersLoseActivityNtf* ChaptersLoseActivityNtf::New() const {
  return new ChaptersLoseActivityNtf;
}

void ChaptersLoseActivityNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    begin_time_ = GOOGLE_LONGLONG(0);
    end_time_ = GOOGLE_LONGLONG(0);
  }
  chapter_lose_activities_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChaptersLoseActivityNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 begin_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &begin_time_)));
          set_has_begin_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_end_time;
        break;
      }

      // optional int64 end_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_chapter_lose_activities;
        break;
      }

      // repeated .protoc.gameproto.OneChapterLoseActivity chapter_lose_activities = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chapter_lose_activities:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chapter_lose_activities()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_chapter_lose_activities;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChaptersLoseActivityNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 begin_time = 1;
  if (has_begin_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->begin_time(), output);
  }

  // optional int64 end_time = 2;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->end_time(), output);
  }

  // repeated .protoc.gameproto.OneChapterLoseActivity chapter_lose_activities = 3;
  for (int i = 0; i < this->chapter_lose_activities_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->chapter_lose_activities(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChaptersLoseActivityNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 begin_time = 1;
  if (has_begin_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->begin_time(), target);
  }

  // optional int64 end_time = 2;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->end_time(), target);
  }

  // repeated .protoc.gameproto.OneChapterLoseActivity chapter_lose_activities = 3;
  for (int i = 0; i < this->chapter_lose_activities_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->chapter_lose_activities(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChaptersLoseActivityNtf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 begin_time = 1;
    if (has_begin_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->begin_time());
    }

    // optional int64 end_time = 2;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->end_time());
    }

  }
  // repeated .protoc.gameproto.OneChapterLoseActivity chapter_lose_activities = 3;
  total_size += 1 * this->chapter_lose_activities_size();
  for (int i = 0; i < this->chapter_lose_activities_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chapter_lose_activities(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChaptersLoseActivityNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChaptersLoseActivityNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChaptersLoseActivityNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChaptersLoseActivityNtf::MergeFrom(const ChaptersLoseActivityNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  chapter_lose_activities_.MergeFrom(from.chapter_lose_activities_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_begin_time()) {
      set_begin_time(from.begin_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChaptersLoseActivityNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChaptersLoseActivityNtf::CopyFrom(const ChaptersLoseActivityNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChaptersLoseActivityNtf::IsInitialized() const {

  return true;
}

void ChaptersLoseActivityNtf::Swap(ChaptersLoseActivityNtf* other) {
  if (other != this) {
    std::swap(begin_time_, other->begin_time_);
    std::swap(end_time_, other->end_time_);
    chapter_lose_activities_.Swap(&other->chapter_lose_activities_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChaptersLoseActivityNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChaptersLoseActivityNtf_descriptor_;
  metadata.reflection = ChaptersLoseActivityNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddActiveChapterNtf::kChaptersFieldNumber;
#endif  // !_MSC_VER

AddActiveChapterNtf::AddActiveChapterNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddActiveChapterNtf::InitAsDefaultInstance() {
}

AddActiveChapterNtf::AddActiveChapterNtf(const AddActiveChapterNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddActiveChapterNtf::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddActiveChapterNtf::~AddActiveChapterNtf() {
  SharedDtor();
}

void AddActiveChapterNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddActiveChapterNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddActiveChapterNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddActiveChapterNtf_descriptor_;
}

const AddActiveChapterNtf& AddActiveChapterNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

AddActiveChapterNtf* AddActiveChapterNtf::default_instance_ = NULL;

AddActiveChapterNtf* AddActiveChapterNtf::New() const {
  return new AddActiveChapterNtf;
}

void AddActiveChapterNtf::Clear() {
  chapters_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddActiveChapterNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protoc.gameproto.OneChapter chapters = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chapters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chapters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_chapters;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddActiveChapterNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protoc.gameproto.OneChapter chapters = 1;
  for (int i = 0; i < this->chapters_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->chapters(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddActiveChapterNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protoc.gameproto.OneChapter chapters = 1;
  for (int i = 0; i < this->chapters_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->chapters(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddActiveChapterNtf::ByteSize() const {
  int total_size = 0;

  // repeated .protoc.gameproto.OneChapter chapters = 1;
  total_size += 1 * this->chapters_size();
  for (int i = 0; i < this->chapters_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chapters(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddActiveChapterNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddActiveChapterNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddActiveChapterNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddActiveChapterNtf::MergeFrom(const AddActiveChapterNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  chapters_.MergeFrom(from.chapters_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddActiveChapterNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddActiveChapterNtf::CopyFrom(const AddActiveChapterNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddActiveChapterNtf::IsInitialized() const {

  return true;
}

void AddActiveChapterNtf::Swap(AddActiveChapterNtf* other) {
  if (other != this) {
    chapters_.Swap(&other->chapters_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddActiveChapterNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddActiveChapterNtf_descriptor_;
  metadata.reflection = AddActiveChapterNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateCheckPointNtf::kChapterIdFieldNumber;
const int UpdateCheckPointNtf::kOnePointFieldNumber;
const int UpdateCheckPointNtf::kNextChapterIdFieldNumber;
const int UpdateCheckPointNtf::kNextCheckPointIdFieldNumber;
const int UpdateCheckPointNtf::kChapterKindFieldNumber;
const int UpdateCheckPointNtf::kJingyingChapterOpenFieldNumber;
const int UpdateCheckPointNtf::kJingyingChapterIdFieldNumber;
const int UpdateCheckPointNtf::kJingyingCheckPointIdFieldNumber;
#endif  // !_MSC_VER

UpdateCheckPointNtf::UpdateCheckPointNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateCheckPointNtf::InitAsDefaultInstance() {
  one_point_ = const_cast< ::protoc::gameproto::OneCheckPoint*>(&::protoc::gameproto::OneCheckPoint::default_instance());
}

UpdateCheckPointNtf::UpdateCheckPointNtf(const UpdateCheckPointNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateCheckPointNtf::SharedCtor() {
  _cached_size_ = 0;
  chapter_id_ = 0;
  one_point_ = NULL;
  next_chapter_id_ = 0;
  next_check_point_id_ = 0;
  chapter_kind_ = 0;
  jingying_chapter_open_ = 0;
  jingying_chapter_id_ = 0;
  jingying_check_point_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateCheckPointNtf::~UpdateCheckPointNtf() {
  SharedDtor();
}

void UpdateCheckPointNtf::SharedDtor() {
  if (this != default_instance_) {
    delete one_point_;
  }
}

void UpdateCheckPointNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateCheckPointNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateCheckPointNtf_descriptor_;
}

const UpdateCheckPointNtf& UpdateCheckPointNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

UpdateCheckPointNtf* UpdateCheckPointNtf::default_instance_ = NULL;

UpdateCheckPointNtf* UpdateCheckPointNtf::New() const {
  return new UpdateCheckPointNtf;
}

void UpdateCheckPointNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chapter_id_ = 0;
    if (has_one_point()) {
      if (one_point_ != NULL) one_point_->::protoc::gameproto::OneCheckPoint::Clear();
    }
    next_chapter_id_ = 0;
    next_check_point_id_ = 0;
    chapter_kind_ = 0;
    jingying_chapter_open_ = 0;
    jingying_chapter_id_ = 0;
    jingying_check_point_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateCheckPointNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 chapter_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chapter_id_)));
          set_has_chapter_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_one_point;
        break;
      }

      // optional .protoc.gameproto.OneCheckPoint one_point = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_one_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_one_point()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_next_chapter_id;
        break;
      }

      // optional int32 next_chapter_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_next_chapter_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &next_chapter_id_)));
          set_has_next_chapter_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_next_check_point_id;
        break;
      }

      // optional int32 next_check_point_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_next_check_point_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &next_check_point_id_)));
          set_has_next_check_point_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_chapter_kind;
        break;
      }

      // optional int32 chapter_kind = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chapter_kind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chapter_kind_)));
          set_has_chapter_kind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_jingying_chapter_open;
        break;
      }

      // optional int32 jingying_chapter_open = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jingying_chapter_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jingying_chapter_open_)));
          set_has_jingying_chapter_open();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_jingying_chapter_id;
        break;
      }

      // optional int32 jingying_chapter_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jingying_chapter_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jingying_chapter_id_)));
          set_has_jingying_chapter_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_jingying_check_point_id;
        break;
      }

      // optional int32 jingying_check_point_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jingying_check_point_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jingying_check_point_id_)));
          set_has_jingying_check_point_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateCheckPointNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 chapter_id = 1;
  if (has_chapter_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chapter_id(), output);
  }

  // optional .protoc.gameproto.OneCheckPoint one_point = 2;
  if (has_one_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->one_point(), output);
  }

  // optional int32 next_chapter_id = 3;
  if (has_next_chapter_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->next_chapter_id(), output);
  }

  // optional int32 next_check_point_id = 4;
  if (has_next_check_point_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->next_check_point_id(), output);
  }

  // optional int32 chapter_kind = 5;
  if (has_chapter_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->chapter_kind(), output);
  }

  // optional int32 jingying_chapter_open = 6;
  if (has_jingying_chapter_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->jingying_chapter_open(), output);
  }

  // optional int32 jingying_chapter_id = 7;
  if (has_jingying_chapter_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->jingying_chapter_id(), output);
  }

  // optional int32 jingying_check_point_id = 8;
  if (has_jingying_check_point_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->jingying_check_point_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateCheckPointNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 chapter_id = 1;
  if (has_chapter_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chapter_id(), target);
  }

  // optional .protoc.gameproto.OneCheckPoint one_point = 2;
  if (has_one_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->one_point(), target);
  }

  // optional int32 next_chapter_id = 3;
  if (has_next_chapter_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->next_chapter_id(), target);
  }

  // optional int32 next_check_point_id = 4;
  if (has_next_check_point_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->next_check_point_id(), target);
  }

  // optional int32 chapter_kind = 5;
  if (has_chapter_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->chapter_kind(), target);
  }

  // optional int32 jingying_chapter_open = 6;
  if (has_jingying_chapter_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->jingying_chapter_open(), target);
  }

  // optional int32 jingying_chapter_id = 7;
  if (has_jingying_chapter_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->jingying_chapter_id(), target);
  }

  // optional int32 jingying_check_point_id = 8;
  if (has_jingying_check_point_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->jingying_check_point_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateCheckPointNtf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 chapter_id = 1;
    if (has_chapter_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chapter_id());
    }

    // optional .protoc.gameproto.OneCheckPoint one_point = 2;
    if (has_one_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->one_point());
    }

    // optional int32 next_chapter_id = 3;
    if (has_next_chapter_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->next_chapter_id());
    }

    // optional int32 next_check_point_id = 4;
    if (has_next_check_point_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->next_check_point_id());
    }

    // optional int32 chapter_kind = 5;
    if (has_chapter_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chapter_kind());
    }

    // optional int32 jingying_chapter_open = 6;
    if (has_jingying_chapter_open()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jingying_chapter_open());
    }

    // optional int32 jingying_chapter_id = 7;
    if (has_jingying_chapter_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jingying_chapter_id());
    }

    // optional int32 jingying_check_point_id = 8;
    if (has_jingying_check_point_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jingying_check_point_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateCheckPointNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateCheckPointNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateCheckPointNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateCheckPointNtf::MergeFrom(const UpdateCheckPointNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chapter_id()) {
      set_chapter_id(from.chapter_id());
    }
    if (from.has_one_point()) {
      mutable_one_point()->::protoc::gameproto::OneCheckPoint::MergeFrom(from.one_point());
    }
    if (from.has_next_chapter_id()) {
      set_next_chapter_id(from.next_chapter_id());
    }
    if (from.has_next_check_point_id()) {
      set_next_check_point_id(from.next_check_point_id());
    }
    if (from.has_chapter_kind()) {
      set_chapter_kind(from.chapter_kind());
    }
    if (from.has_jingying_chapter_open()) {
      set_jingying_chapter_open(from.jingying_chapter_open());
    }
    if (from.has_jingying_chapter_id()) {
      set_jingying_chapter_id(from.jingying_chapter_id());
    }
    if (from.has_jingying_check_point_id()) {
      set_jingying_check_point_id(from.jingying_check_point_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateCheckPointNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateCheckPointNtf::CopyFrom(const UpdateCheckPointNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateCheckPointNtf::IsInitialized() const {

  return true;
}

void UpdateCheckPointNtf::Swap(UpdateCheckPointNtf* other) {
  if (other != this) {
    std::swap(chapter_id_, other->chapter_id_);
    std::swap(one_point_, other->one_point_);
    std::swap(next_chapter_id_, other->next_chapter_id_);
    std::swap(next_check_point_id_, other->next_check_point_id_);
    std::swap(chapter_kind_, other->chapter_kind_);
    std::swap(jingying_chapter_open_, other->jingying_chapter_open_);
    std::swap(jingying_chapter_id_, other->jingying_chapter_id_);
    std::swap(jingying_check_point_id_, other->jingying_check_point_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateCheckPointNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateCheckPointNtf_descriptor_;
  metadata.reflection = UpdateCheckPointNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SelectCheckPointReq::kChapterIdFieldNumber;
const int SelectCheckPointReq::kCheckPointIdFieldNumber;
const int SelectCheckPointReq::kChapterKindFieldNumber;
#endif  // !_MSC_VER

SelectCheckPointReq::SelectCheckPointReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SelectCheckPointReq::InitAsDefaultInstance() {
}

SelectCheckPointReq::SelectCheckPointReq(const SelectCheckPointReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SelectCheckPointReq::SharedCtor() {
  _cached_size_ = 0;
  chapter_id_ = 0;
  check_point_id_ = 0;
  chapter_kind_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SelectCheckPointReq::~SelectCheckPointReq() {
  SharedDtor();
}

void SelectCheckPointReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SelectCheckPointReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SelectCheckPointReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SelectCheckPointReq_descriptor_;
}

const SelectCheckPointReq& SelectCheckPointReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

SelectCheckPointReq* SelectCheckPointReq::default_instance_ = NULL;

SelectCheckPointReq* SelectCheckPointReq::New() const {
  return new SelectCheckPointReq;
}

void SelectCheckPointReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chapter_id_ = 0;
    check_point_id_ = 0;
    chapter_kind_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SelectCheckPointReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 chapter_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chapter_id_)));
          set_has_chapter_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_check_point_id;
        break;
      }

      // optional int32 check_point_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_check_point_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &check_point_id_)));
          set_has_check_point_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_chapter_kind;
        break;
      }

      // optional int32 chapter_kind = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chapter_kind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chapter_kind_)));
          set_has_chapter_kind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SelectCheckPointReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 chapter_id = 1;
  if (has_chapter_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chapter_id(), output);
  }

  // optional int32 check_point_id = 2;
  if (has_check_point_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->check_point_id(), output);
  }

  // optional int32 chapter_kind = 3;
  if (has_chapter_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->chapter_kind(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SelectCheckPointReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 chapter_id = 1;
  if (has_chapter_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chapter_id(), target);
  }

  // optional int32 check_point_id = 2;
  if (has_check_point_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->check_point_id(), target);
  }

  // optional int32 chapter_kind = 3;
  if (has_chapter_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->chapter_kind(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SelectCheckPointReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 chapter_id = 1;
    if (has_chapter_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chapter_id());
    }

    // optional int32 check_point_id = 2;
    if (has_check_point_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->check_point_id());
    }

    // optional int32 chapter_kind = 3;
    if (has_chapter_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chapter_kind());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SelectCheckPointReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SelectCheckPointReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SelectCheckPointReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SelectCheckPointReq::MergeFrom(const SelectCheckPointReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chapter_id()) {
      set_chapter_id(from.chapter_id());
    }
    if (from.has_check_point_id()) {
      set_check_point_id(from.check_point_id());
    }
    if (from.has_chapter_kind()) {
      set_chapter_kind(from.chapter_kind());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SelectCheckPointReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SelectCheckPointReq::CopyFrom(const SelectCheckPointReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectCheckPointReq::IsInitialized() const {

  return true;
}

void SelectCheckPointReq::Swap(SelectCheckPointReq* other) {
  if (other != this) {
    std::swap(chapter_id_, other->chapter_id_);
    std::swap(check_point_id_, other->check_point_id_);
    std::swap(chapter_kind_, other->chapter_kind_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SelectCheckPointReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SelectCheckPointReq_descriptor_;
  metadata.reflection = SelectCheckPointReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SelectCheckPointAck::kChapterIdFieldNumber;
const int SelectCheckPointAck::kCheckPointIdFieldNumber;
const int SelectCheckPointAck::kErrNoFieldNumber;
const int SelectCheckPointAck::kChapterKindFieldNumber;
const int SelectCheckPointAck::kChallengedCountFieldNumber;
const int SelectCheckPointAck::kBuyChallengedCountFieldNumber;
#endif  // !_MSC_VER

SelectCheckPointAck::SelectCheckPointAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SelectCheckPointAck::InitAsDefaultInstance() {
}

SelectCheckPointAck::SelectCheckPointAck(const SelectCheckPointAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SelectCheckPointAck::SharedCtor() {
  _cached_size_ = 0;
  chapter_id_ = 0;
  check_point_id_ = 0;
  err_no_ = 0;
  chapter_kind_ = 0;
  challenged_count_ = 0;
  buy_challenged_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SelectCheckPointAck::~SelectCheckPointAck() {
  SharedDtor();
}

void SelectCheckPointAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SelectCheckPointAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SelectCheckPointAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SelectCheckPointAck_descriptor_;
}

const SelectCheckPointAck& SelectCheckPointAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

SelectCheckPointAck* SelectCheckPointAck::default_instance_ = NULL;

SelectCheckPointAck* SelectCheckPointAck::New() const {
  return new SelectCheckPointAck;
}

void SelectCheckPointAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chapter_id_ = 0;
    check_point_id_ = 0;
    err_no_ = 0;
    chapter_kind_ = 0;
    challenged_count_ = 0;
    buy_challenged_count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SelectCheckPointAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 chapter_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chapter_id_)));
          set_has_chapter_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_check_point_id;
        break;
      }

      // optional int32 check_point_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_check_point_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &check_point_id_)));
          set_has_check_point_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_err_no;
        break;
      }

      // optional int32 err_no = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_err_no:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_no_)));
          set_has_err_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_chapter_kind;
        break;
      }

      // optional int32 chapter_kind = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chapter_kind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chapter_kind_)));
          set_has_chapter_kind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_challenged_count;
        break;
      }

      // optional int32 challenged_count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_challenged_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &challenged_count_)));
          set_has_challenged_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_buy_challenged_count;
        break;
      }

      // optional int32 buy_challenged_count = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_challenged_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buy_challenged_count_)));
          set_has_buy_challenged_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SelectCheckPointAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 chapter_id = 1;
  if (has_chapter_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chapter_id(), output);
  }

  // optional int32 check_point_id = 2;
  if (has_check_point_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->check_point_id(), output);
  }

  // optional int32 err_no = 3;
  if (has_err_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->err_no(), output);
  }

  // optional int32 chapter_kind = 4;
  if (has_chapter_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->chapter_kind(), output);
  }

  // optional int32 challenged_count = 5;
  if (has_challenged_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->challenged_count(), output);
  }

  // optional int32 buy_challenged_count = 6;
  if (has_buy_challenged_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->buy_challenged_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SelectCheckPointAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 chapter_id = 1;
  if (has_chapter_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chapter_id(), target);
  }

  // optional int32 check_point_id = 2;
  if (has_check_point_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->check_point_id(), target);
  }

  // optional int32 err_no = 3;
  if (has_err_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->err_no(), target);
  }

  // optional int32 chapter_kind = 4;
  if (has_chapter_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->chapter_kind(), target);
  }

  // optional int32 challenged_count = 5;
  if (has_challenged_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->challenged_count(), target);
  }

  // optional int32 buy_challenged_count = 6;
  if (has_buy_challenged_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->buy_challenged_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SelectCheckPointAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 chapter_id = 1;
    if (has_chapter_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chapter_id());
    }

    // optional int32 check_point_id = 2;
    if (has_check_point_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->check_point_id());
    }

    // optional int32 err_no = 3;
    if (has_err_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err_no());
    }

    // optional int32 chapter_kind = 4;
    if (has_chapter_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chapter_kind());
    }

    // optional int32 challenged_count = 5;
    if (has_challenged_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->challenged_count());
    }

    // optional int32 buy_challenged_count = 6;
    if (has_buy_challenged_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buy_challenged_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SelectCheckPointAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SelectCheckPointAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SelectCheckPointAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SelectCheckPointAck::MergeFrom(const SelectCheckPointAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chapter_id()) {
      set_chapter_id(from.chapter_id());
    }
    if (from.has_check_point_id()) {
      set_check_point_id(from.check_point_id());
    }
    if (from.has_err_no()) {
      set_err_no(from.err_no());
    }
    if (from.has_chapter_kind()) {
      set_chapter_kind(from.chapter_kind());
    }
    if (from.has_challenged_count()) {
      set_challenged_count(from.challenged_count());
    }
    if (from.has_buy_challenged_count()) {
      set_buy_challenged_count(from.buy_challenged_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SelectCheckPointAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SelectCheckPointAck::CopyFrom(const SelectCheckPointAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectCheckPointAck::IsInitialized() const {

  return true;
}

void SelectCheckPointAck::Swap(SelectCheckPointAck* other) {
  if (other != this) {
    std::swap(chapter_id_, other->chapter_id_);
    std::swap(check_point_id_, other->check_point_id_);
    std::swap(err_no_, other->err_no_);
    std::swap(chapter_kind_, other->chapter_kind_);
    std::swap(challenged_count_, other->challenged_count_);
    std::swap(buy_challenged_count_, other->buy_challenged_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SelectCheckPointAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SelectCheckPointAck_descriptor_;
  metadata.reflection = SelectCheckPointAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetCheckPointRankReq::kChapterIdFieldNumber;
const int GetCheckPointRankReq::kCheckPointIdFieldNumber;
const int GetCheckPointRankReq::kChapterKindFieldNumber;
#endif  // !_MSC_VER

GetCheckPointRankReq::GetCheckPointRankReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetCheckPointRankReq::InitAsDefaultInstance() {
}

GetCheckPointRankReq::GetCheckPointRankReq(const GetCheckPointRankReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetCheckPointRankReq::SharedCtor() {
  _cached_size_ = 0;
  chapter_id_ = 0;
  check_point_id_ = 0;
  chapter_kind_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetCheckPointRankReq::~GetCheckPointRankReq() {
  SharedDtor();
}

void GetCheckPointRankReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetCheckPointRankReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetCheckPointRankReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetCheckPointRankReq_descriptor_;
}

const GetCheckPointRankReq& GetCheckPointRankReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

GetCheckPointRankReq* GetCheckPointRankReq::default_instance_ = NULL;

GetCheckPointRankReq* GetCheckPointRankReq::New() const {
  return new GetCheckPointRankReq;
}

void GetCheckPointRankReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chapter_id_ = 0;
    check_point_id_ = 0;
    chapter_kind_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetCheckPointRankReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 chapter_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chapter_id_)));
          set_has_chapter_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_check_point_id;
        break;
      }

      // optional int32 check_point_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_check_point_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &check_point_id_)));
          set_has_check_point_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_chapter_kind;
        break;
      }

      // optional int32 chapter_kind = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chapter_kind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chapter_kind_)));
          set_has_chapter_kind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetCheckPointRankReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 chapter_id = 1;
  if (has_chapter_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chapter_id(), output);
  }

  // optional int32 check_point_id = 2;
  if (has_check_point_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->check_point_id(), output);
  }

  // optional int32 chapter_kind = 3;
  if (has_chapter_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->chapter_kind(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetCheckPointRankReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 chapter_id = 1;
  if (has_chapter_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chapter_id(), target);
  }

  // optional int32 check_point_id = 2;
  if (has_check_point_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->check_point_id(), target);
  }

  // optional int32 chapter_kind = 3;
  if (has_chapter_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->chapter_kind(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetCheckPointRankReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 chapter_id = 1;
    if (has_chapter_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chapter_id());
    }

    // optional int32 check_point_id = 2;
    if (has_check_point_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->check_point_id());
    }

    // optional int32 chapter_kind = 3;
    if (has_chapter_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chapter_kind());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetCheckPointRankReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetCheckPointRankReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetCheckPointRankReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetCheckPointRankReq::MergeFrom(const GetCheckPointRankReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chapter_id()) {
      set_chapter_id(from.chapter_id());
    }
    if (from.has_check_point_id()) {
      set_check_point_id(from.check_point_id());
    }
    if (from.has_chapter_kind()) {
      set_chapter_kind(from.chapter_kind());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetCheckPointRankReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCheckPointRankReq::CopyFrom(const GetCheckPointRankReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCheckPointRankReq::IsInitialized() const {

  return true;
}

void GetCheckPointRankReq::Swap(GetCheckPointRankReq* other) {
  if (other != this) {
    std::swap(chapter_id_, other->chapter_id_);
    std::swap(check_point_id_, other->check_point_id_);
    std::swap(chapter_kind_, other->chapter_kind_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetCheckPointRankReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetCheckPointRankReq_descriptor_;
  metadata.reflection = GetCheckPointRankReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FriendRankItem::kRankFieldNumber;
const int FriendRankItem::kNameFieldNumber;
const int FriendRankItem::kHeadIdFieldNumber;
const int FriendRankItem::kPassSecondsFieldNumber;
#endif  // !_MSC_VER

FriendRankItem::FriendRankItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FriendRankItem::InitAsDefaultInstance() {
}

FriendRankItem::FriendRankItem(const FriendRankItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FriendRankItem::SharedCtor() {
  _cached_size_ = 0;
  rank_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  head_id_ = 0;
  pass_seconds_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendRankItem::~FriendRankItem() {
  SharedDtor();
}

void FriendRankItem::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void FriendRankItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendRankItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendRankItem_descriptor_;
}

const FriendRankItem& FriendRankItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

FriendRankItem* FriendRankItem::default_instance_ = NULL;

FriendRankItem* FriendRankItem::New() const {
  return new FriendRankItem;
}

void FriendRankItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    head_id_ = 0;
    pass_seconds_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FriendRankItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_head_id;
        break;
      }

      // optional int32 head_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_head_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &head_id_)));
          set_has_head_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pass_seconds;
        break;
      }

      // optional int32 pass_seconds = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pass_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pass_seconds_)));
          set_has_pass_seconds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FriendRankItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rank(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional int32 head_id = 3;
  if (has_head_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->head_id(), output);
  }

  // optional int32 pass_seconds = 4;
  if (has_pass_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->pass_seconds(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FriendRankItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rank(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int32 head_id = 3;
  if (has_head_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->head_id(), target);
  }

  // optional int32 pass_seconds = 4;
  if (has_pass_seconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->pass_seconds(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FriendRankItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 head_id = 3;
    if (has_head_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->head_id());
    }

    // optional int32 pass_seconds = 4;
    if (has_pass_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pass_seconds());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendRankItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FriendRankItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FriendRankItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FriendRankItem::MergeFrom(const FriendRankItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_head_id()) {
      set_head_id(from.head_id());
    }
    if (from.has_pass_seconds()) {
      set_pass_seconds(from.pass_seconds());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FriendRankItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendRankItem::CopyFrom(const FriendRankItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendRankItem::IsInitialized() const {

  return true;
}

void FriendRankItem::Swap(FriendRankItem* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(name_, other->name_);
    std::swap(head_id_, other->head_id_);
    std::swap(pass_seconds_, other->pass_seconds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FriendRankItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendRankItem_descriptor_;
  metadata.reflection = FriendRankItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetCheckPointRankAck::kFriendRankFieldNumber;
const int GetCheckPointRankAck::kErrNoFieldNumber;
#endif  // !_MSC_VER

GetCheckPointRankAck::GetCheckPointRankAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetCheckPointRankAck::InitAsDefaultInstance() {
}

GetCheckPointRankAck::GetCheckPointRankAck(const GetCheckPointRankAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetCheckPointRankAck::SharedCtor() {
  _cached_size_ = 0;
  err_no_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetCheckPointRankAck::~GetCheckPointRankAck() {
  SharedDtor();
}

void GetCheckPointRankAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetCheckPointRankAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetCheckPointRankAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetCheckPointRankAck_descriptor_;
}

const GetCheckPointRankAck& GetCheckPointRankAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

GetCheckPointRankAck* GetCheckPointRankAck::default_instance_ = NULL;

GetCheckPointRankAck* GetCheckPointRankAck::New() const {
  return new GetCheckPointRankAck;
}

void GetCheckPointRankAck::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    err_no_ = 0;
  }
  friend_rank_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetCheckPointRankAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protoc.gameproto.FriendRankItem friend_rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friend_rank:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_friend_rank()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_friend_rank;
        if (input->ExpectTag(16)) goto parse_err_no;
        break;
      }

      // optional int32 err_no = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_err_no:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_no_)));
          set_has_err_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetCheckPointRankAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protoc.gameproto.FriendRankItem friend_rank = 1;
  for (int i = 0; i < this->friend_rank_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->friend_rank(i), output);
  }

  // optional int32 err_no = 2;
  if (has_err_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->err_no(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetCheckPointRankAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protoc.gameproto.FriendRankItem friend_rank = 1;
  for (int i = 0; i < this->friend_rank_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->friend_rank(i), target);
  }

  // optional int32 err_no = 2;
  if (has_err_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->err_no(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetCheckPointRankAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 err_no = 2;
    if (has_err_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err_no());
    }

  }
  // repeated .protoc.gameproto.FriendRankItem friend_rank = 1;
  total_size += 1 * this->friend_rank_size();
  for (int i = 0; i < this->friend_rank_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->friend_rank(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetCheckPointRankAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetCheckPointRankAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetCheckPointRankAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetCheckPointRankAck::MergeFrom(const GetCheckPointRankAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  friend_rank_.MergeFrom(from.friend_rank_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_err_no()) {
      set_err_no(from.err_no());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetCheckPointRankAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCheckPointRankAck::CopyFrom(const GetCheckPointRankAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCheckPointRankAck::IsInitialized() const {

  return true;
}

void GetCheckPointRankAck::Swap(GetCheckPointRankAck* other) {
  if (other != this) {
    friend_rank_.Swap(&other->friend_rank_);
    std::swap(err_no_, other->err_no_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetCheckPointRankAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetCheckPointRankAck_descriptor_;
  metadata.reflection = GetCheckPointRankAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetFriendArmsReq::GetFriendArmsReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetFriendArmsReq::InitAsDefaultInstance() {
}

GetFriendArmsReq::GetFriendArmsReq(const GetFriendArmsReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetFriendArmsReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetFriendArmsReq::~GetFriendArmsReq() {
  SharedDtor();
}

void GetFriendArmsReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetFriendArmsReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetFriendArmsReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetFriendArmsReq_descriptor_;
}

const GetFriendArmsReq& GetFriendArmsReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

GetFriendArmsReq* GetFriendArmsReq::default_instance_ = NULL;

GetFriendArmsReq* GetFriendArmsReq::New() const {
  return new GetFriendArmsReq;
}

void GetFriendArmsReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetFriendArmsReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetFriendArmsReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetFriendArmsReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetFriendArmsReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetFriendArmsReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetFriendArmsReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetFriendArmsReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetFriendArmsReq::MergeFrom(const GetFriendArmsReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetFriendArmsReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFriendArmsReq::CopyFrom(const GetFriendArmsReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFriendArmsReq::IsInitialized() const {

  return true;
}

void GetFriendArmsReq::Swap(GetFriendArmsReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetFriendArmsReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetFriendArmsReq_descriptor_;
  metadata.reflection = GetFriendArmsReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FriendArms::kDigitidFieldNumber;
const int FriendArms::kNameFieldNumber;
const int FriendArms::kPetFieldNumber;
const int FriendArms::kFriendshipFieldNumber;
const int FriendArms::kLevelFieldNumber;
const int FriendArms::kIsFriendFieldNumber;
#endif  // !_MSC_VER

FriendArms::FriendArms()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FriendArms::InitAsDefaultInstance() {
  pet_ = const_cast< ::protoc::gameproto::PetRecord*>(&::protoc::gameproto::PetRecord::default_instance());
}

FriendArms::FriendArms(const FriendArms& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FriendArms::SharedCtor() {
  _cached_size_ = 0;
  digitid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pet_ = NULL;
  friendship_ = 0;
  level_ = 0;
  is_friend_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendArms::~FriendArms() {
  SharedDtor();
}

void FriendArms::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete pet_;
  }
}

void FriendArms::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendArms::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendArms_descriptor_;
}

const FriendArms& FriendArms::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

FriendArms* FriendArms::default_instance_ = NULL;

FriendArms* FriendArms::New() const {
  return new FriendArms;
}

void FriendArms::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    digitid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_pet()) {
      if (pet_ != NULL) pet_->::protoc::gameproto::PetRecord::Clear();
    }
    friendship_ = 0;
    level_ = 0;
    is_friend_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FriendArms::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 digitid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &digitid_)));
          set_has_digitid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pet;
        break;
      }

      // optional .protoc.gameproto.PetRecord pet = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pet()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_friendship;
        break;
      }

      // optional int32 friendship = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_friendship:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &friendship_)));
          set_has_friendship();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }

      // optional int32 level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_is_friend;
        break;
      }

      // optional bool is_friend = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_friend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_friend_)));
          set_has_is_friend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FriendArms::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 digitid = 1;
  if (has_digitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->digitid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional .protoc.gameproto.PetRecord pet = 3;
  if (has_pet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pet(), output);
  }

  // optional int32 friendship = 4;
  if (has_friendship()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->friendship(), output);
  }

  // optional int32 level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->level(), output);
  }

  // optional bool is_friend = 6;
  if (has_is_friend()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_friend(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FriendArms::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 digitid = 1;
  if (has_digitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->digitid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional .protoc.gameproto.PetRecord pet = 3;
  if (has_pet()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pet(), target);
  }

  // optional int32 friendship = 4;
  if (has_friendship()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->friendship(), target);
  }

  // optional int32 level = 5;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->level(), target);
  }

  // optional bool is_friend = 6;
  if (has_is_friend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_friend(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FriendArms::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 digitid = 1;
    if (has_digitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->digitid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .protoc.gameproto.PetRecord pet = 3;
    if (has_pet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pet());
    }

    // optional int32 friendship = 4;
    if (has_friendship()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->friendship());
    }

    // optional int32 level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional bool is_friend = 6;
    if (has_is_friend()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendArms::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FriendArms* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FriendArms*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FriendArms::MergeFrom(const FriendArms& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_digitid()) {
      set_digitid(from.digitid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_pet()) {
      mutable_pet()->::protoc::gameproto::PetRecord::MergeFrom(from.pet());
    }
    if (from.has_friendship()) {
      set_friendship(from.friendship());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_is_friend()) {
      set_is_friend(from.is_friend());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FriendArms::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendArms::CopyFrom(const FriendArms& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendArms::IsInitialized() const {

  return true;
}

void FriendArms::Swap(FriendArms* other) {
  if (other != this) {
    std::swap(digitid_, other->digitid_);
    std::swap(name_, other->name_);
    std::swap(pet_, other->pet_);
    std::swap(friendship_, other->friendship_);
    std::swap(level_, other->level_);
    std::swap(is_friend_, other->is_friend_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FriendArms::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendArms_descriptor_;
  metadata.reflection = FriendArms_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetFriendArmsAck::kPetsFieldNumber;
const int GetFriendArmsAck::kErrNoFieldNumber;
#endif  // !_MSC_VER

GetFriendArmsAck::GetFriendArmsAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetFriendArmsAck::InitAsDefaultInstance() {
}

GetFriendArmsAck::GetFriendArmsAck(const GetFriendArmsAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetFriendArmsAck::SharedCtor() {
  _cached_size_ = 0;
  err_no_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetFriendArmsAck::~GetFriendArmsAck() {
  SharedDtor();
}

void GetFriendArmsAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetFriendArmsAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetFriendArmsAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetFriendArmsAck_descriptor_;
}

const GetFriendArmsAck& GetFriendArmsAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

GetFriendArmsAck* GetFriendArmsAck::default_instance_ = NULL;

GetFriendArmsAck* GetFriendArmsAck::New() const {
  return new GetFriendArmsAck;
}

void GetFriendArmsAck::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    err_no_ = 0;
  }
  pets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetFriendArmsAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protoc.gameproto.FriendArms pets = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pets()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_pets;
        if (input->ExpectTag(16)) goto parse_err_no;
        break;
      }

      // optional int32 err_no = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_err_no:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_no_)));
          set_has_err_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetFriendArmsAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protoc.gameproto.FriendArms pets = 1;
  for (int i = 0; i < this->pets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pets(i), output);
  }

  // optional int32 err_no = 2;
  if (has_err_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->err_no(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetFriendArmsAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protoc.gameproto.FriendArms pets = 1;
  for (int i = 0; i < this->pets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pets(i), target);
  }

  // optional int32 err_no = 2;
  if (has_err_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->err_no(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetFriendArmsAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 err_no = 2;
    if (has_err_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err_no());
    }

  }
  // repeated .protoc.gameproto.FriendArms pets = 1;
  total_size += 1 * this->pets_size();
  for (int i = 0; i < this->pets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pets(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetFriendArmsAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetFriendArmsAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetFriendArmsAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetFriendArmsAck::MergeFrom(const GetFriendArmsAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  pets_.MergeFrom(from.pets_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_err_no()) {
      set_err_no(from.err_no());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetFriendArmsAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFriendArmsAck::CopyFrom(const GetFriendArmsAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFriendArmsAck::IsInitialized() const {

  return true;
}

void GetFriendArmsAck::Swap(GetFriendArmsAck* other) {
  if (other != this) {
    pets_.Swap(&other->pets_);
    std::swap(err_no_, other->err_no_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetFriendArmsAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetFriendArmsAck_descriptor_;
  metadata.reflection = GetFriendArmsAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BeginWarReq::kDigitidFieldNumber;
#endif  // !_MSC_VER

BeginWarReq::BeginWarReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BeginWarReq::InitAsDefaultInstance() {
}

BeginWarReq::BeginWarReq(const BeginWarReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BeginWarReq::SharedCtor() {
  _cached_size_ = 0;
  digitid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BeginWarReq::~BeginWarReq() {
  SharedDtor();
}

void BeginWarReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BeginWarReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BeginWarReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BeginWarReq_descriptor_;
}

const BeginWarReq& BeginWarReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

BeginWarReq* BeginWarReq::default_instance_ = NULL;

BeginWarReq* BeginWarReq::New() const {
  return new BeginWarReq;
}

void BeginWarReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    digitid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BeginWarReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 digitid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &digitid_)));
          set_has_digitid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BeginWarReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 digitid = 1;
  if (has_digitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->digitid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BeginWarReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 digitid = 1;
  if (has_digitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->digitid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BeginWarReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 digitid = 1;
    if (has_digitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->digitid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BeginWarReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BeginWarReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BeginWarReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BeginWarReq::MergeFrom(const BeginWarReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_digitid()) {
      set_digitid(from.digitid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BeginWarReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BeginWarReq::CopyFrom(const BeginWarReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeginWarReq::IsInitialized() const {

  return true;
}

void BeginWarReq::Swap(BeginWarReq* other) {
  if (other != this) {
    std::swap(digitid_, other->digitid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BeginWarReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BeginWarReq_descriptor_;
  metadata.reflection = BeginWarReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MonsterBurstItem::kMonsterIdFieldNumber;
const int MonsterBurstItem::kItemFieldNumber;
#endif  // !_MSC_VER

MonsterBurstItem::MonsterBurstItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MonsterBurstItem::InitAsDefaultInstance() {
}

MonsterBurstItem::MonsterBurstItem(const MonsterBurstItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MonsterBurstItem::SharedCtor() {
  _cached_size_ = 0;
  monster_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MonsterBurstItem::~MonsterBurstItem() {
  SharedDtor();
}

void MonsterBurstItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MonsterBurstItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MonsterBurstItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MonsterBurstItem_descriptor_;
}

const MonsterBurstItem& MonsterBurstItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

MonsterBurstItem* MonsterBurstItem::default_instance_ = NULL;

MonsterBurstItem* MonsterBurstItem::New() const {
  return new MonsterBurstItem;
}

void MonsterBurstItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    monster_id_ = 0;
  }
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MonsterBurstItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 monster_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &monster_id_)));
          set_has_monster_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item;
        break;
      }

      // repeated .protoc.gameproto.TeXiaoItem item = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MonsterBurstItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 monster_id = 1;
  if (has_monster_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->monster_id(), output);
  }

  // repeated .protoc.gameproto.TeXiaoItem item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MonsterBurstItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 monster_id = 1;
  if (has_monster_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->monster_id(), target);
  }

  // repeated .protoc.gameproto.TeXiaoItem item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MonsterBurstItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 monster_id = 1;
    if (has_monster_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->monster_id());
    }

  }
  // repeated .protoc.gameproto.TeXiaoItem item = 2;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MonsterBurstItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MonsterBurstItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MonsterBurstItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MonsterBurstItem::MergeFrom(const MonsterBurstItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_monster_id()) {
      set_monster_id(from.monster_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MonsterBurstItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MonsterBurstItem::CopyFrom(const MonsterBurstItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonsterBurstItem::IsInitialized() const {

  return true;
}

void MonsterBurstItem::Swap(MonsterBurstItem* other) {
  if (other != this) {
    std::swap(monster_id_, other->monster_id_);
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MonsterBurstItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MonsterBurstItem_descriptor_;
  metadata.reflection = MonsterBurstItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TreasureBurstItem::kTreasureIdFieldNumber;
const int TreasureBurstItem::kItemFieldNumber;
#endif  // !_MSC_VER

TreasureBurstItem::TreasureBurstItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TreasureBurstItem::InitAsDefaultInstance() {
}

TreasureBurstItem::TreasureBurstItem(const TreasureBurstItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TreasureBurstItem::SharedCtor() {
  _cached_size_ = 0;
  treasure_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TreasureBurstItem::~TreasureBurstItem() {
  SharedDtor();
}

void TreasureBurstItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TreasureBurstItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TreasureBurstItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TreasureBurstItem_descriptor_;
}

const TreasureBurstItem& TreasureBurstItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

TreasureBurstItem* TreasureBurstItem::default_instance_ = NULL;

TreasureBurstItem* TreasureBurstItem::New() const {
  return new TreasureBurstItem;
}

void TreasureBurstItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    treasure_id_ = 0;
  }
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TreasureBurstItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 treasure_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &treasure_id_)));
          set_has_treasure_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item;
        break;
      }

      // repeated .protoc.gameproto.TeXiaoItem item = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TreasureBurstItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 treasure_id = 1;
  if (has_treasure_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->treasure_id(), output);
  }

  // repeated .protoc.gameproto.TeXiaoItem item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TreasureBurstItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 treasure_id = 1;
  if (has_treasure_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->treasure_id(), target);
  }

  // repeated .protoc.gameproto.TeXiaoItem item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TreasureBurstItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 treasure_id = 1;
    if (has_treasure_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->treasure_id());
    }

  }
  // repeated .protoc.gameproto.TeXiaoItem item = 2;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TreasureBurstItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TreasureBurstItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TreasureBurstItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TreasureBurstItem::MergeFrom(const TreasureBurstItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_treasure_id()) {
      set_treasure_id(from.treasure_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TreasureBurstItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TreasureBurstItem::CopyFrom(const TreasureBurstItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TreasureBurstItem::IsInitialized() const {

  return true;
}

void TreasureBurstItem::Swap(TreasureBurstItem* other) {
  if (other != this) {
    std::swap(treasure_id_, other->treasure_id_);
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TreasureBurstItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TreasureBurstItem_descriptor_;
  metadata.reflection = TreasureBurstItem_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* BufferItem_BufferEffectType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BufferItem_BufferEffectType_descriptor_;
}
bool BufferItem_BufferEffectType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BufferItem_BufferEffectType BufferItem::no_type;
const BufferItem_BufferEffectType BufferItem::hurt;
const BufferItem_BufferEffectType BufferItem::reply;
const BufferItem_BufferEffectType BufferItem::hp;
const BufferItem_BufferEffectType BufferItem::spirit;
const BufferItem_BufferEffectType BufferItem::speed;
const BufferItem_BufferEffectType BufferItem::crit;
const BufferItem_BufferEffectType BufferItem::magic_reply;
const BufferItem_BufferEffectType BufferItem::BufferEffectType_MIN;
const BufferItem_BufferEffectType BufferItem::BufferEffectType_MAX;
const int BufferItem::BufferEffectType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int BufferItem::kIdFieldNumber;
const int BufferItem::kValueFieldNumber;
#endif  // !_MSC_VER

BufferItem::BufferItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BufferItem::InitAsDefaultInstance() {
}

BufferItem::BufferItem(const BufferItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BufferItem::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BufferItem::~BufferItem() {
  SharedDtor();
}

void BufferItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BufferItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BufferItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BufferItem_descriptor_;
}

const BufferItem& BufferItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

BufferItem* BufferItem::default_instance_ = NULL;

BufferItem* BufferItem::New() const {
  return new BufferItem;
}

void BufferItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BufferItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protoc.gameproto.BufferItem.BufferEffectType id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protoc::gameproto::BufferItem_BufferEffectType_IsValid(value)) {
            set_id(static_cast< ::protoc::gameproto::BufferItem_BufferEffectType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional int32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BufferItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .protoc.gameproto.BufferItem.BufferEffectType id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->id(), output);
  }

  // optional int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BufferItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .protoc.gameproto.BufferItem.BufferEffectType id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->id(), target);
  }

  // optional int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BufferItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .protoc.gameproto.BufferItem.BufferEffectType id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->id());
    }

    // optional int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BufferItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BufferItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BufferItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BufferItem::MergeFrom(const BufferItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BufferItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BufferItem::CopyFrom(const BufferItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BufferItem::IsInitialized() const {

  return true;
}

void BufferItem::Swap(BufferItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BufferItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BufferItem_descriptor_;
  metadata.reflection = BufferItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BeginWarAck::kErrNoFieldNumber;
const int BeginWarAck::kSignSpiritFieldNumber;
const int BeginWarAck::kSignHpFieldNumber;
const int BeginWarAck::kSignMpFieldNumber;
const int BeginWarAck::kSignMyPetsFieldNumber;
const int BeginWarAck::kSignHelpPetFieldNumber;
const int BeginWarAck::kHelpPetFieldNumber;
const int BeginWarAck::kBuffFieldNumber;
const int BeginWarAck::kBurstItemFieldNumber;
const int BeginWarAck::kTreasureItemFieldNumber;
const int BeginWarAck::kRndStartWarKeyFieldNumber;
#endif  // !_MSC_VER

BeginWarAck::BeginWarAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BeginWarAck::InitAsDefaultInstance() {
  sign_help_pet_ = const_cast< ::protoc::gameproto::PetRecordSIGN*>(&::protoc::gameproto::PetRecordSIGN::default_instance());
  help_pet_ = const_cast< ::protoc::gameproto::PetRecord*>(&::protoc::gameproto::PetRecord::default_instance());
}

BeginWarAck::BeginWarAck(const BeginWarAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BeginWarAck::SharedCtor() {
  _cached_size_ = 0;
  err_no_ = 0;
  sign_spirit_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sign_hp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sign_mp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sign_help_pet_ = NULL;
  help_pet_ = NULL;
  rnd_start_war_key_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BeginWarAck::~BeginWarAck() {
  SharedDtor();
}

void BeginWarAck::SharedDtor() {
  if (sign_spirit_ != &::google::protobuf::internal::kEmptyString) {
    delete sign_spirit_;
  }
  if (sign_hp_ != &::google::protobuf::internal::kEmptyString) {
    delete sign_hp_;
  }
  if (sign_mp_ != &::google::protobuf::internal::kEmptyString) {
    delete sign_mp_;
  }
  if (this != default_instance_) {
    delete sign_help_pet_;
    delete help_pet_;
  }
}

void BeginWarAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BeginWarAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BeginWarAck_descriptor_;
}

const BeginWarAck& BeginWarAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

BeginWarAck* BeginWarAck::default_instance_ = NULL;

BeginWarAck* BeginWarAck::New() const {
  return new BeginWarAck;
}

void BeginWarAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    err_no_ = 0;
    if (has_sign_spirit()) {
      if (sign_spirit_ != &::google::protobuf::internal::kEmptyString) {
        sign_spirit_->clear();
      }
    }
    if (has_sign_hp()) {
      if (sign_hp_ != &::google::protobuf::internal::kEmptyString) {
        sign_hp_->clear();
      }
    }
    if (has_sign_mp()) {
      if (sign_mp_ != &::google::protobuf::internal::kEmptyString) {
        sign_mp_->clear();
      }
    }
    if (has_sign_help_pet()) {
      if (sign_help_pet_ != NULL) sign_help_pet_->::protoc::gameproto::PetRecordSIGN::Clear();
    }
    if (has_help_pet()) {
      if (help_pet_ != NULL) help_pet_->::protoc::gameproto::PetRecord::Clear();
    }
  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    rnd_start_war_key_ = 0;
  }
  sign_my_pets_.Clear();
  buff_.Clear();
  burst_item_.Clear();
  treasure_item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BeginWarAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 err_no = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_no_)));
          set_has_err_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sign_spirit;
        break;
      }

      // optional bytes sign_spirit = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sign_spirit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sign_spirit()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sign_hp;
        break;
      }

      // optional bytes sign_hp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sign_hp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sign_hp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_sign_mp;
        break;
      }

      // optional bytes sign_mp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sign_mp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sign_mp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_sign_my_pets;
        break;
      }

      // repeated .protoc.gameproto.PetRecordSIGN sign_my_pets = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sign_my_pets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sign_my_pets()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_sign_my_pets;
        if (input->ExpectTag(50)) goto parse_sign_help_pet;
        break;
      }

      // optional .protoc.gameproto.PetRecordSIGN sign_help_pet = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sign_help_pet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sign_help_pet()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_help_pet;
        break;
      }

      // optional .protoc.gameproto.PetRecord help_pet = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_help_pet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_help_pet()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_buff;
        break;
      }

      // repeated .protoc.gameproto.BufferItem buff = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buff:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buff()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_buff;
        if (input->ExpectTag(74)) goto parse_burst_item;
        break;
      }

      // repeated .protoc.gameproto.MonsterBurstItem burst_item = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_burst_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_burst_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_burst_item;
        if (input->ExpectTag(82)) goto parse_treasure_item;
        break;
      }

      // repeated .protoc.gameproto.TreasureBurstItem treasure_item = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_treasure_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_treasure_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_treasure_item;
        if (input->ExpectTag(88)) goto parse_rnd_start_war_key;
        break;
      }

      // optional int32 rnd_start_war_key = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rnd_start_war_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rnd_start_war_key_)));
          set_has_rnd_start_war_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BeginWarAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 err_no = 1;
  if (has_err_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->err_no(), output);
  }

  // optional bytes sign_spirit = 2;
  if (has_sign_spirit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->sign_spirit(), output);
  }

  // optional bytes sign_hp = 3;
  if (has_sign_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->sign_hp(), output);
  }

  // optional bytes sign_mp = 4;
  if (has_sign_mp()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->sign_mp(), output);
  }

  // repeated .protoc.gameproto.PetRecordSIGN sign_my_pets = 5;
  for (int i = 0; i < this->sign_my_pets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->sign_my_pets(i), output);
  }

  // optional .protoc.gameproto.PetRecordSIGN sign_help_pet = 6;
  if (has_sign_help_pet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->sign_help_pet(), output);
  }

  // optional .protoc.gameproto.PetRecord help_pet = 7;
  if (has_help_pet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->help_pet(), output);
  }

  // repeated .protoc.gameproto.BufferItem buff = 8;
  for (int i = 0; i < this->buff_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->buff(i), output);
  }

  // repeated .protoc.gameproto.MonsterBurstItem burst_item = 9;
  for (int i = 0; i < this->burst_item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->burst_item(i), output);
  }

  // repeated .protoc.gameproto.TreasureBurstItem treasure_item = 10;
  for (int i = 0; i < this->treasure_item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->treasure_item(i), output);
  }

  // optional int32 rnd_start_war_key = 11;
  if (has_rnd_start_war_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->rnd_start_war_key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BeginWarAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 err_no = 1;
  if (has_err_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->err_no(), target);
  }

  // optional bytes sign_spirit = 2;
  if (has_sign_spirit()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->sign_spirit(), target);
  }

  // optional bytes sign_hp = 3;
  if (has_sign_hp()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->sign_hp(), target);
  }

  // optional bytes sign_mp = 4;
  if (has_sign_mp()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->sign_mp(), target);
  }

  // repeated .protoc.gameproto.PetRecordSIGN sign_my_pets = 5;
  for (int i = 0; i < this->sign_my_pets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->sign_my_pets(i), target);
  }

  // optional .protoc.gameproto.PetRecordSIGN sign_help_pet = 6;
  if (has_sign_help_pet()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->sign_help_pet(), target);
  }

  // optional .protoc.gameproto.PetRecord help_pet = 7;
  if (has_help_pet()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->help_pet(), target);
  }

  // repeated .protoc.gameproto.BufferItem buff = 8;
  for (int i = 0; i < this->buff_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->buff(i), target);
  }

  // repeated .protoc.gameproto.MonsterBurstItem burst_item = 9;
  for (int i = 0; i < this->burst_item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->burst_item(i), target);
  }

  // repeated .protoc.gameproto.TreasureBurstItem treasure_item = 10;
  for (int i = 0; i < this->treasure_item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->treasure_item(i), target);
  }

  // optional int32 rnd_start_war_key = 11;
  if (has_rnd_start_war_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->rnd_start_war_key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BeginWarAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 err_no = 1;
    if (has_err_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err_no());
    }

    // optional bytes sign_spirit = 2;
    if (has_sign_spirit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sign_spirit());
    }

    // optional bytes sign_hp = 3;
    if (has_sign_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sign_hp());
    }

    // optional bytes sign_mp = 4;
    if (has_sign_mp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sign_mp());
    }

    // optional .protoc.gameproto.PetRecordSIGN sign_help_pet = 6;
    if (has_sign_help_pet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sign_help_pet());
    }

    // optional .protoc.gameproto.PetRecord help_pet = 7;
    if (has_help_pet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->help_pet());
    }

  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    // optional int32 rnd_start_war_key = 11;
    if (has_rnd_start_war_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rnd_start_war_key());
    }

  }
  // repeated .protoc.gameproto.PetRecordSIGN sign_my_pets = 5;
  total_size += 1 * this->sign_my_pets_size();
  for (int i = 0; i < this->sign_my_pets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sign_my_pets(i));
  }

  // repeated .protoc.gameproto.BufferItem buff = 8;
  total_size += 1 * this->buff_size();
  for (int i = 0; i < this->buff_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buff(i));
  }

  // repeated .protoc.gameproto.MonsterBurstItem burst_item = 9;
  total_size += 1 * this->burst_item_size();
  for (int i = 0; i < this->burst_item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->burst_item(i));
  }

  // repeated .protoc.gameproto.TreasureBurstItem treasure_item = 10;
  total_size += 1 * this->treasure_item_size();
  for (int i = 0; i < this->treasure_item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->treasure_item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BeginWarAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BeginWarAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BeginWarAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BeginWarAck::MergeFrom(const BeginWarAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  sign_my_pets_.MergeFrom(from.sign_my_pets_);
  buff_.MergeFrom(from.buff_);
  burst_item_.MergeFrom(from.burst_item_);
  treasure_item_.MergeFrom(from.treasure_item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_err_no()) {
      set_err_no(from.err_no());
    }
    if (from.has_sign_spirit()) {
      set_sign_spirit(from.sign_spirit());
    }
    if (from.has_sign_hp()) {
      set_sign_hp(from.sign_hp());
    }
    if (from.has_sign_mp()) {
      set_sign_mp(from.sign_mp());
    }
    if (from.has_sign_help_pet()) {
      mutable_sign_help_pet()->::protoc::gameproto::PetRecordSIGN::MergeFrom(from.sign_help_pet());
    }
    if (from.has_help_pet()) {
      mutable_help_pet()->::protoc::gameproto::PetRecord::MergeFrom(from.help_pet());
    }
  }
  if (from._has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    if (from.has_rnd_start_war_key()) {
      set_rnd_start_war_key(from.rnd_start_war_key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BeginWarAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BeginWarAck::CopyFrom(const BeginWarAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeginWarAck::IsInitialized() const {

  return true;
}

void BeginWarAck::Swap(BeginWarAck* other) {
  if (other != this) {
    std::swap(err_no_, other->err_no_);
    std::swap(sign_spirit_, other->sign_spirit_);
    std::swap(sign_hp_, other->sign_hp_);
    std::swap(sign_mp_, other->sign_mp_);
    sign_my_pets_.Swap(&other->sign_my_pets_);
    std::swap(sign_help_pet_, other->sign_help_pet_);
    std::swap(help_pet_, other->help_pet_);
    buff_.Swap(&other->buff_);
    burst_item_.Swap(&other->burst_item_);
    treasure_item_.Swap(&other->treasure_item_);
    std::swap(rnd_start_war_key_, other->rnd_start_war_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BeginWarAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BeginWarAck_descriptor_;
  metadata.reflection = BeginWarAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NowStartWarRpt::kRndStartWarKeyFieldNumber;
#endif  // !_MSC_VER

NowStartWarRpt::NowStartWarRpt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NowStartWarRpt::InitAsDefaultInstance() {
}

NowStartWarRpt::NowStartWarRpt(const NowStartWarRpt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NowStartWarRpt::SharedCtor() {
  _cached_size_ = 0;
  rnd_start_war_key_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NowStartWarRpt::~NowStartWarRpt() {
  SharedDtor();
}

void NowStartWarRpt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NowStartWarRpt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NowStartWarRpt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NowStartWarRpt_descriptor_;
}

const NowStartWarRpt& NowStartWarRpt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

NowStartWarRpt* NowStartWarRpt::default_instance_ = NULL;

NowStartWarRpt* NowStartWarRpt::New() const {
  return new NowStartWarRpt;
}

void NowStartWarRpt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rnd_start_war_key_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NowStartWarRpt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 rnd_start_war_key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rnd_start_war_key_)));
          set_has_rnd_start_war_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NowStartWarRpt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 rnd_start_war_key = 1;
  if (has_rnd_start_war_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rnd_start_war_key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NowStartWarRpt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 rnd_start_war_key = 1;
  if (has_rnd_start_war_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rnd_start_war_key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NowStartWarRpt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 rnd_start_war_key = 1;
    if (has_rnd_start_war_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rnd_start_war_key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NowStartWarRpt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NowStartWarRpt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NowStartWarRpt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NowStartWarRpt::MergeFrom(const NowStartWarRpt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rnd_start_war_key()) {
      set_rnd_start_war_key(from.rnd_start_war_key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NowStartWarRpt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NowStartWarRpt::CopyFrom(const NowStartWarRpt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NowStartWarRpt::IsInitialized() const {

  return true;
}

void NowStartWarRpt::Swap(NowStartWarRpt* other) {
  if (other != this) {
    std::swap(rnd_start_war_key_, other->rnd_start_war_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NowStartWarRpt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NowStartWarRpt_descriptor_;
  metadata.reflection = NowStartWarRpt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeadMonster::kClassIdFieldNumber;
const int DeadMonster::kCountFieldNumber;
#endif  // !_MSC_VER

DeadMonster::DeadMonster()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeadMonster::InitAsDefaultInstance() {
}

DeadMonster::DeadMonster(const DeadMonster& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeadMonster::SharedCtor() {
  _cached_size_ = 0;
  class_id_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeadMonster::~DeadMonster() {
  SharedDtor();
}

void DeadMonster::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeadMonster::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeadMonster::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeadMonster_descriptor_;
}

const DeadMonster& DeadMonster::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

DeadMonster* DeadMonster::default_instance_ = NULL;

DeadMonster* DeadMonster::New() const {
  return new DeadMonster;
}

void DeadMonster::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    class_id_ = 0;
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeadMonster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 class_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &class_id_)));
          set_has_class_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional int32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeadMonster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 class_id = 1;
  if (has_class_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->class_id(), output);
  }

  // optional int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeadMonster::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 class_id = 1;
  if (has_class_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->class_id(), target);
  }

  // optional int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeadMonster::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 class_id = 1;
    if (has_class_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->class_id());
    }

    // optional int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeadMonster::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeadMonster* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeadMonster*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeadMonster::MergeFrom(const DeadMonster& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_class_id()) {
      set_class_id(from.class_id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeadMonster::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeadMonster::CopyFrom(const DeadMonster& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeadMonster::IsInitialized() const {

  return true;
}

void DeadMonster::Swap(DeadMonster* other) {
  if (other != this) {
    std::swap(class_id_, other->class_id_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeadMonster::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeadMonster_descriptor_;
  metadata.reflection = DeadMonster_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WarResultReq::kChapterIdFieldNumber;
const int WarResultReq::kCheckPointIdFieldNumber;
const int WarResultReq::kResultFieldNumber;
const int WarResultReq::kPassSecondFieldNumber;
const int WarResultReq::kSignCcrpFieldNumber;
const int WarResultReq::kPickItemFieldNumber;
const int WarResultReq::kMonstersFieldNumber;
const int WarResultReq::kChapterKindFieldNumber;
const int WarResultReq::kBuffItemIdsFieldNumber;
#endif  // !_MSC_VER

WarResultReq::WarResultReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WarResultReq::InitAsDefaultInstance() {
}

WarResultReq::WarResultReq(const WarResultReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WarResultReq::SharedCtor() {
  _cached_size_ = 0;
  chapter_id_ = 0;
  check_point_id_ = 0;
  result_ = 0;
  pass_second_ = 0;
  sign_ccrp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  chapter_kind_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WarResultReq::~WarResultReq() {
  SharedDtor();
}

void WarResultReq::SharedDtor() {
  if (sign_ccrp_ != &::google::protobuf::internal::kEmptyString) {
    delete sign_ccrp_;
  }
  if (this != default_instance_) {
  }
}

void WarResultReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WarResultReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WarResultReq_descriptor_;
}

const WarResultReq& WarResultReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

WarResultReq* WarResultReq::default_instance_ = NULL;

WarResultReq* WarResultReq::New() const {
  return new WarResultReq;
}

void WarResultReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chapter_id_ = 0;
    check_point_id_ = 0;
    result_ = 0;
    pass_second_ = 0;
    if (has_sign_ccrp()) {
      if (sign_ccrp_ != &::google::protobuf::internal::kEmptyString) {
        sign_ccrp_->clear();
      }
    }
    chapter_kind_ = 0;
  }
  pick_item_.Clear();
  monsters_.Clear();
  buff_item_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WarResultReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 chapter_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chapter_id_)));
          set_has_chapter_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_check_point_id;
        break;
      }

      // optional int32 check_point_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_check_point_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &check_point_id_)));
          set_has_check_point_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional int32 result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pass_second;
        break;
      }

      // optional int32 pass_second = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pass_second:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pass_second_)));
          set_has_pass_second();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_sign_ccrp;
        break;
      }

      // optional bytes sign_ccrp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sign_ccrp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sign_ccrp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_pick_item;
        break;
      }

      // repeated .protoc.gameproto.TeXiaoItem pick_item = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pick_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pick_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_pick_item;
        if (input->ExpectTag(58)) goto parse_monsters;
        break;
      }

      // repeated .protoc.gameproto.DeadMonster monsters = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_monsters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_monsters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_monsters;
        if (input->ExpectTag(64)) goto parse_chapter_kind;
        break;
      }

      // optional int32 chapter_kind = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chapter_kind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chapter_kind_)));
          set_has_chapter_kind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_buff_item_ids;
        break;
      }

      // repeated uint32 buff_item_ids = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buff_item_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 72, input, this->mutable_buff_item_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_buff_item_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_buff_item_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WarResultReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 chapter_id = 1;
  if (has_chapter_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chapter_id(), output);
  }

  // optional int32 check_point_id = 2;
  if (has_check_point_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->check_point_id(), output);
  }

  // optional int32 result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->result(), output);
  }

  // optional int32 pass_second = 4;
  if (has_pass_second()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->pass_second(), output);
  }

  // optional bytes sign_ccrp = 5;
  if (has_sign_ccrp()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->sign_ccrp(), output);
  }

  // repeated .protoc.gameproto.TeXiaoItem pick_item = 6;
  for (int i = 0; i < this->pick_item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->pick_item(i), output);
  }

  // repeated .protoc.gameproto.DeadMonster monsters = 7;
  for (int i = 0; i < this->monsters_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->monsters(i), output);
  }

  // optional int32 chapter_kind = 8;
  if (has_chapter_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->chapter_kind(), output);
  }

  // repeated uint32 buff_item_ids = 9;
  for (int i = 0; i < this->buff_item_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      9, this->buff_item_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WarResultReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 chapter_id = 1;
  if (has_chapter_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chapter_id(), target);
  }

  // optional int32 check_point_id = 2;
  if (has_check_point_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->check_point_id(), target);
  }

  // optional int32 result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->result(), target);
  }

  // optional int32 pass_second = 4;
  if (has_pass_second()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->pass_second(), target);
  }

  // optional bytes sign_ccrp = 5;
  if (has_sign_ccrp()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->sign_ccrp(), target);
  }

  // repeated .protoc.gameproto.TeXiaoItem pick_item = 6;
  for (int i = 0; i < this->pick_item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->pick_item(i), target);
  }

  // repeated .protoc.gameproto.DeadMonster monsters = 7;
  for (int i = 0; i < this->monsters_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->monsters(i), target);
  }

  // optional int32 chapter_kind = 8;
  if (has_chapter_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->chapter_kind(), target);
  }

  // repeated uint32 buff_item_ids = 9;
  for (int i = 0; i < this->buff_item_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(9, this->buff_item_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WarResultReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 chapter_id = 1;
    if (has_chapter_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chapter_id());
    }

    // optional int32 check_point_id = 2;
    if (has_check_point_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->check_point_id());
    }

    // optional int32 result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 pass_second = 4;
    if (has_pass_second()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pass_second());
    }

    // optional bytes sign_ccrp = 5;
    if (has_sign_ccrp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sign_ccrp());
    }

    // optional int32 chapter_kind = 8;
    if (has_chapter_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chapter_kind());
    }

  }
  // repeated .protoc.gameproto.TeXiaoItem pick_item = 6;
  total_size += 1 * this->pick_item_size();
  for (int i = 0; i < this->pick_item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pick_item(i));
  }

  // repeated .protoc.gameproto.DeadMonster monsters = 7;
  total_size += 1 * this->monsters_size();
  for (int i = 0; i < this->monsters_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->monsters(i));
  }

  // repeated uint32 buff_item_ids = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->buff_item_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->buff_item_ids(i));
    }
    total_size += 1 * this->buff_item_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WarResultReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WarResultReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WarResultReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WarResultReq::MergeFrom(const WarResultReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  pick_item_.MergeFrom(from.pick_item_);
  monsters_.MergeFrom(from.monsters_);
  buff_item_ids_.MergeFrom(from.buff_item_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chapter_id()) {
      set_chapter_id(from.chapter_id());
    }
    if (from.has_check_point_id()) {
      set_check_point_id(from.check_point_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_pass_second()) {
      set_pass_second(from.pass_second());
    }
    if (from.has_sign_ccrp()) {
      set_sign_ccrp(from.sign_ccrp());
    }
    if (from.has_chapter_kind()) {
      set_chapter_kind(from.chapter_kind());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WarResultReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WarResultReq::CopyFrom(const WarResultReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WarResultReq::IsInitialized() const {

  return true;
}

void WarResultReq::Swap(WarResultReq* other) {
  if (other != this) {
    std::swap(chapter_id_, other->chapter_id_);
    std::swap(check_point_id_, other->check_point_id_);
    std::swap(result_, other->result_);
    std::swap(pass_second_, other->pass_second_);
    std::swap(sign_ccrp_, other->sign_ccrp_);
    pick_item_.Swap(&other->pick_item_);
    monsters_.Swap(&other->monsters_);
    std::swap(chapter_kind_, other->chapter_kind_);
    buff_item_ids_.Swap(&other->buff_item_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WarResultReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WarResultReq_descriptor_;
  metadata.reflection = WarResultReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WarResultAck::kAwardItemFieldNumber;
const int WarResultAck::kPassSecondFieldNumber;
const int WarResultAck::kErrNoFieldNumber;
const int WarResultAck::kStarFieldNumber;
const int WarResultAck::kResultFieldNumber;
const int WarResultAck::kOldLevelFieldNumber;
const int WarResultAck::kNewLevelFieldNumber;
#endif  // !_MSC_VER

WarResultAck::WarResultAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WarResultAck::InitAsDefaultInstance() {
}

WarResultAck::WarResultAck(const WarResultAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WarResultAck::SharedCtor() {
  _cached_size_ = 0;
  pass_second_ = GOOGLE_LONGLONG(0);
  err_no_ = 0;
  star_ = 0;
  result_ = 0;
  old_level_ = 0;
  new_level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WarResultAck::~WarResultAck() {
  SharedDtor();
}

void WarResultAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WarResultAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WarResultAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WarResultAck_descriptor_;
}

const WarResultAck& WarResultAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

WarResultAck* WarResultAck::default_instance_ = NULL;

WarResultAck* WarResultAck::New() const {
  return new WarResultAck;
}

void WarResultAck::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    pass_second_ = GOOGLE_LONGLONG(0);
    err_no_ = 0;
    star_ = 0;
    result_ = 0;
    old_level_ = 0;
    new_level_ = 0;
  }
  award_item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WarResultAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protoc.gameproto.TeXiaoItem award_item = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_award_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_award_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_award_item;
        if (input->ExpectTag(16)) goto parse_pass_second;
        break;
      }

      // optional int64 pass_second = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pass_second:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pass_second_)));
          set_has_pass_second();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_err_no;
        break;
      }

      // optional int32 err_no = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_err_no:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_no_)));
          set_has_err_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_star;
        break;
      }

      // optional int32 star = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_result;
        break;
      }

      // optional int32 result = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_old_level;
        break;
      }

      // optional int32 old_level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_old_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &old_level_)));
          set_has_old_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_new_level;
        break;
      }

      // optional int32 new_level = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &new_level_)));
          set_has_new_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WarResultAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protoc.gameproto.TeXiaoItem award_item = 1;
  for (int i = 0; i < this->award_item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->award_item(i), output);
  }

  // optional int64 pass_second = 2;
  if (has_pass_second()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->pass_second(), output);
  }

  // optional int32 err_no = 3;
  if (has_err_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->err_no(), output);
  }

  // optional int32 star = 4;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->star(), output);
  }

  // optional int32 result = 5;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->result(), output);
  }

  // optional int32 old_level = 6;
  if (has_old_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->old_level(), output);
  }

  // optional int32 new_level = 7;
  if (has_new_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->new_level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WarResultAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protoc.gameproto.TeXiaoItem award_item = 1;
  for (int i = 0; i < this->award_item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->award_item(i), target);
  }

  // optional int64 pass_second = 2;
  if (has_pass_second()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->pass_second(), target);
  }

  // optional int32 err_no = 3;
  if (has_err_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->err_no(), target);
  }

  // optional int32 star = 4;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->star(), target);
  }

  // optional int32 result = 5;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->result(), target);
  }

  // optional int32 old_level = 6;
  if (has_old_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->old_level(), target);
  }

  // optional int32 new_level = 7;
  if (has_new_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->new_level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WarResultAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int64 pass_second = 2;
    if (has_pass_second()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pass_second());
    }

    // optional int32 err_no = 3;
    if (has_err_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err_no());
    }

    // optional int32 star = 4;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->star());
    }

    // optional int32 result = 5;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 old_level = 6;
    if (has_old_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->old_level());
    }

    // optional int32 new_level = 7;
    if (has_new_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->new_level());
    }

  }
  // repeated .protoc.gameproto.TeXiaoItem award_item = 1;
  total_size += 1 * this->award_item_size();
  for (int i = 0; i < this->award_item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->award_item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WarResultAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WarResultAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WarResultAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WarResultAck::MergeFrom(const WarResultAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  award_item_.MergeFrom(from.award_item_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_pass_second()) {
      set_pass_second(from.pass_second());
    }
    if (from.has_err_no()) {
      set_err_no(from.err_no());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_old_level()) {
      set_old_level(from.old_level());
    }
    if (from.has_new_level()) {
      set_new_level(from.new_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WarResultAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WarResultAck::CopyFrom(const WarResultAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WarResultAck::IsInitialized() const {

  return true;
}

void WarResultAck::Swap(WarResultAck* other) {
  if (other != this) {
    award_item_.Swap(&other->award_item_);
    std::swap(pass_second_, other->pass_second_);
    std::swap(err_no_, other->err_no_);
    std::swap(star_, other->star_);
    std::swap(result_, other->result_);
    std::swap(old_level_, other->old_level_);
    std::swap(new_level_, other->new_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WarResultAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WarResultAck_descriptor_;
  metadata.reflection = WarResultAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

DeadInWarNtf::DeadInWarNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeadInWarNtf::InitAsDefaultInstance() {
}

DeadInWarNtf::DeadInWarNtf(const DeadInWarNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeadInWarNtf::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeadInWarNtf::~DeadInWarNtf() {
  SharedDtor();
}

void DeadInWarNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeadInWarNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeadInWarNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeadInWarNtf_descriptor_;
}

const DeadInWarNtf& DeadInWarNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

DeadInWarNtf* DeadInWarNtf::default_instance_ = NULL;

DeadInWarNtf* DeadInWarNtf::New() const {
  return new DeadInWarNtf;
}

void DeadInWarNtf::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeadInWarNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void DeadInWarNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeadInWarNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeadInWarNtf::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeadInWarNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeadInWarNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeadInWarNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeadInWarNtf::MergeFrom(const DeadInWarNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeadInWarNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeadInWarNtf::CopyFrom(const DeadInWarNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeadInWarNtf::IsInitialized() const {

  return true;
}

void DeadInWarNtf::Swap(DeadInWarNtf* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeadInWarNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeadInWarNtf_descriptor_;
  metadata.reflection = DeadInWarNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeadInWarAck::kNeedGemFieldNumber;
#endif  // !_MSC_VER

DeadInWarAck::DeadInWarAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeadInWarAck::InitAsDefaultInstance() {
}

DeadInWarAck::DeadInWarAck(const DeadInWarAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeadInWarAck::SharedCtor() {
  _cached_size_ = 0;
  need_gem_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeadInWarAck::~DeadInWarAck() {
  SharedDtor();
}

void DeadInWarAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeadInWarAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeadInWarAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeadInWarAck_descriptor_;
}

const DeadInWarAck& DeadInWarAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

DeadInWarAck* DeadInWarAck::default_instance_ = NULL;

DeadInWarAck* DeadInWarAck::New() const {
  return new DeadInWarAck;
}

void DeadInWarAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    need_gem_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeadInWarAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 need_gem = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &need_gem_)));
          set_has_need_gem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeadInWarAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 need_gem = 1;
  if (has_need_gem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->need_gem(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeadInWarAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 need_gem = 1;
  if (has_need_gem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->need_gem(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeadInWarAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 need_gem = 1;
    if (has_need_gem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->need_gem());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeadInWarAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeadInWarAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeadInWarAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeadInWarAck::MergeFrom(const DeadInWarAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_need_gem()) {
      set_need_gem(from.need_gem());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeadInWarAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeadInWarAck::CopyFrom(const DeadInWarAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeadInWarAck::IsInitialized() const {

  return true;
}

void DeadInWarAck::Swap(DeadInWarAck* other) {
  if (other != this) {
    std::swap(need_gem_, other->need_gem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeadInWarAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeadInWarAck_descriptor_;
  metadata.reflection = DeadInWarAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ReviveReq::ReviveReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReviveReq::InitAsDefaultInstance() {
}

ReviveReq::ReviveReq(const ReviveReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReviveReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReviveReq::~ReviveReq() {
  SharedDtor();
}

void ReviveReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReviveReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReviveReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReviveReq_descriptor_;
}

const ReviveReq& ReviveReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

ReviveReq* ReviveReq::default_instance_ = NULL;

ReviveReq* ReviveReq::New() const {
  return new ReviveReq;
}

void ReviveReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReviveReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ReviveReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReviveReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReviveReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReviveReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReviveReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReviveReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReviveReq::MergeFrom(const ReviveReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReviveReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReviveReq::CopyFrom(const ReviveReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReviveReq::IsInitialized() const {

  return true;
}

void ReviveReq::Swap(ReviveReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReviveReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReviveReq_descriptor_;
  metadata.reflection = ReviveReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReviveAck::kErrNoFieldNumber;
#endif  // !_MSC_VER

ReviveAck::ReviveAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReviveAck::InitAsDefaultInstance() {
}

ReviveAck::ReviveAck(const ReviveAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReviveAck::SharedCtor() {
  _cached_size_ = 0;
  err_no_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReviveAck::~ReviveAck() {
  SharedDtor();
}

void ReviveAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReviveAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReviveAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReviveAck_descriptor_;
}

const ReviveAck& ReviveAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

ReviveAck* ReviveAck::default_instance_ = NULL;

ReviveAck* ReviveAck::New() const {
  return new ReviveAck;
}

void ReviveAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    err_no_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReviveAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 err_no = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_no_)));
          set_has_err_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReviveAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 err_no = 1;
  if (has_err_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->err_no(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReviveAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 err_no = 1;
  if (has_err_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->err_no(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReviveAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 err_no = 1;
    if (has_err_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err_no());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReviveAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReviveAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReviveAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReviveAck::MergeFrom(const ReviveAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_err_no()) {
      set_err_no(from.err_no());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReviveAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReviveAck::CopyFrom(const ReviveAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReviveAck::IsInitialized() const {

  return true;
}

void ReviveAck::Swap(ReviveAck* other) {
  if (other != this) {
    std::swap(err_no_, other->err_no_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReviveAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReviveAck_descriptor_;
  metadata.reflection = ReviveAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PetUpgradeReq::kIdFieldNumber;
const int PetUpgradeReq::kTunshiPetFieldNumber;
#endif  // !_MSC_VER

PetUpgradeReq::PetUpgradeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PetUpgradeReq::InitAsDefaultInstance() {
}

PetUpgradeReq::PetUpgradeReq(const PetUpgradeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PetUpgradeReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetUpgradeReq::~PetUpgradeReq() {
  SharedDtor();
}

void PetUpgradeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PetUpgradeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetUpgradeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetUpgradeReq_descriptor_;
}

const PetUpgradeReq& PetUpgradeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

PetUpgradeReq* PetUpgradeReq::default_instance_ = NULL;

PetUpgradeReq* PetUpgradeReq::New() const {
  return new PetUpgradeReq;
}

void PetUpgradeReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
  }
  tunshi_pet_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetUpgradeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tunshi_pet;
        break;
      }

      // repeated uint64 tunshi_pet = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tunshi_pet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_tunshi_pet())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_tunshi_pet())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tunshi_pet;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PetUpgradeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // repeated uint64 tunshi_pet = 2;
  for (int i = 0; i < this->tunshi_pet_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->tunshi_pet(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PetUpgradeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // repeated uint64 tunshi_pet = 2;
  for (int i = 0; i < this->tunshi_pet_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->tunshi_pet(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PetUpgradeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

  }
  // repeated uint64 tunshi_pet = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->tunshi_pet_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->tunshi_pet(i));
    }
    total_size += 1 * this->tunshi_pet_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetUpgradeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetUpgradeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetUpgradeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetUpgradeReq::MergeFrom(const PetUpgradeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  tunshi_pet_.MergeFrom(from.tunshi_pet_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetUpgradeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetUpgradeReq::CopyFrom(const PetUpgradeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetUpgradeReq::IsInitialized() const {

  return true;
}

void PetUpgradeReq::Swap(PetUpgradeReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    tunshi_pet_.Swap(&other->tunshi_pet_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetUpgradeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetUpgradeReq_descriptor_;
  metadata.reflection = PetUpgradeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PetUpgradeAck::kIdFieldNumber;
const int PetUpgradeAck::kTunshiPetFieldNumber;
const int PetUpgradeAck::kErrNoFieldNumber;
#endif  // !_MSC_VER

PetUpgradeAck::PetUpgradeAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PetUpgradeAck::InitAsDefaultInstance() {
}

PetUpgradeAck::PetUpgradeAck(const PetUpgradeAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PetUpgradeAck::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  err_no_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetUpgradeAck::~PetUpgradeAck() {
  SharedDtor();
}

void PetUpgradeAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PetUpgradeAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetUpgradeAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetUpgradeAck_descriptor_;
}

const PetUpgradeAck& PetUpgradeAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

PetUpgradeAck* PetUpgradeAck::default_instance_ = NULL;

PetUpgradeAck* PetUpgradeAck::New() const {
  return new PetUpgradeAck;
}

void PetUpgradeAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    err_no_ = 0;
  }
  tunshi_pet_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetUpgradeAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tunshi_pet;
        break;
      }

      // repeated uint64 tunshi_pet = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tunshi_pet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_tunshi_pet())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_tunshi_pet())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tunshi_pet;
        if (input->ExpectTag(24)) goto parse_err_no;
        break;
      }

      // optional int32 err_no = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_err_no:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_no_)));
          set_has_err_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PetUpgradeAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // repeated uint64 tunshi_pet = 2;
  for (int i = 0; i < this->tunshi_pet_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->tunshi_pet(i), output);
  }

  // optional int32 err_no = 3;
  if (has_err_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->err_no(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PetUpgradeAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // repeated uint64 tunshi_pet = 2;
  for (int i = 0; i < this->tunshi_pet_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->tunshi_pet(i), target);
  }

  // optional int32 err_no = 3;
  if (has_err_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->err_no(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PetUpgradeAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional int32 err_no = 3;
    if (has_err_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err_no());
    }

  }
  // repeated uint64 tunshi_pet = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->tunshi_pet_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->tunshi_pet(i));
    }
    total_size += 1 * this->tunshi_pet_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetUpgradeAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetUpgradeAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetUpgradeAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetUpgradeAck::MergeFrom(const PetUpgradeAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  tunshi_pet_.MergeFrom(from.tunshi_pet_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_err_no()) {
      set_err_no(from.err_no());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetUpgradeAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetUpgradeAck::CopyFrom(const PetUpgradeAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetUpgradeAck::IsInitialized() const {

  return true;
}

void PetUpgradeAck::Swap(PetUpgradeAck* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    tunshi_pet_.Swap(&other->tunshi_pet_);
    std::swap(err_no_, other->err_no_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetUpgradeAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetUpgradeAck_descriptor_;
  metadata.reflection = PetUpgradeAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PetEvolveReq::kIdFieldNumber;
#endif  // !_MSC_VER

PetEvolveReq::PetEvolveReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PetEvolveReq::InitAsDefaultInstance() {
}

PetEvolveReq::PetEvolveReq(const PetEvolveReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PetEvolveReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetEvolveReq::~PetEvolveReq() {
  SharedDtor();
}

void PetEvolveReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PetEvolveReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetEvolveReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetEvolveReq_descriptor_;
}

const PetEvolveReq& PetEvolveReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

PetEvolveReq* PetEvolveReq::default_instance_ = NULL;

PetEvolveReq* PetEvolveReq::New() const {
  return new PetEvolveReq;
}

void PetEvolveReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetEvolveReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PetEvolveReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PetEvolveReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PetEvolveReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetEvolveReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetEvolveReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetEvolveReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetEvolveReq::MergeFrom(const PetEvolveReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetEvolveReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetEvolveReq::CopyFrom(const PetEvolveReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetEvolveReq::IsInitialized() const {

  return true;
}

void PetEvolveReq::Swap(PetEvolveReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetEvolveReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetEvolveReq_descriptor_;
  metadata.reflection = PetEvolveReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PetEvolveAck::kIdFieldNumber;
const int PetEvolveAck::kErrNoFieldNumber;
#endif  // !_MSC_VER

PetEvolveAck::PetEvolveAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PetEvolveAck::InitAsDefaultInstance() {
}

PetEvolveAck::PetEvolveAck(const PetEvolveAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PetEvolveAck::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  err_no_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetEvolveAck::~PetEvolveAck() {
  SharedDtor();
}

void PetEvolveAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PetEvolveAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetEvolveAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetEvolveAck_descriptor_;
}

const PetEvolveAck& PetEvolveAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

PetEvolveAck* PetEvolveAck::default_instance_ = NULL;

PetEvolveAck* PetEvolveAck::New() const {
  return new PetEvolveAck;
}

void PetEvolveAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    err_no_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetEvolveAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_err_no;
        break;
      }

      // optional int32 err_no = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_err_no:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_no_)));
          set_has_err_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PetEvolveAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional int32 err_no = 2;
  if (has_err_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->err_no(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PetEvolveAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional int32 err_no = 2;
  if (has_err_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->err_no(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PetEvolveAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional int32 err_no = 2;
    if (has_err_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err_no());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetEvolveAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetEvolveAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetEvolveAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetEvolveAck::MergeFrom(const PetEvolveAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_err_no()) {
      set_err_no(from.err_no());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetEvolveAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetEvolveAck::CopyFrom(const PetEvolveAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetEvolveAck::IsInitialized() const {

  return true;
}

void PetEvolveAck::Swap(PetEvolveAck* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(err_no_, other->err_no_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetEvolveAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetEvolveAck_descriptor_;
  metadata.reflection = PetEvolveAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

OwnedPetIDListReq::OwnedPetIDListReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OwnedPetIDListReq::InitAsDefaultInstance() {
}

OwnedPetIDListReq::OwnedPetIDListReq(const OwnedPetIDListReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OwnedPetIDListReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OwnedPetIDListReq::~OwnedPetIDListReq() {
  SharedDtor();
}

void OwnedPetIDListReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OwnedPetIDListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OwnedPetIDListReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OwnedPetIDListReq_descriptor_;
}

const OwnedPetIDListReq& OwnedPetIDListReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

OwnedPetIDListReq* OwnedPetIDListReq::default_instance_ = NULL;

OwnedPetIDListReq* OwnedPetIDListReq::New() const {
  return new OwnedPetIDListReq;
}

void OwnedPetIDListReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OwnedPetIDListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void OwnedPetIDListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OwnedPetIDListReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OwnedPetIDListReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OwnedPetIDListReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OwnedPetIDListReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OwnedPetIDListReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OwnedPetIDListReq::MergeFrom(const OwnedPetIDListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OwnedPetIDListReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OwnedPetIDListReq::CopyFrom(const OwnedPetIDListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OwnedPetIDListReq::IsInitialized() const {

  return true;
}

void OwnedPetIDListReq::Swap(OwnedPetIDListReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OwnedPetIDListReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OwnedPetIDListReq_descriptor_;
  metadata.reflection = OwnedPetIDListReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OwnedPetIDListAck::kIdFieldNumber;
#endif  // !_MSC_VER

OwnedPetIDListAck::OwnedPetIDListAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OwnedPetIDListAck::InitAsDefaultInstance() {
}

OwnedPetIDListAck::OwnedPetIDListAck(const OwnedPetIDListAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OwnedPetIDListAck::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OwnedPetIDListAck::~OwnedPetIDListAck() {
  SharedDtor();
}

void OwnedPetIDListAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OwnedPetIDListAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OwnedPetIDListAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OwnedPetIDListAck_descriptor_;
}

const OwnedPetIDListAck& OwnedPetIDListAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

OwnedPetIDListAck* OwnedPetIDListAck::default_instance_ = NULL;

OwnedPetIDListAck* OwnedPetIDListAck::New() const {
  return new OwnedPetIDListAck;
}

void OwnedPetIDListAck::Clear() {
  id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OwnedPetIDListAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OwnedPetIDListAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 id = 1;
  for (int i = 0; i < this->id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OwnedPetIDListAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 id = 1;
  for (int i = 0; i < this->id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OwnedPetIDListAck::ByteSize() const {
  int total_size = 0;

  // repeated uint32 id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->id(i));
    }
    total_size += 1 * this->id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OwnedPetIDListAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OwnedPetIDListAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OwnedPetIDListAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OwnedPetIDListAck::MergeFrom(const OwnedPetIDListAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  id_.MergeFrom(from.id_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OwnedPetIDListAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OwnedPetIDListAck::CopyFrom(const OwnedPetIDListAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OwnedPetIDListAck::IsInitialized() const {

  return true;
}

void OwnedPetIDListAck::Swap(OwnedPetIDListAck* other) {
  if (other != this) {
    id_.Swap(&other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OwnedPetIDListAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OwnedPetIDListAck_descriptor_;
  metadata.reflection = OwnedPetIDListAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NewPetOpenedNtf::kIdFieldNumber;
#endif  // !_MSC_VER

NewPetOpenedNtf::NewPetOpenedNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NewPetOpenedNtf::InitAsDefaultInstance() {
}

NewPetOpenedNtf::NewPetOpenedNtf(const NewPetOpenedNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NewPetOpenedNtf::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NewPetOpenedNtf::~NewPetOpenedNtf() {
  SharedDtor();
}

void NewPetOpenedNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NewPetOpenedNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewPetOpenedNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NewPetOpenedNtf_descriptor_;
}

const NewPetOpenedNtf& NewPetOpenedNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

NewPetOpenedNtf* NewPetOpenedNtf::default_instance_ = NULL;

NewPetOpenedNtf* NewPetOpenedNtf::New() const {
  return new NewPetOpenedNtf;
}

void NewPetOpenedNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NewPetOpenedNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NewPetOpenedNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NewPetOpenedNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NewPetOpenedNtf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewPetOpenedNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NewPetOpenedNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NewPetOpenedNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NewPetOpenedNtf::MergeFrom(const NewPetOpenedNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NewPetOpenedNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewPetOpenedNtf::CopyFrom(const NewPetOpenedNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewPetOpenedNtf::IsInitialized() const {

  return true;
}

void NewPetOpenedNtf::Swap(NewPetOpenedNtf* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NewPetOpenedNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NewPetOpenedNtf_descriptor_;
  metadata.reflection = NewPetOpenedNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChenJiuData::kIdFieldNumber;
const int ChenJiuData::kValueFieldNumber;
const int ChenJiuData::kTypeFieldNumber;
#endif  // !_MSC_VER

ChenJiuData::ChenJiuData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChenJiuData::InitAsDefaultInstance() {
}

ChenJiuData::ChenJiuData(const ChenJiuData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChenJiuData::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  value_ = 0u;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChenJiuData::~ChenJiuData() {
  SharedDtor();
}

void ChenJiuData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChenJiuData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChenJiuData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChenJiuData_descriptor_;
}

const ChenJiuData& ChenJiuData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

ChenJiuData* ChenJiuData::default_instance_ = NULL;

ChenJiuData* ChenJiuData::New() const {
  return new ChenJiuData;
}

void ChenJiuData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    value_ = 0u;
    type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChenJiuData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional uint32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional uint32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChenJiuData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->value(), output);
  }

  // optional uint32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChenJiuData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->value(), target);
  }

  // optional uint32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChenJiuData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

    // optional uint32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChenJiuData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChenJiuData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChenJiuData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChenJiuData::MergeFrom(const ChenJiuData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChenJiuData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChenJiuData::CopyFrom(const ChenJiuData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChenJiuData::IsInitialized() const {

  return true;
}

void ChenJiuData::Swap(ChenJiuData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(value_, other->value_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChenJiuData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChenJiuData_descriptor_;
  metadata.reflection = ChenJiuData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChenJiuKind::kKindFieldNumber;
const int ChenJiuKind::kDataFieldNumber;
#endif  // !_MSC_VER

ChenJiuKind::ChenJiuKind()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChenJiuKind::InitAsDefaultInstance() {
}

ChenJiuKind::ChenJiuKind(const ChenJiuKind& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChenJiuKind::SharedCtor() {
  _cached_size_ = 0;
  kind_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChenJiuKind::~ChenJiuKind() {
  SharedDtor();
}

void ChenJiuKind::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChenJiuKind::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChenJiuKind::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChenJiuKind_descriptor_;
}

const ChenJiuKind& ChenJiuKind::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

ChenJiuKind* ChenJiuKind::default_instance_ = NULL;

ChenJiuKind* ChenJiuKind::New() const {
  return new ChenJiuKind;
}

void ChenJiuKind::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    kind_ = 0u;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChenJiuKind::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 kind = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kind_)));
          set_has_kind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // repeated .protoc.gameproto.ChenJiuData data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChenJiuKind::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 kind = 1;
  if (has_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->kind(), output);
  }

  // repeated .protoc.gameproto.ChenJiuData data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChenJiuKind::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 kind = 1;
  if (has_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->kind(), target);
  }

  // repeated .protoc.gameproto.ChenJiuData data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChenJiuKind::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 kind = 1;
    if (has_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kind());
    }

  }
  // repeated .protoc.gameproto.ChenJiuData data = 2;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChenJiuKind::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChenJiuKind* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChenJiuKind*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChenJiuKind::MergeFrom(const ChenJiuKind& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_kind()) {
      set_kind(from.kind());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChenJiuKind::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChenJiuKind::CopyFrom(const ChenJiuKind& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChenJiuKind::IsInitialized() const {

  return true;
}

void ChenJiuKind::Swap(ChenJiuKind* other) {
  if (other != this) {
    std::swap(kind_, other->kind_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChenJiuKind::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChenJiuKind_descriptor_;
  metadata.reflection = ChenJiuKind_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetChenJiuReq::GetChenJiuReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetChenJiuReq::InitAsDefaultInstance() {
}

GetChenJiuReq::GetChenJiuReq(const GetChenJiuReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetChenJiuReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetChenJiuReq::~GetChenJiuReq() {
  SharedDtor();
}

void GetChenJiuReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetChenJiuReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetChenJiuReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetChenJiuReq_descriptor_;
}

const GetChenJiuReq& GetChenJiuReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

GetChenJiuReq* GetChenJiuReq::default_instance_ = NULL;

GetChenJiuReq* GetChenJiuReq::New() const {
  return new GetChenJiuReq;
}

void GetChenJiuReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetChenJiuReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetChenJiuReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetChenJiuReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetChenJiuReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetChenJiuReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetChenJiuReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetChenJiuReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetChenJiuReq::MergeFrom(const GetChenJiuReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetChenJiuReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetChenJiuReq::CopyFrom(const GetChenJiuReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetChenJiuReq::IsInitialized() const {

  return true;
}

void GetChenJiuReq::Swap(GetChenJiuReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetChenJiuReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetChenJiuReq_descriptor_;
  metadata.reflection = GetChenJiuReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetChenJiuAck::kKindFieldNumber;
#endif  // !_MSC_VER

GetChenJiuAck::GetChenJiuAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetChenJiuAck::InitAsDefaultInstance() {
}

GetChenJiuAck::GetChenJiuAck(const GetChenJiuAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetChenJiuAck::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetChenJiuAck::~GetChenJiuAck() {
  SharedDtor();
}

void GetChenJiuAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetChenJiuAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetChenJiuAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetChenJiuAck_descriptor_;
}

const GetChenJiuAck& GetChenJiuAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

GetChenJiuAck* GetChenJiuAck::default_instance_ = NULL;

GetChenJiuAck* GetChenJiuAck::New() const {
  return new GetChenJiuAck;
}

void GetChenJiuAck::Clear() {
  kind_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetChenJiuAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protoc.gameproto.ChenJiuKind kind = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_kind:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_kind()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_kind;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetChenJiuAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protoc.gameproto.ChenJiuKind kind = 1;
  for (int i = 0; i < this->kind_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->kind(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetChenJiuAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protoc.gameproto.ChenJiuKind kind = 1;
  for (int i = 0; i < this->kind_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->kind(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetChenJiuAck::ByteSize() const {
  int total_size = 0;

  // repeated .protoc.gameproto.ChenJiuKind kind = 1;
  total_size += 1 * this->kind_size();
  for (int i = 0; i < this->kind_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->kind(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetChenJiuAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetChenJiuAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetChenJiuAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetChenJiuAck::MergeFrom(const GetChenJiuAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  kind_.MergeFrom(from.kind_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetChenJiuAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetChenJiuAck::CopyFrom(const GetChenJiuAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetChenJiuAck::IsInitialized() const {

  return true;
}

void GetChenJiuAck::Swap(GetChenJiuAck* other) {
  if (other != this) {
    kind_.Swap(&other->kind_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetChenJiuAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetChenJiuAck_descriptor_;
  metadata.reflection = GetChenJiuAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateChenJiu::kKindFieldNumber;
const int UpdateChenJiu::kDataFieldNumber;
#endif  // !_MSC_VER

UpdateChenJiu::UpdateChenJiu()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateChenJiu::InitAsDefaultInstance() {
  data_ = const_cast< ::protoc::gameproto::ChenJiuData*>(&::protoc::gameproto::ChenJiuData::default_instance());
}

UpdateChenJiu::UpdateChenJiu(const UpdateChenJiu& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateChenJiu::SharedCtor() {
  _cached_size_ = 0;
  kind_ = 0u;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateChenJiu::~UpdateChenJiu() {
  SharedDtor();
}

void UpdateChenJiu::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void UpdateChenJiu::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateChenJiu::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateChenJiu_descriptor_;
}

const UpdateChenJiu& UpdateChenJiu::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

UpdateChenJiu* UpdateChenJiu::default_instance_ = NULL;

UpdateChenJiu* UpdateChenJiu::New() const {
  return new UpdateChenJiu;
}

void UpdateChenJiu::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    kind_ = 0u;
    if (has_data()) {
      if (data_ != NULL) data_->::protoc::gameproto::ChenJiuData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateChenJiu::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 kind = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kind_)));
          set_has_kind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional .protoc.gameproto.ChenJiuData data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateChenJiu::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 kind = 1;
  if (has_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->kind(), output);
  }

  // optional .protoc.gameproto.ChenJiuData data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateChenJiu::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 kind = 1;
  if (has_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->kind(), target);
  }

  // optional .protoc.gameproto.ChenJiuData data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateChenJiu::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 kind = 1;
    if (has_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kind());
    }

    // optional .protoc.gameproto.ChenJiuData data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateChenJiu::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateChenJiu* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateChenJiu*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateChenJiu::MergeFrom(const UpdateChenJiu& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_kind()) {
      set_kind(from.kind());
    }
    if (from.has_data()) {
      mutable_data()->::protoc::gameproto::ChenJiuData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateChenJiu::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateChenJiu::CopyFrom(const UpdateChenJiu& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateChenJiu::IsInitialized() const {

  return true;
}

void UpdateChenJiu::Swap(UpdateChenJiu* other) {
  if (other != this) {
    std::swap(kind_, other->kind_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateChenJiu::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateChenJiu_descriptor_;
  metadata.reflection = UpdateChenJiu_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetChenJiuAwardReq::kIdFieldNumber;
#endif  // !_MSC_VER

GetChenJiuAwardReq::GetChenJiuAwardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetChenJiuAwardReq::InitAsDefaultInstance() {
}

GetChenJiuAwardReq::GetChenJiuAwardReq(const GetChenJiuAwardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetChenJiuAwardReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetChenJiuAwardReq::~GetChenJiuAwardReq() {
  SharedDtor();
}

void GetChenJiuAwardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetChenJiuAwardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetChenJiuAwardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetChenJiuAwardReq_descriptor_;
}

const GetChenJiuAwardReq& GetChenJiuAwardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

GetChenJiuAwardReq* GetChenJiuAwardReq::default_instance_ = NULL;

GetChenJiuAwardReq* GetChenJiuAwardReq::New() const {
  return new GetChenJiuAwardReq;
}

void GetChenJiuAwardReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetChenJiuAwardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetChenJiuAwardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetChenJiuAwardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetChenJiuAwardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetChenJiuAwardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetChenJiuAwardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetChenJiuAwardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetChenJiuAwardReq::MergeFrom(const GetChenJiuAwardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetChenJiuAwardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetChenJiuAwardReq::CopyFrom(const GetChenJiuAwardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetChenJiuAwardReq::IsInitialized() const {

  return true;
}

void GetChenJiuAwardReq::Swap(GetChenJiuAwardReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetChenJiuAwardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetChenJiuAwardReq_descriptor_;
  metadata.reflection = GetChenJiuAwardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetChenJiuAwardAck::kErrNoFieldNumber;
const int GetChenJiuAwardAck::kIdFieldNumber;
#endif  // !_MSC_VER

GetChenJiuAwardAck::GetChenJiuAwardAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetChenJiuAwardAck::InitAsDefaultInstance() {
}

GetChenJiuAwardAck::GetChenJiuAwardAck(const GetChenJiuAwardAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetChenJiuAwardAck::SharedCtor() {
  _cached_size_ = 0;
  err_no_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetChenJiuAwardAck::~GetChenJiuAwardAck() {
  SharedDtor();
}

void GetChenJiuAwardAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetChenJiuAwardAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetChenJiuAwardAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetChenJiuAwardAck_descriptor_;
}

const GetChenJiuAwardAck& GetChenJiuAwardAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

GetChenJiuAwardAck* GetChenJiuAwardAck::default_instance_ = NULL;

GetChenJiuAwardAck* GetChenJiuAwardAck::New() const {
  return new GetChenJiuAwardAck;
}

void GetChenJiuAwardAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    err_no_ = 0;
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetChenJiuAwardAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 err_no = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_no_)));
          set_has_err_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional uint32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetChenJiuAwardAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 err_no = 1;
  if (has_err_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->err_no(), output);
  }

  // optional uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetChenJiuAwardAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 err_no = 1;
  if (has_err_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->err_no(), target);
  }

  // optional uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetChenJiuAwardAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 err_no = 1;
    if (has_err_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err_no());
    }

    // optional uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetChenJiuAwardAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetChenJiuAwardAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetChenJiuAwardAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetChenJiuAwardAck::MergeFrom(const GetChenJiuAwardAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_err_no()) {
      set_err_no(from.err_no());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetChenJiuAwardAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetChenJiuAwardAck::CopyFrom(const GetChenJiuAwardAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetChenJiuAwardAck::IsInitialized() const {

  return true;
}

void GetChenJiuAwardAck::Swap(GetChenJiuAwardAck* other) {
  if (other != this) {
    std::swap(err_no_, other->err_no_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetChenJiuAwardAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetChenJiuAwardAck_descriptor_;
  metadata.reflection = GetChenJiuAwardAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OneKeyGetChenJiuAwardReq::kIdFieldNumber;
#endif  // !_MSC_VER

OneKeyGetChenJiuAwardReq::OneKeyGetChenJiuAwardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OneKeyGetChenJiuAwardReq::InitAsDefaultInstance() {
}

OneKeyGetChenJiuAwardReq::OneKeyGetChenJiuAwardReq(const OneKeyGetChenJiuAwardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OneKeyGetChenJiuAwardReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OneKeyGetChenJiuAwardReq::~OneKeyGetChenJiuAwardReq() {
  SharedDtor();
}

void OneKeyGetChenJiuAwardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OneKeyGetChenJiuAwardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OneKeyGetChenJiuAwardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OneKeyGetChenJiuAwardReq_descriptor_;
}

const OneKeyGetChenJiuAwardReq& OneKeyGetChenJiuAwardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

OneKeyGetChenJiuAwardReq* OneKeyGetChenJiuAwardReq::default_instance_ = NULL;

OneKeyGetChenJiuAwardReq* OneKeyGetChenJiuAwardReq::New() const {
  return new OneKeyGetChenJiuAwardReq;
}

void OneKeyGetChenJiuAwardReq::Clear() {
  id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OneKeyGetChenJiuAwardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OneKeyGetChenJiuAwardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 id = 1;
  for (int i = 0; i < this->id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OneKeyGetChenJiuAwardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 id = 1;
  for (int i = 0; i < this->id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OneKeyGetChenJiuAwardReq::ByteSize() const {
  int total_size = 0;

  // repeated uint32 id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->id(i));
    }
    total_size += 1 * this->id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OneKeyGetChenJiuAwardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OneKeyGetChenJiuAwardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OneKeyGetChenJiuAwardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OneKeyGetChenJiuAwardReq::MergeFrom(const OneKeyGetChenJiuAwardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  id_.MergeFrom(from.id_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OneKeyGetChenJiuAwardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OneKeyGetChenJiuAwardReq::CopyFrom(const OneKeyGetChenJiuAwardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OneKeyGetChenJiuAwardReq::IsInitialized() const {

  return true;
}

void OneKeyGetChenJiuAwardReq::Swap(OneKeyGetChenJiuAwardReq* other) {
  if (other != this) {
    id_.Swap(&other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OneKeyGetChenJiuAwardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OneKeyGetChenJiuAwardReq_descriptor_;
  metadata.reflection = OneKeyGetChenJiuAwardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuestData::kIdFieldNumber;
const int QuestData::kCountFieldNumber;
const int QuestData::kCurrentCountFieldNumber;
const int QuestData::kIsFinishedFieldNumber;
const int QuestData::kIsAwardedFieldNumber;
const int QuestData::kNameFieldNumber;
const int QuestData::kDescFieldNumber;
const int QuestData::kAwardFieldNumber;
const int QuestData::kCategoryNameFieldNumber;
#endif  // !_MSC_VER

QuestData::QuestData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuestData::InitAsDefaultInstance() {
}

QuestData::QuestData(const QuestData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuestData::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  count_ = 0u;
  current_count_ = 0u;
  is_finished_ = false;
  is_awarded_ = false;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  award_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  category_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestData::~QuestData() {
  SharedDtor();
}

void QuestData::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (award_ != &::google::protobuf::internal::kEmptyString) {
    delete award_;
  }
  if (category_name_ != &::google::protobuf::internal::kEmptyString) {
    delete category_name_;
  }
  if (this != default_instance_) {
  }
}

void QuestData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestData_descriptor_;
}

const QuestData& QuestData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

QuestData* QuestData::default_instance_ = NULL;

QuestData* QuestData::New() const {
  return new QuestData;
}

void QuestData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    count_ = 0u;
    current_count_ = 0u;
    is_finished_ = false;
    is_awarded_ = false;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::kEmptyString) {
        desc_->clear();
      }
    }
    if (has_award()) {
      if (award_ != &::google::protobuf::internal::kEmptyString) {
        award_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_category_name()) {
      if (category_name_ != &::google::protobuf::internal::kEmptyString) {
        category_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }

      // optional uint32 count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_current_count;
        break;
      }

      // optional uint32 current_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_current_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &current_count_)));
          set_has_current_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_is_finished;
        break;
      }

      // optional bool is_finished = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_finished:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_finished_)));
          set_has_is_finished();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_is_awarded;
        break;
      }

      // optional bool is_awarded = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_awarded:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_awarded_)));
          set_has_is_awarded();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_name;
        break;
      }

      // optional string name = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_desc;
        break;
      }

      // optional string desc = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_award;
        break;
      }

      // optional string award = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_award:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_award()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->award().data(), this->award().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_category_name;
        break;
      }

      // optional string category_name = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_category_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_category_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->category_name().data(), this->category_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuestData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->count(), output);
  }

  // optional uint32 current_count = 4;
  if (has_current_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->current_count(), output);
  }

  // optional bool is_finished = 5;
  if (has_is_finished()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_finished(), output);
  }

  // optional bool is_awarded = 6;
  if (has_is_awarded()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_awarded(), output);
  }

  // optional string name = 7;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->name(), output);
  }

  // optional string desc = 8;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->desc(), output);
  }

  // optional string award = 9;
  if (has_award()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->award().data(), this->award().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->award(), output);
  }

  // optional string category_name = 10;
  if (has_category_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->category_name().data(), this->category_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->category_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuestData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->count(), target);
  }

  // optional uint32 current_count = 4;
  if (has_current_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->current_count(), target);
  }

  // optional bool is_finished = 5;
  if (has_is_finished()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_finished(), target);
  }

  // optional bool is_awarded = 6;
  if (has_is_awarded()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_awarded(), target);
  }

  // optional string name = 7;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->name(), target);
  }

  // optional string desc = 8;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->desc(), target);
  }

  // optional string award = 9;
  if (has_award()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->award().data(), this->award().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->award(), target);
  }

  // optional string category_name = 10;
  if (has_category_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->category_name().data(), this->category_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->category_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuestData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // optional uint32 current_count = 4;
    if (has_current_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->current_count());
    }

    // optional bool is_finished = 5;
    if (has_is_finished()) {
      total_size += 1 + 1;
    }

    // optional bool is_awarded = 6;
    if (has_is_awarded()) {
      total_size += 1 + 1;
    }

    // optional string name = 7;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string desc = 8;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

    // optional string award = 9;
    if (has_award()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->award());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string category_name = 10;
    if (has_category_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->category_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestData::MergeFrom(const QuestData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_current_count()) {
      set_current_count(from.current_count());
    }
    if (from.has_is_finished()) {
      set_is_finished(from.is_finished());
    }
    if (from.has_is_awarded()) {
      set_is_awarded(from.is_awarded());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
    if (from.has_award()) {
      set_award(from.award());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_category_name()) {
      set_category_name(from.category_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestData::CopyFrom(const QuestData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestData::IsInitialized() const {

  return true;
}

void QuestData::Swap(QuestData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(count_, other->count_);
    std::swap(current_count_, other->current_count_);
    std::swap(is_finished_, other->is_finished_);
    std::swap(is_awarded_, other->is_awarded_);
    std::swap(name_, other->name_);
    std::swap(desc_, other->desc_);
    std::swap(award_, other->award_);
    std::swap(category_name_, other->category_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestData_descriptor_;
  metadata.reflection = QuestData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetQuestListReq::kPeriodFieldNumber;
#endif  // !_MSC_VER

GetQuestListReq::GetQuestListReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetQuestListReq::InitAsDefaultInstance() {
}

GetQuestListReq::GetQuestListReq(const GetQuestListReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetQuestListReq::SharedCtor() {
  _cached_size_ = 0;
  period_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetQuestListReq::~GetQuestListReq() {
  SharedDtor();
}

void GetQuestListReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetQuestListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetQuestListReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetQuestListReq_descriptor_;
}

const GetQuestListReq& GetQuestListReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

GetQuestListReq* GetQuestListReq::default_instance_ = NULL;

GetQuestListReq* GetQuestListReq::New() const {
  return new GetQuestListReq;
}

void GetQuestListReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    period_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetQuestListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protoc.gameproto.Period period = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protoc::gameproto::Period_IsValid(value)) {
            set_period(static_cast< ::protoc::gameproto::Period >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetQuestListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .protoc.gameproto.Period period = 1;
  if (has_period()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->period(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetQuestListReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .protoc.gameproto.Period period = 1;
  if (has_period()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->period(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetQuestListReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .protoc.gameproto.Period period = 1;
    if (has_period()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->period());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetQuestListReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetQuestListReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetQuestListReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetQuestListReq::MergeFrom(const GetQuestListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_period()) {
      set_period(from.period());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetQuestListReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetQuestListReq::CopyFrom(const GetQuestListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetQuestListReq::IsInitialized() const {

  return true;
}

void GetQuestListReq::Swap(GetQuestListReq* other) {
  if (other != this) {
    std::swap(period_, other->period_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetQuestListReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetQuestListReq_descriptor_;
  metadata.reflection = GetQuestListReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetQuestListAck::kDataFieldNumber;
const int GetQuestListAck::kTimeFieldNumber;
const int GetQuestListAck::kDayFieldNumber;
#endif  // !_MSC_VER

GetQuestListAck::GetQuestListAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetQuestListAck::InitAsDefaultInstance() {
}

GetQuestListAck::GetQuestListAck(const GetQuestListAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetQuestListAck::SharedCtor() {
  _cached_size_ = 0;
  time_ = 0u;
  day_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetQuestListAck::~GetQuestListAck() {
  SharedDtor();
}

void GetQuestListAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetQuestListAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetQuestListAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetQuestListAck_descriptor_;
}

const GetQuestListAck& GetQuestListAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

GetQuestListAck* GetQuestListAck::default_instance_ = NULL;

GetQuestListAck* GetQuestListAck::New() const {
  return new GetQuestListAck;
}

void GetQuestListAck::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    time_ = 0u;
    day_ = 0u;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetQuestListAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protoc.gameproto.QuestData data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // optional uint32 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_day;
        break;
      }

      // optional uint32 day = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &day_)));
          set_has_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetQuestListAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protoc.gameproto.QuestData data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  // optional uint32 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time(), output);
  }

  // optional uint32 day = 3;
  if (has_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->day(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetQuestListAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protoc.gameproto.QuestData data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }

  // optional uint32 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time(), target);
  }

  // optional uint32 day = 3;
  if (has_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->day(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetQuestListAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional uint32 day = 3;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->day());
    }

  }
  // repeated .protoc.gameproto.QuestData data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetQuestListAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetQuestListAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetQuestListAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetQuestListAck::MergeFrom(const GetQuestListAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_day()) {
      set_day(from.day());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetQuestListAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetQuestListAck::CopyFrom(const GetQuestListAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetQuestListAck::IsInitialized() const {

  return true;
}

void GetQuestListAck::Swap(GetQuestListAck* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(time_, other->time_);
    std::swap(day_, other->day_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetQuestListAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetQuestListAck_descriptor_;
  metadata.reflection = GetQuestListAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuestUpdateData::kIdFieldNumber;
const int QuestUpdateData::kCurrentCountFieldNumber;
const int QuestUpdateData::kIsFinishedFieldNumber;
const int QuestUpdateData::kIsAwardedFieldNumber;
const int QuestUpdateData::kPeriodFieldNumber;
#endif  // !_MSC_VER

QuestUpdateData::QuestUpdateData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuestUpdateData::InitAsDefaultInstance() {
}

QuestUpdateData::QuestUpdateData(const QuestUpdateData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuestUpdateData::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  current_count_ = 0u;
  is_finished_ = false;
  is_awarded_ = false;
  period_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestUpdateData::~QuestUpdateData() {
  SharedDtor();
}

void QuestUpdateData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuestUpdateData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestUpdateData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestUpdateData_descriptor_;
}

const QuestUpdateData& QuestUpdateData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

QuestUpdateData* QuestUpdateData::default_instance_ = NULL;

QuestUpdateData* QuestUpdateData::New() const {
  return new QuestUpdateData;
}

void QuestUpdateData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    current_count_ = 0u;
    is_finished_ = false;
    is_awarded_ = false;
    period_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestUpdateData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_current_count;
        break;
      }

      // optional uint32 current_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_current_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &current_count_)));
          set_has_current_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_finished;
        break;
      }

      // optional bool is_finished = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_finished:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_finished_)));
          set_has_is_finished();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_awarded;
        break;
      }

      // optional bool is_awarded = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_awarded:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_awarded_)));
          set_has_is_awarded();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_period;
        break;
      }

      // optional .protoc.gameproto.Period period = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_period:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protoc::gameproto::Period_IsValid(value)) {
            set_period(static_cast< ::protoc::gameproto::Period >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuestUpdateData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 current_count = 2;
  if (has_current_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->current_count(), output);
  }

  // optional bool is_finished = 3;
  if (has_is_finished()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_finished(), output);
  }

  // optional bool is_awarded = 4;
  if (has_is_awarded()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_awarded(), output);
  }

  // optional .protoc.gameproto.Period period = 5;
  if (has_period()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->period(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuestUpdateData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 current_count = 2;
  if (has_current_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->current_count(), target);
  }

  // optional bool is_finished = 3;
  if (has_is_finished()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_finished(), target);
  }

  // optional bool is_awarded = 4;
  if (has_is_awarded()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_awarded(), target);
  }

  // optional .protoc.gameproto.Period period = 5;
  if (has_period()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->period(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuestUpdateData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 current_count = 2;
    if (has_current_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->current_count());
    }

    // optional bool is_finished = 3;
    if (has_is_finished()) {
      total_size += 1 + 1;
    }

    // optional bool is_awarded = 4;
    if (has_is_awarded()) {
      total_size += 1 + 1;
    }

    // optional .protoc.gameproto.Period period = 5;
    if (has_period()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->period());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestUpdateData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestUpdateData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestUpdateData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestUpdateData::MergeFrom(const QuestUpdateData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_current_count()) {
      set_current_count(from.current_count());
    }
    if (from.has_is_finished()) {
      set_is_finished(from.is_finished());
    }
    if (from.has_is_awarded()) {
      set_is_awarded(from.is_awarded());
    }
    if (from.has_period()) {
      set_period(from.period());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestUpdateData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestUpdateData::CopyFrom(const QuestUpdateData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestUpdateData::IsInitialized() const {

  return true;
}

void QuestUpdateData::Swap(QuestUpdateData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(current_count_, other->current_count_);
    std::swap(is_finished_, other->is_finished_);
    std::swap(is_awarded_, other->is_awarded_);
    std::swap(period_, other->period_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestUpdateData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestUpdateData_descriptor_;
  metadata.reflection = QuestUpdateData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateQuestNtf::kDataFieldNumber;
#endif  // !_MSC_VER

UpdateQuestNtf::UpdateQuestNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateQuestNtf::InitAsDefaultInstance() {
}

UpdateQuestNtf::UpdateQuestNtf(const UpdateQuestNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateQuestNtf::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateQuestNtf::~UpdateQuestNtf() {
  SharedDtor();
}

void UpdateQuestNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateQuestNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateQuestNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateQuestNtf_descriptor_;
}

const UpdateQuestNtf& UpdateQuestNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

UpdateQuestNtf* UpdateQuestNtf::default_instance_ = NULL;

UpdateQuestNtf* UpdateQuestNtf::New() const {
  return new UpdateQuestNtf;
}

void UpdateQuestNtf::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateQuestNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protoc.gameproto.QuestUpdateData data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateQuestNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protoc.gameproto.QuestUpdateData data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateQuestNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protoc.gameproto.QuestUpdateData data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateQuestNtf::ByteSize() const {
  int total_size = 0;

  // repeated .protoc.gameproto.QuestUpdateData data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateQuestNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateQuestNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateQuestNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateQuestNtf::MergeFrom(const UpdateQuestNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateQuestNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateQuestNtf::CopyFrom(const UpdateQuestNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateQuestNtf::IsInitialized() const {

  return true;
}

void UpdateQuestNtf::Swap(UpdateQuestNtf* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateQuestNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateQuestNtf_descriptor_;
  metadata.reflection = UpdateQuestNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetQuestAwardReq::kIdFieldNumber;
#endif  // !_MSC_VER

GetQuestAwardReq::GetQuestAwardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetQuestAwardReq::InitAsDefaultInstance() {
}

GetQuestAwardReq::GetQuestAwardReq(const GetQuestAwardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetQuestAwardReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetQuestAwardReq::~GetQuestAwardReq() {
  SharedDtor();
}

void GetQuestAwardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetQuestAwardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetQuestAwardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetQuestAwardReq_descriptor_;
}

const GetQuestAwardReq& GetQuestAwardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

GetQuestAwardReq* GetQuestAwardReq::default_instance_ = NULL;

GetQuestAwardReq* GetQuestAwardReq::New() const {
  return new GetQuestAwardReq;
}

void GetQuestAwardReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetQuestAwardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetQuestAwardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetQuestAwardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetQuestAwardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetQuestAwardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetQuestAwardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetQuestAwardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetQuestAwardReq::MergeFrom(const GetQuestAwardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetQuestAwardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetQuestAwardReq::CopyFrom(const GetQuestAwardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetQuestAwardReq::IsInitialized() const {

  return true;
}

void GetQuestAwardReq::Swap(GetQuestAwardReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetQuestAwardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetQuestAwardReq_descriptor_;
  metadata.reflection = GetQuestAwardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetQuestAwardAck::kErrNoFieldNumber;
#endif  // !_MSC_VER

GetQuestAwardAck::GetQuestAwardAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetQuestAwardAck::InitAsDefaultInstance() {
}

GetQuestAwardAck::GetQuestAwardAck(const GetQuestAwardAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetQuestAwardAck::SharedCtor() {
  _cached_size_ = 0;
  err_no_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetQuestAwardAck::~GetQuestAwardAck() {
  SharedDtor();
}

void GetQuestAwardAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetQuestAwardAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetQuestAwardAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetQuestAwardAck_descriptor_;
}

const GetQuestAwardAck& GetQuestAwardAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

GetQuestAwardAck* GetQuestAwardAck::default_instance_ = NULL;

GetQuestAwardAck* GetQuestAwardAck::New() const {
  return new GetQuestAwardAck;
}

void GetQuestAwardAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    err_no_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetQuestAwardAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 err_no = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_no_)));
          set_has_err_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetQuestAwardAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 err_no = 1;
  if (has_err_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->err_no(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetQuestAwardAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 err_no = 1;
  if (has_err_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->err_no(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetQuestAwardAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 err_no = 1;
    if (has_err_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err_no());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetQuestAwardAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetQuestAwardAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetQuestAwardAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetQuestAwardAck::MergeFrom(const GetQuestAwardAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_err_no()) {
      set_err_no(from.err_no());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetQuestAwardAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetQuestAwardAck::CopyFrom(const GetQuestAwardAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetQuestAwardAck::IsInitialized() const {

  return true;
}

void GetQuestAwardAck::Swap(GetQuestAwardAck* other) {
  if (other != this) {
    std::swap(err_no_, other->err_no_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetQuestAwardAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetQuestAwardAck_descriptor_;
  metadata.reflection = GetQuestAwardAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OneKeyGetQuestAwardReq::kIdFieldNumber;
#endif  // !_MSC_VER

OneKeyGetQuestAwardReq::OneKeyGetQuestAwardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OneKeyGetQuestAwardReq::InitAsDefaultInstance() {
}

OneKeyGetQuestAwardReq::OneKeyGetQuestAwardReq(const OneKeyGetQuestAwardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OneKeyGetQuestAwardReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OneKeyGetQuestAwardReq::~OneKeyGetQuestAwardReq() {
  SharedDtor();
}

void OneKeyGetQuestAwardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OneKeyGetQuestAwardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OneKeyGetQuestAwardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OneKeyGetQuestAwardReq_descriptor_;
}

const OneKeyGetQuestAwardReq& OneKeyGetQuestAwardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

OneKeyGetQuestAwardReq* OneKeyGetQuestAwardReq::default_instance_ = NULL;

OneKeyGetQuestAwardReq* OneKeyGetQuestAwardReq::New() const {
  return new OneKeyGetQuestAwardReq;
}

void OneKeyGetQuestAwardReq::Clear() {
  id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OneKeyGetQuestAwardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OneKeyGetQuestAwardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 id = 1;
  for (int i = 0; i < this->id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OneKeyGetQuestAwardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 id = 1;
  for (int i = 0; i < this->id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OneKeyGetQuestAwardReq::ByteSize() const {
  int total_size = 0;

  // repeated uint32 id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->id(i));
    }
    total_size += 1 * this->id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OneKeyGetQuestAwardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OneKeyGetQuestAwardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OneKeyGetQuestAwardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OneKeyGetQuestAwardReq::MergeFrom(const OneKeyGetQuestAwardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  id_.MergeFrom(from.id_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OneKeyGetQuestAwardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OneKeyGetQuestAwardReq::CopyFrom(const OneKeyGetQuestAwardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OneKeyGetQuestAwardReq::IsInitialized() const {

  return true;
}

void OneKeyGetQuestAwardReq::Swap(OneKeyGetQuestAwardReq* other) {
  if (other != this) {
    id_.Swap(&other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OneKeyGetQuestAwardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OneKeyGetQuestAwardReq_descriptor_;
  metadata.reflection = OneKeyGetQuestAwardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RefreshQuestNtf::kPeriodFieldNumber;
const int RefreshQuestNtf::kDataFieldNumber;
#endif  // !_MSC_VER

RefreshQuestNtf::RefreshQuestNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RefreshQuestNtf::InitAsDefaultInstance() {
}

RefreshQuestNtf::RefreshQuestNtf(const RefreshQuestNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RefreshQuestNtf::SharedCtor() {
  _cached_size_ = 0;
  period_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RefreshQuestNtf::~RefreshQuestNtf() {
  SharedDtor();
}

void RefreshQuestNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RefreshQuestNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RefreshQuestNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RefreshQuestNtf_descriptor_;
}

const RefreshQuestNtf& RefreshQuestNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

RefreshQuestNtf* RefreshQuestNtf::default_instance_ = NULL;

RefreshQuestNtf* RefreshQuestNtf::New() const {
  return new RefreshQuestNtf;
}

void RefreshQuestNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    period_ = 0;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RefreshQuestNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protoc.gameproto.Period period = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protoc::gameproto::Period_IsValid(value)) {
            set_period(static_cast< ::protoc::gameproto::Period >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // repeated .protoc.gameproto.QuestData data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RefreshQuestNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .protoc.gameproto.Period period = 1;
  if (has_period()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->period(), output);
  }

  // repeated .protoc.gameproto.QuestData data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RefreshQuestNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .protoc.gameproto.Period period = 1;
  if (has_period()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->period(), target);
  }

  // repeated .protoc.gameproto.QuestData data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RefreshQuestNtf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .protoc.gameproto.Period period = 1;
    if (has_period()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->period());
    }

  }
  // repeated .protoc.gameproto.QuestData data = 2;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RefreshQuestNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RefreshQuestNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RefreshQuestNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RefreshQuestNtf::MergeFrom(const RefreshQuestNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_period()) {
      set_period(from.period());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RefreshQuestNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RefreshQuestNtf::CopyFrom(const RefreshQuestNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RefreshQuestNtf::IsInitialized() const {

  return true;
}

void RefreshQuestNtf::Swap(RefreshQuestNtf* other) {
  if (other != this) {
    std::swap(period_, other->period_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RefreshQuestNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RefreshQuestNtf_descriptor_;
  metadata.reflection = RefreshQuestNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetCurPvpDataReq::GetCurPvpDataReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetCurPvpDataReq::InitAsDefaultInstance() {
}

GetCurPvpDataReq::GetCurPvpDataReq(const GetCurPvpDataReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetCurPvpDataReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetCurPvpDataReq::~GetCurPvpDataReq() {
  SharedDtor();
}

void GetCurPvpDataReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetCurPvpDataReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetCurPvpDataReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetCurPvpDataReq_descriptor_;
}

const GetCurPvpDataReq& GetCurPvpDataReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

GetCurPvpDataReq* GetCurPvpDataReq::default_instance_ = NULL;

GetCurPvpDataReq* GetCurPvpDataReq::New() const {
  return new GetCurPvpDataReq;
}

void GetCurPvpDataReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetCurPvpDataReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetCurPvpDataReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetCurPvpDataReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetCurPvpDataReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetCurPvpDataReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetCurPvpDataReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetCurPvpDataReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetCurPvpDataReq::MergeFrom(const GetCurPvpDataReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetCurPvpDataReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCurPvpDataReq::CopyFrom(const GetCurPvpDataReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCurPvpDataReq::IsInitialized() const {

  return true;
}

void GetCurPvpDataReq::Swap(GetCurPvpDataReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetCurPvpDataReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetCurPvpDataReq_descriptor_;
  metadata.reflection = GetCurPvpDataReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetCurPvpDataAck::kGroupIdFieldNumber;
const int GetCurPvpDataAck::kScoreFieldNumber;
const int GetCurPvpDataAck::kSumCountFieldNumber;
const int GetCurPvpDataAck::kWinCountFieldNumber;
const int GetCurPvpDataAck::kTodayCountFieldNumber;
const int GetCurPvpDataAck::kHasAwardFieldNumber;
const int GetCurPvpDataAck::kCdTimeFieldNumber;
const int GetCurPvpDataAck::kRankFieldNumber;
const int GetCurPvpDataAck::kTodayBuyCountFieldNumber;
#endif  // !_MSC_VER

GetCurPvpDataAck::GetCurPvpDataAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetCurPvpDataAck::InitAsDefaultInstance() {
}

GetCurPvpDataAck::GetCurPvpDataAck(const GetCurPvpDataAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetCurPvpDataAck::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = 0u;
  score_ = 0u;
  sum_count_ = 0u;
  win_count_ = 0u;
  today_count_ = 0u;
  has_award_ = false;
  cd_time_ = GOOGLE_LONGLONG(0);
  rank_ = 0u;
  today_buy_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetCurPvpDataAck::~GetCurPvpDataAck() {
  SharedDtor();
}

void GetCurPvpDataAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetCurPvpDataAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetCurPvpDataAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetCurPvpDataAck_descriptor_;
}

const GetCurPvpDataAck& GetCurPvpDataAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

GetCurPvpDataAck* GetCurPvpDataAck::default_instance_ = NULL;

GetCurPvpDataAck* GetCurPvpDataAck::New() const {
  return new GetCurPvpDataAck;
}

void GetCurPvpDataAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    group_id_ = 0u;
    score_ = 0u;
    sum_count_ = 0u;
    win_count_ = 0u;
    today_count_ = 0u;
    has_award_ = false;
    cd_time_ = GOOGLE_LONGLONG(0);
    rank_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    today_buy_count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetCurPvpDataAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 group_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_score;
        break;
      }

      // optional uint32 score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sum_count;
        break;
      }

      // optional uint32 sum_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sum_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sum_count_)));
          set_has_sum_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_win_count;
        break;
      }

      // optional uint32 win_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &win_count_)));
          set_has_win_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_today_count;
        break;
      }

      // optional uint32 today_count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_today_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &today_count_)));
          set_has_today_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_has_award;
        break;
      }

      // optional bool has_award = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_has_award:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_award_)));
          set_has_has_award();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_cd_time;
        break;
      }

      // optional int64 cd_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cd_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cd_time_)));
          set_has_cd_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_rank;
        break;
      }

      // optional uint32 rank = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_today_buy_count;
        break;
      }

      // optional uint32 today_buy_count = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_today_buy_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &today_buy_count_)));
          set_has_today_buy_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetCurPvpDataAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->group_id(), output);
  }

  // optional uint32 score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->score(), output);
  }

  // optional uint32 sum_count = 3;
  if (has_sum_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sum_count(), output);
  }

  // optional uint32 win_count = 4;
  if (has_win_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->win_count(), output);
  }

  // optional uint32 today_count = 5;
  if (has_today_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->today_count(), output);
  }

  // optional bool has_award = 6;
  if (has_has_award()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->has_award(), output);
  }

  // optional int64 cd_time = 7;
  if (has_cd_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->cd_time(), output);
  }

  // optional uint32 rank = 8;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->rank(), output);
  }

  // optional uint32 today_buy_count = 9;
  if (has_today_buy_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->today_buy_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetCurPvpDataAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->group_id(), target);
  }

  // optional uint32 score = 2;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->score(), target);
  }

  // optional uint32 sum_count = 3;
  if (has_sum_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sum_count(), target);
  }

  // optional uint32 win_count = 4;
  if (has_win_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->win_count(), target);
  }

  // optional uint32 today_count = 5;
  if (has_today_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->today_count(), target);
  }

  // optional bool has_award = 6;
  if (has_has_award()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->has_award(), target);
  }

  // optional int64 cd_time = 7;
  if (has_cd_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->cd_time(), target);
  }

  // optional uint32 rank = 8;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->rank(), target);
  }

  // optional uint32 today_buy_count = 9;
  if (has_today_buy_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->today_buy_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetCurPvpDataAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // optional uint32 score = 2;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

    // optional uint32 sum_count = 3;
    if (has_sum_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sum_count());
    }

    // optional uint32 win_count = 4;
    if (has_win_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->win_count());
    }

    // optional uint32 today_count = 5;
    if (has_today_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->today_count());
    }

    // optional bool has_award = 6;
    if (has_has_award()) {
      total_size += 1 + 1;
    }

    // optional int64 cd_time = 7;
    if (has_cd_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cd_time());
    }

    // optional uint32 rank = 8;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 today_buy_count = 9;
    if (has_today_buy_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->today_buy_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetCurPvpDataAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetCurPvpDataAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetCurPvpDataAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetCurPvpDataAck::MergeFrom(const GetCurPvpDataAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_sum_count()) {
      set_sum_count(from.sum_count());
    }
    if (from.has_win_count()) {
      set_win_count(from.win_count());
    }
    if (from.has_today_count()) {
      set_today_count(from.today_count());
    }
    if (from.has_has_award()) {
      set_has_award(from.has_award());
    }
    if (from.has_cd_time()) {
      set_cd_time(from.cd_time());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_today_buy_count()) {
      set_today_buy_count(from.today_buy_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetCurPvpDataAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCurPvpDataAck::CopyFrom(const GetCurPvpDataAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCurPvpDataAck::IsInitialized() const {

  return true;
}

void GetCurPvpDataAck::Swap(GetCurPvpDataAck* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(score_, other->score_);
    std::swap(sum_count_, other->sum_count_);
    std::swap(win_count_, other->win_count_);
    std::swap(today_count_, other->today_count_);
    std::swap(has_award_, other->has_award_);
    std::swap(cd_time_, other->cd_time_);
    std::swap(rank_, other->rank_);
    std::swap(today_buy_count_, other->today_buy_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetCurPvpDataAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetCurPvpDataAck_descriptor_;
  metadata.reflection = GetCurPvpDataAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PvpData::kPlayerIdFieldNumber;
const int PvpData::kNameFieldNumber;
const int PvpData::kHeadIdFieldNumber;
const int PvpData::kLevelFieldNumber;
const int PvpData::kScoreFieldNumber;
const int PvpData::kRankFieldNumber;
const int PvpData::kSexFieldNumber;
#endif  // !_MSC_VER

PvpData::PvpData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PvpData::InitAsDefaultInstance() {
}

PvpData::PvpData(const PvpData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PvpData::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  head_id_ = 0u;
  level_ = 0u;
  score_ = 0u;
  rank_ = 0u;
  sex_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvpData::~PvpData() {
  SharedDtor();
}

void PvpData::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void PvpData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PvpData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PvpData_descriptor_;
}

const PvpData& PvpData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

PvpData* PvpData::default_instance_ = NULL;

PvpData* PvpData::New() const {
  return new PvpData;
}

void PvpData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    head_id_ = 0u;
    level_ = 0u;
    score_ = 0u;
    rank_ = 0u;
    sex_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PvpData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_head_id;
        break;
      }

      // optional uint32 head_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_head_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &head_id_)));
          set_has_head_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // optional uint32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_score;
        break;
      }

      // optional uint32 score = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_rank;
        break;
      }

      // optional uint32 rank = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_sex;
        break;
      }

      // optional bool sex = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PvpData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->player_id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional uint32 head_id = 3;
  if (has_head_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->head_id(), output);
  }

  // optional uint32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->level(), output);
  }

  // optional uint32 score = 5;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->score(), output);
  }

  // optional uint32 rank = 6;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->rank(), output);
  }

  // optional bool sex = 7;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->sex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PvpData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->player_id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 head_id = 3;
  if (has_head_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->head_id(), target);
  }

  // optional uint32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->level(), target);
  }

  // optional uint32 score = 5;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->score(), target);
  }

  // optional uint32 rank = 6;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->rank(), target);
  }

  // optional bool sex = 7;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->sex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PvpData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 head_id = 3;
    if (has_head_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->head_id());
    }

    // optional uint32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 score = 5;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

    // optional uint32 rank = 6;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // optional bool sex = 7;
    if (has_sex()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvpData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PvpData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PvpData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PvpData::MergeFrom(const PvpData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_head_id()) {
      set_head_id(from.head_id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PvpData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PvpData::CopyFrom(const PvpData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvpData::IsInitialized() const {

  return true;
}

void PvpData::Swap(PvpData* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(name_, other->name_);
    std::swap(head_id_, other->head_id_);
    std::swap(level_, other->level_);
    std::swap(score_, other->score_);
    std::swap(rank_, other->rank_);
    std::swap(sex_, other->sex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PvpData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PvpData_descriptor_;
  metadata.reflection = PvpData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetAllRankReq::GetAllRankReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetAllRankReq::InitAsDefaultInstance() {
}

GetAllRankReq::GetAllRankReq(const GetAllRankReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetAllRankReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAllRankReq::~GetAllRankReq() {
  SharedDtor();
}

void GetAllRankReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetAllRankReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAllRankReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAllRankReq_descriptor_;
}

const GetAllRankReq& GetAllRankReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

GetAllRankReq* GetAllRankReq::default_instance_ = NULL;

GetAllRankReq* GetAllRankReq::New() const {
  return new GetAllRankReq;
}

void GetAllRankReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAllRankReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetAllRankReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetAllRankReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetAllRankReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAllRankReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAllRankReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAllRankReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAllRankReq::MergeFrom(const GetAllRankReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAllRankReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAllRankReq::CopyFrom(const GetAllRankReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAllRankReq::IsInitialized() const {

  return true;
}

void GetAllRankReq::Swap(GetAllRankReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAllRankReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAllRankReq_descriptor_;
  metadata.reflection = GetAllRankReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetAllRankAck::kDataFieldNumber;
#endif  // !_MSC_VER

GetAllRankAck::GetAllRankAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetAllRankAck::InitAsDefaultInstance() {
}

GetAllRankAck::GetAllRankAck(const GetAllRankAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetAllRankAck::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAllRankAck::~GetAllRankAck() {
  SharedDtor();
}

void GetAllRankAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetAllRankAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAllRankAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAllRankAck_descriptor_;
}

const GetAllRankAck& GetAllRankAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

GetAllRankAck* GetAllRankAck::default_instance_ = NULL;

GetAllRankAck* GetAllRankAck::New() const {
  return new GetAllRankAck;
}

void GetAllRankAck::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAllRankAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protoc.gameproto.PvpData data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetAllRankAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protoc.gameproto.PvpData data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetAllRankAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protoc.gameproto.PvpData data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetAllRankAck::ByteSize() const {
  int total_size = 0;

  // repeated .protoc.gameproto.PvpData data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAllRankAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAllRankAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAllRankAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAllRankAck::MergeFrom(const GetAllRankAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAllRankAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAllRankAck::CopyFrom(const GetAllRankAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAllRankAck::IsInitialized() const {

  return true;
}

void GetAllRankAck::Swap(GetAllRankAck* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAllRankAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAllRankAck_descriptor_;
  metadata.reflection = GetAllRankAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PvpFriendData::kPlayerIdFieldNumber;
const int PvpFriendData::kScoreFieldNumber;
#endif  // !_MSC_VER

PvpFriendData::PvpFriendData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PvpFriendData::InitAsDefaultInstance() {
}

PvpFriendData::PvpFriendData(const PvpFriendData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PvpFriendData::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = GOOGLE_ULONGLONG(0);
  score_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvpFriendData::~PvpFriendData() {
  SharedDtor();
}

void PvpFriendData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PvpFriendData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PvpFriendData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PvpFriendData_descriptor_;
}

const PvpFriendData& PvpFriendData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

PvpFriendData* PvpFriendData::default_instance_ = NULL;

PvpFriendData* PvpFriendData::New() const {
  return new PvpFriendData;
}

void PvpFriendData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = GOOGLE_ULONGLONG(0);
    score_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PvpFriendData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_score;
        break;
      }

      // optional uint32 score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PvpFriendData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->player_id(), output);
  }

  // optional uint32 score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PvpFriendData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->player_id(), target);
  }

  // optional uint32 score = 2;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PvpFriendData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_id());
    }

    // optional uint32 score = 2;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvpFriendData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PvpFriendData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PvpFriendData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PvpFriendData::MergeFrom(const PvpFriendData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PvpFriendData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PvpFriendData::CopyFrom(const PvpFriendData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvpFriendData::IsInitialized() const {

  return true;
}

void PvpFriendData::Swap(PvpFriendData* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PvpFriendData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PvpFriendData_descriptor_;
  metadata.reflection = PvpFriendData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetFriendRankReq::GetFriendRankReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetFriendRankReq::InitAsDefaultInstance() {
}

GetFriendRankReq::GetFriendRankReq(const GetFriendRankReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetFriendRankReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetFriendRankReq::~GetFriendRankReq() {
  SharedDtor();
}

void GetFriendRankReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetFriendRankReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetFriendRankReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetFriendRankReq_descriptor_;
}

const GetFriendRankReq& GetFriendRankReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

GetFriendRankReq* GetFriendRankReq::default_instance_ = NULL;

GetFriendRankReq* GetFriendRankReq::New() const {
  return new GetFriendRankReq;
}

void GetFriendRankReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetFriendRankReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetFriendRankReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetFriendRankReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetFriendRankReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetFriendRankReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetFriendRankReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetFriendRankReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetFriendRankReq::MergeFrom(const GetFriendRankReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetFriendRankReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFriendRankReq::CopyFrom(const GetFriendRankReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFriendRankReq::IsInitialized() const {

  return true;
}

void GetFriendRankReq::Swap(GetFriendRankReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetFriendRankReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetFriendRankReq_descriptor_;
  metadata.reflection = GetFriendRankReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetFriendRankAck::kDataFieldNumber;
#endif  // !_MSC_VER

GetFriendRankAck::GetFriendRankAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetFriendRankAck::InitAsDefaultInstance() {
}

GetFriendRankAck::GetFriendRankAck(const GetFriendRankAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetFriendRankAck::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetFriendRankAck::~GetFriendRankAck() {
  SharedDtor();
}

void GetFriendRankAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetFriendRankAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetFriendRankAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetFriendRankAck_descriptor_;
}

const GetFriendRankAck& GetFriendRankAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

GetFriendRankAck* GetFriendRankAck::default_instance_ = NULL;

GetFriendRankAck* GetFriendRankAck::New() const {
  return new GetFriendRankAck;
}

void GetFriendRankAck::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetFriendRankAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protoc.gameproto.PvpFriendData data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetFriendRankAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protoc.gameproto.PvpFriendData data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetFriendRankAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protoc.gameproto.PvpFriendData data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetFriendRankAck::ByteSize() const {
  int total_size = 0;

  // repeated .protoc.gameproto.PvpFriendData data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetFriendRankAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetFriendRankAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetFriendRankAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetFriendRankAck::MergeFrom(const GetFriendRankAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetFriendRankAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFriendRankAck::CopyFrom(const GetFriendRankAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFriendRankAck::IsInitialized() const {

  return true;
}

void GetFriendRankAck::Swap(GetFriendRankAck* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetFriendRankAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetFriendRankAck_descriptor_;
  metadata.reflection = GetFriendRankAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetSumRankReq::GetSumRankReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetSumRankReq::InitAsDefaultInstance() {
}

GetSumRankReq::GetSumRankReq(const GetSumRankReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetSumRankReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetSumRankReq::~GetSumRankReq() {
  SharedDtor();
}

void GetSumRankReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetSumRankReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetSumRankReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetSumRankReq_descriptor_;
}

const GetSumRankReq& GetSumRankReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

GetSumRankReq* GetSumRankReq::default_instance_ = NULL;

GetSumRankReq* GetSumRankReq::New() const {
  return new GetSumRankReq;
}

void GetSumRankReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetSumRankReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetSumRankReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetSumRankReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetSumRankReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetSumRankReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetSumRankReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetSumRankReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetSumRankReq::MergeFrom(const GetSumRankReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetSumRankReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSumRankReq::CopyFrom(const GetSumRankReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSumRankReq::IsInitialized() const {

  return true;
}

void GetSumRankReq::Swap(GetSumRankReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetSumRankReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetSumRankReq_descriptor_;
  metadata.reflection = GetSumRankReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetSumRankAck::kDataFieldNumber;
#endif  // !_MSC_VER

GetSumRankAck::GetSumRankAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetSumRankAck::InitAsDefaultInstance() {
}

GetSumRankAck::GetSumRankAck(const GetSumRankAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetSumRankAck::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetSumRankAck::~GetSumRankAck() {
  SharedDtor();
}

void GetSumRankAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetSumRankAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetSumRankAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetSumRankAck_descriptor_;
}

const GetSumRankAck& GetSumRankAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

GetSumRankAck* GetSumRankAck::default_instance_ = NULL;

GetSumRankAck* GetSumRankAck::New() const {
  return new GetSumRankAck;
}

void GetSumRankAck::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetSumRankAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protoc.gameproto.PvpData data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetSumRankAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protoc.gameproto.PvpData data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetSumRankAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protoc.gameproto.PvpData data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetSumRankAck::ByteSize() const {
  int total_size = 0;

  // repeated .protoc.gameproto.PvpData data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetSumRankAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetSumRankAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetSumRankAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetSumRankAck::MergeFrom(const GetSumRankAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetSumRankAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSumRankAck::CopyFrom(const GetSumRankAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSumRankAck::IsInitialized() const {

  return true;
}

void GetSumRankAck::Swap(GetSumRankAck* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetSumRankAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetSumRankAck_descriptor_;
  metadata.reflection = GetSumRankAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ClearPvpCDReq::ClearPvpCDReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClearPvpCDReq::InitAsDefaultInstance() {
}

ClearPvpCDReq::ClearPvpCDReq(const ClearPvpCDReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClearPvpCDReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClearPvpCDReq::~ClearPvpCDReq() {
  SharedDtor();
}

void ClearPvpCDReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClearPvpCDReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClearPvpCDReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClearPvpCDReq_descriptor_;
}

const ClearPvpCDReq& ClearPvpCDReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

ClearPvpCDReq* ClearPvpCDReq::default_instance_ = NULL;

ClearPvpCDReq* ClearPvpCDReq::New() const {
  return new ClearPvpCDReq;
}

void ClearPvpCDReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClearPvpCDReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ClearPvpCDReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClearPvpCDReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClearPvpCDReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClearPvpCDReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClearPvpCDReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClearPvpCDReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClearPvpCDReq::MergeFrom(const ClearPvpCDReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClearPvpCDReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClearPvpCDReq::CopyFrom(const ClearPvpCDReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClearPvpCDReq::IsInitialized() const {

  return true;
}

void ClearPvpCDReq::Swap(ClearPvpCDReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClearPvpCDReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClearPvpCDReq_descriptor_;
  metadata.reflection = ClearPvpCDReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClearPvpCDAck::kErrNoFieldNumber;
const int ClearPvpCDAck::kTodayCountFieldNumber;
#endif  // !_MSC_VER

ClearPvpCDAck::ClearPvpCDAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClearPvpCDAck::InitAsDefaultInstance() {
}

ClearPvpCDAck::ClearPvpCDAck(const ClearPvpCDAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClearPvpCDAck::SharedCtor() {
  _cached_size_ = 0;
  err_no_ = 0;
  today_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClearPvpCDAck::~ClearPvpCDAck() {
  SharedDtor();
}

void ClearPvpCDAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClearPvpCDAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClearPvpCDAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClearPvpCDAck_descriptor_;
}

const ClearPvpCDAck& ClearPvpCDAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

ClearPvpCDAck* ClearPvpCDAck::default_instance_ = NULL;

ClearPvpCDAck* ClearPvpCDAck::New() const {
  return new ClearPvpCDAck;
}

void ClearPvpCDAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    err_no_ = 0;
    today_count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClearPvpCDAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 err_no = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_no_)));
          set_has_err_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_today_count;
        break;
      }

      // optional uint32 today_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_today_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &today_count_)));
          set_has_today_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClearPvpCDAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 err_no = 1;
  if (has_err_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->err_no(), output);
  }

  // optional uint32 today_count = 2;
  if (has_today_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->today_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClearPvpCDAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 err_no = 1;
  if (has_err_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->err_no(), target);
  }

  // optional uint32 today_count = 2;
  if (has_today_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->today_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClearPvpCDAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 err_no = 1;
    if (has_err_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err_no());
    }

    // optional uint32 today_count = 2;
    if (has_today_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->today_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClearPvpCDAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClearPvpCDAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClearPvpCDAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClearPvpCDAck::MergeFrom(const ClearPvpCDAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_err_no()) {
      set_err_no(from.err_no());
    }
    if (from.has_today_count()) {
      set_today_count(from.today_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClearPvpCDAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClearPvpCDAck::CopyFrom(const ClearPvpCDAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClearPvpCDAck::IsInitialized() const {

  return true;
}

void ClearPvpCDAck::Swap(ClearPvpCDAck* other) {
  if (other != this) {
    std::swap(err_no_, other->err_no_);
    std::swap(today_count_, other->today_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClearPvpCDAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClearPvpCDAck_descriptor_;
  metadata.reflection = ClearPvpCDAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetPvpAwardReq::GetPvpAwardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetPvpAwardReq::InitAsDefaultInstance() {
}

GetPvpAwardReq::GetPvpAwardReq(const GetPvpAwardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetPvpAwardReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetPvpAwardReq::~GetPvpAwardReq() {
  SharedDtor();
}

void GetPvpAwardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetPvpAwardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetPvpAwardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetPvpAwardReq_descriptor_;
}

const GetPvpAwardReq& GetPvpAwardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

GetPvpAwardReq* GetPvpAwardReq::default_instance_ = NULL;

GetPvpAwardReq* GetPvpAwardReq::New() const {
  return new GetPvpAwardReq;
}

void GetPvpAwardReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetPvpAwardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetPvpAwardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetPvpAwardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetPvpAwardReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPvpAwardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetPvpAwardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetPvpAwardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetPvpAwardReq::MergeFrom(const GetPvpAwardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetPvpAwardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPvpAwardReq::CopyFrom(const GetPvpAwardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPvpAwardReq::IsInitialized() const {

  return true;
}

void GetPvpAwardReq::Swap(GetPvpAwardReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetPvpAwardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetPvpAwardReq_descriptor_;
  metadata.reflection = GetPvpAwardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetPvpAwardAck::kErrNoFieldNumber;
#endif  // !_MSC_VER

GetPvpAwardAck::GetPvpAwardAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetPvpAwardAck::InitAsDefaultInstance() {
}

GetPvpAwardAck::GetPvpAwardAck(const GetPvpAwardAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetPvpAwardAck::SharedCtor() {
  _cached_size_ = 0;
  err_no_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetPvpAwardAck::~GetPvpAwardAck() {
  SharedDtor();
}

void GetPvpAwardAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetPvpAwardAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetPvpAwardAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetPvpAwardAck_descriptor_;
}

const GetPvpAwardAck& GetPvpAwardAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

GetPvpAwardAck* GetPvpAwardAck::default_instance_ = NULL;

GetPvpAwardAck* GetPvpAwardAck::New() const {
  return new GetPvpAwardAck;
}

void GetPvpAwardAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    err_no_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetPvpAwardAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 err_no = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_no_)));
          set_has_err_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetPvpAwardAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 err_no = 1;
  if (has_err_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->err_no(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetPvpAwardAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 err_no = 1;
  if (has_err_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->err_no(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetPvpAwardAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 err_no = 1;
    if (has_err_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err_no());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPvpAwardAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetPvpAwardAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetPvpAwardAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetPvpAwardAck::MergeFrom(const GetPvpAwardAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_err_no()) {
      set_err_no(from.err_no());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetPvpAwardAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPvpAwardAck::CopyFrom(const GetPvpAwardAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPvpAwardAck::IsInitialized() const {

  return true;
}

void GetPvpAwardAck::Swap(GetPvpAwardAck* other) {
  if (other != this) {
    std::swap(err_no_, other->err_no_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetPvpAwardAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetPvpAwardAck_descriptor_;
  metadata.reflection = GetPvpAwardAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PvpWarBeginReq::PvpWarBeginReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PvpWarBeginReq::InitAsDefaultInstance() {
}

PvpWarBeginReq::PvpWarBeginReq(const PvpWarBeginReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PvpWarBeginReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvpWarBeginReq::~PvpWarBeginReq() {
  SharedDtor();
}

void PvpWarBeginReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PvpWarBeginReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PvpWarBeginReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PvpWarBeginReq_descriptor_;
}

const PvpWarBeginReq& PvpWarBeginReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

PvpWarBeginReq* PvpWarBeginReq::default_instance_ = NULL;

PvpWarBeginReq* PvpWarBeginReq::New() const {
  return new PvpWarBeginReq;
}

void PvpWarBeginReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PvpWarBeginReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void PvpWarBeginReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PvpWarBeginReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PvpWarBeginReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvpWarBeginReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PvpWarBeginReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PvpWarBeginReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PvpWarBeginReq::MergeFrom(const PvpWarBeginReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PvpWarBeginReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PvpWarBeginReq::CopyFrom(const PvpWarBeginReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvpWarBeginReq::IsInitialized() const {

  return true;
}

void PvpWarBeginReq::Swap(PvpWarBeginReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PvpWarBeginReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PvpWarBeginReq_descriptor_;
  metadata.reflection = PvpWarBeginReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PvpWarBeginAck::kErrNoFieldNumber;
const int PvpWarBeginAck::kDigitidFieldNumber;
const int PvpWarBeginAck::kNameFieldNumber;
const int PvpWarBeginAck::kLevelFieldNumber;
const int PvpWarBeginAck::kHeadIdFieldNumber;
const int PvpWarBeginAck::kTargetPetFieldNumber;
const int PvpWarBeginAck::kSignMyPetsFieldNumber;
const int PvpWarBeginAck::kSignTargetPetFieldNumber;
const int PvpWarBeginAck::kBuffFieldNumber;
const int PvpWarBeginAck::kRndStartWarKeyFieldNumber;
const int PvpWarBeginAck::kTotalAttackFieldNumber;
const int PvpWarBeginAck::kSexFieldNumber;
const int PvpWarBeginAck::kEquipFieldNumber;
#endif  // !_MSC_VER

PvpWarBeginAck::PvpWarBeginAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PvpWarBeginAck::InitAsDefaultInstance() {
}

PvpWarBeginAck::PvpWarBeginAck(const PvpWarBeginAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PvpWarBeginAck::SharedCtor() {
  _cached_size_ = 0;
  err_no_ = 0;
  digitid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0;
  head_id_ = 0u;
  rnd_start_war_key_ = 0;
  total_attack_ = 0;
  sex_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvpWarBeginAck::~PvpWarBeginAck() {
  SharedDtor();
}

void PvpWarBeginAck::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void PvpWarBeginAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PvpWarBeginAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PvpWarBeginAck_descriptor_;
}

const PvpWarBeginAck& PvpWarBeginAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

PvpWarBeginAck* PvpWarBeginAck::default_instance_ = NULL;

PvpWarBeginAck* PvpWarBeginAck::New() const {
  return new PvpWarBeginAck;
}

void PvpWarBeginAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    err_no_ = 0;
    digitid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    level_ = 0;
    head_id_ = 0u;
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    rnd_start_war_key_ = 0;
    total_attack_ = 0;
    sex_ = false;
  }
  target_pet_.Clear();
  sign_my_pets_.Clear();
  sign_target_pet_.Clear();
  buff_.Clear();
  equip_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PvpWarBeginAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 err_no = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_no_)));
          set_has_err_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_digitid;
        break;
      }

      // optional uint64 digitid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_digitid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &digitid_)));
          set_has_digitid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // optional int32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_head_id;
        break;
      }

      // optional uint32 head_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_head_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &head_id_)));
          set_has_head_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_target_pet;
        break;
      }

      // repeated .protoc.gameproto.PetRecord target_pet = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_target_pet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_target_pet()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_target_pet;
        if (input->ExpectTag(58)) goto parse_sign_my_pets;
        break;
      }

      // repeated .protoc.gameproto.PetRecordSIGN sign_my_pets = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sign_my_pets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sign_my_pets()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_sign_my_pets;
        if (input->ExpectTag(66)) goto parse_sign_target_pet;
        break;
      }

      // repeated .protoc.gameproto.PetRecordSIGN sign_target_pet = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sign_target_pet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sign_target_pet()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_sign_target_pet;
        if (input->ExpectTag(74)) goto parse_buff;
        break;
      }

      // repeated .protoc.gameproto.BufferItem buff = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buff:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buff()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_buff;
        if (input->ExpectTag(80)) goto parse_rnd_start_war_key;
        break;
      }

      // optional int32 rnd_start_war_key = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rnd_start_war_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rnd_start_war_key_)));
          set_has_rnd_start_war_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_total_attack;
        break;
      }

      // optional int32 total_attack = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_attack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_attack_)));
          set_has_total_attack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_sex;
        break;
      }

      // optional bool sex = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_equip;
        break;
      }

      // repeated .protoc.gameproto.EquipData equip = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_equip;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PvpWarBeginAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 err_no = 1;
  if (has_err_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->err_no(), output);
  }

  // optional uint64 digitid = 2;
  if (has_digitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->digitid(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // optional int32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->level(), output);
  }

  // optional uint32 head_id = 5;
  if (has_head_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->head_id(), output);
  }

  // repeated .protoc.gameproto.PetRecord target_pet = 6;
  for (int i = 0; i < this->target_pet_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->target_pet(i), output);
  }

  // repeated .protoc.gameproto.PetRecordSIGN sign_my_pets = 7;
  for (int i = 0; i < this->sign_my_pets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->sign_my_pets(i), output);
  }

  // repeated .protoc.gameproto.PetRecordSIGN sign_target_pet = 8;
  for (int i = 0; i < this->sign_target_pet_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->sign_target_pet(i), output);
  }

  // repeated .protoc.gameproto.BufferItem buff = 9;
  for (int i = 0; i < this->buff_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->buff(i), output);
  }

  // optional int32 rnd_start_war_key = 10;
  if (has_rnd_start_war_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->rnd_start_war_key(), output);
  }

  // optional int32 total_attack = 11;
  if (has_total_attack()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->total_attack(), output);
  }

  // optional bool sex = 12;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->sex(), output);
  }

  // repeated .protoc.gameproto.EquipData equip = 13;
  for (int i = 0; i < this->equip_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->equip(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PvpWarBeginAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 err_no = 1;
  if (has_err_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->err_no(), target);
  }

  // optional uint64 digitid = 2;
  if (has_digitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->digitid(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional int32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->level(), target);
  }

  // optional uint32 head_id = 5;
  if (has_head_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->head_id(), target);
  }

  // repeated .protoc.gameproto.PetRecord target_pet = 6;
  for (int i = 0; i < this->target_pet_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->target_pet(i), target);
  }

  // repeated .protoc.gameproto.PetRecordSIGN sign_my_pets = 7;
  for (int i = 0; i < this->sign_my_pets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->sign_my_pets(i), target);
  }

  // repeated .protoc.gameproto.PetRecordSIGN sign_target_pet = 8;
  for (int i = 0; i < this->sign_target_pet_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->sign_target_pet(i), target);
  }

  // repeated .protoc.gameproto.BufferItem buff = 9;
  for (int i = 0; i < this->buff_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->buff(i), target);
  }

  // optional int32 rnd_start_war_key = 10;
  if (has_rnd_start_war_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->rnd_start_war_key(), target);
  }

  // optional int32 total_attack = 11;
  if (has_total_attack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->total_attack(), target);
  }

  // optional bool sex = 12;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->sex(), target);
  }

  // repeated .protoc.gameproto.EquipData equip = 13;
  for (int i = 0; i < this->equip_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->equip(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PvpWarBeginAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 err_no = 1;
    if (has_err_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err_no());
    }

    // optional uint64 digitid = 2;
    if (has_digitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->digitid());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional uint32 head_id = 5;
    if (has_head_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->head_id());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional int32 rnd_start_war_key = 10;
    if (has_rnd_start_war_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rnd_start_war_key());
    }

    // optional int32 total_attack = 11;
    if (has_total_attack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_attack());
    }

    // optional bool sex = 12;
    if (has_sex()) {
      total_size += 1 + 1;
    }

  }
  // repeated .protoc.gameproto.PetRecord target_pet = 6;
  total_size += 1 * this->target_pet_size();
  for (int i = 0; i < this->target_pet_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->target_pet(i));
  }

  // repeated .protoc.gameproto.PetRecordSIGN sign_my_pets = 7;
  total_size += 1 * this->sign_my_pets_size();
  for (int i = 0; i < this->sign_my_pets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sign_my_pets(i));
  }

  // repeated .protoc.gameproto.PetRecordSIGN sign_target_pet = 8;
  total_size += 1 * this->sign_target_pet_size();
  for (int i = 0; i < this->sign_target_pet_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sign_target_pet(i));
  }

  // repeated .protoc.gameproto.BufferItem buff = 9;
  total_size += 1 * this->buff_size();
  for (int i = 0; i < this->buff_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buff(i));
  }

  // repeated .protoc.gameproto.EquipData equip = 13;
  total_size += 1 * this->equip_size();
  for (int i = 0; i < this->equip_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equip(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvpWarBeginAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PvpWarBeginAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PvpWarBeginAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PvpWarBeginAck::MergeFrom(const PvpWarBeginAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  target_pet_.MergeFrom(from.target_pet_);
  sign_my_pets_.MergeFrom(from.sign_my_pets_);
  sign_target_pet_.MergeFrom(from.sign_target_pet_);
  buff_.MergeFrom(from.buff_);
  equip_.MergeFrom(from.equip_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_err_no()) {
      set_err_no(from.err_no());
    }
    if (from.has_digitid()) {
      set_digitid(from.digitid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_head_id()) {
      set_head_id(from.head_id());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_rnd_start_war_key()) {
      set_rnd_start_war_key(from.rnd_start_war_key());
    }
    if (from.has_total_attack()) {
      set_total_attack(from.total_attack());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PvpWarBeginAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PvpWarBeginAck::CopyFrom(const PvpWarBeginAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvpWarBeginAck::IsInitialized() const {

  return true;
}

void PvpWarBeginAck::Swap(PvpWarBeginAck* other) {
  if (other != this) {
    std::swap(err_no_, other->err_no_);
    std::swap(digitid_, other->digitid_);
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(head_id_, other->head_id_);
    target_pet_.Swap(&other->target_pet_);
    sign_my_pets_.Swap(&other->sign_my_pets_);
    sign_target_pet_.Swap(&other->sign_target_pet_);
    buff_.Swap(&other->buff_);
    std::swap(rnd_start_war_key_, other->rnd_start_war_key_);
    std::swap(total_attack_, other->total_attack_);
    std::swap(sex_, other->sex_);
    equip_.Swap(&other->equip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PvpWarBeginAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PvpWarBeginAck_descriptor_;
  metadata.reflection = PvpWarBeginAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PvpWarResultReq::kResultFieldNumber;
const int PvpWarResultReq::kMatchIdFieldNumber;
const int PvpWarResultReq::kRndStartWarKeyFieldNumber;
const int PvpWarResultReq::kSignCcrpFieldNumber;
#endif  // !_MSC_VER

PvpWarResultReq::PvpWarResultReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PvpWarResultReq::InitAsDefaultInstance() {
}

PvpWarResultReq::PvpWarResultReq(const PvpWarResultReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PvpWarResultReq::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  match_id_ = GOOGLE_ULONGLONG(0);
  rnd_start_war_key_ = 0;
  sign_ccrp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvpWarResultReq::~PvpWarResultReq() {
  SharedDtor();
}

void PvpWarResultReq::SharedDtor() {
  if (sign_ccrp_ != &::google::protobuf::internal::kEmptyString) {
    delete sign_ccrp_;
  }
  if (this != default_instance_) {
  }
}

void PvpWarResultReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PvpWarResultReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PvpWarResultReq_descriptor_;
}

const PvpWarResultReq& PvpWarResultReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

PvpWarResultReq* PvpWarResultReq::default_instance_ = NULL;

PvpWarResultReq* PvpWarResultReq::New() const {
  return new PvpWarResultReq;
}

void PvpWarResultReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    match_id_ = GOOGLE_ULONGLONG(0);
    rnd_start_war_key_ = 0;
    if (has_sign_ccrp()) {
      if (sign_ccrp_ != &::google::protobuf::internal::kEmptyString) {
        sign_ccrp_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PvpWarResultReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_match_id;
        break;
      }

      // optional uint64 match_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_match_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
          set_has_match_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rnd_start_war_key;
        break;
      }

      // optional int32 rnd_start_war_key = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rnd_start_war_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rnd_start_war_key_)));
          set_has_rnd_start_war_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_sign_ccrp;
        break;
      }

      // optional bytes sign_ccrp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sign_ccrp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sign_ccrp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PvpWarResultReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  // optional uint64 match_id = 2;
  if (has_match_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->match_id(), output);
  }

  // optional int32 rnd_start_war_key = 3;
  if (has_rnd_start_war_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rnd_start_war_key(), output);
  }

  // optional bytes sign_ccrp = 4;
  if (has_sign_ccrp()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->sign_ccrp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PvpWarResultReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  // optional uint64 match_id = 2;
  if (has_match_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->match_id(), target);
  }

  // optional int32 rnd_start_war_key = 3;
  if (has_rnd_start_war_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rnd_start_war_key(), target);
  }

  // optional bytes sign_ccrp = 4;
  if (has_sign_ccrp()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->sign_ccrp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PvpWarResultReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // optional uint64 match_id = 2;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional int32 rnd_start_war_key = 3;
    if (has_rnd_start_war_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rnd_start_war_key());
    }

    // optional bytes sign_ccrp = 4;
    if (has_sign_ccrp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sign_ccrp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvpWarResultReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PvpWarResultReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PvpWarResultReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PvpWarResultReq::MergeFrom(const PvpWarResultReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_match_id()) {
      set_match_id(from.match_id());
    }
    if (from.has_rnd_start_war_key()) {
      set_rnd_start_war_key(from.rnd_start_war_key());
    }
    if (from.has_sign_ccrp()) {
      set_sign_ccrp(from.sign_ccrp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PvpWarResultReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PvpWarResultReq::CopyFrom(const PvpWarResultReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvpWarResultReq::IsInitialized() const {

  return true;
}

void PvpWarResultReq::Swap(PvpWarResultReq* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(match_id_, other->match_id_);
    std::swap(rnd_start_war_key_, other->rnd_start_war_key_);
    std::swap(sign_ccrp_, other->sign_ccrp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PvpWarResultReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PvpWarResultReq_descriptor_;
  metadata.reflection = PvpWarResultReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PvpWarResultAck::kErrNoFieldNumber;
const int PvpWarResultAck::kResultFieldNumber;
const int PvpWarResultAck::kScoreFieldNumber;
const int PvpWarResultAck::kSumCountFieldNumber;
const int PvpWarResultAck::kWinCountFieldNumber;
const int PvpWarResultAck::kTodayCountFieldNumber;
const int PvpWarResultAck::kRankFieldNumber;
const int PvpWarResultAck::kCurScoreFieldNumber;
const int PvpWarResultAck::kCdTimeFieldNumber;
const int PvpWarResultAck::kGroupIdFieldNumber;
#endif  // !_MSC_VER

PvpWarResultAck::PvpWarResultAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PvpWarResultAck::InitAsDefaultInstance() {
}

PvpWarResultAck::PvpWarResultAck(const PvpWarResultAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PvpWarResultAck::SharedCtor() {
  _cached_size_ = 0;
  err_no_ = 0;
  result_ = 0u;
  score_ = 0u;
  sum_count_ = 0u;
  win_count_ = 0u;
  today_count_ = 0u;
  rank_ = 0u;
  cur_score_ = 0u;
  cd_time_ = GOOGLE_LONGLONG(0);
  group_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvpWarResultAck::~PvpWarResultAck() {
  SharedDtor();
}

void PvpWarResultAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PvpWarResultAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PvpWarResultAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PvpWarResultAck_descriptor_;
}

const PvpWarResultAck& PvpWarResultAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

PvpWarResultAck* PvpWarResultAck::default_instance_ = NULL;

PvpWarResultAck* PvpWarResultAck::New() const {
  return new PvpWarResultAck;
}

void PvpWarResultAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    err_no_ = 0;
    result_ = 0u;
    score_ = 0u;
    sum_count_ = 0u;
    win_count_ = 0u;
    today_count_ = 0u;
    rank_ = 0u;
    cur_score_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    cd_time_ = GOOGLE_LONGLONG(0);
    group_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PvpWarResultAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 err_no = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_no_)));
          set_has_err_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional uint32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_score;
        break;
      }

      // optional uint32 score = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sum_count;
        break;
      }

      // optional uint32 sum_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sum_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sum_count_)));
          set_has_sum_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_win_count;
        break;
      }

      // optional uint32 win_count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &win_count_)));
          set_has_win_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_today_count;
        break;
      }

      // optional uint32 today_count = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_today_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &today_count_)));
          set_has_today_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_rank;
        break;
      }

      // optional uint32 rank = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_cur_score;
        break;
      }

      // optional uint32 cur_score = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_score_)));
          set_has_cur_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_cd_time;
        break;
      }

      // optional int64 cd_time = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cd_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cd_time_)));
          set_has_cd_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_group_id;
        break;
      }

      // optional uint32 group_id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PvpWarResultAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 err_no = 1;
  if (has_err_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->err_no(), output);
  }

  // optional uint32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->result(), output);
  }

  // optional uint32 score = 3;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->score(), output);
  }

  // optional uint32 sum_count = 4;
  if (has_sum_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sum_count(), output);
  }

  // optional uint32 win_count = 5;
  if (has_win_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->win_count(), output);
  }

  // optional uint32 today_count = 6;
  if (has_today_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->today_count(), output);
  }

  // optional uint32 rank = 7;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->rank(), output);
  }

  // optional uint32 cur_score = 8;
  if (has_cur_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->cur_score(), output);
  }

  // optional int64 cd_time = 9;
  if (has_cd_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->cd_time(), output);
  }

  // optional uint32 group_id = 10;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->group_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PvpWarResultAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 err_no = 1;
  if (has_err_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->err_no(), target);
  }

  // optional uint32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->result(), target);
  }

  // optional uint32 score = 3;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->score(), target);
  }

  // optional uint32 sum_count = 4;
  if (has_sum_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sum_count(), target);
  }

  // optional uint32 win_count = 5;
  if (has_win_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->win_count(), target);
  }

  // optional uint32 today_count = 6;
  if (has_today_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->today_count(), target);
  }

  // optional uint32 rank = 7;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->rank(), target);
  }

  // optional uint32 cur_score = 8;
  if (has_cur_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->cur_score(), target);
  }

  // optional int64 cd_time = 9;
  if (has_cd_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->cd_time(), target);
  }

  // optional uint32 group_id = 10;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->group_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PvpWarResultAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 err_no = 1;
    if (has_err_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err_no());
    }

    // optional uint32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // optional uint32 score = 3;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

    // optional uint32 sum_count = 4;
    if (has_sum_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sum_count());
    }

    // optional uint32 win_count = 5;
    if (has_win_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->win_count());
    }

    // optional uint32 today_count = 6;
    if (has_today_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->today_count());
    }

    // optional uint32 rank = 7;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // optional uint32 cur_score = 8;
    if (has_cur_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_score());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 cd_time = 9;
    if (has_cd_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cd_time());
    }

    // optional uint32 group_id = 10;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvpWarResultAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PvpWarResultAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PvpWarResultAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PvpWarResultAck::MergeFrom(const PvpWarResultAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_err_no()) {
      set_err_no(from.err_no());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_sum_count()) {
      set_sum_count(from.sum_count());
    }
    if (from.has_win_count()) {
      set_win_count(from.win_count());
    }
    if (from.has_today_count()) {
      set_today_count(from.today_count());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_cur_score()) {
      set_cur_score(from.cur_score());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_cd_time()) {
      set_cd_time(from.cd_time());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PvpWarResultAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PvpWarResultAck::CopyFrom(const PvpWarResultAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvpWarResultAck::IsInitialized() const {

  return true;
}

void PvpWarResultAck::Swap(PvpWarResultAck* other) {
  if (other != this) {
    std::swap(err_no_, other->err_no_);
    std::swap(result_, other->result_);
    std::swap(score_, other->score_);
    std::swap(sum_count_, other->sum_count_);
    std::swap(win_count_, other->win_count_);
    std::swap(today_count_, other->today_count_);
    std::swap(rank_, other->rank_);
    std::swap(cur_score_, other->cur_score_);
    std::swap(cd_time_, other->cd_time_);
    std::swap(group_id_, other->group_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PvpWarResultAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PvpWarResultAck_descriptor_;
  metadata.reflection = PvpWarResultAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActionCountTickNtf::kLastTimeFieldNumber;
#endif  // !_MSC_VER

ActionCountTickNtf::ActionCountTickNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActionCountTickNtf::InitAsDefaultInstance() {
}

ActionCountTickNtf::ActionCountTickNtf(const ActionCountTickNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActionCountTickNtf::SharedCtor() {
  _cached_size_ = 0;
  last_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActionCountTickNtf::~ActionCountTickNtf() {
  SharedDtor();
}

void ActionCountTickNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActionCountTickNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActionCountTickNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActionCountTickNtf_descriptor_;
}

const ActionCountTickNtf& ActionCountTickNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

ActionCountTickNtf* ActionCountTickNtf::default_instance_ = NULL;

ActionCountTickNtf* ActionCountTickNtf::New() const {
  return new ActionCountTickNtf;
}

void ActionCountTickNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    last_time_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActionCountTickNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 last_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_time_)));
          set_has_last_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActionCountTickNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 last_time = 1;
  if (has_last_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->last_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActionCountTickNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 last_time = 1;
  if (has_last_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->last_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActionCountTickNtf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 last_time = 1;
    if (has_last_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActionCountTickNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActionCountTickNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActionCountTickNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActionCountTickNtf::MergeFrom(const ActionCountTickNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_last_time()) {
      set_last_time(from.last_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActionCountTickNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionCountTickNtf::CopyFrom(const ActionCountTickNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionCountTickNtf::IsInitialized() const {

  return true;
}

void ActionCountTickNtf::Swap(ActionCountTickNtf* other) {
  if (other != this) {
    std::swap(last_time_, other->last_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActionCountTickNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActionCountTickNtf_descriptor_;
  metadata.reflection = ActionCountTickNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CustomerServiceUrlNtf::kUrlFieldNumber;
const int CustomerServiceUrlNtf::kKeyFieldNumber;
#endif  // !_MSC_VER

CustomerServiceUrlNtf::CustomerServiceUrlNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CustomerServiceUrlNtf::InitAsDefaultInstance() {
}

CustomerServiceUrlNtf::CustomerServiceUrlNtf(const CustomerServiceUrlNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CustomerServiceUrlNtf::SharedCtor() {
  _cached_size_ = 0;
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CustomerServiceUrlNtf::~CustomerServiceUrlNtf() {
  SharedDtor();
}

void CustomerServiceUrlNtf::SharedDtor() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void CustomerServiceUrlNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CustomerServiceUrlNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CustomerServiceUrlNtf_descriptor_;
}

const CustomerServiceUrlNtf& CustomerServiceUrlNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

CustomerServiceUrlNtf* CustomerServiceUrlNtf::default_instance_ = NULL;

CustomerServiceUrlNtf* CustomerServiceUrlNtf::New() const {
  return new CustomerServiceUrlNtf;
}

void CustomerServiceUrlNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::kEmptyString) {
        url_->clear();
      }
    }
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CustomerServiceUrlNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string url = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // optional string key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CustomerServiceUrlNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string url = 1;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->url(), output);
  }

  // optional string key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CustomerServiceUrlNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string url = 1;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->url(), target);
  }

  // optional string key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CustomerServiceUrlNtf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string url = 1;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional string key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CustomerServiceUrlNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CustomerServiceUrlNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CustomerServiceUrlNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CustomerServiceUrlNtf::MergeFrom(const CustomerServiceUrlNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_url()) {
      set_url(from.url());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CustomerServiceUrlNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CustomerServiceUrlNtf::CopyFrom(const CustomerServiceUrlNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomerServiceUrlNtf::IsInitialized() const {

  return true;
}

void CustomerServiceUrlNtf::Swap(CustomerServiceUrlNtf* other) {
  if (other != this) {
    std::swap(url_, other->url_);
    std::swap(key_, other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CustomerServiceUrlNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CustomerServiceUrlNtf_descriptor_;
  metadata.reflection = CustomerServiceUrlNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillPage::kPageFieldNumber;
const int SkillPage::kActiveSkillIdFirstFieldNumber;
const int SkillPage::kActiveSkillIdSecondFieldNumber;
const int SkillPage::kSkillFieldNumber;
#endif  // !_MSC_VER

SkillPage::SkillPage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillPage::InitAsDefaultInstance() {
}

SkillPage::SkillPage(const SkillPage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillPage::SharedCtor() {
  _cached_size_ = 0;
  page_ = 0u;
  active_skill_id_first_ = 0u;
  active_skill_id_second_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillPage::~SkillPage() {
  SharedDtor();
}

void SkillPage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillPage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillPage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillPage_descriptor_;
}

const SkillPage& SkillPage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

SkillPage* SkillPage::default_instance_ = NULL;

SkillPage* SkillPage::New() const {
  return new SkillPage;
}

void SkillPage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    page_ = 0u;
    active_skill_id_first_ = 0u;
    active_skill_id_second_ = 0u;
  }
  skill_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillPage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 page = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &page_)));
          set_has_page();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_active_skill_id_first;
        break;
      }

      // optional uint32 active_skill_id_first = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_active_skill_id_first:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &active_skill_id_first_)));
          set_has_active_skill_id_first();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_active_skill_id_second;
        break;
      }

      // optional uint32 active_skill_id_second = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_active_skill_id_second:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &active_skill_id_second_)));
          set_has_active_skill_id_second();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_skill;
        break;
      }

      // repeated .protoc.gameproto.Skill skill = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_skill;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillPage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 page = 1;
  if (has_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->page(), output);
  }

  // optional uint32 active_skill_id_first = 2;
  if (has_active_skill_id_first()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->active_skill_id_first(), output);
  }

  // optional uint32 active_skill_id_second = 3;
  if (has_active_skill_id_second()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->active_skill_id_second(), output);
  }

  // repeated .protoc.gameproto.Skill skill = 4;
  for (int i = 0; i < this->skill_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->skill(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillPage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 page = 1;
  if (has_page()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->page(), target);
  }

  // optional uint32 active_skill_id_first = 2;
  if (has_active_skill_id_first()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->active_skill_id_first(), target);
  }

  // optional uint32 active_skill_id_second = 3;
  if (has_active_skill_id_second()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->active_skill_id_second(), target);
  }

  // repeated .protoc.gameproto.Skill skill = 4;
  for (int i = 0; i < this->skill_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->skill(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillPage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 page = 1;
    if (has_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->page());
    }

    // optional uint32 active_skill_id_first = 2;
    if (has_active_skill_id_first()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->active_skill_id_first());
    }

    // optional uint32 active_skill_id_second = 3;
    if (has_active_skill_id_second()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->active_skill_id_second());
    }

  }
  // repeated .protoc.gameproto.Skill skill = 4;
  total_size += 1 * this->skill_size();
  for (int i = 0; i < this->skill_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skill(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillPage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillPage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillPage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillPage::MergeFrom(const SkillPage& from) {
  GOOGLE_CHECK_NE(&from, this);
  skill_.MergeFrom(from.skill_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_page()) {
      set_page(from.page());
    }
    if (from.has_active_skill_id_first()) {
      set_active_skill_id_first(from.active_skill_id_first());
    }
    if (from.has_active_skill_id_second()) {
      set_active_skill_id_second(from.active_skill_id_second());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillPage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillPage::CopyFrom(const SkillPage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillPage::IsInitialized() const {

  return true;
}

void SkillPage::Swap(SkillPage* other) {
  if (other != this) {
    std::swap(page_, other->page_);
    std::swap(active_skill_id_first_, other->active_skill_id_first_);
    std::swap(active_skill_id_second_, other->active_skill_id_second_);
    skill_.Swap(&other->skill_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillPage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillPage_descriptor_;
  metadata.reflection = SkillPage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Skill::kIdFieldNumber;
const int Skill::kLevelFieldNumber;
#endif  // !_MSC_VER

Skill::Skill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Skill::InitAsDefaultInstance() {
}

Skill::Skill(const Skill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Skill::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Skill::~Skill() {
  SharedDtor();
}

void Skill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Skill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Skill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Skill_descriptor_;
}

const Skill& Skill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

Skill* Skill::default_instance_ = NULL;

Skill* Skill::New() const {
  return new Skill;
}

void Skill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Skill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional uint32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Skill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Skill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Skill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Skill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Skill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Skill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Skill::MergeFrom(const Skill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Skill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Skill::CopyFrom(const Skill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Skill::IsInitialized() const {

  return true;
}

void Skill::Swap(Skill* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Skill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Skill_descriptor_;
  metadata.reflection = Skill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetSkillListReq::GetSkillListReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetSkillListReq::InitAsDefaultInstance() {
}

GetSkillListReq::GetSkillListReq(const GetSkillListReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetSkillListReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetSkillListReq::~GetSkillListReq() {
  SharedDtor();
}

void GetSkillListReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetSkillListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetSkillListReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetSkillListReq_descriptor_;
}

const GetSkillListReq& GetSkillListReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

GetSkillListReq* GetSkillListReq::default_instance_ = NULL;

GetSkillListReq* GetSkillListReq::New() const {
  return new GetSkillListReq;
}

void GetSkillListReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetSkillListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetSkillListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetSkillListReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetSkillListReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetSkillListReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetSkillListReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetSkillListReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetSkillListReq::MergeFrom(const GetSkillListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetSkillListReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSkillListReq::CopyFrom(const GetSkillListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSkillListReq::IsInitialized() const {

  return true;
}

void GetSkillListReq::Swap(GetSkillListReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetSkillListReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetSkillListReq_descriptor_;
  metadata.reflection = GetSkillListReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetSkillListAck::kSkillPageFieldNumber;
#endif  // !_MSC_VER

GetSkillListAck::GetSkillListAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetSkillListAck::InitAsDefaultInstance() {
}

GetSkillListAck::GetSkillListAck(const GetSkillListAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetSkillListAck::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetSkillListAck::~GetSkillListAck() {
  SharedDtor();
}

void GetSkillListAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetSkillListAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetSkillListAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetSkillListAck_descriptor_;
}

const GetSkillListAck& GetSkillListAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

GetSkillListAck* GetSkillListAck::default_instance_ = NULL;

GetSkillListAck* GetSkillListAck::New() const {
  return new GetSkillListAck;
}

void GetSkillListAck::Clear() {
  skill_page_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetSkillListAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protoc.gameproto.SkillPage skill_page = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill_page:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skill_page()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_skill_page;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetSkillListAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protoc.gameproto.SkillPage skill_page = 1;
  for (int i = 0; i < this->skill_page_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->skill_page(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetSkillListAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protoc.gameproto.SkillPage skill_page = 1;
  for (int i = 0; i < this->skill_page_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->skill_page(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetSkillListAck::ByteSize() const {
  int total_size = 0;

  // repeated .protoc.gameproto.SkillPage skill_page = 1;
  total_size += 1 * this->skill_page_size();
  for (int i = 0; i < this->skill_page_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skill_page(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetSkillListAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetSkillListAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetSkillListAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetSkillListAck::MergeFrom(const GetSkillListAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  skill_page_.MergeFrom(from.skill_page_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetSkillListAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSkillListAck::CopyFrom(const GetSkillListAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSkillListAck::IsInitialized() const {

  return true;
}

void GetSkillListAck::Swap(GetSkillListAck* other) {
  if (other != this) {
    skill_page_.Swap(&other->skill_page_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetSkillListAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetSkillListAck_descriptor_;
  metadata.reflection = GetSkillListAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SaveSkillPageReq::kPageFieldNumber;
const int SaveSkillPageReq::kSkillPageFieldNumber;
#endif  // !_MSC_VER

SaveSkillPageReq::SaveSkillPageReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SaveSkillPageReq::InitAsDefaultInstance() {
  skill_page_ = const_cast< ::protoc::gameproto::SkillPage*>(&::protoc::gameproto::SkillPage::default_instance());
}

SaveSkillPageReq::SaveSkillPageReq(const SaveSkillPageReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SaveSkillPageReq::SharedCtor() {
  _cached_size_ = 0;
  page_ = 0u;
  skill_page_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SaveSkillPageReq::~SaveSkillPageReq() {
  SharedDtor();
}

void SaveSkillPageReq::SharedDtor() {
  if (this != default_instance_) {
    delete skill_page_;
  }
}

void SaveSkillPageReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SaveSkillPageReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SaveSkillPageReq_descriptor_;
}

const SaveSkillPageReq& SaveSkillPageReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

SaveSkillPageReq* SaveSkillPageReq::default_instance_ = NULL;

SaveSkillPageReq* SaveSkillPageReq::New() const {
  return new SaveSkillPageReq;
}

void SaveSkillPageReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    page_ = 0u;
    if (has_skill_page()) {
      if (skill_page_ != NULL) skill_page_->::protoc::gameproto::SkillPage::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SaveSkillPageReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 page = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &page_)));
          set_has_page();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_skill_page;
        break;
      }

      // optional .protoc.gameproto.SkillPage skill_page = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill_page:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_skill_page()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SaveSkillPageReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 page = 1;
  if (has_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->page(), output);
  }

  // optional .protoc.gameproto.SkillPage skill_page = 2;
  if (has_skill_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->skill_page(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SaveSkillPageReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 page = 1;
  if (has_page()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->page(), target);
  }

  // optional .protoc.gameproto.SkillPage skill_page = 2;
  if (has_skill_page()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->skill_page(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SaveSkillPageReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 page = 1;
    if (has_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->page());
    }

    // optional .protoc.gameproto.SkillPage skill_page = 2;
    if (has_skill_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->skill_page());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SaveSkillPageReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SaveSkillPageReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SaveSkillPageReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SaveSkillPageReq::MergeFrom(const SaveSkillPageReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_page()) {
      set_page(from.page());
    }
    if (from.has_skill_page()) {
      mutable_skill_page()->::protoc::gameproto::SkillPage::MergeFrom(from.skill_page());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SaveSkillPageReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SaveSkillPageReq::CopyFrom(const SaveSkillPageReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaveSkillPageReq::IsInitialized() const {

  return true;
}

void SaveSkillPageReq::Swap(SaveSkillPageReq* other) {
  if (other != this) {
    std::swap(page_, other->page_);
    std::swap(skill_page_, other->skill_page_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SaveSkillPageReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SaveSkillPageReq_descriptor_;
  metadata.reflection = SaveSkillPageReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SaveSkillPageAck::kErrNoFieldNumber;
#endif  // !_MSC_VER

SaveSkillPageAck::SaveSkillPageAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SaveSkillPageAck::InitAsDefaultInstance() {
}

SaveSkillPageAck::SaveSkillPageAck(const SaveSkillPageAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SaveSkillPageAck::SharedCtor() {
  _cached_size_ = 0;
  err_no_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SaveSkillPageAck::~SaveSkillPageAck() {
  SharedDtor();
}

void SaveSkillPageAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SaveSkillPageAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SaveSkillPageAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SaveSkillPageAck_descriptor_;
}

const SaveSkillPageAck& SaveSkillPageAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

SaveSkillPageAck* SaveSkillPageAck::default_instance_ = NULL;

SaveSkillPageAck* SaveSkillPageAck::New() const {
  return new SaveSkillPageAck;
}

void SaveSkillPageAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    err_no_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SaveSkillPageAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 err_no = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_no_)));
          set_has_err_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SaveSkillPageAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 err_no = 1;
  if (has_err_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->err_no(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SaveSkillPageAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 err_no = 1;
  if (has_err_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->err_no(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SaveSkillPageAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 err_no = 1;
    if (has_err_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err_no());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SaveSkillPageAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SaveSkillPageAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SaveSkillPageAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SaveSkillPageAck::MergeFrom(const SaveSkillPageAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_err_no()) {
      set_err_no(from.err_no());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SaveSkillPageAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SaveSkillPageAck::CopyFrom(const SaveSkillPageAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaveSkillPageAck::IsInitialized() const {

  return true;
}

void SaveSkillPageAck::Swap(SaveSkillPageAck* other) {
  if (other != this) {
    std::swap(err_no_, other->err_no_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SaveSkillPageAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SaveSkillPageAck_descriptor_;
  metadata.reflection = SaveSkillPageAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SaveActiveSkillReq::kPageFieldNumber;
const int SaveActiveSkillReq::kActiveSkillIdFirstFieldNumber;
const int SaveActiveSkillReq::kActiveSkillIdSecondFieldNumber;
#endif  // !_MSC_VER

SaveActiveSkillReq::SaveActiveSkillReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SaveActiveSkillReq::InitAsDefaultInstance() {
}

SaveActiveSkillReq::SaveActiveSkillReq(const SaveActiveSkillReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SaveActiveSkillReq::SharedCtor() {
  _cached_size_ = 0;
  page_ = 0u;
  active_skill_id_first_ = 0u;
  active_skill_id_second_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SaveActiveSkillReq::~SaveActiveSkillReq() {
  SharedDtor();
}

void SaveActiveSkillReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SaveActiveSkillReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SaveActiveSkillReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SaveActiveSkillReq_descriptor_;
}

const SaveActiveSkillReq& SaveActiveSkillReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

SaveActiveSkillReq* SaveActiveSkillReq::default_instance_ = NULL;

SaveActiveSkillReq* SaveActiveSkillReq::New() const {
  return new SaveActiveSkillReq;
}

void SaveActiveSkillReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    page_ = 0u;
    active_skill_id_first_ = 0u;
    active_skill_id_second_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SaveActiveSkillReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 page = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &page_)));
          set_has_page();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_active_skill_id_first;
        break;
      }

      // optional uint32 active_skill_id_first = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_active_skill_id_first:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &active_skill_id_first_)));
          set_has_active_skill_id_first();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_active_skill_id_second;
        break;
      }

      // optional uint32 active_skill_id_second = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_active_skill_id_second:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &active_skill_id_second_)));
          set_has_active_skill_id_second();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SaveActiveSkillReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 page = 1;
  if (has_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->page(), output);
  }

  // optional uint32 active_skill_id_first = 2;
  if (has_active_skill_id_first()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->active_skill_id_first(), output);
  }

  // optional uint32 active_skill_id_second = 3;
  if (has_active_skill_id_second()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->active_skill_id_second(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SaveActiveSkillReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 page = 1;
  if (has_page()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->page(), target);
  }

  // optional uint32 active_skill_id_first = 2;
  if (has_active_skill_id_first()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->active_skill_id_first(), target);
  }

  // optional uint32 active_skill_id_second = 3;
  if (has_active_skill_id_second()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->active_skill_id_second(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SaveActiveSkillReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 page = 1;
    if (has_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->page());
    }

    // optional uint32 active_skill_id_first = 2;
    if (has_active_skill_id_first()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->active_skill_id_first());
    }

    // optional uint32 active_skill_id_second = 3;
    if (has_active_skill_id_second()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->active_skill_id_second());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SaveActiveSkillReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SaveActiveSkillReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SaveActiveSkillReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SaveActiveSkillReq::MergeFrom(const SaveActiveSkillReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_page()) {
      set_page(from.page());
    }
    if (from.has_active_skill_id_first()) {
      set_active_skill_id_first(from.active_skill_id_first());
    }
    if (from.has_active_skill_id_second()) {
      set_active_skill_id_second(from.active_skill_id_second());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SaveActiveSkillReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SaveActiveSkillReq::CopyFrom(const SaveActiveSkillReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaveActiveSkillReq::IsInitialized() const {

  return true;
}

void SaveActiveSkillReq::Swap(SaveActiveSkillReq* other) {
  if (other != this) {
    std::swap(page_, other->page_);
    std::swap(active_skill_id_first_, other->active_skill_id_first_);
    std::swap(active_skill_id_second_, other->active_skill_id_second_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SaveActiveSkillReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SaveActiveSkillReq_descriptor_;
  metadata.reflection = SaveActiveSkillReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SaveActiveSkillAck::kErrNoFieldNumber;
#endif  // !_MSC_VER

SaveActiveSkillAck::SaveActiveSkillAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SaveActiveSkillAck::InitAsDefaultInstance() {
}

SaveActiveSkillAck::SaveActiveSkillAck(const SaveActiveSkillAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SaveActiveSkillAck::SharedCtor() {
  _cached_size_ = 0;
  err_no_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SaveActiveSkillAck::~SaveActiveSkillAck() {
  SharedDtor();
}

void SaveActiveSkillAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SaveActiveSkillAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SaveActiveSkillAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SaveActiveSkillAck_descriptor_;
}

const SaveActiveSkillAck& SaveActiveSkillAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

SaveActiveSkillAck* SaveActiveSkillAck::default_instance_ = NULL;

SaveActiveSkillAck* SaveActiveSkillAck::New() const {
  return new SaveActiveSkillAck;
}

void SaveActiveSkillAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    err_no_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SaveActiveSkillAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 err_no = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_no_)));
          set_has_err_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SaveActiveSkillAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 err_no = 1;
  if (has_err_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->err_no(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SaveActiveSkillAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 err_no = 1;
  if (has_err_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->err_no(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SaveActiveSkillAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 err_no = 1;
    if (has_err_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err_no());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SaveActiveSkillAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SaveActiveSkillAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SaveActiveSkillAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SaveActiveSkillAck::MergeFrom(const SaveActiveSkillAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_err_no()) {
      set_err_no(from.err_no());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SaveActiveSkillAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SaveActiveSkillAck::CopyFrom(const SaveActiveSkillAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaveActiveSkillAck::IsInitialized() const {

  return true;
}

void SaveActiveSkillAck::Swap(SaveActiveSkillAck* other) {
  if (other != this) {
    std::swap(err_no_, other->err_no_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SaveActiveSkillAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SaveActiveSkillAck_descriptor_;
  metadata.reflection = SaveActiveSkillAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GoodsItem::kQwIDFieldNumber;
const int GoodsItem::kGoodsIdFieldNumber;
const int GoodsItem::kNumberFieldNumber;
#endif  // !_MSC_VER

GoodsItem::GoodsItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GoodsItem::InitAsDefaultInstance() {
}

GoodsItem::GoodsItem(const GoodsItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GoodsItem::SharedCtor() {
  _cached_size_ = 0;
  qwid_ = GOOGLE_ULONGLONG(0);
  goods_id_ = 0u;
  number_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GoodsItem::~GoodsItem() {
  SharedDtor();
}

void GoodsItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GoodsItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GoodsItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GoodsItem_descriptor_;
}

const GoodsItem& GoodsItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

GoodsItem* GoodsItem::default_instance_ = NULL;

GoodsItem* GoodsItem::New() const {
  return new GoodsItem;
}

void GoodsItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    qwid_ = GOOGLE_ULONGLONG(0);
    goods_id_ = 0u;
    number_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GoodsItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 qwID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &qwid_)));
          set_has_qwid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_goods_id;
        break;
      }

      // optional uint32 goods_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goods_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &goods_id_)));
          set_has_goods_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_number;
        break;
      }

      // optional uint32 number = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GoodsItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 qwID = 1;
  if (has_qwid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->qwid(), output);
  }

  // optional uint32 goods_id = 2;
  if (has_goods_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->goods_id(), output);
  }

  // optional uint32 number = 3;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->number(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GoodsItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 qwID = 1;
  if (has_qwid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->qwid(), target);
  }

  // optional uint32 goods_id = 2;
  if (has_goods_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->goods_id(), target);
  }

  // optional uint32 number = 3;
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->number(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GoodsItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 qwID = 1;
    if (has_qwid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->qwid());
    }

    // optional uint32 goods_id = 2;
    if (has_goods_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->goods_id());
    }

    // optional uint32 number = 3;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->number());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GoodsItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GoodsItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GoodsItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GoodsItem::MergeFrom(const GoodsItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_qwid()) {
      set_qwid(from.qwid());
    }
    if (from.has_goods_id()) {
      set_goods_id(from.goods_id());
    }
    if (from.has_number()) {
      set_number(from.number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GoodsItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GoodsItem::CopyFrom(const GoodsItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GoodsItem::IsInitialized() const {

  return true;
}

void GoodsItem::Swap(GoodsItem* other) {
  if (other != this) {
    std::swap(qwid_, other->qwid_);
    std::swap(goods_id_, other->goods_id_);
    std::swap(number_, other->number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GoodsItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GoodsItem_descriptor_;
  metadata.reflection = GoodsItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GoodsList::kDataFieldNumber;
#endif  // !_MSC_VER

GoodsList::GoodsList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GoodsList::InitAsDefaultInstance() {
}

GoodsList::GoodsList(const GoodsList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GoodsList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GoodsList::~GoodsList() {
  SharedDtor();
}

void GoodsList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GoodsList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GoodsList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GoodsList_descriptor_;
}

const GoodsList& GoodsList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

GoodsList* GoodsList::default_instance_ = NULL;

GoodsList* GoodsList::New() const {
  return new GoodsList;
}

void GoodsList::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GoodsList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protoc.gameproto.GoodsItem data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GoodsList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protoc.gameproto.GoodsItem data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GoodsList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protoc.gameproto.GoodsItem data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GoodsList::ByteSize() const {
  int total_size = 0;

  // repeated .protoc.gameproto.GoodsItem data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GoodsList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GoodsList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GoodsList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GoodsList::MergeFrom(const GoodsList& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GoodsList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GoodsList::CopyFrom(const GoodsList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GoodsList::IsInitialized() const {

  return true;
}

void GoodsList::Swap(GoodsList* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GoodsList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GoodsList_descriptor_;
  metadata.reflection = GoodsList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddGoodsItem::kItemFieldNumber;
#endif  // !_MSC_VER

AddGoodsItem::AddGoodsItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddGoodsItem::InitAsDefaultInstance() {
  item_ = const_cast< ::protoc::gameproto::GoodsItem*>(&::protoc::gameproto::GoodsItem::default_instance());
}

AddGoodsItem::AddGoodsItem(const AddGoodsItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddGoodsItem::SharedCtor() {
  _cached_size_ = 0;
  item_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddGoodsItem::~AddGoodsItem() {
  SharedDtor();
}

void AddGoodsItem::SharedDtor() {
  if (this != default_instance_) {
    delete item_;
  }
}

void AddGoodsItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddGoodsItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddGoodsItem_descriptor_;
}

const AddGoodsItem& AddGoodsItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

AddGoodsItem* AddGoodsItem::default_instance_ = NULL;

AddGoodsItem* AddGoodsItem::New() const {
  return new AddGoodsItem;
}

void AddGoodsItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_item()) {
      if (item_ != NULL) item_->::protoc::gameproto::GoodsItem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddGoodsItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protoc.gameproto.GoodsItem item = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddGoodsItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .protoc.gameproto.GoodsItem item = 1;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddGoodsItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .protoc.gameproto.GoodsItem item = 1;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->item(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddGoodsItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .protoc.gameproto.GoodsItem item = 1;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddGoodsItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddGoodsItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddGoodsItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddGoodsItem::MergeFrom(const AddGoodsItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item()) {
      mutable_item()->::protoc::gameproto::GoodsItem::MergeFrom(from.item());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddGoodsItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddGoodsItem::CopyFrom(const AddGoodsItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddGoodsItem::IsInitialized() const {

  return true;
}

void AddGoodsItem::Swap(AddGoodsItem* other) {
  if (other != this) {
    std::swap(item_, other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddGoodsItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddGoodsItem_descriptor_;
  metadata.reflection = AddGoodsItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateGoodsNumber::kQwidFieldNumber;
const int UpdateGoodsNumber::kNumberFieldNumber;
#endif  // !_MSC_VER

UpdateGoodsNumber::UpdateGoodsNumber()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateGoodsNumber::InitAsDefaultInstance() {
}

UpdateGoodsNumber::UpdateGoodsNumber(const UpdateGoodsNumber& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateGoodsNumber::SharedCtor() {
  _cached_size_ = 0;
  qwid_ = GOOGLE_ULONGLONG(0);
  number_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateGoodsNumber::~UpdateGoodsNumber() {
  SharedDtor();
}

void UpdateGoodsNumber::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateGoodsNumber::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateGoodsNumber::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateGoodsNumber_descriptor_;
}

const UpdateGoodsNumber& UpdateGoodsNumber::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

UpdateGoodsNumber* UpdateGoodsNumber::default_instance_ = NULL;

UpdateGoodsNumber* UpdateGoodsNumber::New() const {
  return new UpdateGoodsNumber;
}

void UpdateGoodsNumber::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    qwid_ = GOOGLE_ULONGLONG(0);
    number_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateGoodsNumber::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 qwid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &qwid_)));
          set_has_qwid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_number;
        break;
      }

      // optional uint32 number = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateGoodsNumber::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 qwid = 1;
  if (has_qwid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->qwid(), output);
  }

  // optional uint32 number = 2;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->number(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateGoodsNumber::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 qwid = 1;
  if (has_qwid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->qwid(), target);
  }

  // optional uint32 number = 2;
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->number(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateGoodsNumber::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 qwid = 1;
    if (has_qwid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->qwid());
    }

    // optional uint32 number = 2;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->number());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateGoodsNumber::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateGoodsNumber* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateGoodsNumber*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateGoodsNumber::MergeFrom(const UpdateGoodsNumber& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_qwid()) {
      set_qwid(from.qwid());
    }
    if (from.has_number()) {
      set_number(from.number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateGoodsNumber::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateGoodsNumber::CopyFrom(const UpdateGoodsNumber& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateGoodsNumber::IsInitialized() const {

  return true;
}

void UpdateGoodsNumber::Swap(UpdateGoodsNumber* other) {
  if (other != this) {
    std::swap(qwid_, other->qwid_);
    std::swap(number_, other->number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateGoodsNumber::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateGoodsNumber_descriptor_;
  metadata.reflection = UpdateGoodsNumber_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipData::kQwIDFieldNumber;
const int EquipData::kGoodsIdFieldNumber;
const int EquipData::kExpFieldNumber;
const int EquipData::kLevelFieldNumber;
const int EquipData::kHoleIdFieldNumber;
const int EquipData::kQwpetIdFieldNumber;
#endif  // !_MSC_VER

EquipData::EquipData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipData::InitAsDefaultInstance() {
}

EquipData::EquipData(const EquipData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipData::SharedCtor() {
  _cached_size_ = 0;
  qwid_ = GOOGLE_ULONGLONG(0);
  goods_id_ = 0u;
  exp_ = 0u;
  level_ = 0u;
  qwpet_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipData::~EquipData() {
  SharedDtor();
}

void EquipData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipData_descriptor_;
}

const EquipData& EquipData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

EquipData* EquipData::default_instance_ = NULL;

EquipData* EquipData::New() const {
  return new EquipData;
}

void EquipData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    qwid_ = GOOGLE_ULONGLONG(0);
    goods_id_ = 0u;
    exp_ = 0u;
    level_ = 0u;
    qwpet_id_ = GOOGLE_ULONGLONG(0);
  }
  hole_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 qwID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &qwid_)));
          set_has_qwid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_goods_id;
        break;
      }

      // optional uint32 goods_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goods_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &goods_id_)));
          set_has_goods_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_exp;
        break;
      }

      // optional uint32 exp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // optional uint32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_hole_id;
        break;
      }

      // repeated uint32 hole_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hole_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_hole_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_hole_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_hole_id;
        if (input->ExpectTag(48)) goto parse_qwpet_id;
        break;
      }

      // optional uint64 qwpet_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qwpet_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &qwpet_id_)));
          set_has_qwpet_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 qwID = 1;
  if (has_qwid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->qwid(), output);
  }

  // optional uint32 goods_id = 2;
  if (has_goods_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->goods_id(), output);
  }

  // optional uint32 exp = 3;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->exp(), output);
  }

  // optional uint32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->level(), output);
  }

  // repeated uint32 hole_id = 5;
  for (int i = 0; i < this->hole_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->hole_id(i), output);
  }

  // optional uint64 qwpet_id = 6;
  if (has_qwpet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->qwpet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 qwID = 1;
  if (has_qwid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->qwid(), target);
  }

  // optional uint32 goods_id = 2;
  if (has_goods_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->goods_id(), target);
  }

  // optional uint32 exp = 3;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->exp(), target);
  }

  // optional uint32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->level(), target);
  }

  // repeated uint32 hole_id = 5;
  for (int i = 0; i < this->hole_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->hole_id(i), target);
  }

  // optional uint64 qwpet_id = 6;
  if (has_qwpet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->qwpet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 qwID = 1;
    if (has_qwid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->qwid());
    }

    // optional uint32 goods_id = 2;
    if (has_goods_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->goods_id());
    }

    // optional uint32 exp = 3;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

    // optional uint32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint64 qwpet_id = 6;
    if (has_qwpet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->qwpet_id());
    }

  }
  // repeated uint32 hole_id = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->hole_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->hole_id(i));
    }
    total_size += 1 * this->hole_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipData::MergeFrom(const EquipData& from) {
  GOOGLE_CHECK_NE(&from, this);
  hole_id_.MergeFrom(from.hole_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_qwid()) {
      set_qwid(from.qwid());
    }
    if (from.has_goods_id()) {
      set_goods_id(from.goods_id());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_qwpet_id()) {
      set_qwpet_id(from.qwpet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipData::CopyFrom(const EquipData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipData::IsInitialized() const {

  return true;
}

void EquipData::Swap(EquipData* other) {
  if (other != this) {
    std::swap(qwid_, other->qwid_);
    std::swap(goods_id_, other->goods_id_);
    std::swap(exp_, other->exp_);
    std::swap(level_, other->level_);
    hole_id_.Swap(&other->hole_id_);
    std::swap(qwpet_id_, other->qwpet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipData_descriptor_;
  metadata.reflection = EquipData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipList::kDataFieldNumber;
#endif  // !_MSC_VER

EquipList::EquipList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipList::InitAsDefaultInstance() {
}

EquipList::EquipList(const EquipList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipList::~EquipList() {
  SharedDtor();
}

void EquipList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipList_descriptor_;
}

const EquipList& EquipList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

EquipList* EquipList::default_instance_ = NULL;

EquipList* EquipList::New() const {
  return new EquipList;
}

void EquipList::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protoc.gameproto.EquipData data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protoc.gameproto.EquipData data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protoc.gameproto.EquipData data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipList::ByteSize() const {
  int total_size = 0;

  // repeated .protoc.gameproto.EquipData data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipList::MergeFrom(const EquipList& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipList::CopyFrom(const EquipList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipList::IsInitialized() const {

  return true;
}

void EquipList::Swap(EquipList* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipList_descriptor_;
  metadata.reflection = EquipList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddEquip::kDataFieldNumber;
#endif  // !_MSC_VER

AddEquip::AddEquip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddEquip::InitAsDefaultInstance() {
  data_ = const_cast< ::protoc::gameproto::EquipData*>(&::protoc::gameproto::EquipData::default_instance());
}

AddEquip::AddEquip(const AddEquip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddEquip::SharedCtor() {
  _cached_size_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddEquip::~AddEquip() {
  SharedDtor();
}

void AddEquip::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void AddEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddEquip_descriptor_;
}

const AddEquip& AddEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

AddEquip* AddEquip::default_instance_ = NULL;

AddEquip* AddEquip::New() const {
  return new AddEquip;
}

void AddEquip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != NULL) data_->::protoc::gameproto::EquipData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protoc.gameproto.EquipData data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .protoc.gameproto.EquipData data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddEquip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .protoc.gameproto.EquipData data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddEquip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .protoc.gameproto.EquipData data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddEquip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddEquip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddEquip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddEquip::MergeFrom(const AddEquip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      mutable_data()->::protoc::gameproto::EquipData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddEquip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddEquip::CopyFrom(const AddEquip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddEquip::IsInitialized() const {

  return true;
}

void AddEquip::Swap(AddEquip* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddEquip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddEquip_descriptor_;
  metadata.reflection = AddEquip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DelEquip::kQwidFieldNumber;
#endif  // !_MSC_VER

DelEquip::DelEquip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DelEquip::InitAsDefaultInstance() {
}

DelEquip::DelEquip(const DelEquip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DelEquip::SharedCtor() {
  _cached_size_ = 0;
  qwid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DelEquip::~DelEquip() {
  SharedDtor();
}

void DelEquip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DelEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DelEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DelEquip_descriptor_;
}

const DelEquip& DelEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

DelEquip* DelEquip::default_instance_ = NULL;

DelEquip* DelEquip::New() const {
  return new DelEquip;
}

void DelEquip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    qwid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DelEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 qwid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &qwid_)));
          set_has_qwid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DelEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 qwid = 1;
  if (has_qwid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->qwid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DelEquip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 qwid = 1;
  if (has_qwid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->qwid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DelEquip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 qwid = 1;
    if (has_qwid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->qwid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DelEquip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DelEquip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DelEquip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DelEquip::MergeFrom(const DelEquip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_qwid()) {
      set_qwid(from.qwid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DelEquip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelEquip::CopyFrom(const DelEquip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelEquip::IsInitialized() const {

  return true;
}

void DelEquip::Swap(DelEquip* other) {
  if (other != this) {
    std::swap(qwid_, other->qwid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DelEquip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DelEquip_descriptor_;
  metadata.reflection = DelEquip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateEquip::kDataFieldNumber;
#endif  // !_MSC_VER

UpdateEquip::UpdateEquip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateEquip::InitAsDefaultInstance() {
  data_ = const_cast< ::protoc::gameproto::EquipData*>(&::protoc::gameproto::EquipData::default_instance());
}

UpdateEquip::UpdateEquip(const UpdateEquip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateEquip::SharedCtor() {
  _cached_size_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateEquip::~UpdateEquip() {
  SharedDtor();
}

void UpdateEquip::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void UpdateEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateEquip_descriptor_;
}

const UpdateEquip& UpdateEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

UpdateEquip* UpdateEquip::default_instance_ = NULL;

UpdateEquip* UpdateEquip::New() const {
  return new UpdateEquip;
}

void UpdateEquip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != NULL) data_->::protoc::gameproto::EquipData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protoc.gameproto.EquipData data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .protoc.gameproto.EquipData data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateEquip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .protoc.gameproto.EquipData data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateEquip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .protoc.gameproto.EquipData data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateEquip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateEquip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateEquip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateEquip::MergeFrom(const UpdateEquip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      mutable_data()->::protoc::gameproto::EquipData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateEquip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateEquip::CopyFrom(const UpdateEquip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateEquip::IsInitialized() const {

  return true;
}

void UpdateEquip::Swap(UpdateEquip* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateEquip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateEquip_descriptor_;
  metadata.reflection = UpdateEquip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PutOnEquipReq::kPetIdFieldNumber;
const int PutOnEquipReq::kEquipIdFieldNumber;
#endif  // !_MSC_VER

PutOnEquipReq::PutOnEquipReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PutOnEquipReq::InitAsDefaultInstance() {
}

PutOnEquipReq::PutOnEquipReq(const PutOnEquipReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PutOnEquipReq::SharedCtor() {
  _cached_size_ = 0;
  pet_id_ = GOOGLE_ULONGLONG(0);
  equip_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PutOnEquipReq::~PutOnEquipReq() {
  SharedDtor();
}

void PutOnEquipReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PutOnEquipReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PutOnEquipReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PutOnEquipReq_descriptor_;
}

const PutOnEquipReq& PutOnEquipReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

PutOnEquipReq* PutOnEquipReq::default_instance_ = NULL;

PutOnEquipReq* PutOnEquipReq::New() const {
  return new PutOnEquipReq;
}

void PutOnEquipReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pet_id_ = GOOGLE_ULONGLONG(0);
    equip_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PutOnEquipReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 pet_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pet_id_)));
          set_has_pet_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_equip_id;
        break;
      }

      // optional uint64 equip_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equip_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &equip_id_)));
          set_has_equip_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PutOnEquipReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 pet_id = 1;
  if (has_pet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->pet_id(), output);
  }

  // optional uint64 equip_id = 2;
  if (has_equip_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->equip_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PutOnEquipReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 pet_id = 1;
  if (has_pet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->pet_id(), target);
  }

  // optional uint64 equip_id = 2;
  if (has_equip_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->equip_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PutOnEquipReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 pet_id = 1;
    if (has_pet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pet_id());
    }

    // optional uint64 equip_id = 2;
    if (has_equip_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->equip_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PutOnEquipReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PutOnEquipReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PutOnEquipReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PutOnEquipReq::MergeFrom(const PutOnEquipReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pet_id()) {
      set_pet_id(from.pet_id());
    }
    if (from.has_equip_id()) {
      set_equip_id(from.equip_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PutOnEquipReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PutOnEquipReq::CopyFrom(const PutOnEquipReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutOnEquipReq::IsInitialized() const {

  return true;
}

void PutOnEquipReq::Swap(PutOnEquipReq* other) {
  if (other != this) {
    std::swap(pet_id_, other->pet_id_);
    std::swap(equip_id_, other->equip_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PutOnEquipReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PutOnEquipReq_descriptor_;
  metadata.reflection = PutOnEquipReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PutOnEquipAck::kErrNoFieldNumber;
const int PutOnEquipAck::kPetIdFieldNumber;
const int PutOnEquipAck::kEquipIdFieldNumber;
#endif  // !_MSC_VER

PutOnEquipAck::PutOnEquipAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PutOnEquipAck::InitAsDefaultInstance() {
}

PutOnEquipAck::PutOnEquipAck(const PutOnEquipAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PutOnEquipAck::SharedCtor() {
  _cached_size_ = 0;
  err_no_ = 0;
  pet_id_ = GOOGLE_ULONGLONG(0);
  equip_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PutOnEquipAck::~PutOnEquipAck() {
  SharedDtor();
}

void PutOnEquipAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PutOnEquipAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PutOnEquipAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PutOnEquipAck_descriptor_;
}

const PutOnEquipAck& PutOnEquipAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

PutOnEquipAck* PutOnEquipAck::default_instance_ = NULL;

PutOnEquipAck* PutOnEquipAck::New() const {
  return new PutOnEquipAck;
}

void PutOnEquipAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    err_no_ = 0;
    pet_id_ = GOOGLE_ULONGLONG(0);
    equip_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PutOnEquipAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 err_no = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_no_)));
          set_has_err_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pet_id;
        break;
      }

      // optional uint64 pet_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pet_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pet_id_)));
          set_has_pet_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_equip_id;
        break;
      }

      // optional uint64 equip_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equip_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &equip_id_)));
          set_has_equip_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PutOnEquipAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 err_no = 1;
  if (has_err_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->err_no(), output);
  }

  // optional uint64 pet_id = 2;
  if (has_pet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->pet_id(), output);
  }

  // optional uint64 equip_id = 3;
  if (has_equip_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->equip_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PutOnEquipAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 err_no = 1;
  if (has_err_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->err_no(), target);
  }

  // optional uint64 pet_id = 2;
  if (has_pet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->pet_id(), target);
  }

  // optional uint64 equip_id = 3;
  if (has_equip_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->equip_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PutOnEquipAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 err_no = 1;
    if (has_err_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err_no());
    }

    // optional uint64 pet_id = 2;
    if (has_pet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pet_id());
    }

    // optional uint64 equip_id = 3;
    if (has_equip_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->equip_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PutOnEquipAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PutOnEquipAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PutOnEquipAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PutOnEquipAck::MergeFrom(const PutOnEquipAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_err_no()) {
      set_err_no(from.err_no());
    }
    if (from.has_pet_id()) {
      set_pet_id(from.pet_id());
    }
    if (from.has_equip_id()) {
      set_equip_id(from.equip_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PutOnEquipAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PutOnEquipAck::CopyFrom(const PutOnEquipAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutOnEquipAck::IsInitialized() const {

  return true;
}

void PutOnEquipAck::Swap(PutOnEquipAck* other) {
  if (other != this) {
    std::swap(err_no_, other->err_no_);
    std::swap(pet_id_, other->pet_id_);
    std::swap(equip_id_, other->equip_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PutOnEquipAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PutOnEquipAck_descriptor_;
  metadata.reflection = PutOnEquipAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TongShiEquip::kEquipIdFieldNumber;
const int TongShiEquip::kNumberFieldNumber;
#endif  // !_MSC_VER

TongShiEquip::TongShiEquip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TongShiEquip::InitAsDefaultInstance() {
}

TongShiEquip::TongShiEquip(const TongShiEquip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TongShiEquip::SharedCtor() {
  _cached_size_ = 0;
  equip_id_ = GOOGLE_ULONGLONG(0);
  number_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TongShiEquip::~TongShiEquip() {
  SharedDtor();
}

void TongShiEquip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TongShiEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TongShiEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TongShiEquip_descriptor_;
}

const TongShiEquip& TongShiEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

TongShiEquip* TongShiEquip::default_instance_ = NULL;

TongShiEquip* TongShiEquip::New() const {
  return new TongShiEquip;
}

void TongShiEquip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    equip_id_ = GOOGLE_ULONGLONG(0);
    number_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TongShiEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 equip_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &equip_id_)));
          set_has_equip_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_number;
        break;
      }

      // optional uint32 number = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TongShiEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 equip_id = 1;
  if (has_equip_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->equip_id(), output);
  }

  // optional uint32 number = 2;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->number(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TongShiEquip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 equip_id = 1;
  if (has_equip_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->equip_id(), target);
  }

  // optional uint32 number = 2;
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->number(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TongShiEquip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 equip_id = 1;
    if (has_equip_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->equip_id());
    }

    // optional uint32 number = 2;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->number());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TongShiEquip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TongShiEquip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TongShiEquip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TongShiEquip::MergeFrom(const TongShiEquip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equip_id()) {
      set_equip_id(from.equip_id());
    }
    if (from.has_number()) {
      set_number(from.number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TongShiEquip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TongShiEquip::CopyFrom(const TongShiEquip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TongShiEquip::IsInitialized() const {

  return true;
}

void TongShiEquip::Swap(TongShiEquip* other) {
  if (other != this) {
    std::swap(equip_id_, other->equip_id_);
    std::swap(number_, other->number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TongShiEquip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TongShiEquip_descriptor_;
  metadata.reflection = TongShiEquip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StrengEquipReq::kEquipIdFieldNumber;
const int StrengEquipReq::kTonshiFieldNumber;
#endif  // !_MSC_VER

StrengEquipReq::StrengEquipReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StrengEquipReq::InitAsDefaultInstance() {
}

StrengEquipReq::StrengEquipReq(const StrengEquipReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StrengEquipReq::SharedCtor() {
  _cached_size_ = 0;
  equip_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StrengEquipReq::~StrengEquipReq() {
  SharedDtor();
}

void StrengEquipReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StrengEquipReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StrengEquipReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StrengEquipReq_descriptor_;
}

const StrengEquipReq& StrengEquipReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

StrengEquipReq* StrengEquipReq::default_instance_ = NULL;

StrengEquipReq* StrengEquipReq::New() const {
  return new StrengEquipReq;
}

void StrengEquipReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    equip_id_ = GOOGLE_ULONGLONG(0);
  }
  tonshi_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StrengEquipReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 equip_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &equip_id_)));
          set_has_equip_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tonshi;
        break;
      }

      // repeated .protoc.gameproto.TongShiEquip tonshi = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tonshi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tonshi()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tonshi;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StrengEquipReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 equip_id = 1;
  if (has_equip_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->equip_id(), output);
  }

  // repeated .protoc.gameproto.TongShiEquip tonshi = 2;
  for (int i = 0; i < this->tonshi_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->tonshi(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StrengEquipReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 equip_id = 1;
  if (has_equip_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->equip_id(), target);
  }

  // repeated .protoc.gameproto.TongShiEquip tonshi = 2;
  for (int i = 0; i < this->tonshi_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->tonshi(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StrengEquipReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 equip_id = 1;
    if (has_equip_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->equip_id());
    }

  }
  // repeated .protoc.gameproto.TongShiEquip tonshi = 2;
  total_size += 1 * this->tonshi_size();
  for (int i = 0; i < this->tonshi_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tonshi(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StrengEquipReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StrengEquipReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StrengEquipReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StrengEquipReq::MergeFrom(const StrengEquipReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  tonshi_.MergeFrom(from.tonshi_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equip_id()) {
      set_equip_id(from.equip_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StrengEquipReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StrengEquipReq::CopyFrom(const StrengEquipReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StrengEquipReq::IsInitialized() const {

  return true;
}

void StrengEquipReq::Swap(StrengEquipReq* other) {
  if (other != this) {
    std::swap(equip_id_, other->equip_id_);
    tonshi_.Swap(&other->tonshi_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StrengEquipReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StrengEquipReq_descriptor_;
  metadata.reflection = StrengEquipReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StrengEquipAck::kErrNoFieldNumber;
const int StrengEquipAck::kEquipIdFieldNumber;
#endif  // !_MSC_VER

StrengEquipAck::StrengEquipAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StrengEquipAck::InitAsDefaultInstance() {
}

StrengEquipAck::StrengEquipAck(const StrengEquipAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StrengEquipAck::SharedCtor() {
  _cached_size_ = 0;
  err_no_ = 0;
  equip_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StrengEquipAck::~StrengEquipAck() {
  SharedDtor();
}

void StrengEquipAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StrengEquipAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StrengEquipAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StrengEquipAck_descriptor_;
}

const StrengEquipAck& StrengEquipAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

StrengEquipAck* StrengEquipAck::default_instance_ = NULL;

StrengEquipAck* StrengEquipAck::New() const {
  return new StrengEquipAck;
}

void StrengEquipAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    err_no_ = 0;
    equip_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StrengEquipAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 err_no = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_no_)));
          set_has_err_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_equip_id;
        break;
      }

      // optional uint64 equip_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equip_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &equip_id_)));
          set_has_equip_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StrengEquipAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 err_no = 1;
  if (has_err_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->err_no(), output);
  }

  // optional uint64 equip_id = 2;
  if (has_equip_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->equip_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StrengEquipAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 err_no = 1;
  if (has_err_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->err_no(), target);
  }

  // optional uint64 equip_id = 2;
  if (has_equip_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->equip_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StrengEquipAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 err_no = 1;
    if (has_err_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err_no());
    }

    // optional uint64 equip_id = 2;
    if (has_equip_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->equip_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StrengEquipAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StrengEquipAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StrengEquipAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StrengEquipAck::MergeFrom(const StrengEquipAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_err_no()) {
      set_err_no(from.err_no());
    }
    if (from.has_equip_id()) {
      set_equip_id(from.equip_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StrengEquipAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StrengEquipAck::CopyFrom(const StrengEquipAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StrengEquipAck::IsInitialized() const {

  return true;
}

void StrengEquipAck::Swap(StrengEquipAck* other) {
  if (other != this) {
    std::swap(err_no_, other->err_no_);
    std::swap(equip_id_, other->equip_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StrengEquipAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StrengEquipAck_descriptor_;
  metadata.reflection = StrengEquipAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JinJieEquipReq::kEquipIdFieldNumber;
#endif  // !_MSC_VER

JinJieEquipReq::JinJieEquipReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JinJieEquipReq::InitAsDefaultInstance() {
}

JinJieEquipReq::JinJieEquipReq(const JinJieEquipReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JinJieEquipReq::SharedCtor() {
  _cached_size_ = 0;
  equip_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JinJieEquipReq::~JinJieEquipReq() {
  SharedDtor();
}

void JinJieEquipReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JinJieEquipReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JinJieEquipReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JinJieEquipReq_descriptor_;
}

const JinJieEquipReq& JinJieEquipReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

JinJieEquipReq* JinJieEquipReq::default_instance_ = NULL;

JinJieEquipReq* JinJieEquipReq::New() const {
  return new JinJieEquipReq;
}

void JinJieEquipReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    equip_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JinJieEquipReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 equip_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &equip_id_)));
          set_has_equip_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JinJieEquipReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 equip_id = 1;
  if (has_equip_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->equip_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JinJieEquipReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 equip_id = 1;
  if (has_equip_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->equip_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JinJieEquipReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 equip_id = 1;
    if (has_equip_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->equip_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JinJieEquipReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JinJieEquipReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JinJieEquipReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JinJieEquipReq::MergeFrom(const JinJieEquipReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equip_id()) {
      set_equip_id(from.equip_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JinJieEquipReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JinJieEquipReq::CopyFrom(const JinJieEquipReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JinJieEquipReq::IsInitialized() const {

  return true;
}

void JinJieEquipReq::Swap(JinJieEquipReq* other) {
  if (other != this) {
    std::swap(equip_id_, other->equip_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JinJieEquipReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JinJieEquipReq_descriptor_;
  metadata.reflection = JinJieEquipReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JinJieEquipAck::kErrNoFieldNumber;
const int JinJieEquipAck::kEquipIdFieldNumber;
#endif  // !_MSC_VER

JinJieEquipAck::JinJieEquipAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JinJieEquipAck::InitAsDefaultInstance() {
}

JinJieEquipAck::JinJieEquipAck(const JinJieEquipAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JinJieEquipAck::SharedCtor() {
  _cached_size_ = 0;
  err_no_ = 0;
  equip_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JinJieEquipAck::~JinJieEquipAck() {
  SharedDtor();
}

void JinJieEquipAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JinJieEquipAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JinJieEquipAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JinJieEquipAck_descriptor_;
}

const JinJieEquipAck& JinJieEquipAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

JinJieEquipAck* JinJieEquipAck::default_instance_ = NULL;

JinJieEquipAck* JinJieEquipAck::New() const {
  return new JinJieEquipAck;
}

void JinJieEquipAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    err_no_ = 0;
    equip_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JinJieEquipAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 err_no = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_no_)));
          set_has_err_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_equip_id;
        break;
      }

      // optional uint64 equip_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equip_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &equip_id_)));
          set_has_equip_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JinJieEquipAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 err_no = 1;
  if (has_err_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->err_no(), output);
  }

  // optional uint64 equip_id = 2;
  if (has_equip_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->equip_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JinJieEquipAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 err_no = 1;
  if (has_err_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->err_no(), target);
  }

  // optional uint64 equip_id = 2;
  if (has_equip_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->equip_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JinJieEquipAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 err_no = 1;
    if (has_err_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err_no());
    }

    // optional uint64 equip_id = 2;
    if (has_equip_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->equip_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JinJieEquipAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JinJieEquipAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JinJieEquipAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JinJieEquipAck::MergeFrom(const JinJieEquipAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_err_no()) {
      set_err_no(from.err_no());
    }
    if (from.has_equip_id()) {
      set_equip_id(from.equip_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JinJieEquipAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JinJieEquipAck::CopyFrom(const JinJieEquipAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JinJieEquipAck::IsInitialized() const {

  return true;
}

void JinJieEquipAck::Swap(JinJieEquipAck* other) {
  if (other != this) {
    std::swap(err_no_, other->err_no_);
    std::swap(equip_id_, other->equip_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JinJieEquipAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JinJieEquipAck_descriptor_;
  metadata.reflection = JinJieEquipAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeChengEquipReq::kGoodsIdFieldNumber;
#endif  // !_MSC_VER

HeChengEquipReq::HeChengEquipReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeChengEquipReq::InitAsDefaultInstance() {
}

HeChengEquipReq::HeChengEquipReq(const HeChengEquipReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeChengEquipReq::SharedCtor() {
  _cached_size_ = 0;
  goods_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeChengEquipReq::~HeChengEquipReq() {
  SharedDtor();
}

void HeChengEquipReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeChengEquipReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeChengEquipReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeChengEquipReq_descriptor_;
}

const HeChengEquipReq& HeChengEquipReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

HeChengEquipReq* HeChengEquipReq::default_instance_ = NULL;

HeChengEquipReq* HeChengEquipReq::New() const {
  return new HeChengEquipReq;
}

void HeChengEquipReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    goods_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeChengEquipReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 goods_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &goods_id_)));
          set_has_goods_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HeChengEquipReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 goods_id = 1;
  if (has_goods_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->goods_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeChengEquipReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 goods_id = 1;
  if (has_goods_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->goods_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeChengEquipReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 goods_id = 1;
    if (has_goods_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->goods_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeChengEquipReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeChengEquipReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeChengEquipReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeChengEquipReq::MergeFrom(const HeChengEquipReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_goods_id()) {
      set_goods_id(from.goods_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeChengEquipReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeChengEquipReq::CopyFrom(const HeChengEquipReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeChengEquipReq::IsInitialized() const {

  return true;
}

void HeChengEquipReq::Swap(HeChengEquipReq* other) {
  if (other != this) {
    std::swap(goods_id_, other->goods_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeChengEquipReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeChengEquipReq_descriptor_;
  metadata.reflection = HeChengEquipReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeChengEquipAck::kErrNoFieldNumber;
const int HeChengEquipAck::kGoodsIdFieldNumber;
#endif  // !_MSC_VER

HeChengEquipAck::HeChengEquipAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeChengEquipAck::InitAsDefaultInstance() {
}

HeChengEquipAck::HeChengEquipAck(const HeChengEquipAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeChengEquipAck::SharedCtor() {
  _cached_size_ = 0;
  err_no_ = 0;
  goods_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeChengEquipAck::~HeChengEquipAck() {
  SharedDtor();
}

void HeChengEquipAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeChengEquipAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeChengEquipAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeChengEquipAck_descriptor_;
}

const HeChengEquipAck& HeChengEquipAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

HeChengEquipAck* HeChengEquipAck::default_instance_ = NULL;

HeChengEquipAck* HeChengEquipAck::New() const {
  return new HeChengEquipAck;
}

void HeChengEquipAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    err_no_ = 0;
    goods_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeChengEquipAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 err_no = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_no_)));
          set_has_err_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_goods_id;
        break;
      }

      // optional uint64 goods_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goods_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &goods_id_)));
          set_has_goods_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HeChengEquipAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 err_no = 1;
  if (has_err_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->err_no(), output);
  }

  // optional uint64 goods_id = 2;
  if (has_goods_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->goods_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeChengEquipAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 err_no = 1;
  if (has_err_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->err_no(), target);
  }

  // optional uint64 goods_id = 2;
  if (has_goods_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->goods_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeChengEquipAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 err_no = 1;
    if (has_err_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err_no());
    }

    // optional uint64 goods_id = 2;
    if (has_goods_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->goods_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeChengEquipAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeChengEquipAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeChengEquipAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeChengEquipAck::MergeFrom(const HeChengEquipAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_err_no()) {
      set_err_no(from.err_no());
    }
    if (from.has_goods_id()) {
      set_goods_id(from.goods_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeChengEquipAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeChengEquipAck::CopyFrom(const HeChengEquipAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeChengEquipAck::IsInitialized() const {

  return true;
}

void HeChengEquipAck::Swap(HeChengEquipAck* other) {
  if (other != this) {
    std::swap(err_no_, other->err_no_);
    std::swap(goods_id_, other->goods_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeChengEquipAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeChengEquipAck_descriptor_;
  metadata.reflection = HeChengEquipAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SellGoodsReq::kGoodsIdFieldNumber;
const int SellGoodsReq::kNumberFieldNumber;
#endif  // !_MSC_VER

SellGoodsReq::SellGoodsReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SellGoodsReq::InitAsDefaultInstance() {
}

SellGoodsReq::SellGoodsReq(const SellGoodsReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SellGoodsReq::SharedCtor() {
  _cached_size_ = 0;
  goods_id_ = GOOGLE_ULONGLONG(0);
  number_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SellGoodsReq::~SellGoodsReq() {
  SharedDtor();
}

void SellGoodsReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SellGoodsReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SellGoodsReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SellGoodsReq_descriptor_;
}

const SellGoodsReq& SellGoodsReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

SellGoodsReq* SellGoodsReq::default_instance_ = NULL;

SellGoodsReq* SellGoodsReq::New() const {
  return new SellGoodsReq;
}

void SellGoodsReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    goods_id_ = GOOGLE_ULONGLONG(0);
    number_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SellGoodsReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 goods_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &goods_id_)));
          set_has_goods_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_number;
        break;
      }

      // optional uint32 number = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SellGoodsReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 goods_id = 1;
  if (has_goods_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->goods_id(), output);
  }

  // optional uint32 number = 2;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->number(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SellGoodsReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 goods_id = 1;
  if (has_goods_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->goods_id(), target);
  }

  // optional uint32 number = 2;
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->number(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SellGoodsReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 goods_id = 1;
    if (has_goods_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->goods_id());
    }

    // optional uint32 number = 2;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->number());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SellGoodsReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SellGoodsReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SellGoodsReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SellGoodsReq::MergeFrom(const SellGoodsReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_goods_id()) {
      set_goods_id(from.goods_id());
    }
    if (from.has_number()) {
      set_number(from.number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SellGoodsReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SellGoodsReq::CopyFrom(const SellGoodsReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SellGoodsReq::IsInitialized() const {

  return true;
}

void SellGoodsReq::Swap(SellGoodsReq* other) {
  if (other != this) {
    std::swap(goods_id_, other->goods_id_);
    std::swap(number_, other->number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SellGoodsReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SellGoodsReq_descriptor_;
  metadata.reflection = SellGoodsReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SellGoodsAck::kErrNoFieldNumber;
const int SellGoodsAck::kGoodsIdFieldNumber;
const int SellGoodsAck::kNumberFieldNumber;
#endif  // !_MSC_VER

SellGoodsAck::SellGoodsAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SellGoodsAck::InitAsDefaultInstance() {
}

SellGoodsAck::SellGoodsAck(const SellGoodsAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SellGoodsAck::SharedCtor() {
  _cached_size_ = 0;
  err_no_ = 0;
  goods_id_ = GOOGLE_ULONGLONG(0);
  number_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SellGoodsAck::~SellGoodsAck() {
  SharedDtor();
}

void SellGoodsAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SellGoodsAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SellGoodsAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SellGoodsAck_descriptor_;
}

const SellGoodsAck& SellGoodsAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

SellGoodsAck* SellGoodsAck::default_instance_ = NULL;

SellGoodsAck* SellGoodsAck::New() const {
  return new SellGoodsAck;
}

void SellGoodsAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    err_no_ = 0;
    goods_id_ = GOOGLE_ULONGLONG(0);
    number_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SellGoodsAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 err_no = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_no_)));
          set_has_err_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_goods_id;
        break;
      }

      // optional uint64 goods_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goods_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &goods_id_)));
          set_has_goods_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_number;
        break;
      }

      // optional uint32 number = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SellGoodsAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 err_no = 1;
  if (has_err_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->err_no(), output);
  }

  // optional uint64 goods_id = 2;
  if (has_goods_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->goods_id(), output);
  }

  // optional uint32 number = 3;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->number(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SellGoodsAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 err_no = 1;
  if (has_err_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->err_no(), target);
  }

  // optional uint64 goods_id = 2;
  if (has_goods_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->goods_id(), target);
  }

  // optional uint32 number = 3;
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->number(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SellGoodsAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 err_no = 1;
    if (has_err_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err_no());
    }

    // optional uint64 goods_id = 2;
    if (has_goods_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->goods_id());
    }

    // optional uint32 number = 3;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->number());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SellGoodsAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SellGoodsAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SellGoodsAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SellGoodsAck::MergeFrom(const SellGoodsAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_err_no()) {
      set_err_no(from.err_no());
    }
    if (from.has_goods_id()) {
      set_goods_id(from.goods_id());
    }
    if (from.has_number()) {
      set_number(from.number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SellGoodsAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SellGoodsAck::CopyFrom(const SellGoodsAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SellGoodsAck::IsInitialized() const {

  return true;
}

void SellGoodsAck::Swap(SellGoodsAck* other) {
  if (other != this) {
    std::swap(err_no_, other->err_no_);
    std::swap(goods_id_, other->goods_id_);
    std::swap(number_, other->number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SellGoodsAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SellGoodsAck_descriptor_;
  metadata.reflection = SellGoodsAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipSetStoreReq::kEquipIdFieldNumber;
const int EquipSetStoreReq::kStoreIdFieldNumber;
const int EquipSetStoreReq::kIdxFieldNumber;
#endif  // !_MSC_VER

EquipSetStoreReq::EquipSetStoreReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipSetStoreReq::InitAsDefaultInstance() {
}

EquipSetStoreReq::EquipSetStoreReq(const EquipSetStoreReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipSetStoreReq::SharedCtor() {
  _cached_size_ = 0;
  equip_id_ = GOOGLE_ULONGLONG(0);
  store_id_ = GOOGLE_ULONGLONG(0);
  idx_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipSetStoreReq::~EquipSetStoreReq() {
  SharedDtor();
}

void EquipSetStoreReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipSetStoreReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipSetStoreReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipSetStoreReq_descriptor_;
}

const EquipSetStoreReq& EquipSetStoreReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

EquipSetStoreReq* EquipSetStoreReq::default_instance_ = NULL;

EquipSetStoreReq* EquipSetStoreReq::New() const {
  return new EquipSetStoreReq;
}

void EquipSetStoreReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    equip_id_ = GOOGLE_ULONGLONG(0);
    store_id_ = GOOGLE_ULONGLONG(0);
    idx_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipSetStoreReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 equip_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &equip_id_)));
          set_has_equip_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_store_id;
        break;
      }

      // optional uint64 store_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_store_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &store_id_)));
          set_has_store_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_idx;
        break;
      }

      // optional uint32 idx = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &idx_)));
          set_has_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipSetStoreReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 equip_id = 1;
  if (has_equip_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->equip_id(), output);
  }

  // optional uint64 store_id = 2;
  if (has_store_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->store_id(), output);
  }

  // optional uint32 idx = 3;
  if (has_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->idx(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipSetStoreReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 equip_id = 1;
  if (has_equip_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->equip_id(), target);
  }

  // optional uint64 store_id = 2;
  if (has_store_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->store_id(), target);
  }

  // optional uint32 idx = 3;
  if (has_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->idx(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipSetStoreReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 equip_id = 1;
    if (has_equip_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->equip_id());
    }

    // optional uint64 store_id = 2;
    if (has_store_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->store_id());
    }

    // optional uint32 idx = 3;
    if (has_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->idx());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipSetStoreReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipSetStoreReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipSetStoreReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipSetStoreReq::MergeFrom(const EquipSetStoreReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equip_id()) {
      set_equip_id(from.equip_id());
    }
    if (from.has_store_id()) {
      set_store_id(from.store_id());
    }
    if (from.has_idx()) {
      set_idx(from.idx());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipSetStoreReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipSetStoreReq::CopyFrom(const EquipSetStoreReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipSetStoreReq::IsInitialized() const {

  return true;
}

void EquipSetStoreReq::Swap(EquipSetStoreReq* other) {
  if (other != this) {
    std::swap(equip_id_, other->equip_id_);
    std::swap(store_id_, other->store_id_);
    std::swap(idx_, other->idx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipSetStoreReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipSetStoreReq_descriptor_;
  metadata.reflection = EquipSetStoreReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipSetStoreAck::kErrNoFieldNumber;
const int EquipSetStoreAck::kEquipIdFieldNumber;
const int EquipSetStoreAck::kStoreIdFieldNumber;
const int EquipSetStoreAck::kIdxFieldNumber;
#endif  // !_MSC_VER

EquipSetStoreAck::EquipSetStoreAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipSetStoreAck::InitAsDefaultInstance() {
}

EquipSetStoreAck::EquipSetStoreAck(const EquipSetStoreAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipSetStoreAck::SharedCtor() {
  _cached_size_ = 0;
  err_no_ = 0;
  equip_id_ = GOOGLE_ULONGLONG(0);
  store_id_ = GOOGLE_ULONGLONG(0);
  idx_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipSetStoreAck::~EquipSetStoreAck() {
  SharedDtor();
}

void EquipSetStoreAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipSetStoreAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipSetStoreAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipSetStoreAck_descriptor_;
}

const EquipSetStoreAck& EquipSetStoreAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

EquipSetStoreAck* EquipSetStoreAck::default_instance_ = NULL;

EquipSetStoreAck* EquipSetStoreAck::New() const {
  return new EquipSetStoreAck;
}

void EquipSetStoreAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    err_no_ = 0;
    equip_id_ = GOOGLE_ULONGLONG(0);
    store_id_ = GOOGLE_ULONGLONG(0);
    idx_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipSetStoreAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 err_no = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_no_)));
          set_has_err_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_equip_id;
        break;
      }

      // optional uint64 equip_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equip_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &equip_id_)));
          set_has_equip_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_store_id;
        break;
      }

      // optional uint64 store_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_store_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &store_id_)));
          set_has_store_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_idx;
        break;
      }

      // optional uint32 idx = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &idx_)));
          set_has_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipSetStoreAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 err_no = 1;
  if (has_err_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->err_no(), output);
  }

  // optional uint64 equip_id = 2;
  if (has_equip_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->equip_id(), output);
  }

  // optional uint64 store_id = 3;
  if (has_store_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->store_id(), output);
  }

  // optional uint32 idx = 4;
  if (has_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->idx(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipSetStoreAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 err_no = 1;
  if (has_err_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->err_no(), target);
  }

  // optional uint64 equip_id = 2;
  if (has_equip_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->equip_id(), target);
  }

  // optional uint64 store_id = 3;
  if (has_store_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->store_id(), target);
  }

  // optional uint32 idx = 4;
  if (has_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->idx(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipSetStoreAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 err_no = 1;
    if (has_err_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err_no());
    }

    // optional uint64 equip_id = 2;
    if (has_equip_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->equip_id());
    }

    // optional uint64 store_id = 3;
    if (has_store_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->store_id());
    }

    // optional uint32 idx = 4;
    if (has_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->idx());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipSetStoreAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipSetStoreAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipSetStoreAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipSetStoreAck::MergeFrom(const EquipSetStoreAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_err_no()) {
      set_err_no(from.err_no());
    }
    if (from.has_equip_id()) {
      set_equip_id(from.equip_id());
    }
    if (from.has_store_id()) {
      set_store_id(from.store_id());
    }
    if (from.has_idx()) {
      set_idx(from.idx());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipSetStoreAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipSetStoreAck::CopyFrom(const EquipSetStoreAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipSetStoreAck::IsInitialized() const {

  return true;
}

void EquipSetStoreAck::Swap(EquipSetStoreAck* other) {
  if (other != this) {
    std::swap(err_no_, other->err_no_);
    std::swap(equip_id_, other->equip_id_);
    std::swap(store_id_, other->store_id_);
    std::swap(idx_, other->idx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipSetStoreAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipSetStoreAck_descriptor_;
  metadata.reflection = EquipSetStoreAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShareDataNtf::kKindFieldNumber;
const int ShareDataNtf::kIdFieldNumber;
#endif  // !_MSC_VER

ShareDataNtf::ShareDataNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShareDataNtf::InitAsDefaultInstance() {
}

ShareDataNtf::ShareDataNtf(const ShareDataNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShareDataNtf::SharedCtor() {
  _cached_size_ = 0;
  kind_ = 0u;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShareDataNtf::~ShareDataNtf() {
  SharedDtor();
}

void ShareDataNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShareDataNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShareDataNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShareDataNtf_descriptor_;
}

const ShareDataNtf& ShareDataNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

ShareDataNtf* ShareDataNtf::default_instance_ = NULL;

ShareDataNtf* ShareDataNtf::New() const {
  return new ShareDataNtf;
}

void ShareDataNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    kind_ = 0u;
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShareDataNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 kind = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kind_)));
          set_has_kind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional uint32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShareDataNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 kind = 1;
  if (has_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->kind(), output);
  }

  // optional uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShareDataNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 kind = 1;
  if (has_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->kind(), target);
  }

  // optional uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShareDataNtf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 kind = 1;
    if (has_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kind());
    }

    // optional uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShareDataNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShareDataNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShareDataNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShareDataNtf::MergeFrom(const ShareDataNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_kind()) {
      set_kind(from.kind());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShareDataNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShareDataNtf::CopyFrom(const ShareDataNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShareDataNtf::IsInitialized() const {

  return true;
}

void ShareDataNtf::Swap(ShareDataNtf* other) {
  if (other != this) {
    std::swap(kind_, other->kind_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShareDataNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShareDataNtf_descriptor_;
  metadata.reflection = ShareDataNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CompleteLoadDataNtf::CompleteLoadDataNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CompleteLoadDataNtf::InitAsDefaultInstance() {
}

CompleteLoadDataNtf::CompleteLoadDataNtf(const CompleteLoadDataNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CompleteLoadDataNtf::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CompleteLoadDataNtf::~CompleteLoadDataNtf() {
  SharedDtor();
}

void CompleteLoadDataNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CompleteLoadDataNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CompleteLoadDataNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CompleteLoadDataNtf_descriptor_;
}

const CompleteLoadDataNtf& CompleteLoadDataNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

CompleteLoadDataNtf* CompleteLoadDataNtf::default_instance_ = NULL;

CompleteLoadDataNtf* CompleteLoadDataNtf::New() const {
  return new CompleteLoadDataNtf;
}

void CompleteLoadDataNtf::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CompleteLoadDataNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CompleteLoadDataNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CompleteLoadDataNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CompleteLoadDataNtf::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CompleteLoadDataNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CompleteLoadDataNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CompleteLoadDataNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CompleteLoadDataNtf::MergeFrom(const CompleteLoadDataNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CompleteLoadDataNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompleteLoadDataNtf::CopyFrom(const CompleteLoadDataNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompleteLoadDataNtf::IsInitialized() const {

  return true;
}

void CompleteLoadDataNtf::Swap(CompleteLoadDataNtf* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CompleteLoadDataNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CompleteLoadDataNtf_descriptor_;
  metadata.reflection = CompleteLoadDataNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetPetNewStateReq::kQwidFieldNumber;
#endif  // !_MSC_VER

SetPetNewStateReq::SetPetNewStateReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetPetNewStateReq::InitAsDefaultInstance() {
}

SetPetNewStateReq::SetPetNewStateReq(const SetPetNewStateReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetPetNewStateReq::SharedCtor() {
  _cached_size_ = 0;
  qwid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetPetNewStateReq::~SetPetNewStateReq() {
  SharedDtor();
}

void SetPetNewStateReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetPetNewStateReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetPetNewStateReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetPetNewStateReq_descriptor_;
}

const SetPetNewStateReq& SetPetNewStateReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

SetPetNewStateReq* SetPetNewStateReq::default_instance_ = NULL;

SetPetNewStateReq* SetPetNewStateReq::New() const {
  return new SetPetNewStateReq;
}

void SetPetNewStateReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    qwid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetPetNewStateReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 qwid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &qwid_)));
          set_has_qwid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetPetNewStateReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 qwid = 1;
  if (has_qwid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->qwid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetPetNewStateReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 qwid = 1;
  if (has_qwid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->qwid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetPetNewStateReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 qwid = 1;
    if (has_qwid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->qwid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetPetNewStateReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetPetNewStateReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetPetNewStateReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetPetNewStateReq::MergeFrom(const SetPetNewStateReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_qwid()) {
      set_qwid(from.qwid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetPetNewStateReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetPetNewStateReq::CopyFrom(const SetPetNewStateReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetPetNewStateReq::IsInitialized() const {

  return true;
}

void SetPetNewStateReq::Swap(SetPetNewStateReq* other) {
  if (other != this) {
    std::swap(qwid_, other->qwid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetPetNewStateReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetPetNewStateReq_descriptor_;
  metadata.reflection = SetPetNewStateReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetPetNewStateAck::kErrNoFieldNumber;
const int SetPetNewStateAck::kQwidFieldNumber;
#endif  // !_MSC_VER

SetPetNewStateAck::SetPetNewStateAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetPetNewStateAck::InitAsDefaultInstance() {
}

SetPetNewStateAck::SetPetNewStateAck(const SetPetNewStateAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetPetNewStateAck::SharedCtor() {
  _cached_size_ = 0;
  err_no_ = 0;
  qwid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetPetNewStateAck::~SetPetNewStateAck() {
  SharedDtor();
}

void SetPetNewStateAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetPetNewStateAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetPetNewStateAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetPetNewStateAck_descriptor_;
}

const SetPetNewStateAck& SetPetNewStateAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

SetPetNewStateAck* SetPetNewStateAck::default_instance_ = NULL;

SetPetNewStateAck* SetPetNewStateAck::New() const {
  return new SetPetNewStateAck;
}

void SetPetNewStateAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    err_no_ = 0;
    qwid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetPetNewStateAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 err_no = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_no_)));
          set_has_err_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_qwid;
        break;
      }

      // optional uint64 qwid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qwid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &qwid_)));
          set_has_qwid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetPetNewStateAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 err_no = 1;
  if (has_err_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->err_no(), output);
  }

  // optional uint64 qwid = 2;
  if (has_qwid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->qwid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetPetNewStateAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 err_no = 1;
  if (has_err_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->err_no(), target);
  }

  // optional uint64 qwid = 2;
  if (has_qwid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->qwid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetPetNewStateAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 err_no = 1;
    if (has_err_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err_no());
    }

    // optional uint64 qwid = 2;
    if (has_qwid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->qwid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetPetNewStateAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetPetNewStateAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetPetNewStateAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetPetNewStateAck::MergeFrom(const SetPetNewStateAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_err_no()) {
      set_err_no(from.err_no());
    }
    if (from.has_qwid()) {
      set_qwid(from.qwid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetPetNewStateAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetPetNewStateAck::CopyFrom(const SetPetNewStateAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetPetNewStateAck::IsInitialized() const {

  return true;
}

void SetPetNewStateAck::Swap(SetPetNewStateAck* other) {
  if (other != this) {
    std::swap(err_no_, other->err_no_);
    std::swap(qwid_, other->qwid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetPetNewStateAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetPetNewStateAck_descriptor_;
  metadata.reflection = SetPetNewStateAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateBuyActionCounts::kCurCountsFieldNumber;
const int UpdateBuyActionCounts::kMaxCountsFieldNumber;
#endif  // !_MSC_VER

UpdateBuyActionCounts::UpdateBuyActionCounts()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateBuyActionCounts::InitAsDefaultInstance() {
}

UpdateBuyActionCounts::UpdateBuyActionCounts(const UpdateBuyActionCounts& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateBuyActionCounts::SharedCtor() {
  _cached_size_ = 0;
  cur_counts_ = 0u;
  max_counts_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateBuyActionCounts::~UpdateBuyActionCounts() {
  SharedDtor();
}

void UpdateBuyActionCounts::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateBuyActionCounts::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateBuyActionCounts::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateBuyActionCounts_descriptor_;
}

const UpdateBuyActionCounts& UpdateBuyActionCounts::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

UpdateBuyActionCounts* UpdateBuyActionCounts::default_instance_ = NULL;

UpdateBuyActionCounts* UpdateBuyActionCounts::New() const {
  return new UpdateBuyActionCounts;
}

void UpdateBuyActionCounts::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cur_counts_ = 0u;
    max_counts_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateBuyActionCounts::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 cur_counts = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_counts_)));
          set_has_cur_counts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_max_counts;
        break;
      }

      // optional uint32 max_counts = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_counts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_counts_)));
          set_has_max_counts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateBuyActionCounts::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 cur_counts = 1;
  if (has_cur_counts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cur_counts(), output);
  }

  // optional uint32 max_counts = 2;
  if (has_max_counts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->max_counts(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateBuyActionCounts::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 cur_counts = 1;
  if (has_cur_counts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cur_counts(), target);
  }

  // optional uint32 max_counts = 2;
  if (has_max_counts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->max_counts(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateBuyActionCounts::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 cur_counts = 1;
    if (has_cur_counts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_counts());
    }

    // optional uint32 max_counts = 2;
    if (has_max_counts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_counts());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateBuyActionCounts::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateBuyActionCounts* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateBuyActionCounts*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateBuyActionCounts::MergeFrom(const UpdateBuyActionCounts& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cur_counts()) {
      set_cur_counts(from.cur_counts());
    }
    if (from.has_max_counts()) {
      set_max_counts(from.max_counts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateBuyActionCounts::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateBuyActionCounts::CopyFrom(const UpdateBuyActionCounts& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateBuyActionCounts::IsInitialized() const {

  return true;
}

void UpdateBuyActionCounts::Swap(UpdateBuyActionCounts* other) {
  if (other != this) {
    std::swap(cur_counts_, other->cur_counts_);
    std::swap(max_counts_, other->max_counts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateBuyActionCounts::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateBuyActionCounts_descriptor_;
  metadata.reflection = UpdateBuyActionCounts_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PythonMsg_example::kTDoubleFieldNumber;
const int PythonMsg_example::kTFloatFieldNumber;
const int PythonMsg_example::kTInt32FieldNumber;
const int PythonMsg_example::kTInt64FieldNumber;
const int PythonMsg_example::kTUint32FieldNumber;
const int PythonMsg_example::kTUint64FieldNumber;
const int PythonMsg_example::kTSint32FieldNumber;
const int PythonMsg_example::kTSint64FieldNumber;
const int PythonMsg_example::kTBoolFieldNumber;
const int PythonMsg_example::kTStringFieldNumber;
const int PythonMsg_example::kTBytesFieldNumber;
#endif  // !_MSC_VER

PythonMsg_example::PythonMsg_example()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PythonMsg_example::InitAsDefaultInstance() {
}

PythonMsg_example::PythonMsg_example(const PythonMsg_example& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PythonMsg_example::SharedCtor() {
  _cached_size_ = 0;
  t_double_ = 0;
  t_float_ = 0;
  t_int32_ = 0;
  t_int64_ = GOOGLE_LONGLONG(0);
  t_uint32_ = 0u;
  t_uint64_ = GOOGLE_ULONGLONG(0);
  t_sint32_ = 0;
  t_sint64_ = GOOGLE_LONGLONG(0);
  t_bool_ = false;
  t_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  t_bytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PythonMsg_example::~PythonMsg_example() {
  SharedDtor();
}

void PythonMsg_example::SharedDtor() {
  if (t_string_ != &::google::protobuf::internal::kEmptyString) {
    delete t_string_;
  }
  if (t_bytes_ != &::google::protobuf::internal::kEmptyString) {
    delete t_bytes_;
  }
  if (this != default_instance_) {
  }
}

void PythonMsg_example::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PythonMsg_example::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PythonMsg_example_descriptor_;
}

const PythonMsg_example& PythonMsg_example::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

PythonMsg_example* PythonMsg_example::default_instance_ = NULL;

PythonMsg_example* PythonMsg_example::New() const {
  return new PythonMsg_example;
}

void PythonMsg_example::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    t_double_ = 0;
    t_float_ = 0;
    t_int32_ = 0;
    t_int64_ = GOOGLE_LONGLONG(0);
    t_uint32_ = 0u;
    t_uint64_ = GOOGLE_ULONGLONG(0);
    t_sint32_ = 0;
    t_sint64_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    t_bool_ = false;
    if (has_t_string()) {
      if (t_string_ != &::google::protobuf::internal::kEmptyString) {
        t_string_->clear();
      }
    }
    if (has_t_bytes()) {
      if (t_bytes_ != &::google::protobuf::internal::kEmptyString) {
        t_bytes_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PythonMsg_example::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double t_double = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &t_double_)));
          set_has_t_double();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_t_float;
        break;
      }

      // optional float t_float = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_t_float:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &t_float_)));
          set_has_t_float();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_t_int32;
        break;
      }

      // optional int32 t_int32 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_t_int32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &t_int32_)));
          set_has_t_int32();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_t_int64;
        break;
      }

      // optional int64 t_int64 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_t_int64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &t_int64_)));
          set_has_t_int64();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_t_uint32;
        break;
      }

      // optional uint32 t_uint32 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_t_uint32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &t_uint32_)));
          set_has_t_uint32();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_t_uint64;
        break;
      }

      // optional uint64 t_uint64 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_t_uint64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &t_uint64_)));
          set_has_t_uint64();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_t_sint32;
        break;
      }

      // optional sint32 t_sint32 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_t_sint32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &t_sint32_)));
          set_has_t_sint32();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_t_sint64;
        break;
      }

      // optional sint64 t_sint64 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_t_sint64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &t_sint64_)));
          set_has_t_sint64();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_t_bool;
        break;
      }

      // optional bool t_bool = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_t_bool:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &t_bool_)));
          set_has_t_bool();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_t_string;
        break;
      }

      // optional string t_string = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_t_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_t_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->t_string().data(), this->t_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_t_bytes;
        break;
      }

      // optional bytes t_bytes = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_t_bytes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_t_bytes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PythonMsg_example::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double t_double = 1;
  if (has_t_double()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->t_double(), output);
  }

  // optional float t_float = 2;
  if (has_t_float()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->t_float(), output);
  }

  // optional int32 t_int32 = 3;
  if (has_t_int32()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->t_int32(), output);
  }

  // optional int64 t_int64 = 4;
  if (has_t_int64()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->t_int64(), output);
  }

  // optional uint32 t_uint32 = 5;
  if (has_t_uint32()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->t_uint32(), output);
  }

  // optional uint64 t_uint64 = 6;
  if (has_t_uint64()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->t_uint64(), output);
  }

  // optional sint32 t_sint32 = 7;
  if (has_t_sint32()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(7, this->t_sint32(), output);
  }

  // optional sint64 t_sint64 = 8;
  if (has_t_sint64()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(8, this->t_sint64(), output);
  }

  // optional bool t_bool = 9;
  if (has_t_bool()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->t_bool(), output);
  }

  // optional string t_string = 10;
  if (has_t_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->t_string().data(), this->t_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->t_string(), output);
  }

  // optional bytes t_bytes = 11;
  if (has_t_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      11, this->t_bytes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PythonMsg_example::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double t_double = 1;
  if (has_t_double()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->t_double(), target);
  }

  // optional float t_float = 2;
  if (has_t_float()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->t_float(), target);
  }

  // optional int32 t_int32 = 3;
  if (has_t_int32()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->t_int32(), target);
  }

  // optional int64 t_int64 = 4;
  if (has_t_int64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->t_int64(), target);
  }

  // optional uint32 t_uint32 = 5;
  if (has_t_uint32()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->t_uint32(), target);
  }

  // optional uint64 t_uint64 = 6;
  if (has_t_uint64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->t_uint64(), target);
  }

  // optional sint32 t_sint32 = 7;
  if (has_t_sint32()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(7, this->t_sint32(), target);
  }

  // optional sint64 t_sint64 = 8;
  if (has_t_sint64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(8, this->t_sint64(), target);
  }

  // optional bool t_bool = 9;
  if (has_t_bool()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->t_bool(), target);
  }

  // optional string t_string = 10;
  if (has_t_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->t_string().data(), this->t_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->t_string(), target);
  }

  // optional bytes t_bytes = 11;
  if (has_t_bytes()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->t_bytes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PythonMsg_example::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double t_double = 1;
    if (has_t_double()) {
      total_size += 1 + 8;
    }

    // optional float t_float = 2;
    if (has_t_float()) {
      total_size += 1 + 4;
    }

    // optional int32 t_int32 = 3;
    if (has_t_int32()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->t_int32());
    }

    // optional int64 t_int64 = 4;
    if (has_t_int64()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->t_int64());
    }

    // optional uint32 t_uint32 = 5;
    if (has_t_uint32()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->t_uint32());
    }

    // optional uint64 t_uint64 = 6;
    if (has_t_uint64()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->t_uint64());
    }

    // optional sint32 t_sint32 = 7;
    if (has_t_sint32()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->t_sint32());
    }

    // optional sint64 t_sint64 = 8;
    if (has_t_sint64()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->t_sint64());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool t_bool = 9;
    if (has_t_bool()) {
      total_size += 1 + 1;
    }

    // optional string t_string = 10;
    if (has_t_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->t_string());
    }

    // optional bytes t_bytes = 11;
    if (has_t_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->t_bytes());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PythonMsg_example::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PythonMsg_example* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PythonMsg_example*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PythonMsg_example::MergeFrom(const PythonMsg_example& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_t_double()) {
      set_t_double(from.t_double());
    }
    if (from.has_t_float()) {
      set_t_float(from.t_float());
    }
    if (from.has_t_int32()) {
      set_t_int32(from.t_int32());
    }
    if (from.has_t_int64()) {
      set_t_int64(from.t_int64());
    }
    if (from.has_t_uint32()) {
      set_t_uint32(from.t_uint32());
    }
    if (from.has_t_uint64()) {
      set_t_uint64(from.t_uint64());
    }
    if (from.has_t_sint32()) {
      set_t_sint32(from.t_sint32());
    }
    if (from.has_t_sint64()) {
      set_t_sint64(from.t_sint64());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_t_bool()) {
      set_t_bool(from.t_bool());
    }
    if (from.has_t_string()) {
      set_t_string(from.t_string());
    }
    if (from.has_t_bytes()) {
      set_t_bytes(from.t_bytes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PythonMsg_example::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PythonMsg_example::CopyFrom(const PythonMsg_example& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PythonMsg_example::IsInitialized() const {

  return true;
}

void PythonMsg_example::Swap(PythonMsg_example* other) {
  if (other != this) {
    std::swap(t_double_, other->t_double_);
    std::swap(t_float_, other->t_float_);
    std::swap(t_int32_, other->t_int32_);
    std::swap(t_int64_, other->t_int64_);
    std::swap(t_uint32_, other->t_uint32_);
    std::swap(t_uint64_, other->t_uint64_);
    std::swap(t_sint32_, other->t_sint32_);
    std::swap(t_sint64_, other->t_sint64_);
    std::swap(t_bool_, other->t_bool_);
    std::swap(t_string_, other->t_string_);
    std::swap(t_bytes_, other->t_bytes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PythonMsg_example::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PythonMsg_example_descriptor_;
  metadata.reflection = PythonMsg_example_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PythonMessage::kIdFieldNumber;
const int PythonMessage::kMsgFieldNumber;
#endif  // !_MSC_VER

PythonMessage::PythonMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PythonMessage::InitAsDefaultInstance() {
}

PythonMessage::PythonMessage(const PythonMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PythonMessage::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PythonMessage::~PythonMessage() {
  SharedDtor();
}

void PythonMessage::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void PythonMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PythonMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PythonMessage_descriptor_;
}

const PythonMessage& PythonMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

PythonMessage* PythonMessage::default_instance_ = NULL;

PythonMessage* PythonMessage::New() const {
  return new PythonMessage;
}

void PythonMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PythonMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }

      // optional bytes msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PythonMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional bytes msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PythonMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional bytes msg = 2;
  if (has_msg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PythonMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional bytes msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PythonMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PythonMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PythonMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PythonMessage::MergeFrom(const PythonMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PythonMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PythonMessage::CopyFrom(const PythonMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PythonMessage::IsInitialized() const {

  return true;
}

void PythonMessage::Swap(PythonMessage* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PythonMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PythonMessage_descriptor_;
  metadata.reflection = PythonMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PyChouKaReq::kIdFieldNumber;
const int PyChouKaReq::kIsOneFieldNumber;
#endif  // !_MSC_VER

PyChouKaReq::PyChouKaReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PyChouKaReq::InitAsDefaultInstance() {
}

PyChouKaReq::PyChouKaReq(const PyChouKaReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PyChouKaReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  is_one_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PyChouKaReq::~PyChouKaReq() {
  SharedDtor();
}

void PyChouKaReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PyChouKaReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PyChouKaReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PyChouKaReq_descriptor_;
}

const PyChouKaReq& PyChouKaReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

PyChouKaReq* PyChouKaReq::default_instance_ = NULL;

PyChouKaReq* PyChouKaReq::New() const {
  return new PyChouKaReq;
}

void PyChouKaReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    is_one_ = true;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PyChouKaReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_one;
        break;
      }

      // optional bool is_one = 2 [default = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_one:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_one_)));
          set_has_is_one();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PyChouKaReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional bool is_one = 2 [default = true];
  if (has_is_one()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_one(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PyChouKaReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional bool is_one = 2 [default = true];
  if (has_is_one()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_one(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PyChouKaReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional bool is_one = 2 [default = true];
    if (has_is_one()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PyChouKaReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PyChouKaReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PyChouKaReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PyChouKaReq::MergeFrom(const PyChouKaReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_is_one()) {
      set_is_one(from.is_one());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PyChouKaReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PyChouKaReq::CopyFrom(const PyChouKaReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PyChouKaReq::IsInitialized() const {

  return true;
}

void PyChouKaReq::Swap(PyChouKaReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(is_one_, other->is_one_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PyChouKaReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PyChouKaReq_descriptor_;
  metadata.reflection = PyChouKaReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PyPetInfo::kPetIdFieldNumber;
const int PyPetInfo::kLevelFieldNumber;
#endif  // !_MSC_VER

PyPetInfo::PyPetInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PyPetInfo::InitAsDefaultInstance() {
}

PyPetInfo::PyPetInfo(const PyPetInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PyPetInfo::SharedCtor() {
  _cached_size_ = 0;
  pet_id_ = 0u;
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PyPetInfo::~PyPetInfo() {
  SharedDtor();
}

void PyPetInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PyPetInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PyPetInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PyPetInfo_descriptor_;
}

const PyPetInfo& PyPetInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

PyPetInfo* PyPetInfo::default_instance_ = NULL;

PyPetInfo* PyPetInfo::New() const {
  return new PyPetInfo;
}

void PyPetInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pet_id_ = 0u;
    level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PyPetInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 pet_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pet_id_)));
          set_has_pet_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional int32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PyPetInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 pet_id = 1;
  if (has_pet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pet_id(), output);
  }

  // optional int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PyPetInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 pet_id = 1;
  if (has_pet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pet_id(), target);
  }

  // optional int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PyPetInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 pet_id = 1;
    if (has_pet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pet_id());
    }

    // optional int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PyPetInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PyPetInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PyPetInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PyPetInfo::MergeFrom(const PyPetInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pet_id()) {
      set_pet_id(from.pet_id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PyPetInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PyPetInfo::CopyFrom(const PyPetInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PyPetInfo::IsInitialized() const {

  return true;
}

void PyPetInfo::Swap(PyPetInfo* other) {
  if (other != this) {
    std::swap(pet_id_, other->pet_id_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PyPetInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PyPetInfo_descriptor_;
  metadata.reflection = PyPetInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PyChouKaAck::kErrNoFieldNumber;
const int PyChouKaAck::kInfoFieldNumber;
const int PyChouKaAck::kItemIdFieldNumber;
#endif  // !_MSC_VER

PyChouKaAck::PyChouKaAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PyChouKaAck::InitAsDefaultInstance() {
}

PyChouKaAck::PyChouKaAck(const PyChouKaAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PyChouKaAck::SharedCtor() {
  _cached_size_ = 0;
  err_no_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PyChouKaAck::~PyChouKaAck() {
  SharedDtor();
}

void PyChouKaAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PyChouKaAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PyChouKaAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PyChouKaAck_descriptor_;
}

const PyChouKaAck& PyChouKaAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

PyChouKaAck* PyChouKaAck::default_instance_ = NULL;

PyChouKaAck* PyChouKaAck::New() const {
  return new PyChouKaAck;
}

void PyChouKaAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    err_no_ = 0;
  }
  info_.Clear();
  item_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PyChouKaAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 err_no = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_no_)));
          set_has_err_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // repeated .protoc.gameproto.PyPetInfo info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectTag(24)) goto parse_item_id;
        break;
      }

      // repeated uint32 item_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_item_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_item_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PyChouKaAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 err_no = 1;
  if (has_err_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->err_no(), output);
  }

  // repeated .protoc.gameproto.PyPetInfo info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }

  // repeated uint32 item_id = 3;
  for (int i = 0; i < this->item_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->item_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PyChouKaAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 err_no = 1;
  if (has_err_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->err_no(), target);
  }

  // repeated .protoc.gameproto.PyPetInfo info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }

  // repeated uint32 item_id = 3;
  for (int i = 0; i < this->item_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->item_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PyChouKaAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 err_no = 1;
    if (has_err_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err_no());
    }

  }
  // repeated .protoc.gameproto.PyPetInfo info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  // repeated uint32 item_id = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->item_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->item_id(i));
    }
    total_size += 1 * this->item_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PyChouKaAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PyChouKaAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PyChouKaAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PyChouKaAck::MergeFrom(const PyChouKaAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  item_id_.MergeFrom(from.item_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_err_no()) {
      set_err_no(from.err_no());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PyChouKaAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PyChouKaAck::CopyFrom(const PyChouKaAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PyChouKaAck::IsInitialized() const {

  return true;
}

void PyChouKaAck::Swap(PyChouKaAck* other) {
  if (other != this) {
    std::swap(err_no_, other->err_no_);
    info_.Swap(&other->info_);
    item_id_.Swap(&other->item_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PyChouKaAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PyChouKaAck_descriptor_;
  metadata.reflection = PyChouKaAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PyGenGaoData::kThemeFieldNumber;
const int PyGenGaoData::kContentFieldNumber;
#endif  // !_MSC_VER

PyGenGaoData::PyGenGaoData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PyGenGaoData::InitAsDefaultInstance() {
}

PyGenGaoData::PyGenGaoData(const PyGenGaoData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PyGenGaoData::SharedCtor() {
  _cached_size_ = 0;
  theme_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PyGenGaoData::~PyGenGaoData() {
  SharedDtor();
}

void PyGenGaoData::SharedDtor() {
  if (theme_ != &::google::protobuf::internal::kEmptyString) {
    delete theme_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void PyGenGaoData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PyGenGaoData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PyGenGaoData_descriptor_;
}

const PyGenGaoData& PyGenGaoData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

PyGenGaoData* PyGenGaoData::default_instance_ = NULL;

PyGenGaoData* PyGenGaoData::New() const {
  return new PyGenGaoData;
}

void PyGenGaoData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_theme()) {
      if (theme_ != &::google::protobuf::internal::kEmptyString) {
        theme_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PyGenGaoData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string theme = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_theme()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->theme().data(), this->theme().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }

      // optional string content = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PyGenGaoData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string theme = 1;
  if (has_theme()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->theme().data(), this->theme().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->theme(), output);
  }

  // optional string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PyGenGaoData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string theme = 1;
  if (has_theme()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->theme().data(), this->theme().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->theme(), target);
  }

  // optional string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PyGenGaoData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string theme = 1;
    if (has_theme()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->theme());
    }

    // optional string content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PyGenGaoData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PyGenGaoData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PyGenGaoData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PyGenGaoData::MergeFrom(const PyGenGaoData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_theme()) {
      set_theme(from.theme());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PyGenGaoData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PyGenGaoData::CopyFrom(const PyGenGaoData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PyGenGaoData::IsInitialized() const {

  return true;
}

void PyGenGaoData::Swap(PyGenGaoData* other) {
  if (other != this) {
    std::swap(theme_, other->theme_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PyGenGaoData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PyGenGaoData_descriptor_;
  metadata.reflection = PyGenGaoData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PyGetGenGaoReq::PyGetGenGaoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PyGetGenGaoReq::InitAsDefaultInstance() {
}

PyGetGenGaoReq::PyGetGenGaoReq(const PyGetGenGaoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PyGetGenGaoReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PyGetGenGaoReq::~PyGetGenGaoReq() {
  SharedDtor();
}

void PyGetGenGaoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PyGetGenGaoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PyGetGenGaoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PyGetGenGaoReq_descriptor_;
}

const PyGetGenGaoReq& PyGetGenGaoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

PyGetGenGaoReq* PyGetGenGaoReq::default_instance_ = NULL;

PyGetGenGaoReq* PyGetGenGaoReq::New() const {
  return new PyGetGenGaoReq;
}

void PyGetGenGaoReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PyGetGenGaoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void PyGetGenGaoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PyGetGenGaoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PyGetGenGaoReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PyGetGenGaoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PyGetGenGaoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PyGetGenGaoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PyGetGenGaoReq::MergeFrom(const PyGetGenGaoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PyGetGenGaoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PyGetGenGaoReq::CopyFrom(const PyGetGenGaoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PyGetGenGaoReq::IsInitialized() const {

  return true;
}

void PyGetGenGaoReq::Swap(PyGetGenGaoReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PyGetGenGaoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PyGetGenGaoReq_descriptor_;
  metadata.reflection = PyGetGenGaoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PyGetGenGaoAck::kDataFieldNumber;
#endif  // !_MSC_VER

PyGetGenGaoAck::PyGetGenGaoAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PyGetGenGaoAck::InitAsDefaultInstance() {
}

PyGetGenGaoAck::PyGetGenGaoAck(const PyGetGenGaoAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PyGetGenGaoAck::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PyGetGenGaoAck::~PyGetGenGaoAck() {
  SharedDtor();
}

void PyGetGenGaoAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PyGetGenGaoAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PyGetGenGaoAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PyGetGenGaoAck_descriptor_;
}

const PyGetGenGaoAck& PyGetGenGaoAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

PyGetGenGaoAck* PyGetGenGaoAck::default_instance_ = NULL;

PyGetGenGaoAck* PyGetGenGaoAck::New() const {
  return new PyGetGenGaoAck;
}

void PyGetGenGaoAck::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PyGetGenGaoAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protoc.gameproto.PyGenGaoData data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PyGetGenGaoAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protoc.gameproto.PyGenGaoData data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PyGetGenGaoAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protoc.gameproto.PyGenGaoData data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PyGetGenGaoAck::ByteSize() const {
  int total_size = 0;

  // repeated .protoc.gameproto.PyGenGaoData data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PyGetGenGaoAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PyGetGenGaoAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PyGetGenGaoAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PyGetGenGaoAck::MergeFrom(const PyGetGenGaoAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PyGetGenGaoAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PyGetGenGaoAck::CopyFrom(const PyGetGenGaoAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PyGetGenGaoAck::IsInitialized() const {

  return true;
}

void PyGetGenGaoAck::Swap(PyGetGenGaoAck* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PyGetGenGaoAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PyGetGenGaoAck_descriptor_;
  metadata.reflection = PyGetGenGaoAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PyGetGoodActivePanelReq::PyGetGoodActivePanelReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PyGetGoodActivePanelReq::InitAsDefaultInstance() {
}

PyGetGoodActivePanelReq::PyGetGoodActivePanelReq(const PyGetGoodActivePanelReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PyGetGoodActivePanelReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PyGetGoodActivePanelReq::~PyGetGoodActivePanelReq() {
  SharedDtor();
}

void PyGetGoodActivePanelReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PyGetGoodActivePanelReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PyGetGoodActivePanelReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PyGetGoodActivePanelReq_descriptor_;
}

const PyGetGoodActivePanelReq& PyGetGoodActivePanelReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

PyGetGoodActivePanelReq* PyGetGoodActivePanelReq::default_instance_ = NULL;

PyGetGoodActivePanelReq* PyGetGoodActivePanelReq::New() const {
  return new PyGetGoodActivePanelReq;
}

void PyGetGoodActivePanelReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PyGetGoodActivePanelReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void PyGetGoodActivePanelReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PyGetGoodActivePanelReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PyGetGoodActivePanelReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PyGetGoodActivePanelReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PyGetGoodActivePanelReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PyGetGoodActivePanelReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PyGetGoodActivePanelReq::MergeFrom(const PyGetGoodActivePanelReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PyGetGoodActivePanelReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PyGetGoodActivePanelReq::CopyFrom(const PyGetGoodActivePanelReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PyGetGoodActivePanelReq::IsInitialized() const {

  return true;
}

void PyGetGoodActivePanelReq::Swap(PyGetGoodActivePanelReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PyGetGoodActivePanelReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PyGetGoodActivePanelReq_descriptor_;
  metadata.reflection = PyGetGoodActivePanelReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PyGoodActiveInfo::kActiveIdFieldNumber;
const int PyGoodActiveInfo::kTypeFieldNumber;
const int PyGoodActiveInfo::kTitleFieldNumber;
const int PyGoodActiveInfo::kDesctionFieldNumber;
const int PyGoodActiveInfo::kParam1FieldNumber;
const int PyGoodActiveInfo::kAwardFieldNumber;
#endif  // !_MSC_VER

PyGoodActiveInfo::PyGoodActiveInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PyGoodActiveInfo::InitAsDefaultInstance() {
}

PyGoodActiveInfo::PyGoodActiveInfo(const PyGoodActiveInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PyGoodActiveInfo::SharedCtor() {
  _cached_size_ = 0;
  active_id_ = 0u;
  type_ = 0u;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  desction_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  param1_ = GOOGLE_LONGLONG(0);
  award_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PyGoodActiveInfo::~PyGoodActiveInfo() {
  SharedDtor();
}

void PyGoodActiveInfo::SharedDtor() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (desction_ != &::google::protobuf::internal::kEmptyString) {
    delete desction_;
  }
  if (award_ != &::google::protobuf::internal::kEmptyString) {
    delete award_;
  }
  if (this != default_instance_) {
  }
}

void PyGoodActiveInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PyGoodActiveInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PyGoodActiveInfo_descriptor_;
}

const PyGoodActiveInfo& PyGoodActiveInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

PyGoodActiveInfo* PyGoodActiveInfo::default_instance_ = NULL;

PyGoodActiveInfo* PyGoodActiveInfo::New() const {
  return new PyGoodActiveInfo;
}

void PyGoodActiveInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    active_id_ = 0u;
    type_ = 0u;
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    if (has_desction()) {
      if (desction_ != &::google::protobuf::internal::kEmptyString) {
        desction_->clear();
      }
    }
    param1_ = GOOGLE_LONGLONG(0);
    if (has_award()) {
      if (award_ != &::google::protobuf::internal::kEmptyString) {
        award_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PyGoodActiveInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 active_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &active_id_)));
          set_has_active_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional uint32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_title;
        break;
      }

      // optional string title = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_desction;
        break;
      }

      // optional string desction = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_desction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desction()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->desction().data(), this->desction().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_param1;
        break;
      }

      // optional int64 param1 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &param1_)));
          set_has_param1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_award;
        break;
      }

      // optional string award = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_award:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_award()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->award().data(), this->award().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PyGoodActiveInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 active_id = 1;
  if (has_active_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->active_id(), output);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // optional string title = 3;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->title(), output);
  }

  // optional string desction = 4;
  if (has_desction()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desction().data(), this->desction().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->desction(), output);
  }

  // optional int64 param1 = 5;
  if (has_param1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->param1(), output);
  }

  // optional string award = 6;
  if (has_award()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->award().data(), this->award().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->award(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PyGoodActiveInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 active_id = 1;
  if (has_active_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->active_id(), target);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // optional string title = 3;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->title(), target);
  }

  // optional string desction = 4;
  if (has_desction()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desction().data(), this->desction().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->desction(), target);
  }

  // optional int64 param1 = 5;
  if (has_param1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->param1(), target);
  }

  // optional string award = 6;
  if (has_award()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->award().data(), this->award().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->award(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PyGoodActiveInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 active_id = 1;
    if (has_active_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->active_id());
    }

    // optional uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional string title = 3;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string desction = 4;
    if (has_desction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desction());
    }

    // optional int64 param1 = 5;
    if (has_param1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->param1());
    }

    // optional string award = 6;
    if (has_award()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->award());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PyGoodActiveInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PyGoodActiveInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PyGoodActiveInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PyGoodActiveInfo::MergeFrom(const PyGoodActiveInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_active_id()) {
      set_active_id(from.active_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_desction()) {
      set_desction(from.desction());
    }
    if (from.has_param1()) {
      set_param1(from.param1());
    }
    if (from.has_award()) {
      set_award(from.award());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PyGoodActiveInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PyGoodActiveInfo::CopyFrom(const PyGoodActiveInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PyGoodActiveInfo::IsInitialized() const {

  return true;
}

void PyGoodActiveInfo::Swap(PyGoodActiveInfo* other) {
  if (other != this) {
    std::swap(active_id_, other->active_id_);
    std::swap(type_, other->type_);
    std::swap(title_, other->title_);
    std::swap(desction_, other->desction_);
    std::swap(param1_, other->param1_);
    std::swap(award_, other->award_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PyGoodActiveInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PyGoodActiveInfo_descriptor_;
  metadata.reflection = PyGoodActiveInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PyGetGoodActivePanelAck::kActivesFieldNumber;
#endif  // !_MSC_VER

PyGetGoodActivePanelAck::PyGetGoodActivePanelAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PyGetGoodActivePanelAck::InitAsDefaultInstance() {
}

PyGetGoodActivePanelAck::PyGetGoodActivePanelAck(const PyGetGoodActivePanelAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PyGetGoodActivePanelAck::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PyGetGoodActivePanelAck::~PyGetGoodActivePanelAck() {
  SharedDtor();
}

void PyGetGoodActivePanelAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PyGetGoodActivePanelAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PyGetGoodActivePanelAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PyGetGoodActivePanelAck_descriptor_;
}

const PyGetGoodActivePanelAck& PyGetGoodActivePanelAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

PyGetGoodActivePanelAck* PyGetGoodActivePanelAck::default_instance_ = NULL;

PyGetGoodActivePanelAck* PyGetGoodActivePanelAck::New() const {
  return new PyGetGoodActivePanelAck;
}

void PyGetGoodActivePanelAck::Clear() {
  actives_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PyGetGoodActivePanelAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protoc.gameproto.PyGoodActiveInfo actives = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_actives:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_actives()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_actives;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PyGetGoodActivePanelAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protoc.gameproto.PyGoodActiveInfo actives = 1;
  for (int i = 0; i < this->actives_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->actives(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PyGetGoodActivePanelAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protoc.gameproto.PyGoodActiveInfo actives = 1;
  for (int i = 0; i < this->actives_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->actives(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PyGetGoodActivePanelAck::ByteSize() const {
  int total_size = 0;

  // repeated .protoc.gameproto.PyGoodActiveInfo actives = 1;
  total_size += 1 * this->actives_size();
  for (int i = 0; i < this->actives_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->actives(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PyGetGoodActivePanelAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PyGetGoodActivePanelAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PyGetGoodActivePanelAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PyGetGoodActivePanelAck::MergeFrom(const PyGetGoodActivePanelAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  actives_.MergeFrom(from.actives_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PyGetGoodActivePanelAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PyGetGoodActivePanelAck::CopyFrom(const PyGetGoodActivePanelAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PyGetGoodActivePanelAck::IsInitialized() const {

  return true;
}

void PyGetGoodActivePanelAck::Swap(PyGetGoodActivePanelAck* other) {
  if (other != this) {
    actives_.Swap(&other->actives_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PyGetGoodActivePanelAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PyGetGoodActivePanelAck_descriptor_;
  metadata.reflection = PyGetGoodActivePanelAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PyGetActiveAwardReq::kActiveIdFieldNumber;
#endif  // !_MSC_VER

PyGetActiveAwardReq::PyGetActiveAwardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PyGetActiveAwardReq::InitAsDefaultInstance() {
}

PyGetActiveAwardReq::PyGetActiveAwardReq(const PyGetActiveAwardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PyGetActiveAwardReq::SharedCtor() {
  _cached_size_ = 0;
  active_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PyGetActiveAwardReq::~PyGetActiveAwardReq() {
  SharedDtor();
}

void PyGetActiveAwardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PyGetActiveAwardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PyGetActiveAwardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PyGetActiveAwardReq_descriptor_;
}

const PyGetActiveAwardReq& PyGetActiveAwardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

PyGetActiveAwardReq* PyGetActiveAwardReq::default_instance_ = NULL;

PyGetActiveAwardReq* PyGetActiveAwardReq::New() const {
  return new PyGetActiveAwardReq;
}

void PyGetActiveAwardReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    active_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PyGetActiveAwardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 active_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &active_id_)));
          set_has_active_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PyGetActiveAwardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 active_id = 1;
  if (has_active_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->active_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PyGetActiveAwardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 active_id = 1;
  if (has_active_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->active_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PyGetActiveAwardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 active_id = 1;
    if (has_active_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->active_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PyGetActiveAwardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PyGetActiveAwardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PyGetActiveAwardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PyGetActiveAwardReq::MergeFrom(const PyGetActiveAwardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_active_id()) {
      set_active_id(from.active_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PyGetActiveAwardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PyGetActiveAwardReq::CopyFrom(const PyGetActiveAwardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PyGetActiveAwardReq::IsInitialized() const {

  return true;
}

void PyGetActiveAwardReq::Swap(PyGetActiveAwardReq* other) {
  if (other != this) {
    std::swap(active_id_, other->active_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PyGetActiveAwardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PyGetActiveAwardReq_descriptor_;
  metadata.reflection = PyGetActiveAwardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PyGetActiveAwardAck::kActiveIdFieldNumber;
const int PyGetActiveAwardAck::kErrNoFieldNumber;
#endif  // !_MSC_VER

PyGetActiveAwardAck::PyGetActiveAwardAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PyGetActiveAwardAck::InitAsDefaultInstance() {
}

PyGetActiveAwardAck::PyGetActiveAwardAck(const PyGetActiveAwardAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PyGetActiveAwardAck::SharedCtor() {
  _cached_size_ = 0;
  active_id_ = 0u;
  err_no_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PyGetActiveAwardAck::~PyGetActiveAwardAck() {
  SharedDtor();
}

void PyGetActiveAwardAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PyGetActiveAwardAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PyGetActiveAwardAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PyGetActiveAwardAck_descriptor_;
}

const PyGetActiveAwardAck& PyGetActiveAwardAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

PyGetActiveAwardAck* PyGetActiveAwardAck::default_instance_ = NULL;

PyGetActiveAwardAck* PyGetActiveAwardAck::New() const {
  return new PyGetActiveAwardAck;
}

void PyGetActiveAwardAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    active_id_ = 0u;
    err_no_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PyGetActiveAwardAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 active_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &active_id_)));
          set_has_active_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_err_no;
        break;
      }

      // optional int32 err_no = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_err_no:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_no_)));
          set_has_err_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PyGetActiveAwardAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 active_id = 1;
  if (has_active_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->active_id(), output);
  }

  // optional int32 err_no = 2;
  if (has_err_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->err_no(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PyGetActiveAwardAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 active_id = 1;
  if (has_active_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->active_id(), target);
  }

  // optional int32 err_no = 2;
  if (has_err_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->err_no(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PyGetActiveAwardAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 active_id = 1;
    if (has_active_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->active_id());
    }

    // optional int32 err_no = 2;
    if (has_err_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err_no());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PyGetActiveAwardAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PyGetActiveAwardAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PyGetActiveAwardAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PyGetActiveAwardAck::MergeFrom(const PyGetActiveAwardAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_active_id()) {
      set_active_id(from.active_id());
    }
    if (from.has_err_no()) {
      set_err_no(from.err_no());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PyGetActiveAwardAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PyGetActiveAwardAck::CopyFrom(const PyGetActiveAwardAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PyGetActiveAwardAck::IsInitialized() const {

  return true;
}

void PyGetActiveAwardAck::Swap(PyGetActiveAwardAck* other) {
  if (other != this) {
    std::swap(active_id_, other->active_id_);
    std::swap(err_no_, other->err_no_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PyGetActiveAwardAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PyGetActiveAwardAck_descriptor_;
  metadata.reflection = PyGetActiveAwardAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PyEveryDataActiveNtf::kStrAwardsFieldNumber;
const int PyEveryDataActiveNtf::kDaysFieldNumber;
const int PyEveryDataActiveNtf::kTypeFieldNumber;
#endif  // !_MSC_VER

PyEveryDataActiveNtf::PyEveryDataActiveNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PyEveryDataActiveNtf::InitAsDefaultInstance() {
}

PyEveryDataActiveNtf::PyEveryDataActiveNtf(const PyEveryDataActiveNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PyEveryDataActiveNtf::SharedCtor() {
  _cached_size_ = 0;
  str_awards_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  days_ = 0u;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PyEveryDataActiveNtf::~PyEveryDataActiveNtf() {
  SharedDtor();
}

void PyEveryDataActiveNtf::SharedDtor() {
  if (str_awards_ != &::google::protobuf::internal::kEmptyString) {
    delete str_awards_;
  }
  if (this != default_instance_) {
  }
}

void PyEveryDataActiveNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PyEveryDataActiveNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PyEveryDataActiveNtf_descriptor_;
}

const PyEveryDataActiveNtf& PyEveryDataActiveNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

PyEveryDataActiveNtf* PyEveryDataActiveNtf::default_instance_ = NULL;

PyEveryDataActiveNtf* PyEveryDataActiveNtf::New() const {
  return new PyEveryDataActiveNtf;
}

void PyEveryDataActiveNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_str_awards()) {
      if (str_awards_ != &::google::protobuf::internal::kEmptyString) {
        str_awards_->clear();
      }
    }
    days_ = 0u;
    type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PyEveryDataActiveNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string str_awards = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str_awards()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str_awards().data(), this->str_awards().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_days;
        break;
      }

      // optional uint32 days = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_days:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &days_)));
          set_has_days();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional uint32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PyEveryDataActiveNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string str_awards = 1;
  if (has_str_awards()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str_awards().data(), this->str_awards().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->str_awards(), output);
  }

  // optional uint32 days = 2;
  if (has_days()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->days(), output);
  }

  // optional uint32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PyEveryDataActiveNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string str_awards = 1;
  if (has_str_awards()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str_awards().data(), this->str_awards().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->str_awards(), target);
  }

  // optional uint32 days = 2;
  if (has_days()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->days(), target);
  }

  // optional uint32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PyEveryDataActiveNtf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string str_awards = 1;
    if (has_str_awards()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str_awards());
    }

    // optional uint32 days = 2;
    if (has_days()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->days());
    }

    // optional uint32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PyEveryDataActiveNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PyEveryDataActiveNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PyEveryDataActiveNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PyEveryDataActiveNtf::MergeFrom(const PyEveryDataActiveNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_str_awards()) {
      set_str_awards(from.str_awards());
    }
    if (from.has_days()) {
      set_days(from.days());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PyEveryDataActiveNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PyEveryDataActiveNtf::CopyFrom(const PyEveryDataActiveNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PyEveryDataActiveNtf::IsInitialized() const {

  return true;
}

void PyEveryDataActiveNtf::Swap(PyEveryDataActiveNtf* other) {
  if (other != this) {
    std::swap(str_awards_, other->str_awards_);
    std::swap(days_, other->days_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PyEveryDataActiveNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PyEveryDataActiveNtf_descriptor_;
  metadata.reflection = PyEveryDataActiveNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PySaveGuideStepReq::kGuideStepFieldNumber;
#endif  // !_MSC_VER

PySaveGuideStepReq::PySaveGuideStepReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PySaveGuideStepReq::InitAsDefaultInstance() {
}

PySaveGuideStepReq::PySaveGuideStepReq(const PySaveGuideStepReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PySaveGuideStepReq::SharedCtor() {
  _cached_size_ = 0;
  guide_step_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PySaveGuideStepReq::~PySaveGuideStepReq() {
  SharedDtor();
}

void PySaveGuideStepReq::SharedDtor() {
  if (guide_step_ != &::google::protobuf::internal::kEmptyString) {
    delete guide_step_;
  }
  if (this != default_instance_) {
  }
}

void PySaveGuideStepReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PySaveGuideStepReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PySaveGuideStepReq_descriptor_;
}

const PySaveGuideStepReq& PySaveGuideStepReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

PySaveGuideStepReq* PySaveGuideStepReq::default_instance_ = NULL;

PySaveGuideStepReq* PySaveGuideStepReq::New() const {
  return new PySaveGuideStepReq;
}

void PySaveGuideStepReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_guide_step()) {
      if (guide_step_ != &::google::protobuf::internal::kEmptyString) {
        guide_step_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PySaveGuideStepReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string guide_step = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guide_step()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guide_step().data(), this->guide_step().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PySaveGuideStepReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string guide_step = 1;
  if (has_guide_step()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guide_step().data(), this->guide_step().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->guide_step(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PySaveGuideStepReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string guide_step = 1;
  if (has_guide_step()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guide_step().data(), this->guide_step().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->guide_step(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PySaveGuideStepReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string guide_step = 1;
    if (has_guide_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guide_step());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PySaveGuideStepReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PySaveGuideStepReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PySaveGuideStepReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PySaveGuideStepReq::MergeFrom(const PySaveGuideStepReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guide_step()) {
      set_guide_step(from.guide_step());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PySaveGuideStepReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PySaveGuideStepReq::CopyFrom(const PySaveGuideStepReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PySaveGuideStepReq::IsInitialized() const {

  return true;
}

void PySaveGuideStepReq::Swap(PySaveGuideStepReq* other) {
  if (other != this) {
    std::swap(guide_step_, other->guide_step_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PySaveGuideStepReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PySaveGuideStepReq_descriptor_;
  metadata.reflection = PySaveGuideStepReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PySaveGuideStepAck::kGuideStepFieldNumber;
const int PySaveGuideStepAck::kErrNoFieldNumber;
#endif  // !_MSC_VER

PySaveGuideStepAck::PySaveGuideStepAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PySaveGuideStepAck::InitAsDefaultInstance() {
}

PySaveGuideStepAck::PySaveGuideStepAck(const PySaveGuideStepAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PySaveGuideStepAck::SharedCtor() {
  _cached_size_ = 0;
  guide_step_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  err_no_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PySaveGuideStepAck::~PySaveGuideStepAck() {
  SharedDtor();
}

void PySaveGuideStepAck::SharedDtor() {
  if (guide_step_ != &::google::protobuf::internal::kEmptyString) {
    delete guide_step_;
  }
  if (this != default_instance_) {
  }
}

void PySaveGuideStepAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PySaveGuideStepAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PySaveGuideStepAck_descriptor_;
}

const PySaveGuideStepAck& PySaveGuideStepAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

PySaveGuideStepAck* PySaveGuideStepAck::default_instance_ = NULL;

PySaveGuideStepAck* PySaveGuideStepAck::New() const {
  return new PySaveGuideStepAck;
}

void PySaveGuideStepAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_guide_step()) {
      if (guide_step_ != &::google::protobuf::internal::kEmptyString) {
        guide_step_->clear();
      }
    }
    err_no_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PySaveGuideStepAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string guide_step = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guide_step()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guide_step().data(), this->guide_step().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_err_no;
        break;
      }

      // optional int32 err_no = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_err_no:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_no_)));
          set_has_err_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PySaveGuideStepAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string guide_step = 1;
  if (has_guide_step()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guide_step().data(), this->guide_step().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->guide_step(), output);
  }

  // optional int32 err_no = 2;
  if (has_err_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->err_no(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PySaveGuideStepAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string guide_step = 1;
  if (has_guide_step()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guide_step().data(), this->guide_step().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->guide_step(), target);
  }

  // optional int32 err_no = 2;
  if (has_err_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->err_no(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PySaveGuideStepAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string guide_step = 1;
    if (has_guide_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guide_step());
    }

    // optional int32 err_no = 2;
    if (has_err_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err_no());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PySaveGuideStepAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PySaveGuideStepAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PySaveGuideStepAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PySaveGuideStepAck::MergeFrom(const PySaveGuideStepAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guide_step()) {
      set_guide_step(from.guide_step());
    }
    if (from.has_err_no()) {
      set_err_no(from.err_no());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PySaveGuideStepAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PySaveGuideStepAck::CopyFrom(const PySaveGuideStepAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PySaveGuideStepAck::IsInitialized() const {

  return true;
}

void PySaveGuideStepAck::Swap(PySaveGuideStepAck* other) {
  if (other != this) {
    std::swap(guide_step_, other->guide_step_);
    std::swap(err_no_, other->err_no_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PySaveGuideStepAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PySaveGuideStepAck_descriptor_;
  metadata.reflection = PySaveGuideStepAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PyBuyCheckPointChallengeCountReq::kChpaterKindFieldNumber;
const int PyBuyCheckPointChallengeCountReq::kChapterIdFieldNumber;
const int PyBuyCheckPointChallengeCountReq::kCheckPointIdFieldNumber;
#endif  // !_MSC_VER

PyBuyCheckPointChallengeCountReq::PyBuyCheckPointChallengeCountReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PyBuyCheckPointChallengeCountReq::InitAsDefaultInstance() {
}

PyBuyCheckPointChallengeCountReq::PyBuyCheckPointChallengeCountReq(const PyBuyCheckPointChallengeCountReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PyBuyCheckPointChallengeCountReq::SharedCtor() {
  _cached_size_ = 0;
  chpater_kind_ = 0;
  chapter_id_ = 0;
  check_point_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PyBuyCheckPointChallengeCountReq::~PyBuyCheckPointChallengeCountReq() {
  SharedDtor();
}

void PyBuyCheckPointChallengeCountReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PyBuyCheckPointChallengeCountReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PyBuyCheckPointChallengeCountReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PyBuyCheckPointChallengeCountReq_descriptor_;
}

const PyBuyCheckPointChallengeCountReq& PyBuyCheckPointChallengeCountReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

PyBuyCheckPointChallengeCountReq* PyBuyCheckPointChallengeCountReq::default_instance_ = NULL;

PyBuyCheckPointChallengeCountReq* PyBuyCheckPointChallengeCountReq::New() const {
  return new PyBuyCheckPointChallengeCountReq;
}

void PyBuyCheckPointChallengeCountReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chpater_kind_ = 0;
    chapter_id_ = 0;
    check_point_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PyBuyCheckPointChallengeCountReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 chpater_kind = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chpater_kind_)));
          set_has_chpater_kind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_chapter_id;
        break;
      }

      // optional int32 chapter_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chapter_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chapter_id_)));
          set_has_chapter_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_check_point_id;
        break;
      }

      // optional int32 check_point_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_check_point_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &check_point_id_)));
          set_has_check_point_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PyBuyCheckPointChallengeCountReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 chpater_kind = 1;
  if (has_chpater_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chpater_kind(), output);
  }

  // optional int32 chapter_id = 2;
  if (has_chapter_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->chapter_id(), output);
  }

  // optional int32 check_point_id = 3;
  if (has_check_point_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->check_point_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PyBuyCheckPointChallengeCountReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 chpater_kind = 1;
  if (has_chpater_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chpater_kind(), target);
  }

  // optional int32 chapter_id = 2;
  if (has_chapter_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->chapter_id(), target);
  }

  // optional int32 check_point_id = 3;
  if (has_check_point_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->check_point_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PyBuyCheckPointChallengeCountReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 chpater_kind = 1;
    if (has_chpater_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chpater_kind());
    }

    // optional int32 chapter_id = 2;
    if (has_chapter_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chapter_id());
    }

    // optional int32 check_point_id = 3;
    if (has_check_point_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->check_point_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PyBuyCheckPointChallengeCountReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PyBuyCheckPointChallengeCountReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PyBuyCheckPointChallengeCountReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PyBuyCheckPointChallengeCountReq::MergeFrom(const PyBuyCheckPointChallengeCountReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chpater_kind()) {
      set_chpater_kind(from.chpater_kind());
    }
    if (from.has_chapter_id()) {
      set_chapter_id(from.chapter_id());
    }
    if (from.has_check_point_id()) {
      set_check_point_id(from.check_point_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PyBuyCheckPointChallengeCountReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PyBuyCheckPointChallengeCountReq::CopyFrom(const PyBuyCheckPointChallengeCountReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PyBuyCheckPointChallengeCountReq::IsInitialized() const {

  return true;
}

void PyBuyCheckPointChallengeCountReq::Swap(PyBuyCheckPointChallengeCountReq* other) {
  if (other != this) {
    std::swap(chpater_kind_, other->chpater_kind_);
    std::swap(chapter_id_, other->chapter_id_);
    std::swap(check_point_id_, other->check_point_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PyBuyCheckPointChallengeCountReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PyBuyCheckPointChallengeCountReq_descriptor_;
  metadata.reflection = PyBuyCheckPointChallengeCountReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PyBuyCheckPointChallengeCountAck::kChpaterKindFieldNumber;
const int PyBuyCheckPointChallengeCountAck::kChapterIdFieldNumber;
const int PyBuyCheckPointChallengeCountAck::kCheckPointIdFieldNumber;
const int PyBuyCheckPointChallengeCountAck::kChallengedCountsFieldNumber;
const int PyBuyCheckPointChallengeCountAck::kBuyCountsFieldNumber;
const int PyBuyCheckPointChallengeCountAck::kErrNoFieldNumber;
#endif  // !_MSC_VER

PyBuyCheckPointChallengeCountAck::PyBuyCheckPointChallengeCountAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PyBuyCheckPointChallengeCountAck::InitAsDefaultInstance() {
}

PyBuyCheckPointChallengeCountAck::PyBuyCheckPointChallengeCountAck(const PyBuyCheckPointChallengeCountAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PyBuyCheckPointChallengeCountAck::SharedCtor() {
  _cached_size_ = 0;
  chpater_kind_ = 0;
  chapter_id_ = 0;
  check_point_id_ = 0;
  challenged_counts_ = 0;
  buy_counts_ = 0;
  err_no_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PyBuyCheckPointChallengeCountAck::~PyBuyCheckPointChallengeCountAck() {
  SharedDtor();
}

void PyBuyCheckPointChallengeCountAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PyBuyCheckPointChallengeCountAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PyBuyCheckPointChallengeCountAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PyBuyCheckPointChallengeCountAck_descriptor_;
}

const PyBuyCheckPointChallengeCountAck& PyBuyCheckPointChallengeCountAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameserver_5fgate_5fclient_2eproto();
  return *default_instance_;
}

PyBuyCheckPointChallengeCountAck* PyBuyCheckPointChallengeCountAck::default_instance_ = NULL;

PyBuyCheckPointChallengeCountAck* PyBuyCheckPointChallengeCountAck::New() const {
  return new PyBuyCheckPointChallengeCountAck;
}

void PyBuyCheckPointChallengeCountAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chpater_kind_ = 0;
    chapter_id_ = 0;
    check_point_id_ = 0;
    challenged_counts_ = 0;
    buy_counts_ = 0;
    err_no_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PyBuyCheckPointChallengeCountAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 chpater_kind = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chpater_kind_)));
          set_has_chpater_kind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_chapter_id;
        break;
      }

      // optional int32 chapter_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chapter_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chapter_id_)));
          set_has_chapter_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_check_point_id;
        break;
      }

      // optional int32 check_point_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_check_point_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &check_point_id_)));
          set_has_check_point_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_challenged_counts;
        break;
      }

      // optional int32 challenged_counts = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_challenged_counts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &challenged_counts_)));
          set_has_challenged_counts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_buy_counts;
        break;
      }

      // optional int32 buy_counts = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_counts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buy_counts_)));
          set_has_buy_counts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_err_no;
        break;
      }

      // optional int32 err_no = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_err_no:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_no_)));
          set_has_err_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PyBuyCheckPointChallengeCountAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 chpater_kind = 1;
  if (has_chpater_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chpater_kind(), output);
  }

  // optional int32 chapter_id = 2;
  if (has_chapter_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->chapter_id(), output);
  }

  // optional int32 check_point_id = 3;
  if (has_check_point_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->check_point_id(), output);
  }

  // optional int32 challenged_counts = 4;
  if (has_challenged_counts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->challenged_counts(), output);
  }

  // optional int32 buy_counts = 5;
  if (has_buy_counts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->buy_counts(), output);
  }

  // optional int32 err_no = 6;
  if (has_err_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->err_no(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PyBuyCheckPointChallengeCountAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 chpater_kind = 1;
  if (has_chpater_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chpater_kind(), target);
  }

  // optional int32 chapter_id = 2;
  if (has_chapter_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->chapter_id(), target);
  }

  // optional int32 check_point_id = 3;
  if (has_check_point_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->check_point_id(), target);
  }

  // optional int32 challenged_counts = 4;
  if (has_challenged_counts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->challenged_counts(), target);
  }

  // optional int32 buy_counts = 5;
  if (has_buy_counts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->buy_counts(), target);
  }

  // optional int32 err_no = 6;
  if (has_err_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->err_no(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PyBuyCheckPointChallengeCountAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 chpater_kind = 1;
    if (has_chpater_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chpater_kind());
    }

    // optional int32 chapter_id = 2;
    if (has_chapter_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chapter_id());
    }

    // optional int32 check_point_id = 3;
    if (has_check_point_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->check_point_id());
    }

    // optional int32 challenged_counts = 4;
    if (has_challenged_counts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->challenged_counts());
    }

    // optional int32 buy_counts = 5;
    if (has_buy_counts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buy_counts());
    }

    // optional int32 err_no = 6;
    if (has_err_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err_no());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PyBuyCheckPointChallengeCountAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PyBuyCheckPointChallengeCountAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PyBuyCheckPointChallengeCountAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PyBuyCheckPointChallengeCountAck::MergeFrom(const PyBuyCheckPointChallengeCountAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chpater_kind()) {
      set_chpater_kind(from.chpater_kind());
    }
    if (from.has_chapter_id()) {
      set_chapter_id(from.chapter_id());
    }
    if (from.has_check_point_id()) {
      set_check_point_id(from.check_point_id());
    }
    if (from.has_challenged_counts()) {
      set_challenged_counts(from.challenged_counts());
    }
    if (from.has_buy_counts()) {
      set_buy_counts(from.buy_counts());
    }
    if (from.has_err_no()) {
      set_err_no(from.err_no());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PyBuyCheckPointChallengeCountAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PyBuyCheckPointChallengeCountAck::CopyFrom(const PyBuyCheckPointChallengeCountAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PyBuyCheckPointChallengeCountAck::IsInitialized() const {

  return true;
}

void PyBuyCheckPointChallengeCountAck::Swap(PyBuyCheckPointChallengeCountAck* other) {
  if (other != this) {
    std::swap(chpater_kind_, other->chpater_kind_);
    std::swap(chapter_id_, other->chapter_id_);
    std::swap(check_point_id_, other->check_point_id_);
    std::swap(challenged_counts_, other->challenged_counts_);
    std::swap(buy_counts_, other->buy_counts_);
    std::swap(err_no_, other->err_no_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PyBuyCheckPointChallengeCountAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PyBuyCheckPointChallengeCountAck_descriptor_;
  metadata.reflection = PyBuyCheckPointChallengeCountAck_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace gameproto
}  // namespace protoc

// @@protoc_insertion_point(global_scope)
